              ; Set KEYBOARD:
              ;   0 = Germany / Austria
              ;   2 = France / Belgium
              ;   3 = switzerland
              ;   4 = Sweden / Finland
              ;   5 = Norway
              ;   6 = Italy
              ; 255 = International / USA

0000          KEYBOARD = 0

              ; **********************************
              ; The Commodore 128 operating system
              ; **********************************

              ; ASCII/PETSCII control codes

0002          C_ULINE = $02  ; Underline On
000a          LF      = $0a  ; Line Feed
000d          CR      = $0d  ; Carriage Return
000f          BLINK   = $0f  ; Blinking On
0011          DOWN    = $11  ; Cursor Down
0012          REVERSE = $12  ; Reverse Printing
0013          HOME    = $13  ; Cursor Home
0014          DEL     = $14  ; Delete
001b          ESC     = $1b  ; Escape
001d          RIGHT   = $1d  ; Cursor Right
0022          QUOTE   = $22  ; String Delimiter
0027          APOSTR  = $27  ; Apostroph
0091          UP      = $91  ; Cursor Up
00ff          PICHAR  = $ff  ; BASIC Real_PI character

              ; The address range $000 - $03ff is common RAM by default
              ; These locations are accessible from all banks

              ; CPU register

0000          D8502   = $00  ; CPU 8502 register
0001          R8502   = $01  ; CPU 8502 register

              ; Zero page variables and pointers

0002          BANK    = $02  ; Bank configuration

              ; save CPU registers for monitor and sys calls

0003          PC_HI   = $03
0004          PC_LO   = $04
0005          S_REG   = $05
0006          A_REG   = $06
0007          X_REG   = $07
0008          Y_REG   = $08
0009          CHARAC  = $09

              ; The cursor column position prior to the TAB or SPC is moved here from
              ; $XX, and is used to calculate where the cursor ends up after one of
              ; these functions is invoked. Note that the value contained here shows
              ; the position of the cursor on a logical line. Since one logical line
              ; can be two physical lines long, the value stored here can range from
              ; 0 to 79.

000a          ENDCHR  = $0a       ; scan quotes flag
000b          TRMPOS  = $0b       ; TAB column save
000c          B_VERCK = $0c       ; BASIC load/verify flag, 0 = load, 1 = verify

              ; The routine that converts the text in the input buffer into lines of
              ; executable program tokens, and the routines that link these program
              ; lines together, use this location as an index into the input buffer
              ; area. After the job of converting text to tokens is done, the value
              ; in this location is equal to the length of the tokenized line.
              ; The routines which build an array or locate an element in an array use
              ; this location to calculate the number of DIMensions called for and the
              ;  amount of storage required for a newly created array, or the number
              ; of subscripts when referencing an array element.

000d          B_COUNT = $0d       ; BASIC line crunch/array access/logic operators

              ; This is used as a flag by the routines that build an array or
              ; reference an existing array. It is used to determine whether a
              ; variable is in an array, whether the array has already been
              ; DIMensioned, and whether a new array should assume default size 10.

000e          DIMFLG  = $0e       ; DIM flag

              ; This flag is used to indicate whether data being operated upon is
              ; string or numeric. A value of $FF in this location indicates string
              ; data while a $00 indicates numeric data.

000f          VALTYP  = $0f       ; data type flag, $FF = string, $00 = numeric

              ; If the above flag indicates numeric then a $80 in this location
              ; identifies the number as an integer, and a $00 indicates a floating
              ; point number.

0010          INTFLG  = $10

              ; The garbage collection routine uses this location as a flag to
              ; indicate that garbage collection has already been tried before adding
              ; a new string. If there is still not enough memory, an OUT OF MEMORY
              ; error message will result.

              ; LIST uses this byte as a flag to let it know when it has come to a
              ; character string in quotes. It will then print the string,rather than
              ; search it for BASIC keyword tokens.

              ; This location is also used during the process of converting a line of
              ; text in the BASIC input buffer into a linked program line of BASIC
              ; keyword tokens to flag a DATA line is being processed.

0011          GARBFL  = $11

              ; This flag is set from the routines handling FOR, DEF and FN
              ; statements. Names for loop indices and function names must not be
              ; integer. Only identifiers of type real are allowed.

0012          SUBFLG  = $12

               ; input mode, $00 = INPUT, $40 = GET, $98 = READ

0013          INPFLG  = $13

              ; This location is used to determine whether the sign of the value
              ; returned by the functions SIN, COS, ATN or TAN is positive or negative
              ; Also the comparison routines use this location to indicate the outcome
              ; of the compare. For A <=> B the value here will be $01 if A > B,
              ; $02 if A = B, and $04 if A < B. If more than one comparison operator
              ; was used to compare the two variables then the value here will be a
              ; combination of the above values.

0014          TANSGN  = $14       ; ATN sign/comparison evaluation flag

              ; When the default input or output device is used the value here will
              ; be a zero, and the format of prompting and output will be the standard
              ; screen output format. The location $$$ is used to decide what device
              ; actually to put input from or output to.

0015          CHANNL  = $15

              ; Used whenever a 16 bit unsigned integer is used e.g. the target line
              ; number for GOTO, LIST, ON, and GOSUB also the number of a BASIC line
              ; that is to be added or replaced. additionally PEEK, POKE, WAIT, and
              ; SYS use this location as a pointer to the address which is the subject
              ; of the command.

0016          LINNUM  = $16       ; WORD: line number

              ; This location points to the next available slot in the temporary
              ; string descriptor stack located at TEMPST ($16-$1e).

0018          TEMPPT  = $18       ; descriptor stack pointer, next free

              ; This contains information about temporary strings which have not yet
              ; been assigned to a string variable.

0019          LASTPT  = $19       ; current descriptor stack item pointer

              ; Stack for temporary string descriptors
              ; String 1: $1b-$1d
              ; String 2: $1e-$20
              ; String 3: $21-$1e

001b          TEMPST  = $1b       ; (9 bytes): temporary descriptor stack

              ; miscellaneous pointer / word used in many BASIC routines
              ; the subroutine Get_INDEXA_1 is used to read bank 1 values
              ; pointed to by INDEXA

0024          INDEXA  = $24       ; WORD: miscellaneous pointer

              ; miscellaneous pointer / word used in many BASIC routines
              ; the subroutine Get_INDEXB_0 is used to read bank 0 values
              ; pointed to by INDEXB

0026          INDEXB  = $26       ; WORD: miscellaneous pointer

              ; Floating point accumulator #3 (mantissa only)

0028          FAC3_M1 = $28
0029          FAC3_M2 = $29
002a          FAC3_M3 = $2a
002b          FAC3_M4 = $2b

              ;       = $2c       ; FREE

              ; Start of BASIC program in bank 0 : initialized to $1c01

002d          TXTTAB  = $2d       ; WORD: Text Table

              ; Start of variable storage in bank 1 : initialized tp $0400

002f          VARTAB  = $2f       ; WORD: Variable Table

              ; Start of array storage in bank 1 (and top of variable storage)

0031          ARYTAB  = $31       ; WORD: Array Table

              ; Top of arrays and lower boundary of free RAM in bank 1

0033          STREND  = $33       ; WORD: String End

              ; top of free memory in bank 1, initilaized to MEMSIZ

0035          FRETOP  = $35       ; WORD: Free Top of memory

              ; bottom of string space in bank 1

0037          FRESPC  = $37       ; WORD: Free Space

              ; top of BASIC memory in bank 1, initialized to $ff00

0039          MEMSIZ  = $39       ; WORD: Memory Size

              ; These locations contain the line number of the BASIC statement which
              ; is currently being executed. A value of $FF in location CURLIN+1
              ; means that BASIC is in immediate mode.

003b          CURLIN  = $3b       ; WORD: Current Line

              ; TXTPTR is used from the CHRGET (with increment) and CHRGOT
              ; (no increment) routine, to read the next byte and test it
              ; for being numeric, colon (:) or zero.

003d          TXTPTR  = $3d       ; WORD: Text Pointer

              ; FNDPNT is used mainly by subroutines, that use the BASIC stack
              ; e.g. FOR, NEXT, DO, LOOP, GOSUB and RETURN routines.

003f          FNDPNT  = $3f       ; WORD: Find Pointer

              ; These locations hold the line number of the current DATA statement
              ; being READ. These values are defined but never used

0041          DATLIN  = $41       ; WORD: Data Line

              ; These locations point to the address where the next DATA will be READ
              ; from. RESTORE sets this pointer back to the line indicated.

0043          DATPTR  = $43       ; WORD: Data Pointer

              ; READ, INPUT and GET all use this as a pointer to the address of the
              ; source of incoming data, such as DATA statements, or the text input
              ; buffer.

0045          INPPTR  = $45       ; WORD: Input Pointer

              ; Two bytes storing the name of a BASIC variable as ASCII values
              ; The combination of the two bits 7 determines the type
              ; ---------------------------------------------
              ; Real    : AB      = $41 $42 = 'A'     'B'
              ; Function: FNAB()  = $c1 $42 = 'A'+$80 'B'
              ; String  : AB$     = $41 $c2 = 'A'     'B'+$80
              ; Integer : AB%     = $c1 $c2 = 'A'+$80 'B'+$80

0047          VARNAM  = $47       ; WORD: Variable Name

              ; These locations point to the value of the current BASIC variable.
              ; Specifically they point to the byte just after the two-character
              ; variable name.

0049          VARPNT  = $49       ; WORD: Variable Pointer

              ; The address of the BASIC variable which is the subject of a FOR/NEXT
              ; loop is first stored here before being pushed onto the stack.
              ; It is also used in many other routines as temporary pointer.

004b          FORPNT  = $4b       ; WORD: FOR Pointer

              ; VARTXT is used as temporary storage of the TXTPTR nad also for other
              ; temporary values.

004d          VARTXT  = $4d       ; WORD: Variable Text Pointer

              ; Used as temporary storage from operator routines

004f          OP_TMP  = $4f       ; Operator Temporary storage

              ; Named for its use in the garbage collection routine, which reorders
              ; string space. Despite its name this pointer is also used in many
              ; other routines as auxiliary pointer.

0050          GRBPNT  = $50       ; WORD: Garbage collection Pointer

              ; A multi purpose pointer mainly used as descriptor pointer

0052          DSCPNT  = $52       ; WORD: Descriptor Pointer

              ;         $54       ; FREE

              ; This flag helps the LIST routines to know wether they are called
              ; by the LIST command or by the HELP command

0055          HELPER  = $55

              ; The first byte contains permanent the code $4c for the JMP instruction.
              ; The two byte after it are modified by the function handling routine.
              ; After writing a target address to JUMPER+1 and JUMPER+2 a
              ; JSR JUMPER is used to call the function.

0056          JUMPER  = $56       ; 3 BYTES: JMP nnnn

              ; Temporary storage for math routines.
              ; This address overlaps with JUMPER+2 !

0058          OLDOV   = $58       ; Old Operator Value

              ; The address range $59 - $62 is saved and restored en block
              ; in the subroutine Check_Mem_Avail !

              ; Temporary storage for floating point values (5 bytes)
              ; and temporary pointer (block pointer, array pointer)

0059          FACTPA  = $59       ; 5 BYTES: Temporary Floating Point Accumulator A

              ; multi purpose pointer, named after its use in array handling routines
              ; The address overlaps with FACTPA+1 and FACTPA+2

005a          ARYPNT  = $5a       ; WORD: Array Pointer

              ; Frequently used multi purpose pointer.
              ; It has its own fetch routines for access to bank 0 and bank1
              ; named Get_HIGHTR_0 and Get_HIGHTR_1.
              ; The address overlaps with FACTPA+3 and FACTPA+4

005c          HIGHTR  = $5c       ; WORD:

005d          DESCA   = $5d       ; 3 bytes for temporary descriptor

              ; Occasionally the address range $5e - $68 (FACTPB and FAC1)
              ; is used for copy operations in one loop !

              ; Temporary storage for floating point values (5 bytes)
              ; and temporary pointer (block pointer, array pointer)

005e          FACTPB   = $5e      ; 5 BYTES: Temporary Floating Point Accumulator B
005f          TMPVAR   = $5f      ; temporary variable
0060          TENEXP   = $60      ; 10th's exponent
0061          LOWTR    = $61      ; temporaray pointer

0060          M_Aval = $60      ; 3 BYTES (address + bank) used in monitor
0063          M_Bval = $63      ; 3 BYTES (address + bank) used in monitor
0066          M_Cval = $66      ; 3 BYTES (address + bank) used in monitor

              ; Floating point accumulator 1

0063          FAC1_EX  = $63      ; FAC1 exponent
0064          FAC1_M1  = $64      ; FAC1 mantissa 1
0065          FAC1_M2  = $65      ; FAC1 mantissa 2
0066          FAC1_M3  = $66      ; FAC1 mantissa 3
0067          FAC1_M4  = $67      ; FAC1 mantissa 4
0068          FAC1_SI  = $68      ; FAC1 sign

0069          DEGREE   = $69

              ; Floating point accumulator 2

006a          FAC2_EX  = $6a
006b          FAC2_M1  = $6b
006c          FAC2_M2  = $6c
006d          FAC2_M3  = $6d
006e          FAC2_M4  = $6e
006f          FAC2_SI  = $6f

              ; String pointer and FAC sign comparison and FAC rounding

0070          STRPTR  = $70       ; string pointer & FAC variables

              ; this address is sometimes used as high btye for the STRPTR
              ; and as rounding byte (5th. byte of mantissa) for FAC1

0071          FROUND  = $71       ; FAC1 mantissa 5 = rounding byte

              ; Temporary pointers and indices used in many BASIC routines

0072          STRNG2  = $72       ; temp BASIC execute/array pointer low byte/index
0074          AUTINC  = $74       ; WORD: auto increment value (0 = OFF)
0076          MVDFLG  = $76       ; (graphics) memory reserved flag
0077          TEMP_A  = $77       ; temporary byte value
0078          KEYSIZ  = $78       ; string length and counter
0079          SYNTMP  = $79       ; short term temporary value
007a          DS_LEN  = $7a       ; length  of DS$ (disk status)
007b          DS_ADR  = $7b       ; address of DS$ (disk status)

007d          TOS     = $7d       ; Top Of Basic Stack
007f          RUNMOD  = $7f       ; $80 = RUN [line], $40 = RUN <filename>, $00 = direct

              ; DOSFLA flags for parsing BASIC 4 DOS commands

              ; bit 0: $01 = source Filename given
              ; bit 1: $02 = target Filename given       : start address
              ; bit 2: $04 = logical address set in LA   : end   address
              ; bit 3: $08 = primary address set in FA
              ; bit 4: $10 = source drive set
              ; bit 5: $20 = target drive set
              ; bit 6: $40 = W (Write) or L (record)     : bank
              ; bit 7: $80 = Save and replace flag '@'

0080          DOSFLA  = $80       ; DOS flags A

              ; DOSFLB flags for parsing BLOAD/BSAVE arguments

              ; bit 0: $01 = bank given
              ; bit 1: $02 = BLOAD/BSAVE start address
              ; bit 2: $04 = BSAVE end address

0081          DOSFLB  = $81       ; DOS flags B

0082          OLDSTK  = $82       ; save stack pointer

              ; color modes

0083          COLSEL  = $83       ; color selected
0084          MULCO1  = $84       ; multi color 1
0085          MULCO2  = $85       ; multi color 2
0086          FG_COL  = $86       ; foreground color
0087          SCALE_X = $87       ; graphics scale X
0089          SCALE_Y = $89       ; graphics scale Y
008b          STOPNB  = $8b       ; PAINT comparison byte

008c          GRAPNT  = $8c       ; Graphics Pointer
008e          VTEMPA  = $8e       ; Temporaray pointer

              ; The STATUS byte is used to flag I/O errors or End-Of-Information
              ; A bit set to 1 indicates foloowing conditions:

              ; bit 0 : time out write
              ; bit 1 : time out read
              ; bit 2 : short block (tape)
              ; bit 3 : long  block (tape)
              ; bit 4 : verify error
              ; bit 5 : checksum error (tape)
              ; bit 6 : EOI (End Of Information)
              ; bit 7 : device not present

0090          STATUS  = $90

0091          STKEY   = $91       ; STOP key flag
0092          SVXT    = $92       ; tape timer
0093          K_VERCK = $93       ; verify flag and monitor variable

0094          C3PO    = $94       ; serial buffer flag
0095          BSOUR   = $95       ; serial output buffer

0096          SYNO    = $96       ; tape sync
0097          XSAV    = $97       ; save X register

              ; The number of currently open I/O files is stored here. The maximum
              ; number that can be open at one time is ten. The number stored here is
              ; used as the index to the end of the tables that hold the file numbers,
              ; device numbers, and secondary addresses.

0098          LDTND   = $98       ; open file count

              ; The default value of this location is 0.

0099          DFLTN   = $99       ; input device number

              ; number   device
              ; ------   ------
              ;  0      keyboard
              ;  1      cassette 1
              ;  2      serial RS232
              ;  3      screen (default)
              ;  4-31   serial IEC bus

009a          DFLTO   = $9a       ; output device number


009b          PRTY    = $9b       ; tape parity byte
009c          DPSW    = $9c       ; tape dipole switch

009d          MSGFLG  = $9d       ; kernal message flag
009e          PTR_LO  = $9e       ; pointer 1
009f          PTR_HI  = $9f       ; pointer 2

              ; These three locations form a counter which is updated 50 times a
              ; second on PAL computers and 60 times a second on NTSC computers.
              ; It serves as a software clock which counts the number of
              ; jiffies that have elapsed since the computer was turned on.
              ; After 24 * 60 * 60 * 60 jiffies, which is one day,
              ; the jiffy clock is reset to zero.
              ; On PAL systems an adjustment term is applied every 5th. jiffy.

00a0          JIFFY_CLOCK = $a0   ; 3 bytes jiffy clock at 50Hz (PAL) or 60Hz (NTSC)

00a3          R2D2    = $a3       ; serial bus
00a4          BSOUR1  = $a4       ; serial output buffer
00a5          CNTDN   = $a5       ; count down
00a6          BUFPT   = $a6       ; tape buffer pointer

00a7          RSI_In_Bit = $a7    ; RS232 Input bit
00a8          RSI_Count  = $a8    ; RS232 Input bit counter
00a9          RSI_Start  = $a9    ; RS232 Input start bit
00aa          RSI_Data   = $aa    ; RS232 Input data byte
00ab          RSI_Parity = $ab    ; RS232 Input parity

00ac          SAL     = $ac       ; Start Address Low
00ad          SAH     = $ad       ; Start Address High
00ae          EAL     = $ae       ; End   Address Low
00af          EAH     = $af       ; End   Address Hig


00b0          CMP0    = $b0       ; tape timer
00b1          CMP1    = $b1       ; tape timer

              ; These two locations point to the address of the tape buffer. This
              ; pointer is initialized to T_Buffer ($0b00).

00b2          TAPE1    = $b2      ; tape buffer pointer
00b4          RS_Count = $b4      ; RS232 output character bit counter
00b5          RS_Next  = $b5      ; RS232 next bit to transfer
00b6          RS_Out   = $b6      ; current RS232 output byte

              ; primary file descriptor

00b7          FNLEN     = $b7     ; filename length
00b8          LA        = $b8     ; Local     Address
00b9          SA        = $b9     ; Secondary Address
00ba          FA        = $ba     ; First     Address (unit)
00bb          FNADR     = $bb     ; file name Address
00bd          RS_Parity = $bd     ; RS232 Output Parity
00be          FSBLK     = $be     ; tape block counter
00bf          DRIVE     = $bf
00c0          CAS1      = $c0     ; tape drive motor flag

00c1          STAL    = $c1       ; start address low
00c2          STAH    = $c2       ; start address high
00c3          MEMUSS  = $c3       ; temporary pointer

00c5          DATA    = $c5       ; tape data byte
00c6          BA      = $c6       ; bank for load/save/verify
00c7          FNBANK  = $c7       ; bank for filename

00c8          RIBUF   = $c8       ; pointer to RS232 input  buffer
00ca          ROBUF   = $ca       ; pointer to ES232 output buffer

00cc          KEYTAB  = $cc       ; pointer to keyboard decode table

00ce          IMPARM  = $ce       ; used by PRIMM (print immediate) subroutine

00d0          NDX     = $d0       ; number of keys buffered
00d1          KYNDX   = $d1       ; function key text counter
00d2          KEYIDX  = $d2       ; function key text index
00d3          SHFLAG  = $d3       ; flag for SHIFT, CONTROL, C=
00d4          SFDX    = $d4       ; index of key pressed
00d5          LSTX    = $d5       ; index of last key (for repeat)
00d6          CRSW    = $d6       ; CRT switch 0 = keyboard input, all else screen
00d7          MODE_80 = $d7       ; screen mode $00 = 40 col, $80 = 80 col

00d8          GRAPHM  = $d8       ; graphics mode
00d9          CHAREN  = $d9       ; character RAM/ROM flag
00da          E_Beg   = $da       ; Screen Editor Start Address
00dc          E_End   = $dc       ; Screen Editor End   Address
00de          E_Col   = $de       ; Screen Editor Temporary Variable
00df          E_Row   = $df       ; Screen Editor Temporary Variable

00e0          PNT     = $e0       ; Pointer to current text row
00e2          USER    = $e2       ; Pointer to text attribute

              ; window row/column counts start at 0

00e4          Margin_Bottom = $e4 ; SCBOT  default = 24
00e5          Margin_Top    = $e5 ; SCTOP  default =  0
00e6          Margin_Left   = $e6 ; SCLF   default =  0
00e7          Margin_Right  = $e7 ; SCRT   default = 39 or 79

00e8          CurLst_Row    = $e8 ; LSXP   last cursor row (bit 7 = continuation row)
00e9          CurLst_Col    = $e9 ; LSTP   last cursor column
00ea          Cursor_End    = $ea ; INDX   Input end column (default = last non blank)

00eb          Cursor_Row    = $eb ; TBLX   current cursor row
00ec          Cursor_Col    = $ec ; PNTR   current cursor column

00ed          LINES   = $ed       ; Screen lines
00ee          COLUMNS = $ee       ; Screen columns
00ef          DATAX   = $ef       ; Output character
00f0          LSTCHR  = $f0       ; Last character
00f1          E_Attribute   = $f1 ; Color/Attribute
00f2          TCOLOR  = $f2       ; Color/Attribute for Insert
00f3          E_Reverse     = $f3 ; Reverse flag
00f4          QTSW    = $f4       ; Quote switch
00f5          INSRT   = $f5       ; Insert mode
00f6          INSFLG  = $f6       ; Automatic insert
00f7          LOCKS   = $f7       ; Commodore/Shift lock
00f8          Scroll_Locked = $f8 ; Scroll lock
00f9          BEEPER  = $f9       ; Beeper mode

0100          STACK   = $0100     ; CPU runtime stack

              ; The lower part of the stack page is used as temporary storage
              ; and is therefore unusable for normal stack operations
              ; The upper four bytes $1fc - $1ff are used by the CRUNCH routine.
              ; This limits the runtime stack pointer to the range $fb - $37

              ; DOS Parameter block

              ; This parameter block is filled in by the DOS_Parser routine
              ; and used by all disk commands, like COPY, DLOAD, DIRECTORY, etc.

0110          DOS_COUNT   = $0110 ; length of format string
0111          DOS_FNLEN_1 = $0111 ; length of 1st. filename
0112          DOS_DRIVE_1 = $0112 ; drive # 1 (0 for single drive units)
0113          DOS_FNLEN_2 = $0113 ; length of 2nd. filename
0114          DOS_DRIVE_2 = $0114 ; drive # 2 (0 for single drive units)
0115          DOS_FNADR_2 = $0115 ; address of 2nd. filename
0117          DOS_BEG     = $0117 ; start address for BSAVE, BLOAD
0119          DOS_END     = $0119 ; end   address for BSAVE
011b          DOS_LA      = $011b ; Logical   Address for file operations
011c          DOS_FA      = $011c ; First     Address (unit)
011d          DOS_SA      = $011d ; Secondary Address (0 = relocatble LOAD)
011e          DOS_RL      = $011e ; Record Length for REL files
011f          DOS_BANK    = $011f ; Bank for LOAD/SAVE
0120          DOS_ID      = $0120 ; ID (two characters) for HEADER
0122          DOS_UNIT    = $0122 ; 2nd. unit for unit to unit COPY

              ; Formatted printing

              ; This parameter block is used by the PRINT USING command

0123          BNR         = $0123 ; begin pointer
0124          ENR         = $0124 ; end   pointer
0125          DOLR        = $0125 ; dollar flag
0126          FLAG        = $0126 ; comma  flag
0127          SWE         = $0127 ; counter
0128          USGN        = $0128 ; exponent sign
0129          UEXP        = $0129 ; exponent pointer
012a          VN          = $012a ; digits before decimal point
012b          CHSN        = $012b ; adjust flag
012c          VF          = $012c ; chars  before decimal point
012d          NF          = $012d ; chars  after  decimal point
012e          POSP        = $012e ; +/- flag position
012f          FESP        = $012f ; exponent flag
0130          ETOF        = $0130 ; switch
0131          CFORM       = $0131 ; counter
0132          SNO         = $0132 ; sign number
0133          BLFD        = $0133 ; space star flag
0134          BEGFD       = $0134 ; begin pointer
0135          LFOR        = $0135 ; length of format string
0136          ENDFD       = $0136 ; end pointer

              ; Input buffer

              ; The input buffer is capable to store the contents of two full lines
              ; in 80 column mode and a terminating zero byte and is therefore 161
              ; bytes long ($200 - $2a1). The four bytes before the input buffer
              ; ($1fc - $1ff) are used by the CRUNCH routine to store link address
              ; and line number just before the line itself. So after crunching the
              ; area starting at BUF-4 contains the full tokenized BASIC line.
              ; This is why the stack pointer is initialized with $fb.

0200          BUF         = $0200 ; 161 bytes

              ; a collection of utilities that are used to access RAM
              ; from bank 0 or bank 1 by modifying  the address byte of
              ; the LDA (ADR),Y   STA (ADR),Y   or   CMP (ADR),Y instruction.
              ; These routines are copied from ROM during startup

              ; *************
02a2            FETCH = $02a2
              ; *************
              ; 02a2 ad 00 ff  LDA MMU_CR ; save old bank value
              ; 02a5 8e 00 ff  STX MMU_CR ; set new bank from X
              ; 02a8 aa        TAX        ; copy old value to X
              ; 02a9 b1 ff     LDA (**),Y ; load A from chosen bank
              ; 02ab 8e 00 ff  STX MMU_CR ; restore bank value
              ; 02ae 60        RTS        ; return

              ; *************
02af            STASH = $02af
              ; *************
              ; 02af 48        PHA        ; save A
              ; 02b0 ad 00 ff  LDA MMU_CR ; save old bank value
              ; 02b3 8e 00 ff  STX MMU_CR ; set new bank from X
              ; 02b6 aa        TAX        ; copy old value to X
              ; 02b7 68        PLA        ; restore A
              ; 02b8 91 ff     STA (**),Y ; store A to chosen bank
              ; 02ba 8e 00 ff  STX MMU_CR ; restore bank value
              ; 02bd 60        RTS        ; return

              ; **************
02be            CMPARE = $02be
              ; **************
              ; 02be 48        PHA        ; save A
              ; 02bf ad 00 ff  LDA MMU_CR ; save old bank value
              ; 02c2 8e 00 ff  STX MMU_CR ; set new bank from X
              ; 02c5 aa        TAX        ; copy old value to X
              ; 02c6 68        PLA        ; restore A
              ; 02c7 d1 ff     CMP (**),Y ; compare A
              ; 02ca 8e 00 ff  STX MMU_CR ; restore bank value
              ; 02cd 60        RTS        ; return

              ; **************
02cd            JSRFAR = $02cd
              ; **************
              ; 02cd 20 e3 02  JSR JMPFAR ; jump to BANK,PC
              ; 02d0 85 06     STA A_REG  ; save A
              ; 02d2 86 07     STX X_REG  ; save X
              ; 02d4 84 08     STY Y_REG  ; save Y
              ; 02d6 08        PHP
              ; 02d7 68        PLA
              ; 02d8 85 05     STA S_REG  ; save SR
              ; 02da ba        TSX
              ; 02db 86 09     STX CHARAC ; save SP
              ; 02dd a9 00     LDA #0
              ; 02df 8d 00 ff  STA MMU_CR ; default bank
              ; 02e2 60        RTS        ; return

              ; **************
02e3            JMPFAR = $02e3
              ; **************
              ; 02e3 a2 00     LDX #0       ; for x=0 to 2
              ; 02e5 b5 03     LDA PC_HI,X  ; push PC and SR
              ; 02e7 48        PHA
              ; 02e8 e8        INX
              ; 02e9 e0 03     CPX #3
              ; 02eb 90 f8     BCC $02e5    ; -> loop
              ; 02ed a6 02     LDX BANK     ; # of bank configuration
              ; 02ef 20 6b ff  JSR K_GETCFG ; get  bank configuration
              ; 02f2 8d 00 ff  STA MMU_CR   ; set  bank configuration
              ; 02f5 a5 06     LDA A_REG    ; restore A
              ; 02f7 a6 07     LDX X_REG    ; restore X
              ; 02f9 a4 08     LDY Y_REG    ; restore Y
              ; 02fb 40        RTI          ; restore SR and JUMP to PC

              ; This vector is used when a BASIC prgram uses the USR() function.
              ; The vector should point to user defined code.
              ; It is initialised so that if you try to execute a USR call
              ; without changing them you will receive an ILLEGAL QUANTITY error.

02fc          USRVEC  = $02fc     ; pointer to user defined machine code

              ; A table of vectors for the most important BASIC routines
              ; These may be used for interception in order to add new functionality

0300          IERROR  = $0300     ; DEF_ERROR   BASIC error handler
0302          IMAIN   = $0302     ; DEF_MAIN    BASIC main loop
0304          ICRNCH  = $0304     ; DEF_CRUNCH  BASIC tokenizer
0306          IQPLOP  = $0306     ; DEF_QPLOP   BASIC statement lister
0308          IGONE   = $0308     ; DEF_GONE    BASIC interpret statement
030a          IEVAL   = $030a     ; DEF_EVAL    BASIC evaluate expressiom
030c          IESCLK  = $030c     ; DEF_ESCLK
030e          IESCPR  = $030e     ; DEF_ESCPR
0310          IESCEX  = $0310     ; DEF_ESCEX

              ; A table of vectors for kernal and ML monitor subroutines
              ; These may be used for interception in order to add new functionality
              ; Default values are copied from the ROM table vectss at $e073

0314          IIRQ    = $0314     ; IRQ_Normal
0316          IBRK    = $0316     ; Mon_Break
0318          INMI    = $0318     ; NMI_Normal
031a          IOPEN   = $031a     ; OPEN
031c          ICLOSE  = $031c     ; CLOSE
031e          ICHKIN  = $031e     ; CHKIN
0320          ICKOUT  = $0320     ; CKOUT
0322          ICLRCH  = $0322     ; CLRCH
0324          IBASIN  = $0324     ; BASIN
0326          IBSOUT  = $0326     ; BSOUT
0328          ISTOP   = $0328     ; STOP
032a          IGETIN  = $032a     ; GEIIN
032c          ICLALL  = $032c     ; CLALL
032e          EXMON   = $032e     ; Mon_Command
0330          ILOAD   = $0330     ; D_LOADSP
0332          ISAVE   = $0332     ; D_SAVE

              ; A table of vectors for editor subroutines
              ; These may be used for interception in order to add new functionality
              ; Default values are copied from the ROM table Edit_Vectors at $c065

0334          CTLVEC  = $0334     ; Edit_Use_Ctrl
0336          SHFVEC  = $0336     ; Edit_Print_Shifted
0338          ESCVEC  = $0338     ; Edit_Escape_Switch
033a          KEYVEC  = $033a     ; Edit_Use_Scancode
033c          KEYCHK  = $033c     ; Edit_Use_Function_Key

033e          DECODE  = $033e

034a          KEYD    = $034a     ; keyboard buffer 10 bytes
0354          TABMAP  = $0354     ; bitmap for 80 TAB positions (10 bytes)
035e          BITABL  = $035e     ; bitmap for line concatenation flag (4 bytes)

              ; These three tables hold the address parameters for all open files
              ; they are 10 bytes long, which is the limit for the number of open files

0362          LAT     = $0362     ; table of logical   addresses
036c          FAT     = $036c     ; table of first     addresses
0376          SAT     = $0376     ; table of secondary addresses

              ; Basic CHRGET (pre increment) and CHRGOT (no increment) routine
              ; This routine is copied from ROM ($4279) in Init_BASIC
              ; It is the main routine to get new bytes from the current program.
              ; The routine fetches the byte from (TXTPTR) in bank 0 and switches
              ; back to bank configuration 15 after reading.
              ; This routine runs in common RAM and is therefore interceptable for
              ; BASIC interpreter extensions.
              ; Besides returning the byte value or character in A the flags are set:
              ; Zero-flag if the value was zero (0) or colon (:) both indicating an
              ; end of statement condition.
              ; Carry-flag if char is NOT numeric ('0'..'9')

              ; **************
0380            CHRGET = $0380
              ; **************
              ; 0380 e6 3d     INC TXTPTR      [5]
              ; 0382 d0 02     BNE CHRGOT      [2]
              ; 0384 e6 3e     INC TXTPTR+1    [5]
              ; **************
0386            CHRGOT = $0386
              ; **************
              ; 0386 8d 01 ff  STA MMU_LCRA    [4] ; bank 0
              ; 0389 a0 00     LDY #0          [2]
              ; 038b b1 3d     LDA (TXTPTR),Y  [5] ; load byte
              ; 038d 8d 03 ff  STA MMU_LCRC    [4] ; bank 15
              ; **************
0390            ISNUM = $0390
              ; **************
              ; 0390 c9 3a     CMP #':'        [2] ; end-of-statement
              ; 0392 b0 0a     BCS RET         [2] ; return for chars > '9' with C=1
              ; 0394 c9 20     CMP #' '        [2]
              ; 0396 f0 e8     BEQ CHRGET      [2] ; skip blanks
              ; 0398 38        SEC             [2]
              ; 0399 e9 30     SBC #'0'        [2] ; test for numeric digits
              ; 039b 38        SEC             [2]
              ; 039c e9 d0     SBC #$d0        [2] ; clear carry for chars < '0'
              ; 039e 60    RET RTS             [6] ; size = 31 [CHRGET]
                                                   ; time = 33 - 49

              ; ***************
039f            Fetch_0 = $039f
              ; ***************
              ; Input : A = address of ZP pointer
              ;         Y = index to be used
              ; Output: A = value read from (A),Y in bank 0

              ; 039f 8d a6 03  STA Fetch_0+7   [4] ; modify ZP address
              ; 03a2 8d 01 ff  STA MMU_LCRA    [4]
              ; 03a5 b1 00     LDA (0),Y       [5] ; <-- ZP address modified
              ; 03a7 8d 03 ff  STA MMU_LCRC    [4] ; back to ROM / RAM bank 0
              ; 03aa 60        RTS             [6] ; size = 12 [Fetch_0]
                                                   ; time = 23

              ; ***************
03ab            Fetch_1 = $03ab
              ; ***************
              ; Input : A = address of ZP pointer
              ;         Y = index to be used
              ; Output: A = value read from (A),Y in bank 1

              ; 03ab 8d a6 03  STA Fetch_1+7       ; modify ZP address
              ; 03ae 8d 01 ff  STA MMU_LCRB
              ; 03b1 b1 00     LDA (0),Y           ; <-- ZP address modified
              ; 03b3 8d 03 ff  STA MMU_LCRD        ; back to ROM / RAM bank 1
              ; 03b6 60        RTS

              ; ********************
03b7            Get_INDEXA_1 = $03b7
              ; ********************
              ; 03b7 8d 02 ff  STA MMU_LCRB
              ; 03ba b1 24     LDA (INDEXA),Y
              ; 03bc 8d 04 ff  STA MMU_LCRD
              ; 03bf 60        RTS

              ; ********************
03c0            Get_INDEXB_0 = $03c0
              ; ********************
              ; 03c0 8d 01 ff  STA MMU_LCRA
              ; 03c3 b1 26     LDA (INDEXB),Y
              ; 03c5 8d 03 ff  STA MMU_LCRC
              ; 03c8 60        RTS

              ; **************
03c9            INDTXT = $03c9
              ; **************
              ; 03c9 8d 01 ff  STA MMU_LCRA
              ; 03cc b1 3d     LDA (TXTPTR),Y
              ; 03ce 8d 03 ff  STA MMU_LCRC
              ; 03d1 60        RTS

              ; Whenever a NULL string descriptor is needed this address, pointing
              ; to three zero bytes, is used. E.g. if a string variable
              ; without value is created. Also comparisons, wether a descriptor is
              ; allocated or not is done via comparisons of the descriptor address
              ; with the address of the NULL descriptor.

03d2          NULL_DESC = $03d2   ; These 3 bytes must contain zeroes permanently

              ; The BASIC command BANK sets this location to the user defined value
              ; It is used in subsequent calls to LOAD, SAVE, FETCH, STASH, SYS,
              ; PEEK, POKE  etc.

03d5          USER_BANK = $03d5   ; User defined bank configuration

03d6          TMPDES    = $03d6   ; space for two temporary address pointer
03da          STR_BANK  = $03da   ; bank for string to be parsed
03db          SAVSIZ    = $03db   ; string descriptor for sprite storage
03df          BITS      = $03df   ; FAC1 overflow
03e0          SPRTMP    = $03e0   ; temporary storage for TXTPTR

03e2          FG_BG     = $03e2   ; foreground background nibbles combined
03e3          FG_MC1    = $03e3   ; foreground multicolor 1

              ; This routine is copied from ROM_DMA = $f85a

              ; ***************
03f0            RAM_DMA = $03f0
              ; ***************
              ; 03f0 ae 00 ff  LDX MMU_CR
              ; 03f3 8c 01 df  STY DMA_CMD
              ; 03f6 8d 00 ff  STA MMU_CR
              ; 03f9 8e 00 ff  STX MMU_CR
              ; 03fc 60        RTS


              ; The default position of the VIC screen RAM used in text mode

0400          VIC_TEXT      = $0400 ; bank 0 : 40 x 25 charcters ($400 - $7e7)
0400          VAR_START     = $0400 ; bank 1 : start of BASIC variable storage

0800          BASIC_STACK   = $0800 ; 512 byte stack for loops and GOSUB calls

0a00          RESET_VECTOR  = $0a00 ; used for cold start and monitor exit
0a02          DEJAVU        = $0a02 ; a value of $a5 indicates, that the routine had been run
0a03          PALNTS        = $0a03 ; $ff = PAL (50 hz),  $00 = NTSC (60 Hz)
0a04          INIT_STATUS   = $0a04 ; RESET and NMI status
0a05          MEM_BOT       = $0a05 ; bottom of banked RAM, default = $1c00
0a07          MEM_TOP       = $0a07 ; top    of banked RAM, default = $ff00
0a09          IRQTMP        = $0a09 ; save value of (IIRQ) here

              ; variables used in tape I/O

0a0b          CASTON        = $0a0b ; timing value for tape operations
0a0c          KIKA26        = $0a0c ; temporary storage for tape operations
0a0d          STUPID        = $0a0d
0a0e          TIMOUT        = $0a0e

              ; variables used for the serial RS232 interface

0a0f          RS_Enable     = $0a0f ; Enable RS232 interface
0a10          RS_Control    = $0a10 ; Control register
0a11          RS_Command    = $0a11 ; Command register
0a12          RS_Baudrate   = $0a12 ; Baudrate
0a14          RS_Status     = $0a14 ; Status
                                    ; 7... .... BREAK  detected
                                    ; .6.. .... DSR    missing
                                    ; ...4 .... CTS    missing
                                    ; .... 3... input  buffer empty
                                    ; .... .2.. input  buffer overflow
                                    ; .... ..1. FRAME  error
                                    ; .... ...0 PARITY error

0a15          RS_Bits       = $0a15 ; Length of character
0a16          RS_Timer_Lo   = $0a16 ; Baudrate corrected for TIMER low
0a17          RS_Timer_Hi   = $0a17 ; Baudrate corrected for TIMER high
0a18          RS_IBP_End    = $0a18 ; Input  Buffer Pointer End
0a19          RS_IBP_Beg    = $0a19 ; Input  Buffer Pointer Begin
0a1a          RS_OBP_Beg    = $0a1a ; Output Buffer Pointer Begin
0a1b          RS_OBP_End    = $0a1b ; Output Buffer Pointer End

0a1c          Fast_IEC      = $0a1c ; Flag for fast IEC I/O
                                    ; 7... .... fast IEC
                                    ; .6.. .... burst mode
                                    ; .... ...0 fast

              ; These three locations form a counter which is updated 50 times a
              ; second, and serves as a software clock which counts the number of
              ; jiffies that have elapsed since the computer was turned on.
              ; European computers running at 50 Hz add an additional count every
              ; 5th. jiffy in order to compensate the lower interrupt frequency.
              ; After 24 hours and one jiffy these locations are set back to $000000.

0a1d          JIFFY_COUNTDOWN         = $0a1d ; 3 byte jiffy clock
0a20          XMAX          = $0a20 ; max. length of keyboard queue (10)
0a21          PAUSE         = $0a21 ; Ctrl-S flag
0a22          RPTFLG        = $0a22 ; repeat flag: $80 = all, $40 = no, $00 = cursor
0a23          KOUNT         = $0a23 ; repeat speed delay (default = 4)
0a24          DELAY         = $0a24 ; initial repeat delay (default = 10)
0a25          LSTHF         = $0a25 ; Commodore-Shift dleay (default = 8)

0a26          BLNON         = $0a26 ; $40 = non blinking cursor
0a27          BLNSW         = $0a27 ; $00 = blinking on
0a28          BLNCT         = $0a28 ; blink count
0a29          GDBLN         = $0a29 ; save charcter under cursor
0a2a          GDCOL         = $0a2a ; save color    under cursor

              ; cursor mode in 80 column screen

              ; $80 = constant
              ; $60 = normal blinking
              ; $40 = fast blinking
              ; $20 = off

0a2b          CURMOD        = $0a2b ; Cursor Mode
0a2c          VSH_TEXT      = $0a2c ; VIC text      page
0a2d          VSH_BITMAP    = $0a2d ; VIC bitmap    page
0a2e          VDC_RAM_PAGE  = $0a2e ; VDC text      page
0a2f          VDC_ATT_PAGE  = $0a2f ; VDC attribute page
0a30          LINTMP        = $0a30 ; temporary variable
0a31          VDC_ROW       = $0a31 ; temporary row
0a32          VDC_COL       = $0a32 ; temporary column
0a33          VDC_ATT       = $0a33 ; temporary attribute
0a34          VSH_SPLIT     = $0a34 ; VIC split shadow register
0a35          FN_SAVE_X     = $0a35 ; Save X register while accessing filename
0a36          PAL_ADJ       = $0a36 ; adjust jiffy clock running at 50 Hz
0a37          VSH_SPEED     = $0a37 ; VIC system speed
0a38          VSH_SPR_ENA   = $0a38 ; VIC sprites enabled
0a39          VSH_Ctrl_1    = $0a39 ; VIC control register 1
0a3a          SPRITES       = $0a3a ; sprite enable flag
0a3b          VIC_RAM_PAGE  = $0a3b ; start of VIC text RAM
0a3c          VDC_UPDATE_LO = $0a3c ; pointer to VDC RAM
0a3d          VDC_UPDATE_HI = $0a3d ; pointer to VDC RAM

              ; This area is used to swap the contents of the zero page addresses
              ; $e0 - $fa in the case of screen swapping

0a40          ZP_SW_COL     = $0a40 ; swap area for alternate screen

              ; This area is used to swap the contents of the tabulator settings
              ; at TABMAP in the case of screen swapping

0a60          SWPMAP        = $0a60 ; swap area for tab positions

              ; storage area for the machine language monitor

0a80          M_Data        = $0a80  ; 32 bytes for hunt string
0aa0          M_Operand     = $0aa0  ; 10 bytes for operand
0aaa          M_Format      = $0aaa  ; bit pattern describing operand syntax
0aab          M_Op_Size     = $0aab  ; length of operand (0,1 or 2)
0aac          M_Mne         = $0aac  ; 3 bytes for assembler mnemonic
0aaf          M_Save_XR     = $0aaf  ; save X register
0ab1          M_Opcode      = $0ab1  ; opcode for assembler/disassembler
0ab2          M_Save_X      = $0ab2  ; save X register during banked RAM access
0ab3          M_Dir         = $0ab3  ; direction of memory block transfer
0ab4          M_Count       = $0ab4  ; unread bytes in input
0ab5          M_Number      = $0ab5  ; temporary variable
0ab6          M_Shift       = $0ab6  ; shifts for number conversion
0ab7          M_Temp        = $0ab7  ; temporary 20 bit value

0ac0          Module_Bank   = $0ac0  ; current bank for ROM module
0ac1          Module_Flags  = $0ac1  ; ROM module initialization flags
0ac5          DINFLAG       = $0ac5  ; ASCII/DIN mode and accent flag

              ; UNUSED      = $0ac6 - $0aff

              ; buffer areas

0b00          T_Buffer      = $0b00  ; 256 bytes tape buffer
0c00          R_Rece_Buffer = $0c00  ; 256 bytes RS232 serial receive buffer
0d00          R_Send_Buffer = $0d00  ; 256 bytes RS232 serial send    buffer
1000          PKYBUF        = $1000  ;  10 bytes for programmable function keys
100a          PKYDEF        = $100a  ; 246 bytes for function key assignment
1100          DOSSTR        = $1100  ;  49 bytes for DOS command/open string

              ; variables for BASIC graphics commands

1131          XPOS          = $1131  ; position
1133          YPOS          = $1133
1135          XDEST         = $1135  ; destination
1137          YDEST         = $1137
1139          XABS          = $1139  ; absolute value
113b          YABS          = $113b
113d          XSGN          = $113d  ; sign
113f          YSGN          = $113f
1141          FCT           = $1141
1145          ERRVAL        = $1145
1147          LESSER        = $1147
1148          GREATR        = $1148
1149          ANGSGN        = $1149  ; quadrant
114a          SINVAL        = $114a  ;   sine value in 16 bit floating point
114c          COSVAL        = $114c  ; cosine value in 16 bit floating point
114e          ANGCNT        = $114e
1150          XCIRCL        = $1150
1152          YCIRCL        = $1152
1154          XRADIUS       = $1154
1156          YRADIUS       = $1156
1158          ROTANG        = $1158
115a          YDIST2        = $115a
115c          ANGBEG        = $115c
115e          ANGEND        = $115e
1160          XRCOS         = $1160
1162          YRSIN         = $1162
1164          XRSIN         = $1164
1166          YRCOS         = $1166
1168          CHRPAG        = $1168
1169          BITCNT        = $1169
116a          SCALEM        = $116a
116b          WIDTH         = $116b
116c          FILFLG        = $116c
116d          BITMSK        = $116d
116e          NUMCNT        = $116e
116f          TRCFLG        = $116f

              ; RENUMBER variables

1170          Ren_Line_Lo   = $1170
1171          Ren_Line_Hi   = $1171
1172          Ren_Step_Lo   = $1172
1173          Ren_Step_Hi   = $1173

1174          T3            = $1174  ; used in MOVSPR and DIRECTORY
1175          T4            = $1175
1176          T5            = $1176

1177          VTEMP3        = $1177  ; used in LAY_MUL_X
1178          VTEMP4        = $1178  ; used in Get_Coordinates
1179          Rel_Abs_Flag  = $1179  ; realtive or absolut plot mode
117a          ADRAY1        = $117a  ; pointer to FAC1_To_Int_AY
117c          ADRAY2        = $117c  ; pointer to Integer_To_Real

117e          SPRITE_DATA   = $117e

              ; VIC shadow registers are used as working copies
              ; The contents are then copied to the VIC hardware registers
              ; while executing the BASIC_IRQ routine.

11d6          VSH           = $11d6    ; shadow of VIC = $d000
11e7          VSH_SS_COLL   = VSH + 17 ; sprite/sprite collision
11e9          VSH_LPX       = VSH + 19 ; light pen x
11ea          VSH_LPY       = VSH + 20 ; light pen y

11eb          CHARGEN_TEXT  = $11eb    ; character generator page for text     = $d8
11ec          CHARGEN_GRAF  = $11ec    ; character generator page for graphics = $d0

11ed          REC_SA        = $11ed    ; secondary address for RECORD command
1200          OLDLIN        = $1200    ; old line number
1202          OLDTXT        = $1202    ; old interpreter ointer

1204          PU_FILL       = $1204    ; default ' ' : print using fill character
1205          PU_COMMA      = $1205    ; default ',' : print using separator
1206          PU_DOT        = $1206    ; default '.' : print using decimal dot
1207          PU_MONEY      = $1207    ; default '$' : print using currency symbol

1208          ERRNUM        = $1208    ; error number ($ff = no error)
1209          ERRLIN        = $1209    ; linenumber of error
120b          TRAPNO        = $120b    ; linenumber for error trap ($ffxx = no trap)
120d          TMPTRP        = $120d    ; obsolete
120e          ERRTXT        = $120e    ; pointer to error position in BASIC source

1210          TEXT_TOP      = $1210    ; top of current   BASIC program text
1212          TEXT_MAX      = $1212    ; top of available BASIC program text
1214          TEXT_TMP      = $1214    ; temporary TEXT pointer
1216          TEXT_LIN      = $1216    ; temporary LINE number storage
1218          FUNC_USR      = $1218    ; JMP ($4c) and address for USR function

121b          RNDX          = $121b    ; last used random number as 5 byte float

1220          ARC_SEG       = $1220    ; plot intervall for plotting arcs or circles

              ; variables used for sound control in BASIC

1222          Snd_Tempo     = $1222    ; duration = 19.22 / Snd_Tempo [sec]
1223          Snd_Duration  = $1223    ; 16 bit duration for 3 voices
1229          Snd_Dur_Tmp   = $1229    ; 16 bit duration
122b          Snd_Octave    = $122b
122c          Snd_Sharp     = $122c
122d          Snd_Pitch     = $122d    ; 16 bit pitch

122f          VOICE = $122f
1230          WAVE0 = $1230
1233          DNOTE = $1233
1234          FLTSAV = $1234
1238          FLTFLG = $1238

1239          NIBBLE = $1239
123a          TONNUM = $123a
123b          TONVAL = $123b

123e          PARCNT = $123e
123f          ATKTAB = $123f
1249          SUSTAB = $1249
1253          WAVTAB = $1253
125d          PULSLO = $125d
1267          PULSHI = $1267
1271          FILTERS = $1271
1274          Old_Filter = $1274
1275          Old_Volume = $1275
1276          INT_TRIP_FLAG = $1276
1278          Light_Pen_Flag = $1278
1279          INT_ADR_LO = $1279
127c          INT_ADR_HI = $127c
127f          INT_VAL = $127f
1280          Collision_Type      = $1280
1281          Voice_Number        = $1281
1282          Sound_Duration_1_Lo = $1282
1283          Sound_Duration_2_Lo = $1283
1284          Sound_Duration_3_Lo = $1284
1285          Sound_Duration_1_Hi = $1285
1286          Sound_Duration_2_Hi = $1286
1287          Sound_Duration_3_Hi = $1287
1288          SOUND_MAX_LO        = $1288
128b          SOUND_MAX_HI        = $128b
128e          SOUND_MIN_LO        = $128e
1291          SOUND_MIN_HI        = $1291
1294          SOUND_DIR           = $1294
1297          SOUND_STEP_LO       = $1297
129a          SOUND_STEP_HI       = $129a
129d          SOUND_FREQ_LO       = $129d
12a0          SOUND_FREQ_HI       = $12a0
12a3          TEMP_TIME_LO        = $12a3
12a4          TEMP_TIME_HI        = $12a4
12a5          TEMP_MAX_LO         = $12a5
12a6          TEMP_MAX_HI         = $12a6
12a7          TEMP_MIN_LO         = $12a7
12a8          TEMP_MIN_HI         = $12a8
12a9          TEMP_DIRECTION      = $12a9
12aa          TEMP_STEP_LO        = $12aa
12ab          TEMP_STEP_HI        = $12ab
12ac          TEMP_FREQ_LO        = $12ac
12ad          TEMP_FREQ_HI        = $12ad
12ae          TEMP_PULSE_LO       = $12ae
12af          TEMP_PULSE_HI       = $12af
12b0          TEMP_WAVEFORM       = $12b0

12b1          POT_IEMP_1          = $12b1
12b2          POT_IEMP_2          = $12b2

12b3          Win_XL              = $12b3
12b4          Win_YL              = $12b4
12b5          Win_XH              = $12b5
12b6          Win_YH              = $12b6

12b7          SAVRAM              = $12b7

12fa          DEFMOD = $12fa
12fb          LINCNT = $12fb
12fc          SPRNUM = $12fc
12fd          IRQ_ACTIVE_FLAG = $12fd
1c00          RAMBOT = $1c00
1c01          PROGRAM_START = $1c01

1c00          COLOR_RAM = $1c00
2000          GRAFX_RAM = $2000

3e00          V3e00 = $3e00

              ; *************************************
              ; C-128 VIC (MOS 8564) Video Controller
              ; *************************************

              ;  #| Adr.  |Bit7|Bit6|Bit5|Bit4|Bit3|Bit2|Bit1|Bit0| Function
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  0| $d000 |                  M0X                  | X coordinate sprite 0
              ; --+-------+---------------------------------------+------------------------
              ;  1| $d001 |                  M0Y                  | Y coordinate sprite 0
              ; --+-------+---------------------------------------+------------------------
              ;  2| $d002 |                  M1X                  | X coordinate sprite 1
              ; --+-------+---------------------------------------+------------------------
              ;  3| $d003 |                  M1Y                  | Y coordinate sprite 1
              ; --+-------+---------------------------------------+------------------------
              ;  4| $d004 |                  M2X                  | X coordinate sprite 2
              ; --+-------+---------------------------------------+------------------------
              ;  5| $d005 |                  M2Y                  | Y coordinate sprite 2
              ; --+-------+---------------------------------------+------------------------
              ;  6| $d006 |                  M3X                  | X coordinate sprite 3
              ; --+-------+---------------------------------------+------------------------
              ;  7| $d007 |                  M3Y                  | Y coordinate sprite 3
              ; --+-------+---------------------------------------+------------------------
              ;  8| $d008 |                  M4X                  | X coordinate sprite 4
              ; --+-------+---------------------------------------+------------------------
              ;  9| $d009 |                  M4Y                  | Y coordinate sprite 4
              ; --+-------+---------------------------------------+------------------------
              ; 10| $d00a |                  M5X                  | X coordinate sprite 5
              ; --+-------+---------------------------------------+------------------------
              ; 11| $d00b |                  M5Y                  | Y coordinate sprite 5
              ; --+-------+---------------------------------------+------------------------
              ; 12| $d00c |                  M6X                  | X coordinate sprite 6
              ; --+-------+---------------------------------------+------------------------
              ; 13| $d00d |                  M6Y                  | Y coordinate sprite 6
              ; --+-------+---------------------------------------+------------------------
              ; 14| $d00e |                  M7X                  | X coordinate sprite 7
              ; --+-------+---------------------------------------+------------------------
              ; 15| $d00f |                  M7Y                  | Y coordinate sprite 7
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 16| $d010 |M7X8|M6X8|M5X8|M4X8|M3X8|M2X8|M1X8|M0X8| MSBs of X coordinates
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 17| $d011 |RST8| ECM| BMM| DEN|RSEL|    YSCROLL   | Control register 1
              ; --+-------+----+----+----+----+----+--------------+------------------------
              ; 18| $d012 |                 RASTER                | VIC_RASTER counter
              ; --+-------+---------------------------------------+------------------------
              ; 19| $d013 |                  LPX                  | Light pen X
              ; --+-------+---------------------------------------+------------------------
              ; 20| $d014 |                  LPY                  | Light pen Y
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 21| $d015 | M7E| M6E| M5E| M4E| M3E| M2E| M1E| M0E| Sprite enabled
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 22| $d016 |  - |  - | RES| MCM|CSEL|    XSCROLL   | Control register 2
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 23| $d017 |M7YE|M6YE|M5YE|M4YE|M3YE|M2YE|M1YE|M0YE| Sprite Y expansion
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 24| $d018 |VM13|VM12|VM11|VM10|CB13|CB12|CB11|  - | Memory pointers
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 25| $d019 | IRQ|  - |  - |  - | ILP|IMMC|IMBC|IRST| Interrupt register
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 26| $d01a |  - |  - |  - |  - | ELP|EMMC|EMBC|ERST| Interrupt enabled
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 27| $d01b |M7DP|M6DP|M5DP|M4DP|M3DP|M2DP|M1DP|M0DP| Sprite data priority
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 28| $d01c |M7MC|M6MC|M5MC|M4MC|M3MC|M2MC|M1MC|M0MC| Sprite multicolor
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 29| $d01d |M7XE|M6XE|M5XE|M4XE|M3XE|M2XE|M1XE|M0XE| Sprite X expansion
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 30| $d01e | M7M| M6M| M5M| M4M| M3M| M2M| M1M| M0M| Sprite-sprite collision
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 31| $d01f | M7D| M6D| M5D| M4D| M3D| M2D| M1D| M0D| Sprite-data collision
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 32| $d020 |  - |  - |  - |  - |         EC        | Border color
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 33| $d021 |  - |  - |  - |  - |        B0C        | Background color 0
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 34| $d022 |  - |  - |  - |  - |        B1C        | Background color 1
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 35| $d023 |  - |  - |  - |  - |        B2C        | Background color 2
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 36| $d024 |  - |  - |  - |  - |        B3C        | Background color 3
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 37| $d025 |  - |  - |  - |  - |        MM0        | Sprite multicolor 0
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 38| $d026 |  - |  - |  - |  - |        MM1        | Sprite multicolor 1
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 39| $d027 |  - |  - |  - |  - |        M0C        | Color sprite 0
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 40| $d028 |  - |  - |  - |  - |        M1C        | Color sprite 1
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 41| $d029 |  - |  - |  - |  - |        M2C        | Color sprite 2
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 42| $d02a |  - |  - |  - |  - |        M3C        | Color sprite 3
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 43| $d02b |  - |  - |  - |  - |        M4C        | Color sprite 4
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 44| $d02c |  - |  - |  - |  - |        M5C        | Color sprite 5
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 45| $d02d |  - |  - |  - |  - |        M6C        | Color sprite 6
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 46| $d02e |  - |  - |  - |  - |        M7C        | Color sprite 7
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 47| $d02f |  - |  - |  - |  - |  - | K2 | K1 | K0 | Keyboard control
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 48| $d030 |  - |  - |  - |  - |  - |  - |  - | MHz| Fast / Slow
              ; --+-------+----+----+----+----+-------------------+------------------------

d000          VIC = $d000

              ; **********************************************
              ; C-64 CIA1 (MOS 6526) Complex Interface Adapter
              ; **********************************************

              ;  #| Adr.  |Bit7|Bit6|Bit5|Bit4|Bit3|Bit2|Bit1|Bit0| Function
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  0| $dc00 |                  PRA                  | Data port A
              ; --+-------+---------------------------------------+------------------------
              ;  1| $dc01 |                  PRB                  | Data port B
              ; --+-------+---------------------------------------+------------------------
              ;  2| $dc02 |                 DDRA                  | Data direction A
              ; --+-------+---------------------------------------+------------------------
              ;  3| $dc03 |                 DDRB                  | Data direction B
              ; --+-------+---------------------------------------+------------------------
              ;  4| $dc04 |                 TALO                  | Timer A low
              ; --+-------+---------------------------------------+------------------------
              ;  5| $dc05 |                 TAHI                  | Timer A high
              ; --+-------+---------------------------------------+------------------------
              ;  6| $dc06 |                 TBLO                  | Timer B low
              ; --+-------+---------------------------------------+------------------------
              ;  7| $dc07 |                 TBHI                  | Timer B high
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  8| $dc08 | S/A|  0 |  0 |  0 |       TODS        | Time Of Day [1/10 sec]
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  9| $dc09 |  0 |  TODS [10s]  |     TODS [1s]     | Time Of Day [sec]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 10| $dc0a |  0 |  TODM [10m]  |     TODM [1m]     | Time Of Day [min]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 11| $dc0b |AMPM|  TODH [10h]  |     TODH [1h]     | Time Of Day [hour]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 12| $dc0c |                  SDR                  | Serial Data Register
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 13| $dc0d |MODE|  0 |  0 |IFLG|ISDR|IARM|ITBU|ITBA| Interrupt Control Reg.
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 14| $dc0e | Hz |DSDR|CNTP| ONE|CONT|TBUN|TBUN|STOP| Control Timer A
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 15| $dc0f |MODE|   TACT  | ONE|CONT|TAUN|TAUN|STOP| Control Timer B
              ; --+-------+----+----+----+----+----+----+----+----+------------------------

dc00          CIA1         = $DC00 ; base address
dc00          CIA1_KBD_COL = $DC00 ; CIA1 Peripheral data Register A : keyboard column
dc01          CIA1_KBD_ROW = $DC01 ; CIA1 Peripheral data Register B : keyboard row

                                   ; C64  keyboard matrix layout
                                   ;       c7   c6   c5   c4   c3   c2   c1   c0
                                   ;   +------------------------------------------------
                                   ; r7|  RUN    /    ,    N    V    X  LSH   DN
                                   ; r6|    Q   UP    @    O    U    T    E   F5
                                   ; r5|  CBM    =    :    K    H    F    S   F3
                                   ; r4|   SP  RSH    .    M    B    C    Z   F1
                                   ; r3|    2  HOM    -    0    8    6    4   F7
                                   ; r2|  CTL    ;    L    J    G    D    A  RGT
                                   ; r1|  LFT    *    P    I    Y    R    W  RET
                                   ; r0|    1    £    +    9    7    5    3  DEL

dc02          CIA1_DDRA  = $DC02   ; CIA1 Data Direction  Register A
dc03          CIA1_DDRB  = $DC03   ; CIA1 Data Direction  Register B
dc04          CIA1_TALO  = $DC04   ; CIA1 Timer A Low  register
dc05          CIA1_TAHI  = $DC05   ; CIA1 Timer A High register
dc06          CIA1_TBLO  = $DC06   ; CIA1 Timer B Low  register
dc07          CIA1_TBHI  = $DC07   ; CIA1 Timer B High register
dc08          CIA1_TODT  = $DC08   ; CIA1 Time Of Day 1/10 seconds
dc09          CIA1_TODS  = $DC09   ; CIA1 Time Of Day seconds
dc0a          CIA1_TODM  = $DC0A   ; CIA1 Time Of Day minutes
dc0b          CIA1_TODH  = $DC0B   ; CIA1 Time Of Day hours
dc0c          CIA1_SDR   = $DC0C   ; CIA1 Serial Data Register
dc0d          CIA1_ICR   = $DC0D   ; CIA1 Interrupt Control Register
dc0e          CIA1_CRA   = $DC0E   ; CIA1 Control Register A
dc0f          CIA1_CRB   = $DC0F   ; CIA1 Control Register B

              ; **********************************************
              ; C-64 CIA2 (MOS 6526) Complex Interface Adapter
              ; **********************************************

              ;  #| Adr.  |Bit7|Bit6|Bit5|Bit4|Bit3|Bit2|Bit1|Bit0| Function
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  0| $dd00 |                  PRA                  | Data port A
              ; --+-------+---------------------------------------+------------------------
              ;  1| $dd01 |                  PRB                  | Data port B
              ; --+-------+---------------------------------------+------------------------
              ;  2| $dd02 |                 DDRA                  | Data direction A
              ; --+-------+---------------------------------------+------------------------
              ;  3| $dd03 |                 DDRB                  | Data direction B
              ; --+-------+---------------------------------------+------------------------
              ;  4| $dd04 |                 TALO                  | Timer A low
              ; --+-------+---------------------------------------+------------------------
              ;  5| $dd05 |                 TAHI                  | Timer A high
              ; --+-------+---------------------------------------+------------------------
              ;  6| $dd06 |                 TBLO                  | Timer B low
              ; --+-------+---------------------------------------+------------------------
              ;  7| $dd07 |                 TBHI                  | Timer B high
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  8| $dd08 | S/A|  0 |  0 |  0 |       TODS        | Time Of Day [1/10 sec]
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  9| $dd09 |  0 |  TODS [10s]  |     TODS [1s]     | Time Of Day [sec]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 10| $dd0a |  0 |  TODM [10m]  |     TODM [1m]     | Time Of Day [min]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 11| $dd0b |AMPM|  TODH [10h]  |     TODH [1h]     | Time Of Day [hour]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 12| $dd0c |                  SDR                  | Serial Data Register
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 13| $dd0d |MODE|  0 |  0 |IFLG|ISDR|IARM|ITBU|ITBA| Interrupt Control Reg.
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 14| $dd0e | Hz |DSDR|CNTP| ONE|CONT|TBUN|TBUN|STOP| Control Timer A
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 15| $dd0f |MODE|   TACT  | ONE|CONT|TAUN|TAUN|STOP| Control Timer B
              ; --+-------+----+----+----+----+----+----+----+----+------------------------

              ; **********************************************
              ; C-64 CIA2 (MOS 6526) Complex Interface Adapter
              ; **********************************************

dd00          CIA2       = $DD00 ; base address

dd00          CIA2_PRA   = $DD00   ; CIA2 Peripheral data Register A

              ; bit 7:   IEC DATA  IN
              ; bit 6:   IEC CLOCK IN
              ; bit 5:   IEC DATA  OUT
              ; bit 4:   IEC CLOCK OUT
              ; bit 3:   IEC ATN   OUT
              ; bit 2:   RS232     OUT
              ; bit 1:   VA15
              ; bit 0:   VA14

dd01          CIA2_PRB   = $DD01   ; CIA2 Peripheral data Register B

              ; bit 7:   DSR Data Set Ready
              ; bit 6:   CTS Clear To Send
              ; bit 5:   DCD Data Carrier Detect
              ; bit 4:
              ; bit 3:   RI  Ring Indicator
              ; bit 2:   DTR Data Terminal Ready
              ; bit 1:   RTS Request To Send
              ; bit 0:   RXD Received Data

dd02          CIA2_DDRA  = $DD02   ; CIA2 Data Direction  Register A
dd03          CIA2_DDRB  = $DD03   ; CIA2 Data Direction  Register B
dd04          CIA2_TALO  = $DD04   ; CIA2 Timer A Low  register
dd05          CIA2_TAHI  = $DD05   ; CIA2 Timer A High register
dd06          CIA2_TBLO  = $DD06   ; CIA2 Timer B Low  register
dd07          CIA2_TBHI  = $DD07   ; CIA2 Timer B High register
dd08          CIA2_TODT  = $DD08   ; CIA2 Time Of Day 1/10 seconds
dd09          CIA2_TODS  = $DD09   ; CIA2 Time Of Day seconds
dd0a          CIA2_TODM  = $DD0A   ; CIA2 Time Of Day minutes
dd0b          CIA2_TODH  = $DD0B   ; CIA2 Time Of Day hours
dd0c          CIA2_SDR   = $DD0C   ; CIA2 Serial Data Register
dd0d          CIA2_ICR   = $DD0D   ; CIA2 Interrupt Control Register

              ; bit 7:   IRQ enable
              ; bit 6:
              ; bit 5:
              ; bit 4:   IRQ flag
              ; bit 3:   serial port full/empty
              ; bit 2:   ALARM
              ; bit 1:   TIMER B
              ; bit 0:   TIMER A

dd0e          CIA2_CRA   = $DD0E   ; CIA2 Control Register A
dd0f          CIA2_CRB   = $DD0F   ; CIA2 Control Register B

              ; key coordinates

007f          CTRL_COL = %01111111 ; $7f = col 7
00fb          CTRL_ROW = %11111011 ; $fb = row 2

007f          STND_COL = %01111111 ; $7f = col 7

dc0d          VIA2_IER = CIA1_ICR    ; CIA1 Interrupt Control Register
dc07          VIA2_T2CH= $DC07
dc06          VIA2_T2CL= $DC06
dc04          VIA2_T1CL= $DC04
dc05          VIA2_T1CH= $DC05

0028          COLS          =  40
0019          ROWS          =  25
0002          COLINK        =   2
0050          COLMAX        =  80
00d8          COLRAM_PAGE   = $D8
000e          Default_Color = 14   ; Light blue

d018          MEM_CONTROL   = $D018
dc07          IEC_TIM_H     = $DC07; CIA 1 TIH, timer high
dc0d          IEC_IFR       = CIA1_ICR    ; CIA 1 CRB, interrupt flag register
dd00          IEC_PCR       = $DD00; VIA 2 peripheral control register (PCR)
dd00          IEC_DRAN      = $DD00; CIA 2 DRA, IEC bus

              ; bit 7	IEC Bus Data  Input
              ;     6	IEC Bus Clock Input
              ;     5	IEC Bus Data  Output
              ;     4	IEC Bus Clock Output
              ;     3	IEC Bus ATN Signal Output
              ;     2 User port PA2
              ;   0-1 VIC memory address

dd01          RS2_DSR_CTS   = $DD01
dd0d          RS2_IRQ_REG   = CIA2_ICR
dd04          RS2_TIM_LOW   = $DD04
dd05          RS2_TIM_HIG   = $DD05
0008          IEC_ATN_BIT   = $08
0002          IEC_IFR_BIT   = $02
0010          IEC_CLK_BIT   = %00010000; $10
0020          IEC_DAT_BIT   = %00100000; $20
0004          RS232_C_BIT   = %00000100; $04


d011          VIC_Ctrl_1  = $d011    ; VIC control register 1
d012          VIC_RASTER  = $d012
d013          VIC_LPX     = $d013
d014          VIC_LPY     = $d014
d015          VIC_SPR_ENA = $d015
d016          VIC_Ctrl_2  = $d016
d018          VIC_Memory  = $d018
d019          VIC_IRQ_REG = $d019
d01a          VIC_IRQ_ENA = $d01a
d01c          Vd01c = $d01c
d01e          VIC_SS_COLL = $d01e
d020          Vd020 = $d020
d021          VIC_BG_COL = $d021
d025          Vd025 = $d025
d026          Vd026 = $d026
d027          Vd027 = $d027
d02f          VIC_KBD = $d02f
d030          VIC_SPEED = $d030

d400          SID_Freq_1 = $d400
d402          SID_Pulse_1 = $d402
d404          SID_Control_1 = $d404
d405          SID_Attack_1 = $d405
d406          SID_Sustain_1 = $d406
d407          SID_Freq_2 = $d407
d409          SID_Pulse_2 = $d409
d40b          SID_Control_2 = $d40b
d40c          SID_Attack_2 = $d40c
d40d          SID_Sustain_2 = $d40d
d40e          SID_Freq_3 = $d40e
d410          SID_Pulse_3 = $d410
d412          SID_Control_3 = $d412
d413          SID_Attack_3 = $d413
d414          SID_Sustain_3 = $d414
d415          SID_Cutoff = $d415
d417          SID_Resonance = $d417
d418          SID_Volume = $d418
d419          SID_POT_X = $d419

              ; MMU

d500          MMU_CONT = $d500
d501          MMU_PCRA = $d501
d505          MMU_MODE = $d505
d506          MMU_RAMC = $d506

              ; VDC

d600          VDC_Register = $d600
d601          VDC_Data = $d601

d800          VIC_COLOR_RAM = $d800

              ; DMA controller as used by the Commodore REU

df00          DMA_BASE   = $df00

              ; 7....... interrupt pending
              ; .6...... end of block
              ; ..5..... fault
              ; ...4.... size of RAM chips
              ; ....3210 version

df01          DMA_CMD    = $df01
df02          DMA_CBM_LO = $df02
df03          DMA_CBM_HI = $df03
df04          DMA_REU_LO = $df04
df05          DMA_REU_HI = $df05
df06          DMA_REU_BA = $df06
df07          DMA_CNT_LO = $df07
df08          DMA_CNT_HI = $df08

              .STORE $4000, $4000, "4000.basiclo"
              .STORE $8000, $4000, "8000.basichi"
              .STORE $C000, $1000, "c000.edit"
              .STORE $E000, $2000, "e000.kernal"
4000          * = $4000   ; *** 128.rom ***  Commodore 128


              ; ********************
4000            B_Cold_Start ; $4000
              ; ********************

4000 4c 23 40           JMP Cold_Start

              ; ********************
4003            B_Warm_Start ; $4003
              ; ********************

4003 4c 09 40           JMP Warm_Start

              ; *******************
4006            B_BASIC_IRQ ; $4006
              ; *******************

4006 4c 4d a8           JMP BASIC_IRQ

              ; ******************
4009            Warm_Start ; $4009
              ; ******************

4009 20 cc ff           JSR K_CLRCH
400c 20 7a 41           JSR Init_MMU
400f 20 8d 41           JSR Stop_Sprites
4012 20 12 41           JSR Init_SID
4015 20 38 52           JSR Init_BASIC_Stack
4018 a9 00              LDA #0 ; keyboard channel
401a 85 15              STA CHANNL
401c 58       Go_Ready  CLI
401d 4c 37 4d           JMP BASIC_Ready

4020 00 ff ff           .BYTE $00,$ff,$ff ; unused

              ; ******************
4023            Cold_Start ; $4023
              ; ******************

4023 20 7a 41           JSR Init_MMU
4026 20 51 42           JSR Init_RAM_Vectors
4029 20 45 40           JSR Init_BASIC
402c 20 9b 41           JSR Show_Startup_Message
402f ad 04 0a           LDA INIT_STATUS
4032 09 01              ORA #1
4034 8d 04 0a           STA INIT_STATUS
4037 a2 03              LDX #<B_Warm_Start
4039 8e 00 0a           STX RESET_VECTOR    ; switch from cold to warm start
403c a2 fb              LDX #$fb
403e 9a                 TXS
403f 20 56 ff           JSR K_PHOENIX
4042 4c 1c 40           JMP Go_Ready

              ; ******************
4045            Init_BASIC ; $4045
              ; ******************

4045 a9 4c              LDA #$4c ; JMP instruction
4047 85 56              STA JUMPER
4049 8d 18 12           STA FUNC_USR
404c a9 28              LDA #<Error_Illegal_Quantity
404e a0 7d              LDY #>Error_Illegal_Quantity
4050 8d 19 12           STA FUNC_USR+1
4053 8c 1a 12           STY FUNC_USR+2
4056 a9 9f              LDA #<FAC1_To_Int_AY
4058 a0 84              LDY #>FAC1_To_Int_AY
405a 8d 7a 11           STA ADRAY1
405d 8c 7b 11           STY ADRAY1+1
4060 a9 3c              LDA #<Integer_To_Real
4062 a0 79              LDY #>Integer_To_Real
4064 8d 7c 11           STA ADRAY2
4067 8c 7d 11           STY ADRAY2+1
406a a2 55              LDX #$55 ; 'U'
406c bd 78 42 InBA_10   LDA ROM_CHRGET-1,X
406f 9d 7f 03           STA CHRGET-1,X
4072 ca                 DEX
4073 d0 f7              BNE InBA_10
4075 8e df 03           STX BITS
4078 86 15              STX CHANNL
407a 86 1a              STX LASTPT+1
407c 8e 6f 11           STX TRCFLG
407f 8e 00 1c           STX RAMBOT
4082 86 76              STX MVDFLG
4084 86 74              STX AUTINC
4086 86 75              STX AUTINC+1
4088 8e 6b 11           STX WIDTH
408b 8e 6a 11           STX SCALEM
408e 8e 6c 11           STX FILFLG
4091 8e 1b 12           STX RNDX
4094 8e 1c 01           STX DOS_FA
4097 8e 76 12           STX INT_TRIP_FLAG
409a 8e 77 12           STX INT_TRIP_FLAG+1
409d 8e 78 12           STX Light_Pen_Flag
40a0 8e 7f 12           STX INT_VAL
40a3 a0 58              LDY #$58 ; 'X'
40a5 99 7e 11 InBA_20   STA SPRITE_DATA,Y
40a8 88                 DEY
40a9 10 fa              BPL InBA_20
40ab e8                 INX
40ac 8e fd 01           STX BUF-3
40af 8e fc 01           STX BUF-4
40b2 a2 0f              LDX #15
40b4 8e d5 03           STX USER_BANK
40b7 a2 0d              LDX #13
40b9 86 86              STX FG_COL
40bb a2 01              LDX #1
40bd 86 84              STX MULCO1
40bf a2 02              LDX #2
40c1 86 85              STX MULCO2
40c3 20 5c 6a           JSR setpcl
40c6 a2 1b              LDX #$1b
40c8 86 18              STX TEMPPT
40ca a2 01              LDX #<PROGRAM_START
40cc a0 1c              LDY #>PROGRAM_START
40ce 86 2d              STX TXTTAB
40d0 84 2e              STY TXTTAB+1
40d2 a9 00              LDA #<VAR_START
40d4 a0 04              LDY #>VAR_START
40d6 85 2f              STA VARTAB
40d8 84 30              STY VARTAB+1
40da a9 00              LDA #<MMU_CR
40dc a0 ff              LDY #>MMU_CR
40de 8d 12 12           STA TEXT_MAX
40e1 8c 13 12           STY TEXT_MAX+1
40e4 a9 00              LDA #<MMU_CR
40e6 a0 ff              LDY #>MMU_CR
40e8 85 39              STA MEMSIZ
40ea 84 3a              STY MEMSIZ+1

              ; Initialize sprite pointer

              ; sprite 0 : $07f8 : pointer = $38 ($38 * $40) = $0e00
              ; sprite 1 : $07f9 : pointer = $39 ($39 * $40) = $0e40
              ; sprite 7 : $07ff : pointer = $3f ($3f * $40) = $0fc0

40ec a2 3f              LDX #$3f
40ee a0 07              LDY #7
40f0 8a       InBA_30   TXA
40f1 99 f8 07           STA BASIC_STACK-8,Y
40f4 ca                 DEX
40f5 88                 DEY
40f6 10 f8              BPL InBA_30

40f8 a9 00              LDA #0
40fa a2 6c              LDX #$6c
40fc 9d 7e 11 InBA_40   STA SPRITE_DATA,X
40ff ca                 DEX
4100 10 fa              BPL InBA_40
4102 20 12 41           JSR Init_SID
4105 a9 d0              LDA #$d0
4107 8d ec 11           STA CHARGEN_GRAF
410a a9 d8              LDA #$d8
410c 8d eb 11           STA CHARGEN_TEXT
410f 4c d9 51           JMP NEW_10

              ; ****************
4112            Init_SID ; $4112
              ; ****************

4112 a9 20              LDA #<$0120         ; default duration
4114 a0 01              LDY #>$0120
4116 8d 29 12           STA Snd_Dur_Tmp
4119 8c 2a 12           STY Snd_Dur_Tmp+1
411c a9 04              LDA #4
411e 8d 2b 12           STA Snd_Octave
4121 a9 10              LDA #16
4123 8d 22 12           STA Snd_Tempo
4126 a9 00              LDA #0
4128 8d 04 d4           STA SID_Control_1
412b 8d 0b d4           STA SID_Control_2
412e 8d 12 d4           STA SID_Control_3
4131 8d fd 12           STA IRQ_ACTIVE_FLAG
4134 a9 0f              LDA #15
4136 8d 74 12           STA Old_Filter
4139 8d 75 12           STA Old_Volume
413c 8d 18 d4           STA SID_Volume
413f a0 1d              LDY #$1d
4141 b9 11 70 ISID_10   LDA stkmus,Y
4144 99 3f 12           STA ATKTAB,Y
4147 88                 DEY
4148 10 f7              BPL ISID_10
414a a2 09              LDX #9
414c bd 2f 70 ISID_20   LDA pwhmus,X
414f 9d 67 12           STA PULSHI,X
4152 ca                 DEX
4153 10 f7              BPL ISID_20
4155 8e 85 12           STX Sound_Duration_1_Hi
4158 8e 86 12           STX Sound_Duration_2_Hi
415b 8e 87 12           STX Sound_Duration_3_Hi
415e 8e 24 12           STX Snd_Duration+1
4161 8e 26 12           STX Snd_Duration+3
4164 8e 28 12           STX Snd_Duration+5
4167 a0 02              LDY #2
4169 8c 2f 12           STY VOICE
416c a2 00    ISID_30   LDX #0
416e 20 b2 6e           JSR Set_Envelope
4171 ce 2f 12           DEC VOICE
4174 10 f6              BPL ISID_30
4176 ee 2f 12 ISID_40   INC VOICE
4179 60                 RTS ;Size  104 [Init_SID]

              ; ****************
417a            Init_MMU ; $417a
              ; ****************

417a 20 45 a8           JSR Map_IO
417d a2 03              LDX #3
417f bd 89 41 IMMU_10   LDA MMU_Preconfiguration,X
4182 9d 01 d5           STA MMU_PCRA,X
4185 ca                 DEX
4186 10 f7              BPL IMMU_10
4188 60                 RTS ;Size   15 [Init_MMU]

              ; ****************************
4189            MMU_Preconfiguration ; $4189
              ; ****************************

4189 3f                 .BYTE $3f
418a 7f                 .BYTE $7f
418b 01                 .BYTE $01
418c 41                 .BYTE $41

              ; ********************
418d            Stop_Sprites ; $418d
              ; ********************

418d a9 00              LDA #0
418f a0 07              LDY #7
4191 be d9 6d StSp_10   LDX Sprite_Offset,Y
4194 9d 7e 11           STA SPRITE_DATA,X
4197 88                 DEY
4198 10 f7              BPL StSp_10
419a 60                 RTS ;Size   14 [Stop_Sprites]

              ; ****************************
419b            Show_Startup_Message ; $419b
              ; ****************************

419b a0 00              LDY #0
419d b9 bb 41 SSM_10    LDA Startup_Message,Y
41a0 c9 40              CMP #'@'
41a2 d0 0e              BNE SSM_30
41a4 24 d7              BIT MODE_80
41a6 10 0d              BPL SSM_40
41a8 a2 13              LDX #$13
41aa a9 20    SSM_20    LDA #' '
41ac 20 69 92           JSR B_BSOUT
41af ca                 DEX
41b0 d0 f8              BNE SSM_20
41b2 20 69 92 SSM_30    JSR B_BSOUT
41b5 c8       SSM_40    INY
41b6 c0 96              CPY #$96
41b8 d0 e3              BNE SSM_10
41ba 60                 RTS ;Size   32 [Show_Startup_Message]


              ; ***************
41bb            Startup_Message
              ; ***************

41bb 93 0d 40            .BYTE $93,$0d,$40
41be 20 43 4f            .BYTE " COMMODORE BASIC V7.0"
41d3 20 31 32            .BYTE " 122365 BYTES FREE"
41e5 0d 40               .BYTE $0d,$40
41e7 20 20 20            .BYTE "   (C)1986 COMMODORE"
41fb 20 45 4c            .BYTE " ELECTRONICS, LTD."
420d 0d 40               .BYTE $0d,$40
420f 20 20 20            .BYTE "         (C)1977"
421f 20 4d 49            .BYTE " MICROSOFT CORP."
422f 0d 40               .BYTE $0d,$40
4231 20 20 20            .BYTE "           ALL RIGHTS"
4246 20 52 45            .BYTE " RESERVED\r",0


              ; ************************
4251            Init_RAM_Vectors ; $4251
              ; ************************

4251 a2 11              LDX #$11
4253 bd 67 42 IRV_10    LDA ROM_BASIC_Vector_Table,X
4256 9d 00 03           STA IERROR,X
4259 ca                 DEX
425a 10 f7              BPL IRV_10
425c a9 78              LDA #<CALL_80       ; init USR vector
425e 8d fc 02           STA USRVEC
4261 a9 4c              LDA #>CALL_80
4263 8d fd 02           STA USRVEC+1
4266 60                 RTS ;Size   22 [Init_RAM_Vectors]

              ; ******************************
4267            ROM_BASIC_Vector_Table ; $4267
              ; ******************************

4267 3f 4d              .WORD DEF_ERROR     ; $0300 IERROR
4269 c6 4d              .WORD DEF_MAIN      ; $0302 IMAIN
426b 0d 43              .WORD DEF_CRUNCH    ; $0304 ICRNCH
426d 51 51              .WORD DEF_QPLOP     ; $0306 IQPLOP
426f a2 4a              .WORD DEF_GONE      ; $0308 IGONE
4271 da 78              .WORD DEF_EVAL      ; $030a IEVAL
4273 21 43              .WORD DEF_ESCLK     ; $030c IESCLK
4275 cd 51              .WORD DEF_ESCPR     ; $030e IESCPR
4277 a9 4b              .WORD DEF_ESCEX     ; $0310 IESCEX

              ; ******************
4279            ROM_CHRGET ; $4279
              ; ******************

4279 e6 3d              INC TXTPTR
427b d0 02              BNE CHRG_10
427d e6 3e              INC TXTPTR+1
427f 8d 01 ff CHRG_10   STA MMU_LCRA
4282 a0 00              LDY #0
4284 b1 3d              LDA (TXTPTR),Y
4286 8d 03 ff           STA MMU_LCRC
4289 c9 3a              CMP #':'
428b b0 0a              BCS CHRG_RET
428d c9 20              CMP #' '
428f f0 e8              BEQ ROM_CHRGET
4291 38                 SEC
4292 e9 30              SBC #$30 ; '0'
4294 38                 SEC
4295 e9 d0              SBC #$d0
4297 60       CHRG_RET  RTS ;Size   31 [ROM_CHRGET]

              ; *******************
4298            ROM_Fetch_0 ; $4298
              ; *******************

4298 8d a6 03           STA Fetch_0+7       ; modify ZP address
429b 8d 01 ff           STA MMU_LCRA
429e b1 00              LDA (0),Y           ; <-- modified
42a0 8d 03 ff           STA MMU_LCRC
42a3 60                 RTS ;Size   12 [ROM_Fetch_0]

              ; *******************
42a4            ROM_Fetch_1 ; $42a4
              ; *******************

42a4 8d b2 03           STA Fetch_1+7       ; modify ZP address
42a7 8d 02 ff           STA MMU_LCRB
42aa b1 00              LDA (0),Y           ; <-- modified
42ac 8d 04 ff           STA MMU_LCRD
42af 60                 RTS ;Size   12 [ROM_Fetch_1]

              ; ************************
42b0            ROM_Get_INDEXA_1 ; $42b0
              ; ************************

42b0 8d 02 ff           STA MMU_LCRB
42b3 b1 24              LDA (INDEXA),Y
42b5 8d 04 ff           STA MMU_LCRD
42b8 60                 RTS ;Size    9 [ROM_Get_INDEXA_1]

              ; ************************
42b9            ROM_Get_INDEXB_0 ; $42b9
              ; ************************

42b9 8d 01 ff           STA MMU_LCRA
42bc b1 26              LDA (INDEXB),Y
42be 8d 03 ff           STA MMU_LCRC
42c1 60                 RTS ;Size    9 [ROM_Get_INDEXB_0]

              ; ******************
42c2            ROM_INDTXT ; $42c2
              ; ******************

42c2 8d 01 ff           STA MMU_LCRA
42c5 b1 3d              LDA (TXTPTR),Y
42c7 8d 03 ff           STA MMU_LCRC
42ca 60                 RTS ;Size    9 [ROM_INDTXT]

42cb 00 00 00           .BYTE $00,$00,$00

              ; **************************
42ce            GRBPNT_from_Bank_1 ; $42ce
              ; **************************

42ce a9 50              LDA #GRBPNT
42d0 4c ab 03           JMP Fetch_1

              ; **************************
42d3            FNDPNT_from_Bank_1 ; $42d3
              ; **************************

42d3 a9 3f              LDA #FNDPNT
42d5 4c ab 03           JMP Fetch_1

              ; ********************
42d8            Get_DSCPNT_1 ; $42d8
              ; ********************

42d8 a9 52              LDA #DSCPNT
42da 4c ab 03           JMP Fetch_1

              ; ********************
42dd            Get_HIGHTR_0 ; $42dd
              ; ********************

42dd a9 5c              LDA #HIGHTR
42df 4c 9f 03           JMP Fetch_0

              ; ********************
42e2            Get_HIGHTR_1 ; $42e2
              ; ********************

42e2 a9 5c              LDA #HIGHTR
42e4 4c ab 03           JMP Fetch_1

              ; *********************
42e7            Get_FAC1_M3_1 ; $42e7
              ; *********************

42e7 a9 66              LDA #FAC1_M3
42e9 4c ab 03           JMP Fetch_1

              ; *******************
42ec            Get_LOWTR_0 ; $42ec
              ; *******************

42ec a9 61              LDA #LOWTR
42ee 4c 9f 03           JMP Fetch_0

              ; ********************
42f1            Get_STRPTR_0 ; $42f1
              ; ********************

42f1 a9 70              LDA #STRPTR
42f3 4c 9f 03           JMP Fetch_0

              ; ********************
42f6            Get_STRPTR_1 ; $42f6
              ; ********************

42f6 a9 70              LDA #STRPTR
42f8 4c ab 03           JMP Fetch_1

              ; *******************************
42fb            GRBPNT_from_Bank_1_Copy ; $42fb
              ; *******************************

42fb a9 50              LDA #GRBPNT
42fd 4c ab 03           JMP Fetch_1

              ; *******************
4300            Get_LOWTR_1 ; $4300
              ; *******************

4300 a9 61              LDA #LOWTR
4302 4c ab 03           JMP Fetch_1

              ; ********************
4305            Get_INDEXA_0 ; $4305
              ; ********************

4305 a9 24              LDA #INDEXA
4307 4c 9f 03           JMP Fetch_0

              ; **************
430a            CRUNCH ; $430a
              ; **************

430a 6c 04 03           JMP (ICRNCH)

              ; ******************
430d            DEF_CRUNCH ; $430d
              ; ******************

430d a5 3d              LDA TXTPTR
430f 48                 PHA
4310 a5 3e              LDA TXTPTR+1
4312 48                 PHA
4313 20 86 03 CRUN_05   JSR CHRGOT
4316 4c 1c 43           JMP CRUN_15
4319 20 80 03 CRUN_10   JSR CHRGET
431c 90 fb    CRUN_15   BCC CRUN_10
431e 6c 0c 03           JMP (IESCLK)

              ; *****************
4321            DEF_ESCLK ; $4321
              ; *****************

4321 b0 03              BCS CRUN_25
4323 4c b2 43           JMP CRUN_85
4326 c9 00    CRUN_25   CMP #0
4328 f0 77              BEQ CRUN_75
432a c9 3a              CMP #$3a ; ':'
432c f0 eb              BEQ CRUN_10
432e c9 3f              CMP #$3f ; '?'
4330 d0 04              BNE CRUN_30
4332 a9 99              LDA #$99
4334 d0 50              BNE CRUN_65
4336 c9 80    CRUN_30   CMP #$80
4338 90 0b              BCC CRUN_35
433a c9 ff              CMP #$ff
433c f0 db              BEQ CRUN_10
433e a0 01              LDY #1
4340 20 cc 43           JSR kloop
4343 f0 ce              BEQ CRUN_05
4345 c9 22    CRUN_35   CMP #$22 ; '"'
4347 d0 0d              BNE CRUN_45
4349 20 80 03 CRUN_40   JSR CHRGET
434c c9 00              CMP #0
434e f0 51              BEQ CRUN_75
4350 c9 22              CMP #$22 ; '"'
4352 f0 c5              BEQ CRUN_10
4354 d0 f3              BNE CRUN_40
4356 a9 46    CRUN_45   LDA #$46 ; 'F'
4358 a0 09              LDY #9
435a 20 e2 43           JSR reser
435d 90 06              BCC CRUN_50
435f a9 81              LDA #$81
4361 a2 00              LDX #0
4363 f0 4b              BEQ CRUN_80
4365 a9 46    CRUN_50   LDA #>BASIC_Keytab_D
4367 a0 c9              LDY #<BASIC_Keytab_D
4369 20 e2 43           JSR reser
436c 90 06              BCC CRUN_55
436e a9 81              LDA #$81
4370 a2 ff              LDX #$ff
4372 d0 3c              BNE CRUN_80
4374 a9 44    CRUN_55   LDA #$44 ; 'D'
4376 a0 17              LDY #$17
4378 20 e2 43           JSR reser
437b 90 9c              BCC CRUN_10
437d c0 00              CPY #0
437f f0 03              BEQ CRUN_60
4381 20 cc 43           JSR kloop
4384 a5 0d    CRUN_60   LDA B_COUNT
4386 a0 00    CRUN_65   LDY #0
4388 91 3d              STA (TXTPTR),Y
438a c9 8f              CMP #$8f
438c f0 0d              BEQ CRUN_70
438e c9 83              CMP #$83
4390 d0 87              BNE CRUN_10
4392 20 80 03           JSR CHRGET
4395 20 8f 52           JSR Skip_Statement
4398 4c 13 43           JMP CRUN_05
439b 20 80 03 CRUN_70   JSR CHRGET
439e 20 9d 52           JSR BASIC_REM
43a1 a6 3d    CRUN_75   LDX TXTPTR
43a3 68                 PLA
43a4 85 3e              STA TXTPTR+1
43a6 68                 PLA
43a7 85 3d              STA TXTPTR
43a9 38                 SEC
43aa 8a                 TXA
43ab e5 3d              SBC TXTPTR
43ad a8                 TAY
43ae c8                 INY
43af 60                 RTS ;Size  143 [DEF_ESCLK]

              ; ***************
43b0            CRUN_80 ; $43b0
              ; ***************

43b0 65 0d              ADC B_COUNT
43b2 48       CRUN_85   PHA
43b3 88                 DEY
43b4 20 cc 43           JSR kloop
43b7 a9 fe              LDA #$fe
43b9 e8                 INX
43ba d0 02              BNE CRUN_90
43bc a9 ce              LDA #$ce
43be a0 00    CRUN_90   LDY #0
43c0 91 3d              STA (TXTPTR),Y
43c2 c8                 INY
43c3 68                 PLA
43c4 91 3d              STA (TXTPTR),Y
43c6 20 80 03           JSR CHRGET
43c9 4c 19 43           JMP CRUN_10

              ; *************
43cc            kloop ; $43cc
              ; *************

43cc 18                 CLC
43cd 98                 TYA
43ce 65 3d              ADC TXTPTR
43d0 85 24              STA INDEXA
43d2 a5 3e              LDA TXTPTR+1
43d4 69 00              ADC #0
43d6 85 25              STA INDEXA+1
43d8 a0 ff              LDY #$ff
43da c8       kloop_10  INY
43db b1 24              LDA (INDEXA),Y
43dd 91 3d              STA (TXTPTR),Y
43df d0 f9              BNE kloop_10
43e1 60                 RTS ;Size   22 [kloop]

              ; *************
43e2            reser ; $43e2
              ; *************

43e2 85 25              STA INDEXA+1
43e4 84 24              STY INDEXA
43e6 a0 00              LDY #0
43e8 84 0d              STY B_COUNT
43ea 88                 DEY
43eb c8       reser_10  INY
43ec b1 3d    reser_20  LDA (TXTPTR),Y
43ee 38                 SEC
43ef f1 24              SBC (INDEXA),Y
43f1 f0 f8              BEQ reser_10
43f3 c9 80              CMP #$80
43f5 f0 1b              BEQ reser_60
43f7 b1 24    reser_30  LDA (INDEXA),Y
43f9 30 03              BMI reser_40
43fb c8                 INY
43fc d0 f9              BNE reser_30
43fe c8       reser_40  INY
43ff e6 0d              INC B_COUNT
4401 18                 CLC
4402 98                 TYA
4403 65 24              ADC INDEXA
4405 85 24              STA INDEXA
4407 90 02              BCC reser_50
4409 e6 25              INC INDEXA+1
440b 18       reser_50  CLC
440c a0 00              LDY #0
440e b1 24              LDA (INDEXA),Y
4410 d0 da              BNE reser_20
4412 05 0d    reser_60  ORA B_COUNT
4414 85 0d              STA B_COUNT
4416 60                 RTS ;Size   53 [reser]

              ; **********************
4417            BASIC_Keytab_A ; $4417
              ; **********************

4417 45 4e c4           .BYTE "END"^     ; $80
441a 46 4f d2           .BYTE "FOR"^     ; $81
441d 4e 45 58           .BYTE "NEXT"^    ; $82
4421 44 41 54           .BYTE "DATA"^    ; $83
4425 49 4e 50           .BYTE "INPUT#"^  ; $84
442b 49 4e 50           .BYTE "INPUT"^   ; $85
4430 44 49 cd           .BYTE "DIM"^     ; $86
4433 52 45 41           .BYTE "READ"^    ; $87
4437 4c 45 d4           .BYTE "LET"^     ; $88
443a 47 4f 54           .BYTE "GOTO"^    ; $89
443e 52 55 ce           .BYTE "RUN"^     ; $8a
4441 49 c6              .BYTE "IF"^      ; $8b
4443 52 45 53           .BYTE "RESTORE"^ ; $8c
444a 47 4f 53           .BYTE "GOSUB"^   ; $8d
444f 52 45 54           .BYTE "RETURN"^  ; $8e
4455 52 45 cd           .BYTE "REM"^     ; $8f
4458 53 54 4f           .BYTE "STOP"^    ; $90
445c 4f ce              .BYTE "ON"^      ; $91
445e 57 41 49           .BYTE "WAIT"^    ; $92
4462 4c 4f 41           .BYTE "LOAD"^    ; $93
4466 53 41 56           .BYTE "SAVE"^    ; $94
446a 56 45 52           .BYTE "VERIFY"^  ; $95
4470 44 45 c6           .BYTE "DEF"^     ; $96
4473 50 4f 4b           .BYTE "POKE"^    ; $97
4477 50 52 49           .BYTE "PRINT#"^  ; $98
447d 50 52 49           .BYTE "PRINT"^   ; $99
4482 43 4f 4e           .BYTE "CONT"^    ; $9a
4486 4c 49 53           .BYTE "LIST"^    ; $9b
448a 43 4c d2           .BYTE "CLR"^     ; $9c
448d 43 4d c4           .BYTE "CMD"^     ; $9d
4490 53 59 d3           .BYTE "SYS"^     ; $9e
4493 4f 50 45           .BYTE "OPEN"^    ; $9f
4497 43 4c 4f           .BYTE "CLOSE"^   ; $a0
449c 47 45 d4           .BYTE "GET"^     ; $a1
449f 4e 45 d7           .BYTE "NEW"^     ; $a2
44a2 54 41 42           .BYTE "TAB("^    ; $a3
44a6 54 cf              .BYTE "TO"^      ; $a4
44a8 46 ce              .BYTE "FN"^      ; $a5
44aa 53 50 43           .BYTE "SPC("^    ; $a6
44ae 54 48 45           .BYTE "THEN"^    ; $a7
44b2 4e 4f d4           .BYTE "NOT"^     ; $a8
44b5 53 54 45           .BYTE "STEP"^    ; $a9
44b9 ab                 .BYTE "+"^       ; $aa
44ba ad                 .BYTE "-"^       ; $ab
44bb aa                 .BYTE "*"^       ; $ac
44bc af                 .BYTE "/"^       ; $ad
44bd de                 .BYTE "^"^       ; $ae
44be 41 4e c4           .BYTE "AND"^     ; $af
44c1 4f d2              .BYTE "OR"^      ; $b0
44c3 be                 .BYTE ">"^       ; $b1
44c4 bd                 .BYTE "="^       ; $b2
44c5 bc                 .BYTE "<"^       ; $b3
44c6 53 47 ce           .BYTE "SGN"^     ; $b4
44c9 49 4e d4           .BYTE "INT"^     ; $b5
44cc 41 42 d3           .BYTE "ABS"^     ; $b6
44cf 55 53 d2           .BYTE "USR"^     ; $b7
44d2 46 52 c5           .BYTE "FRE"^     ; $b8
44d5 50 4f d3           .BYTE "POS"^     ; $b9
44d8 53 51 d2           .BYTE "SQR"^     ; $ba
44db 52 4e c4           .BYTE "RND"^     ; $bb
44de 4c 4f c7           .BYTE "LOG"^     ; $bc
44e1 45 58 d0           .BYTE "EXP"^     ; $bd
44e4 43 4f d3           .BYTE "COS"^     ; $be
44e7 53 49 ce           .BYTE "SIN"^     ; $bf
44ea 54 41 ce           .BYTE "TAN"^     ; $c0
44ed 41 54 ce           .BYTE "ATN"^     ; $c1
44f0 50 45 45           .BYTE "PEEK"^    ; $c2
44f4 4c 45 ce           .BYTE "LEN"^     ; $c3
44f7 53 54 52           .BYTE "STR$"^    ; $c4
44fb 56 41 cc           .BYTE "VAL"^     ; $c5
44fe 41 53 c3           .BYTE "ASC"^     ; $c6
4501 43 48 52           .BYTE "CHR$"^    ; $c7
4505 4c 45 46           .BYTE "LEFT$"^   ; $c8
450a 52 49 47           .BYTE "RIGHT$"^  ; $c9
4510 4d 49 44           .BYTE "MID$"^    ; $ca
4514 47 cf              .BYTE "GO"^      ; $cb
4516 52 47 d2           .BYTE "RGR"^     ; $cc
4519 52 43 4c           .BYTE "RCLR"^    ; $cd
451d 80                 .BYTE $80

              ; **********************
451e            BASIC_Keytab_B ; $451e
              ; **********************

451e 4a 4f d9           .BYTE "JOY"^        ; $cf
4521 52 44 4f           .BYTE "RDOT"^       ; $d0
4525 44 45 c3           .BYTE "DEC"^        ; $d1
4528 48 45 58           .BYTE "HEX$"^       ; $d2
452c 45 52 52           .BYTE "ERR$"^       ; $d3
4530 49 4e 53           .BYTE "INSTR"^      ; $d4
4535 45 4c 53           .BYTE "ELSE"^       ; $d5
4539 52 45 53           .BYTE "RESUME"^     ; $d6
453f 54 52 41           .BYTE "TRAP"^       ; $d7
4543 54 52 4f           .BYTE "TRON"^       ; $d8
4547 54 52 4f           .BYTE "TROFF"^      ; $d9
454c 53 4f 55           .BYTE "SOUND"^      ; $da
4551 56 4f cc           .BYTE "VOL"^        ; $db
4554 41 55 54           .BYTE "AUTO"^       ; $dc
4558 50 55 44           .BYTE "PUDEF"^      ; $dd
455d 47 52 41           .BYTE "GRAPHIC"^    ; $de
4564 50 41 49           .BYTE "PAINT"^      ; $df
4569 43 48 41           .BYTE "CHAR"^       ; $e0
456d 42 4f d8           .BYTE "BOX"^        ; $e1
4570 43 49 52           .BYTE "CIRCLE"^     ; $e2
4576 47 53 48           .BYTE "GSHAPE"^     ; $e3
457c 53 53 48           .BYTE "SSHAPE"^     ; $e4
4582 44 52 41           .BYTE "DRAW"^       ; $e5
4586 4c 4f 43           .BYTE "LOCATE"^     ; $e6
458c 43 4f 4c           .BYTE "COLOR"^      ; $e7
4591 53 43 4e           .BYTE "SCNCLR"^     ; $e8
4597 53 43 41           .BYTE "SCALE"^      ; $e9
459c 48 45 4c           .BYTE "HELP"^       ; $ea
45a0 44 cf              .BYTE "DO"^         ; $eb
45a2 4c 4f 4f           .BYTE "LOOP"^       ; $ec
45a6 45 58 49           .BYTE "EXIT"^       ; $ed
45aa 44 49 52           .BYTE "DIRECTORY"^  ; $ee
45b3 44 53 41           .BYTE "DSAVE"^      ; $ef
45b8 44 4c 4f           .BYTE "DLOAD"^      ; $f0
45bd 48 45 41           .BYTE "HEADER"^     ; $f1
45c3 53 43 52           .BYTE "SCRATCH"^    ; $f2
45ca 43 4f 4c           .BYTE "COLLECT"^    ; $f3
45d1 43 4f 50           .BYTE "COPY"^       ; $f4
45d5 52 45 4e           .BYTE "RENAME"^     ; $f5
45db 42 41 43           .BYTE "BACKUP"^     ; $f6
45e1 44 45 4c           .BYTE "DELETE"^     ; $f7
45e7 52 45 4e           .BYTE "RENUMBER"^   ; $f8
45ef 4b 45 d9           .BYTE "KEY"^        ; $f9
45f2 4d 4f 4e           .BYTE "MONITOR"^    ; $fa
45f9 55 53 49           .BYTE "USING"^      ; $fb
45fe 55 4e 54           .BYTE "UNTIL"^      ; $fc
4603 57 48 49           .BYTE "WHILE"^      ; $fd
4608 00                 .BYTE $00

              ; **********************
4609            BASIC_Keytab_C ; $4609
              ; **********************

4609 42 41 4e           .BYTE "BANK"^       ; $fe02
460d 46 49 4c           .BYTE "FILTER"^     ; $fe03
4613 50 4c 41           .BYTE "PLAY"^       ; $fe04
4617 54 45 4d           .BYTE "TEMPO"^      ; $fe05
461c 4d 4f 56           .BYTE "MOVSPR"^     ; $fe06
4622 53 50 52           .BYTE "SPRITE"^     ; $fe07
4628 53 50 52           .BYTE "SPRCOLOR"^   ; $fe08
4630 52 52 45           .BYTE "RREG"^       ; $fe09
4634 45 4e 56           .BYTE "ENVELOPE"^   ; $fe0a
463c 53 4c 45           .BYTE "SLEEP"^      ; $fe0b
4641 43 41 54           .BYTE "CATALOG"^    ; $fe0c
4648 44 4f 50           .BYTE "DOPEN"^      ; $fe0d
464d 41 50 50           .BYTE "APPEND"^     ; $fe0e
4653 44 43 4c           .BYTE "DCLOSE"^     ; $fe0f
4659 42 53 41           .BYTE "BSAVE"^      ; $fe10
465e 42 4c 4f           .BYTE "BLOAD"^      ; $fe11
4663 52 45 43           .BYTE "RECORD"^     ; $fe12
4669 43 4f 4e           .BYTE "CONCAT"^     ; $fe13
466f 44 56 45           .BYTE "DVERIFY"^    ; $fe14
4676 44 43 4c           .BYTE "DCLEAR"^     ; $fe15
467c 53 50 52           .BYTE "SPRSAV"^     ; $fe16
4682 43 4f 4c           .BYTE "COLLISION"^  ; $fe17
468b 42 45 47           .BYTE "BEGIN"^      ; $fe18
4690 42 45 4e           .BYTE "BEND"^       ; $fe19
4694 57 49 4e           .BYTE "WINDOW"^     ; $fe1a
469a 42 4f 4f           .BYTE "BOOT"^       ; $fe1b
469e 57 49 44           .BYTE "WIDTH"^      ; $fe1c
46a3 53 50 52           .BYTE "SPRDEF"^     ; $fe1d
46a9 51 55 49           .BYTE "QUIT"^       ; $fe1e
46ad 53 54 41           .BYTE "STASH"^      ; $fe1f
46b2 a0                 .BYTE " "^          ; $fe20
46b3 46 45 54           .BYTE "FETCH"^      ; $fe21
46b8 a0                 .BYTE " "^          ; $fe22
46b9 53 57 41           .BYTE "SWAP"^       ; $fe23
46bd 4f 46 c6           .BYTE "OFF"^        ; $fe24
46c0 46 41 53           .BYTE "FAST"^       ; $fe25
46c4 53 4c 4f           .BYTE "SLOW"^       ; $fe26
46c8 00                 .BYTE $00

              ; **********************
46c9            BASIC_Keytab_D ; $46c9
              ; **********************

46c9 50 4f d4           .BYTE "POT"^      ; $ce02
46cc 42 55 4d           .BYTE "BUMP"^     ; $ce03
46d0 50 45 ce           .BYTE "PEN"^      ; $ce04
46d3 52 53 50           .BYTE "RSPPOS"^   ; $ce05
46d9 52 53 50           .BYTE "RSPRITE"^  ; $ce06
46e0 52 53 50           .BYTE "RSPCOLOR"^ ; $ce07
46e8 58 4f d2           .BYTE "XOR"^      ; $ce08
46eb 52 57 49           .BYTE "RWINDOW"^  ; $ce09
46f2 50 4f 49           .BYTE "POINTER"^  ; $ce0a
46f9 00 00 00           .BYTE $00,$00,$00

              ; **********************
46fc            BASIC_Action_A ; $46fc
              ; **********************

46fc cc 4b              .WORD BASIC_END     - 1; $80
46fe f8 5d              .WORD BASIC_FOR     - 1; $81
4700 f3 57              .WORD BASIC_NEXT    - 1; $82
4702 8e 52              .WORD Skip_Statement- 1; $83 DATA
4704 47 56              .WORD BASIC_INPUT_D - 1; $84
4706 61 56              .WORD BASIC_INPUT   - 1; $85
4708 7a 58              .WORD BASIC_DIM     - 1; $86
470a a8 56              .WORD BASIC_READ    - 1; $87
470c c5 53              .WORD BASIC_LET     - 1; $88
470e da 59              .WORD BASIC_GOTO    - 1; $89
4710 9a 5a              .WORD BASIC_RUN     - 1; $8a
4712 c4 52              .WORD BASIC_IF      - 1; $8b
4714 c9 5a              .WORD BASIC_RESTORE - 1; $8c
4716 ce 59              .WORD BASIC_GOSUB   - 1; $8d
4718 61 52              .WORD BASIC_RETURN  - 1; $8e
471a 9c 52              .WORD BASIC_REM     - 1; $8f
471c ca 4b              .WORD BASIC_STOP    - 1; $90
471e a2 53              .WORD BASIC_ON      - 1; $91
4720 2c 6c              .WORD BASIC_WAIT    - 1; $92
4722 2b 91              .WORD BASIC_LOAD    - 1; $93
4724 11 91              .WORD BASIC_SAVE    - 1; $94
4726 28 91              .WORD BASIC_VERIFY  - 1; $95
4728 f9 84              .WORD BASIC_DEF     - 1; $96
472a e4 80              .WORD BASIC_POKE    - 1; $97
472c 39 55              .WORD BASIC_PRINT_D - 1; $98
472e 59 55              .WORD BASIC_PRINT   - 1; $99
4730 5f 5a              .WORD BASIC_CONT    - 1; $9a
4732 e1 50              .WORD BASIC_LIST    - 1; $9b
4734 f7 51              .WORD BASIC_CLR     - 1; $9c
4736 3f 55              .WORD BASIC_CMD     - 1; $9d
4738 84 58              .WORD BASIC_SYS     - 1; $9e
473a 8c 91              .WORD BASIC_OPEN    - 1; $9f
473c 99 91              .WORD BASIC_CLOSE   - 1; $a0
473e 11 56              .WORD BASIC_GET     - 1; $a1
4740 d5 51              .WORD BASIC_NEW     - 1; $a2

              ; **********************
4742            BASIC_Action_B ; $4742
              ; **********************

4742 90 53              .WORD BASIC_ELSE     - 1; $d5
4744 61 5f              .WORD BASIC_RESUME   - 1; $d6
4746 4c 5f              .WORD BASIC_TRAP     - 1; $d7
4748 b3 58              .WORD BASIC_TRON     - 1; $d8
474a b6 58              .WORD BASIC_TROFF    - 1; $d9
474c eb 71              .WORD BASIC_SOUND    - 1; $da
474e c4 71              .WORD BASIC_VOL      - 1; $db
4750 74 59              .WORD BASIC_AUTO     - 1; $dc
4752 33 5f              .WORD BASIC_PUDEF    - 1; $dd
4754 59 6b              .WORD BASIC_GRAPHIC  - 1; $de
4756 a7 61              .WORD BASIC_PAINT    - 1; $df
4758 d6 67              .WORD BASIC_CHAR     - 1; $e0
475a b6 62              .WORD BASIC_BOX      - 1; $e1
475c 8d 66              .WORD BASIC_CIRCLE   - 1; $e2
475e 8c 65              .WORD BASIC_GSHAPE   - 1; $e3
4760 2a 64              .WORD BASIC_SSHAPE   - 1; $e4
4762 96 67              .WORD BASIC_DRAW     - 1; $e5
4764 54 69              .WORD BASIC_LOCATE   - 1; $e6
4766 e1 69              .WORD BASIC_COLOR    - 1; $e7
4768 78 6a              .WORD BASIC_SCNCLR   - 1; $e8
476a 5f 69              .WORD BASIC_SCALE    - 1; $e9
476c 85 59              .WORD BASIC_HELP     - 1; $ea
476e df 5f              .WORD BASIC_DO       - 1; $eb
4770 89 60              .WORD BASIC_LOOP     - 1; $ec
4772 38 60              .WORD BASIC_EXIT     - 1; $ed
4774 7d a0              .WORD BASIC_DIRCAT   - 1; $ee
4776 8b a1              .WORD BASIC_DSAVE    - 1; $ef
4778 a6 a1              .WORD BASIC_DLOAD    - 1; $f0
477a 66 a2              .WORD BASIC_HEADER   - 1; $f1
477c a0 a2              .WORD BASIC_SCRATCH  - 1; $f2
477e 2e a3              .WORD BASIC_COLLECT  - 1; $f3
4780 45 a3              .WORD BASIC_COPY     - 1; $f4
4782 6d a3              .WORD BASIC_RENAME   - 1; $f5
4784 7b a3              .WORD BASIC_BACKUP   - 1; $f6
4786 86 5e              .WORD BASIC_DELETE   - 1; $f7
4788 f7 5a              .WORD BASIC_RENUMBER - 1; $f8
478a 09 61              .WORD BASIC_KEY      - 1; $f9
478c ff af              .WORD BASIC_MONITOR  - 1; $fa

              ; **********************
478e            BASIC_Action_C ; $478e
              ; **********************

478e c8 6b              .WORD BASIC_BANK      - 1; $fe02
4790 45 70              .WORD BASIC_FILTER    - 1; $fe03
4792 e0 6d              .WORD BASIC_PLAY      - 1; $fe04
4794 d6 6f              .WORD BASIC_TEMPO     - 1; $fe05
4796 c5 6c              .WORD BASIC_MOVSPR    - 1; $fe06
4798 4e 6c              .WORD BASIC_SPRITE    - 1; $fe07
479a 8f 71              .WORD BASIC_SPRCOLOR  - 1; $fe08
479c bc 58              .WORD BASIC_RREG      - 1; $fe09
479e c0 70              .WORD BASIC_ENVELOPE  - 1; $fe0a
47a0 d6 6b              .WORD BASIC_SLEEP     - 1; $fe0b
47a2 7d a0              .WORD BASIC_DIRCAT    - 1; $fe0c
47a4 1c a1              .WORD BASIC_DOPEN     - 1; $fe0d
47a6 33 a1              .WORD BASIC_APPEND    - 1; $fe0e
47a8 6e a1              .WORD BASIC_DCLOSE    - 1; $fe0f
47aa c7 a1              .WORD BASIC_BSAVE     - 1; $fe10
47ac 17 a2              .WORD BASIC_BLOAD     - 1; $fe11
47ae d6 a2              .WORD BASIC_RECORD    - 1; $fe12
47b0 61 a3              .WORD BASIC_CONCAT    - 1; $fe13
47b2 a3 a1              .WORD BASIC_DVERIFY   - 1; $fe14
47b4 21 a3              .WORD BASIC_DCLEAR    - 1; $fe15
47b6 eb 76              .WORD BASIC_SPRSAV    - 1; $fe16
47b8 63 71              .WORD BASIC_COLLISION - 1; $fe17
47ba 6b 79              .WORD SYNTAX_ERROR    - 1; $fe18
47bc 8e 52              .WORD Skip_Statement  - 1; $fe19 BEGIN
47be cb 72              .WORD BASIC_WINDOW    - 1; $fe1a
47c0 34 73              .WORD BASIC_BOOT      - 1; $fe1b
47c2 b5 71              .WORD BASIC_WIDTH     - 1; $fe1c
47c4 71 73              .WORD BASIC_SPRDEF    - 1; $fe1d
47c6 45 48              .WORD Unimplemented   - 1; $fe1e
47c8 1e aa              .WORD BASIC_STASH     - 1; $fe1f
47ca 00 00              .WORD 1               - 1; $fe20
47cc 23 aa              .WORD BASIC_FETCH     - 1; $fe21
47ce 00 00              .WORD 1               - 1; $fe22
47d0 28 aa              .WORD BASIC_SWAP      - 1; $fe23
47d2 45 48              .WORD Unimplemented   - 1; $fe24
47d4 b2 77              .WORD BASIC_FAST      - 1; $fe25
47d6 c3 77              .WORD BASIC_SLOW      - 1; $fe26

              ; ************************
47d8            BASIC_Function_A ; $47d8
              ; ************************

47d8 65 8c              .WORD FUNC_SGN  ; $b4
47da fb 8c              .WORD FUNC_INT  ; $b5
47dc 84 8c              .WORD FUNC_ABS  ; $b6
47de 18 12              .WORD FUNC_USR  ; $b7
47e0 00 80              .WORD FUNC_FRE  ; $b8
47e2 d0 84              .WORD FUNC_POS  ; $b9
47e4 b7 8f              .WORD FUNC_SQR  ; $ba
47e6 34 84              .WORD FUNC_RND  ; $bb
47e8 ca 89              .WORD FUNC_LOG  ; $bc
47ea 33 90              .WORD FUNC_EXP  ; $bd
47ec 09 94              .WORD FUNC_COS  ; $be
47ee 10 94              .WORD FUNC_SIN  ; $bf
47f0 59 94              .WORD FUNC_TAN  ; $c0
47f2 b3 94              .WORD FUNC_ATN  ; $c1
47f4 c5 80              .WORD FUNC_PEEK ; $c2
47f6 68 86              .WORD FUNC_LEN  ; $c3
47f8 ae 85              .WORD FUNC_STR  ; $c4
47fa 4a 80              .WORD FUNC_VAL  ; $c5
47fc 77 86              .WORD FUNC_ASC  ; $c6
47fe bf 85              .WORD FUNC_CHR  ; $c7
4800 d6 85              .WORD FUNC_LEFT ; $c8
4802 0a 86              .WORD FUNC_RIGHT; $c9
4804 1c 86              .WORD FUNC_MID  ; $ca

              ; ************************
4806            BASIC_Function_B ; $4806
              ; ************************

4806 82 81              .WORD FUNC_RGR ; $cc
4808 9b 81              .WORD FUNC_RCLR; $cd
480a 00 00              .WORD 0        ; $ce
480c 03 82              .WORD FUNC_JOY ; $cf
480e 0c 9b              .WORD FUNC_RDOT; $d0
4810 76 80              .WORD FUNC_DEC ; $d1
4812 42 81              .WORD FUNC_HEX ; $d2
4814 f6 80              .WORD FUNC_ERR ; $d3

              ; ************************
4816            BASIC_Function_C ; $4816
              ; ************************

4816 4d 82              .WORD FUNC_POT      ; $ce02
4818 7c 83              .WORD FUNC_BUMP     ; $ce03
481a ae 82              .WORD FUNC_PEN      ; $ce04
481c 97 83              .WORD FUNC_RSPPOS   ; $ce05
481e 1e 83              .WORD FUNC_RSPRITE  ; $ce06
4820 61 83              .WORD FUNC_RSPCOLOR ; $ce07
4822 e1 83              .WORD FUNC_XOR      ; $ce08
4824 07 84              .WORD FUNC_RWINDOW  ; $ce09
4826 fa 82              .WORD FUNC_POINTER  ; $ce0a

              ; **********************
4828            BASIC_Operator ; $4828
              ; **********************

4828 79 47 88           .BYTE $79, OP_PLUS    - 1
482b 79 30 88           .BYTE $79, OP_MINUS   - 1
482e 7b 26 8a           .BYTE $7b, OP_MULT    - 1
4831 7b 4b 8b           .BYTE $7b, OP_DIV     - 1
4834 7f c0 8f           .BYTE $7f, OP_POWER   - 1
4837 50 88 4c           .BYTE $50, OP_AND     - 1
483a 46 85 4c           .BYTE $46, OP_OR      - 1
483d 7d f9 8f           .BYTE $7d, OP_NEG     - 1
4840 5a 2f 79           .BYTE $5a, OP_NOT     - 1
4843 64 b5 4c           .BYTE $64, OP_COMPARE - 1

              ; *********************
4846            Unimplemented ; $4846
              ; *********************

4846 a2 28              LDX #$28
4848 4c 3c 4d           JMP Print_Error_X

              ; **********************
484b            Error_Messages ; $484b
              ; **********************

484b 54 4f 4f           .BYTE "TOO MANY FILES"^        ; $01
4859 46 49 4c           .BYTE "FILE OPEN"^             ; $02
4862 46 49 4c           .BYTE "FILE NOT OPEN"^         ; $03
486f 46 49 4c           .BYTE "FILE NOT FOUND"^        ; $04
487d 44 45 56           .BYTE "DEVICE NOT PRESENT"^    ; $05
488f 4e 4f 54           .BYTE "NOT INPUT FILE"^        ; $06
489d 4e 4f 54           .BYTE "NOT OUTPUT FILE"^       ; $07
48ac 4d 49 53           .BYTE "MISSING FILE NAME"^     ; $08
48bd 49 4c 4c           .BYTE "ILLEGAL DEVICE NUMBER"^ ; $09
48d2 4e 45 58           .BYTE "NEXT WITHOUT FOR"^      ; $0a
48e2 53 59 4e           .BYTE "SYNTAX"^                ; $0b
48e8 52 45 54           .BYTE "RETURN WITHOUT GOSUB"^  ; $0c
48fc 4f 55 54           .BYTE "OUT OF DATA"^           ; $0d
4907 49 4c 4c           .BYTE "ILLEGAL QUANTITY"^      ; $0e
4917 4f 56 45           .BYTE "OVERFLOW"^              ; $0f
491f 4f 55 54           .BYTE "OUT OF MEMORY"^         ; $10
492c 55 4e 44           .BYTE "UNDEF'D STATEMENT"^     ; $11
493d 42 41 44           .BYTE "BAD SUBSCRIPT"^         ; $12
494a 52 45 44           .BYTE "REDIM'D ARRAY"^         ; $13
4957 44 49 56           .BYTE "DIVISION BY ZERO"^      ; $14
4967 49 4c 4c           .BYTE "ILLEGAL DIRECT"^        ; $15
4975 54 59 50           .BYTE "TYPE MISMATCH"^         ; $16
4982 53 54 52           .BYTE "STRING TOO LONG"^       ; $17
4991 46 49 4c           .BYTE "FILE DATA"^             ; $18
499a 46 4f 52           .BYTE "FORMULA TOO COMPLEX"^   ; $19
49ad 43 41 4e           .BYTE "CAN'T CONTINUE"^        ; $1a
49bb 55 4e 44           .BYTE "UNDEF'D FUNCTION"^      ; $1b
49cb 56 45 52           .BYTE "VERIFY"^                ; $1c
49d1 4c 4f 41           .BYTE "LOAD"^                  ; $1d
49d5 42 52 45           .BYTE "BREAK"
49da 00 a0              .BYTE $00,$a0

              ; ***********************
49dc            Error_Message_B ; $49dc
              ; ***********************

49dc 43 41 4e           .BYTE "CAN'T RESUME"^          ; $1f
49e8 4c 4f 4f           .BYTE "LOOP NOT FOUND"^        ; $20
49f6 4c 4f 4f           .BYTE "LOOP WITHOUT DO"^       ; $21
4a05 44 49 52           .BYTE "DIRECT MODE ONLY"^      ; $22
4a15 4e 4f 20           .BYTE "NO GRAPHICS AREA"^      ; $23
4a25 42 41 44           .BYTE "BAD DISK"^              ; $24
4a2d 42 45 4e           .BYTE "BEND NOT FOUND"^        ; $25
4a3b 4c 49 4e           .BYTE "LINE NUMBER TOO LARGE"^ ; $26
4a50 55 4e 52           .BYTE "UNRESOLVED REFERENCE"^  ; $27
4a64 55 4e 49           .BYTE "UNIMPLEMENTED COMMAND"^ ; $28
4a79 46 49 4c           .BYTE "FILE READ"^             ; $29

              ; ***********************
4a82            Set_Error_Index ; $4a82
              ; ***********************

4a82 aa                 TAX
4a83 a0 00              LDY #0
4a85 a9 4b              LDA #<Error_Messages
4a87 85 26              STA INDEXB
4a89 a9 48              LDA #>Error_Messages
4a8b 85 27              STA INDEXB+1
4a8d ca       SEI_10    DEX
4a8e 30 0e              BMI SEI_Ret
4a90 b1 26    SEI_20    LDA (INDEXB),Y
4a92 48                 PHA
4a93 e6 26              INC INDEXB
4a95 d0 02              BNE SEI_30
4a97 e6 27              INC INDEXB+1
4a99 68       SEI_30    PLA
4a9a 10 f4              BPL SEI_20
4a9c 30 ef              BMI SEI_10
4a9e 60       SEI_Ret   RTS ;Size   29 [Set_Error_Index]

              ; *****************
4a9f            Interpret ; $4a9f
              ; *****************

4a9f 6c 08 03           JMP (IGONE)

              ; ****************
4aa2            DEF_GONE ; $4aa2
              ; ****************

4aa2 24 7f              BIT RUNMOD
4aa4 10 4a              BPL Inter_40
4aa6 ad 7f 12           LDA INT_VAL
4aa9 30 45              BMI Inter_40
4aab a2 02              LDX #2
4aad bd 76 12 Inter_20  LDA INT_TRIP_FLAG,X
4ab0 f0 3b              BEQ Inter_30
4ab2 a9 00              LDA #0
4ab4 9d 76 12           STA INT_TRIP_FLAG,X
4ab7 bd 79 12           LDA INT_ADR_LO,X
4aba 85 16              STA LINNUM
4abc bd 7c 12           LDA INT_ADR_HI,X
4abf 85 17              STA LINNUM+1
4ac1 8a                 TXA
4ac2 48                 PHA
4ac3 a5 3d              LDA TXTPTR
4ac5 48                 PHA
4ac6 a5 3e              LDA TXTPTR+1
4ac8 48                 PHA
4ac9 ad 7f 12           LDA INT_VAL
4acc 09 80              ORA #%1000 0000 ; $80
4ace 8d 7f 12           STA INT_VAL
4ad1 20 80 03           JSR CHRGET
4ad4 20 1d 5a           JSR Push_GOSUB
4ad7 20 e2 59           JSR GoTo
4ada 20 f6 4a           JSR Next_Statement
4add ad 7f 12           LDA INT_VAL
4ae0 29 7f              AND #%0111 1111 ; $7f
4ae2 8d 7f 12           STA INT_VAL
4ae5 68                 PLA
4ae6 85 3e              STA TXTPTR+1
4ae8 68                 PLA
4ae9 85 3d              STA TXTPTR
4aeb 68                 PLA
4aec aa                 TAX
4aed ca       Inter_30  DEX
4aee 10 bd              BPL Inter_20
4af0 20 80 03 Inter_40  JSR CHRGET
4af3 20 3f 4b Inter_50  JSR Execute

              ; **********************
4af6            Next_Statement ; $4af6
              ; **********************

4af6 20 b5 4b           JSR Is_STOP_Key
4af9 24 7f              BIT RUNMOD
4afb 10 06              BPL NeSt_10
4afd 20 34 4b           JSR TXTPTR_TO_OLDTXT
4b00 ba                 TSX
4b01 86 82              STX OLDSTK
4b03 a0 00    NeSt_10   LDY #0
4b05 20 c9 03           JSR INDTXT
4b08 f0 03              BEQ NeSt_20
4b0a 4c ae 4b           JMP Exec_55
4b0d 24 7f    NeSt_20   BIT RUNMOD
4b0f 10 20              BPL NeSt_40
4b11 a0 02              LDY #2
4b13 20 c9 03           JSR INDTXT
4b16 f0 19              BEQ NeSt_40
4b18 c8                 INY
4b19 20 c9 03           JSR INDTXT
4b1c 85 3b              STA CURLIN
4b1e c8                 INY
4b1f 20 c9 03           JSR INDTXT
4b22 85 3c              STA CURLIN+1
4b24 98                 TYA
4b25 18                 CLC
4b26 65 3d              ADC TXTPTR
4b28 85 3d              STA TXTPTR
4b2a 90 02              BCC NeSt_30
4b2c e6 3e              INC TXTPTR+1
4b2e 4c 9f 4a NeSt_30   JMP Interpret
4b31 4c 37 4d NeSt_40   JMP BASIC_Ready

              ; ************************
4b34            TXTPTR_TO_OLDTXT ; $4b34
              ; ************************

4b34 a5 3d              LDA TXTPTR
4b36 a4 3e              LDY TXTPTR+1
4b38 8d 02 12           STA OLDTXT
4b3b 8c 03 12           STY OLDTXT+1
4b3e 60       TPOT_Ret  RTS ;Size   11 [TXTPTR_TO_OLDTXT]

              ; ***************
4b3f            Execute ; $4b3f
              ; ***************

4b3f f0 fd              BEQ TPOT_Ret
4b41 2c 6f 11           BIT TRCFLG
4b44 10 13              BPL Exec_05
4b46 24 7f              BIT RUNMOD
4b48 10 0f              BPL Exec_05
4b4a 48                 PHA
4b4b a9 5b              LDA #'['            ; trace
4b4d 20 0c 56           JSR Print_Char
4b50 20 2e 8e           JSR Print_CURLIN
4b53 a9 5d              LDA #']'
4b55 20 0c 56           JSR Print_Char
4b58 68                 PLA
4b59 c9 fe    Exec_05   CMP #$fe
4b5b f0 37              BEQ Exec_35
4b5d c9 cb              CMP #$cb            ; GO
4b5f d0 03              BNE Exec_10
4b61 4c 3d 5a           JMP BASIC_GO
4b64 c9 ca    Exec_10   CMP #$ca            ; MID$
4b66 f0 23              BEQ Exec_25
4b68 c9 fb              CMP #$fb            ; USING
4b6a b0 3f              BCS Exec_50
4b6c c9 a3              CMP #$a3            ; TAB(
4b6e 90 06              BCC Exec_15
4b70 c9 d5              CMP #$d5            ; ELSE
4b72 90 37              BCC Exec_50
4b74 e9 32              SBC #$32
4b76 38       Exec_15   SEC
4b77 e9 80              SBC #$80
4b79 b0 03              BCS Exec_20
4b7b 4c c6 53           JMP BASIC_LET
4b7e 0a       Exec_20   ASL A
4b7f a8                 TAY
4b80 b9 fd 46           LDA BASIC_Action_A+1,Y
4b83 48                 PHA
4b84 b9 fc 46           LDA BASIC_Action_A,Y
4b87 48                 PHA
4b88 4c 80 03           JMP CHRGET

              ; assign to MID$

4b8b a9 59    Exec_25   LDA #>[MID_ASSIGN-1]
4b8d 48                 PHA
4b8e a9 00              LDA #<[MID_ASSIGN-1]
4b90 48                 PHA
4b91 4c 80 03 Exec_30   JMP CHRGET
4b94 20 80 03 Exec_35   JSR CHRGET
4b97 f0 12              BEQ Exec_50
4b99 c9 02              CMP #2
4b9b 90 08              BCC Exec_40
4b9d c9 27              CMP #$27 ; '''
4b9f b0 04              BCS Exec_40
4ba1 69 47              ADC #$47 ; 'G'
4ba3 d0 d9              BNE Exec_20
4ba5 38       Exec_40   SEC
4ba6 6c 10 03           JMP (IESCEX)

              ; *****************
4ba9            DEF_ESCEX ; $4ba9
              ; *****************

4ba9 90 e6              BCC Exec_30
4bab 4c 6c 79 Exec_50   JMP SYNTAX_ERROR
4bae c9 3a    Exec_55   CMP #':'
4bb0 d0 f9              BNE Exec_50
4bb2 4c 9f 4a           JMP Interpret

              ; *******************
4bb5            Is_STOP_Key ; $4bb5
              ; *******************

4bb5 20 93 92           JSR B_STOP
4bb8 f0 01              BEQ ISK_10
4bba 60                 RTS ;Size    6 [Is_STOP_Key]

              ; **************
4bbb            ISK_10 ; $4bbb
              ; **************

4bbb ac 0c 12           LDY TRAPNO+1
4bbe c8                 INY
4bbf f0 0f              BEQ END_20
4bc1 20 93 92 ISK_20    JSR B_STOP
4bc4 f0 fb              BEQ ISK_20
4bc6 a2 1e              LDX #$1e
4bc8 4c 3c 4d           JMP Print_Error_X

              ; ******************
4bcb            BASIC_STOP ; $4bcb
              ; ******************

4bcb b0 01              BCS END_10

              ; *****************
4bcd            BASIC_END ; $4bcd
              ; *****************

4bcd 18                 CLC ; $80
4bce d0 26    END_10    BNE END_Ret
4bd0 24 7f    END_20    BIT RUNMOD
4bd2 10 0d              BPL END_30
4bd4 20 34 4b           JSR TXTPTR_TO_OLDTXT
4bd7 a5 3b              LDA CURLIN
4bd9 a4 3c              LDY CURLIN+1
4bdb 8d 00 12           STA OLDLIN
4bde 8c 01 12           STY OLDLIN+1
4be1 68       END_30    PLA
4be2 68                 PLA
4be3 90 0e              BCC END_40
4be5 20 81 92           JSR B_PRIMM
4be8 0d 0a 42           .BYTE "\r\nBREAK",0
4bf0 4c af 4d           JMP BAER_50
4bf3 4c 37 4d END_40    JMP BASIC_Ready
4bf6 60       END_Ret   RTS ;Size   42 [BASIC_END]

              ; *********************
4bf7            Call_Function ; $4bf7
              ; *********************

4bf7 c9 ce              CMP #$ce ; 2 byte token ?
4bf9 f0 59              BEQ CALL_50
4bfb c9 d5              CMP #$d5
4bfd b0 ac              BCS Exec_50 ; illegal token
4bff c9 cb              CMP #$cb
4c01 90 02              BCC CALL_10
4c03 e9 01              SBC #1 ; skip $cb token
4c05 48       CALL_10   PHA
4c06 aa                 TAX
4c07 20 80 03           JSR CHRGET
4c0a e0 d3              CPX #$d3 ; ERR function
4c0c f0 08              BEQ CALL_20
4c0e e0 cb              CPX #$cb ; function type B
4c10 b0 29              BCS CALL_30
4c12 e0 c8              CPX #$c8
4c14 90 25              BCC CALL_30
4c16 20 59 79 CALL_20   JSR Need_Left_Par
4c19 20 ef 77           JSR Eval_Expression
4c1c 20 5c 79           JSR Need_Comma
4c1f 20 dd 77           JSR Need_String
4c22 68                 PLA
4c23 c9 d3              CMP #$d3
4c25 f0 59              BEQ CALL_90
4c27 aa                 TAX
4c28 a5 67              LDA FAC1_M4
4c2a 48                 PHA
4c2b a5 66              LDA FAC1_M3
4c2d 48                 PHA
4c2e 8a                 TXA
4c2f 48                 PHA
4c30 20 f4 87           JSR Get_Byte_Var
4c33 68                 PLA
4c34 a8                 TAY
4c35 8a                 TXA
4c36 48                 PHA
4c37 98                 TYA
4c38 4c 3f 4c           JMP CALL_40
4c3b 20 50 79 CALL_30   JSR Get_Arg
4c3e 68                 PLA
4c3f 38       CALL_40   SEC
4c40 e9 b4              SBC #$b4
4c42 0a                 ASL A
4c43 a8                 TAY
4c44 b9 d9 47           LDA BASIC_Function_A+1,Y
4c47 85 58              STA JUMPER+2
4c49 b9 d8 47           LDA BASIC_Function_A,Y
4c4c 85 57              STA JUMPER+1
4c4e 20 56 00           JSR JUMPER
4c51 4c da 77           JMP Assert_Numeric
4c54 20 80 03 CALL_50   JSR CHRGET
4c57 f0 2a              BEQ CALL_99
4c59 c9 0a              CMP #10
4c5b f0 0b              BEQ CALL_60
4c5d 48                 PHA
4c5e 20 80 03           JSR CHRGET
4c61 20 59 79           JSR Need_Left_Par
4c64 20 ef 77           JSR Eval_Expression
4c67 68                 PLA
4c68 c9 02    CALL_60   CMP #2
4c6a 90 08              BCC CALL_70
4c6c c9 0b              CMP #11
4c6e b0 04              BCS CALL_70
4c70 69 d1              ADC #$d1
4c72 d0 cb              BNE CALL_40
4c74 38       CALL_70   SEC
4c75 20 7d 4c           JSR CALL_USR

              ; ***************
4c78            CALL_80 ; $4c78
              ; ***************

4c78 b0 09              BCS CALL_99
4c7a 4c da 77           JMP Assert_Numeric

              ; ****************
4c7d            CALL_USR ; $4c7d
              ; ****************

4c7d 6c fc 02           JMP (USRVEC)        ; initialized to CALL_80
4c80 4c c1 99 CALL_90   JMP FUNC_INSTR
4c83 4c 6c 79 CALL_99   JMP SYNTAX_ERROR

              ; *************
4c86            OP_OR ; $4c86
              ; *************

4c86 a0 ff              LDY #$ff
4c88 2c                 BIT

              ; **************
4c89            OP_AND ; $4c89
              ; **************

4c89 a0 00              LDY #0
4c8b 84 0d              STY B_COUNT
4c8d 20 b4 84           JSR Real_To_Integer
4c90 a5 66              LDA FAC1_M3
4c92 45 0d              EOR B_COUNT
4c94 85 09              STA CHARAC
4c96 a5 67              LDA FAC1_M4
4c98 45 0d              EOR B_COUNT
4c9a 85 0a              STA ENDCHR
4c9c 20 28 8c           JSR FAC2_To_FAC1
4c9f 20 b4 84           JSR Real_To_Integer
4ca2 a5 67              LDA FAC1_M4
4ca4 45 0d              EOR B_COUNT
4ca6 25 0a              AND ENDCHR
4ca8 45 0d              EOR B_COUNT
4caa a8                 TAY
4cab a5 66              LDA FAC1_M3
4cad 45 0d              EOR B_COUNT
4caf 25 09              AND CHARAC
4cb1 45 0d              EOR B_COUNT
4cb3 4c 3c 79           JMP Integer_To_Real

              ; ******************
4cb6            OP_COMPARE ; $4cb6
              ; ******************

4cb6 20 de 77           JSR Check_Var_Type
4cb9 b0 13              BCS OPCO_10
4cbb a5 6f              LDA FAC2_SI
4cbd 09 7f              ORA #$7f
4cbf 25 6b              AND FAC2_M1
4cc1 85 6b              STA FAC2_M1
4cc3 a9 6a              LDA #<FAC2_EX
4cc5 a0 00              LDY #>FAC2_EX
4cc7 20 87 8c           JSR Compare_AY_FAC1
4cca aa                 TAX
4ccb 4c 01 4d           JMP OPCO_40
4cce a9 00    OPCO_10   LDA #0
4cd0 85 0f              STA VALTYP
4cd2 c6 4f              DEC OP_TMP
4cd4 20 81 87           JSR Free_String_FAC1
4cd7 85 63              STA FAC1_EX
4cd9 86 64              STX FAC1_M1
4cdb 84 65              STY FAC1_M2
4cdd a5 6d              LDA FAC2_M3
4cdf a4 6e              LDY FAC2_M4
4ce1 20 85 87           JSR Free_String_AY
4ce4 86 6d              STX FAC2_M3
4ce6 84 6e              STY FAC2_M4
4ce8 aa                 TAX
4ce9 38                 SEC
4cea e5 63              SBC FAC1_EX
4cec f0 08              BEQ OPCO_20
4cee a9 01              LDA #1
4cf0 90 04              BCC OPCO_20
4cf2 a6 63              LDX FAC1_EX
4cf4 a9 ff              LDA #$ff
4cf6 85 68    OPCO_20   STA FAC1_SI
4cf8 a0 ff              LDY #$ff
4cfa e8                 INX
4cfb c8       OPCO_30   INY
4cfc ca                 DEX
4cfd d0 07              BNE OPCO_50
4cff a6 68              LDX FAC1_SI
4d01 30 1b    OPCO_40   BMI OPCO_60
4d03 18                 CLC
4d04 90 18              BCC OPCO_60
4d06 a9 6d    OPCO_50   LDA #$6d
4d08 20 ab 03           JSR Fetch_1
4d0b 48                 PHA
4d0c a9 64              LDA #$64
4d0e 20 ab 03           JSR Fetch_1
4d11 85 79              STA SYNTMP
4d13 68                 PLA
4d14 c5 79              CMP SYNTMP
4d16 f0 e3              BEQ OPCO_30
4d18 a2 ff              LDX #$ff
4d1a b0 02              BCS OPCO_60
4d1c a2 01              LDX #1
4d1e e8       OPCO_60   INX
4d1f 8a                 TXA
4d20 2a                 ROL A
4d21 25 14              AND TANSGN
4d23 f0 02              BEQ OPCO_70
4d25 a9 ff              LDA #$ff
4d27 4c 68 8c OPCO_70   JMP A_To_FAC1

              ; *******************
4d2a            Print_Ready ; $4d2a
              ; *******************

4d2a 20 81 92           JSR B_PRIMM
4d2d 0d 52 45           .BYTE "\rREADY.\r",0
4d36 60                 RTS ;Size   13 [Print_Ready]

              ; *******************
4d37            BASIC_Ready ; $4d37
              ; *******************

4d37 a2 80              LDX #$80
4d39 2c                 BIT

              ; *****************
4d3a            OOM_Error ; $4d3a
              ; *****************

4d3a a2 10              LDX #16

              ; *********************
4d3c            Print_Error_X ; $4d3c
              ; *********************

4d3c 6c 00 03           JMP (IERROR)        ; default: DEF_ERROR

              ; *****************
4d3f            DEF_ERROR ; $4d3f
              ; *****************

4d3f 8d 03 ff           STA MMU_LCRC        ; bank 0 and ROM and I/O
4d42 8a                 TXA                 ; error #
4d43 30 72              BMI BAER_60         ; -> no error
4d45 8e 08 12           STX ERRNUM          ; store error #
4d48 24 7f              BIT RUNMOD
4d4a 10 30              BPL BAER_20         ; -> direct mode
4d4c a0 01              LDY #1
4d4e b9 3b 00 BAER_10   LDA CURLIN,Y        ; error line := current line
4d51 99 09 12           STA ERRLIN,Y
4d54 b9 02 12           LDA OLDTXT,Y        ; error position := current position
4d57 99 0e 12           STA ERRTXT,Y
4d5a 88                 DEY
4d5b 10 f1              BPL BAER_10
4d5d ac 0c 12           LDY TRAPNO+1
4d60 c8                 INY
4d61 f0 19              BEQ BAER_20         ; -> no trap defined
4d63 88                 DEY                 ; Y = trap # high
4d64 84 17              STY LINNUM+1
4d66 8c 0d 12           STY TMPTRP
4d69 ac 0b 12           LDY TRAPNO
4d6c 84 16              STY LINNUM          ; LINNUM := trap #
4d6e a2 ff              LDX #$ff
4d70 20 d1 7e           JSR Reset_Descriptor_Stack
4d73 a6 82              LDX OLDSTK
4d75 9a                 TXS                 ; reset stack pointer
4d76 20 fb 59           JSR GoTo_10         ; locate  trap code
4d79 4c f6 4a           JMP Next_Statement  ; execute trap code

4d7c ca       BAER_20   DEX                 ; error # - 1
4d7d 8a                 TXA
4d7e 20 82 4a           JSR Set_Error_Index ; let INDEXB point to message
4d81 20 6f 92           JSR B_CLRCH
4d84 a9 00              LDA #0
4d86 85 15              STA CHANNL          ; default channel
4d88 24 d7              BIT MODE_80
4d8a 30 02              BMI BAER_30
4d8c 85 d8              STA GRAPHM
4d8e 20 98 55 BAER_30   JSR Print_CR
4d91 20 0a 56           JSR Print_Question_Mark
4d94 a0 00              LDY #0
4d96 b1 26    BAER_40   LDA (INDEXB),Y
4d98 48                 PHA
4d99 29 7f              AND #$7f
4d9b 20 0c 56           JSR Print_Char      ; print error message
4d9e c8                 INY
4d9f 68                 PLA
4da0 10 f4              BPL BAER_40
4da2 20 38 52           JSR Init_BASIC_Stack
4da5 20 81 92           JSR B_PRIMM
4da8 20 45 52           .BYTE " ERROR",0    ; append "ERROR" to message
4daf a4 3c    BAER_50   LDY CURLIN+1
4db1 c8                 INY
4db2 f0 03              BEQ BAER_60
4db4 20 26 8e           JSR Print_IN_CURLIN ; print current line number
4db7 20 2a 4d BAER_60   JSR Print_Ready     ; print prompt
4dba a9 80              LDA #$80
4dbc 20 90 ff           JSR K_SETMSG
4dbf a9 00              LDA #0
4dc1 85 7f              STA RUNMOD          ; return to direct mode
4dc3 6c 02 03 BAER_70   JMP (IMAIN)         ; default: DEF_MAIN

              ; ****************
4dc6            DEF_MAIN ; $4dc6
              ; ****************

4dc6 a2 ff              LDX #$ff
4dc8 86 3c              STX CURLIN+1        ; invalidate CURLIN
4dca 20 93 4f           JSR Read_String

4dcd 86 3d    MAIN_02   STX TXTPTR          ; (TXTPTR) := BUF-1
4dcf 84 3e              STY TXTPTR+1
4dd1 20 80 03           JSR CHRGET          ; get 1st. char
4dd4 aa                 TAX

4dd5 f0 ec    MAIN_04   BEQ BAER_70         ; no input: loop
4dd7 90 09              BCC MAIN_06         ; -> got number
4dd9 20 0a 43           JSR CRUNCH          ; tokenize
4ddc 20 86 03           JSR CHRGOT          ; get 1st. char
4ddf 4c f3 4a           JMP Inter_50        ; execute direct

4de2 20 a0 50 MAIN_06   JSR Scan_Linenumber
4de5 20 0a 43           JSR CRUNCH
4de8 84 0d              STY B_COUNT
4dea 20 64 50           JSR Search_BASIC_Line
4ded 90 7b              BCC MAIN_18         ; -> not found
4def a0 00              LDY #0
4df1 20 ec 42           JSR Get_LOWTR_0     ; link low of current line
4df4 38                 SEC
4df5 e5 61              SBC LOWTR           ; subtract current address
4df7 38                 SEC
4df8 e9 04              SBC #4              ; subtract 4 for link & number
4dfa e5 0d              SBC B_COUNT         ; subtract new length
4dfc b0 1c              BCS MAIN_12         ; continue with high byte
4dfe 49 ff              EOR #$ff
4e00 69 01              ADC #1
4e02 ac 11 12           LDY TEXT_TOP+1      ; Y = old TEXT_TOP high
4e05 6d 10 12           ADC TEXT_TOP        ; A = new TEXT_TOP low
4e08 90 01              BCC MAIN_08
4e0a c8                 INY                 ; Y = new TEXT_TOP high
4e0b cc 13 12 MAIN_08   CPY TEXT_MAX+1     ; test for Out Of Memory
4e0e 90 0a              BCC MAIN_12
4e10 d0 05              BNE MAIN_10
4e12 cd 12 12           CMP TEXT_MAX
4e15 90 03              BCC MAIN_12
4e17 4c 3a 4d MAIN_10   JMP OOM_Error

4e1a a0 01    MAIN_12   LDY #1
4e1c 20 ec 42           JSR Get_LOWTR_0     ; link high of current line
4e1f 85 25              STA INDEXA+1
4e21 ad 10 12           LDA TEXT_TOP
4e24 85 24              STA INDEXA          ; (INDEXA) = read pointer
4e26 a5 62              LDA LOWTR+1
4e28 85 27              STA INDEXB+1
4e2a 88                 DEY
4e2b 20 ec 42           JSR Get_LOWTR_0
4e2e 18                 CLC
4e2f e5 61              SBC LOWTR
4e31 49 ff              EOR #%1111 1111 ; $ff
4e33 18                 CLC
4e34 6d 10 12           ADC TEXT_TOP
4e37 8d 10 12           STA TEXT_TOP
4e3a 85 26              STA INDEXB          ; (INDEXB) = write pointer
4e3c ad 11 12           LDA TEXT_TOP+1
4e3f 69 ff              ADC #$ff
4e41 8d 11 12           STA TEXT_TOP+1
4e44 e5 62              SBC LOWTR+1
4e46 aa                 TAX
4e47 38                 SEC
4e48 a5 61              LDA LOWTR
4e4a ed 10 12           SBC TEXT_TOP
4e4d a8                 TAY
4e4e b0 03              BCS MAIN_14
4e50 e8                 INX                 ; X = number of blocks to move
4e51 c6 27              DEC INDEXB+1
4e53 18       MAIN_14   CLC
4e54 65 24              ADC INDEXA
4e56 90 03              BCC MAIN_16
4e58 c6 25              DEC INDEXA+1
4e5a 18                 CLC

4e5b 20 05 43 MAIN_16   JSR Get_INDEXA_0    ; delete current line
4e5e 91 26              STA (INDEXB),Y      ; by moving upper part of program down
4e60 c8                 INY
4e61 d0 f8              BNE MAIN_16
4e63 e6 25              INC INDEXA+1
4e65 e6 27              INC INDEXB+1
4e67 ca                 DEX
4e68 d0 f1              BNE MAIN_16

              ;         Insert new BASIC line from buffer

4e6a 20 38 52 MAIN_18   JSR Init_BASIC_Stack
4e6d 20 4f 4f           JSR Relink
4e70 a0 00              LDY #0
4e72 b1 3d              LDA (TXTPTR),Y
4e74 d0 03              BNE MAIN_20
4e76 4c d5 4d           JMP MAIN_04         ; -> nothing to insert
4e79 18       MAIN_20   CLC
4e7a ad 10 12           LDA TEXT_TOP
4e7d ac 11 12           LDY TEXT_TOP+1
4e80 85 5c              STA HIGHTR          ; (HIGHTR) = (TEXT_TOP)
4e82 84 5d              STY HIGHTR+1
4e84 65 0d              ADC B_COUNT         ; length of new line
4e86 90 01              BCC MAIN_22
4e88 c8                 INY
4e89 18       MAIN_22   CLC
4e8a 69 04              ADC #4              ; plus link & number
4e8c 90 01              BCC MAIN_24
4e8e c8                 INY
4e8f 85 5a    MAIN_24   STA ARYPNT          ; (ARYPNT) = new TEXT_TOP
4e91 84 5b              STY ARYPNT+1
4e93 cc 13 12           CPY TEXT_MAX+1     ; check for OOM
4e96 90 0a              BCC MAIN_28
4e98 d0 05              BNE MAIN_26
4e9a cd 12 12           CMP TEXT_MAX
4e9d 90 03              BCC MAIN_28
4e9f 4c 3a 4d MAIN_26   JMP OOM_Error

4ea2 8d 10 12 MAIN_28   STA TEXT_TOP        ; update TEXT_TOP
4ea5 8c 11 12           STY TEXT_TOP+1
4ea8 38                 SEC
4ea9 a5 5c              LDA HIGHTR
4eab e5 61              SBC LOWTR
4ead 85 24              STA INDEXA
4eaf a8                 TAY
4eb0 a5 5d              LDA HIGHTR+1
4eb2 e5 62              SBC LOWTR+1
4eb4 aa                 TAX
4eb5 e8                 INX
4eb6 98                 TYA
4eb7 f0 25              BEQ MAIN_36
4eb9 a5 5c              LDA HIGHTR
4ebb 38                 SEC
4ebc e5 24              SBC INDEXA
4ebe 85 5c              STA HIGHTR
4ec0 b0 03              BCS MAIN_30
4ec2 c6 5d              DEC HIGHTR+1
4ec4 38                 SEC
4ec5 a5 5a    MAIN_30   LDA ARYPNT
4ec7 e5 24              SBC INDEXA
4ec9 85 5a              STA ARYPNT
4ecb b0 09              BCS MAIN_34
4ecd c6 5b              DEC ARYPNT+1
4ecf 90 05              BCC MAIN_34

              ;          make room for new line

4ed1 20 dd 42 MAIN_32   JSR Get_HIGHTR_0
4ed4 91 5a              STA (ARYPNT),Y
4ed6 88       MAIN_34   DEY
4ed7 d0 f8              BNE MAIN_32
4ed9 20 dd 42           JSR Get_HIGHTR_0
4edc 91 5a              STA (ARYPNT),Y
4ede c6 5d    MAIN_36   DEC HIGHTR+1
4ee0 c6 5b              DEC ARYPNT+1
4ee2 ca                 DEX                 ; blocks to move
4ee3 d0 f1              BNE MAIN_34

              ;          insert new line from buffer

4ee5 a0 00              LDY #0
4ee7 a9 01              LDA #1
4ee9 91 61              STA (LOWTR),Y       ; Y=0: dummy link low
4eeb c8                 INY
4eec 91 61              STA (LOWTR),Y       ; Y=1: dummy link high
4eee c8                 INY
4eef a5 16              LDA LINNUM
4ef1 91 61              STA (LOWTR),Y       ; Y=2: line # low
4ef3 a5 17              LDA LINNUM+1
4ef5 c8                 INY
4ef6 91 61              STA (LOWTR),Y       ; Y=3: line # high
4ef8 18                 CLC
4ef9 a5 61              LDA LOWTR
4efb 69 04              ADC #4
4efd 85 61              STA LOWTR
4eff 90 02              BCC MAIN_38
4f01 e6 62              INC LOWTR+1         ; (LOWTR) += 4
4f03 a4 0d    MAIN_38   LDY B_COUNT         ; length of new line
4f05 88                 DEY
4f06 b1 3d    MAIN_40   LDA (TXTPTR),Y      ; from BUF
4f08 91 61              STA (LOWTR),Y       ; to program
4f0a 88                 DEY
4f0b c0 ff              CPY #$ff
4f0d d0 f7              BNE MAIN_40

4f0f 20 4f 4f           JSR Relink
4f12 20 54 52           JSR Reset_TXTPTR
4f15 a5 74              LDA AUTINC
4f17 05 75              ORA AUTINC+1
4f19 f0 31              BEQ MAIN_46         ; -> no AUTO increment active
4f1b a5 16              LDA LINNUM
4f1d 18                 CLC
4f1e 65 74              ADC AUTINC
4f20 85 65              STA FAC1_M2
4f22 a5 17              LDA LINNUM+1
4f24 65 75              ADC AUTINC+1
4f26 b0 24              BCS MAIN_46
4f28 c9 fa              CMP #$fa            ; check for overflow 64000
4f2a b0 20              BCS MAIN_46
4f2c 85 64              STA FAC1_M1
4f2e a2 90              LDX #$90
4f30 38                 SEC
4f31 20 75 8c           JSR Word_To_FAC1
4f34 20 42 8e           JSR Format_FAC1     ; write new number to STACK
4f37 a2 00              LDX #0
4f39 bd 01 01 MAIN_42   LDA STACK+1,X       ; insert new number into keyboard buffer
4f3c f0 06              BEQ MAIN_44
4f3e 9d 4a 03           STA KEYD,X
4f41 e8                 INX
4f42 d0 f5              BNE MAIN_42
4f44 a9 1d    MAIN_44   LDA #$1d            ; add cursor right
4f46 9d 4a 03           STA KEYD,X
4f49 e8                 INX
4f4a 86 d0              STX NDX             ; update length of keyboard buffer
4f4c 4c c3 4d MAIN_46   JMP BAER_70


              ; Relink the BASIC program in bank 0 starting at (TXTTAB)
              ; The default value for the start adddress TXTTAB is $1c00
              ; This routine is called after loading a program and from
              ; the editor after insert or modify or delete operations.

              ; **************
4f4f            Relink ; $4f4f
              ; **************

4f4f a5 2d              LDA TXTTAB
4f51 a4 2e              LDY TXTTAB+1
4f53 85 24              STA INDEXA
4f55 84 25              STY INDEXA+1        ; (INDEXA) = start of program
4f57 18                 CLC
4f58 a0 00    Reli_10   LDY #0
4f5a 20 05 43           JSR Get_INDEXA_0    ; old link low
4f5d d0 06              BNE Reli_20
4f5f c8                 INY
4f60 20 05 43           JSR Get_INDEXA_0    ; old link high
4f63 f0 2d              BEQ Reli_Ret        ; finish for zero link
4f65 a0 04    Reli_20   LDY #4
4f67 c8       Reli_30   INY                 ; start with Y = 5
4f68 20 05 43           JSR Get_INDEXA_0
4f6b d0 fa              BNE Reli_30         ; loop until end of line
4f6d c8                 INY                 ; Y = length of line
4f6e 98                 TYA
4f6f 65 24              ADC INDEXA
4f71 aa                 TAX                 ; X = new link low
4f72 a0 00              LDY #0              ; Y = 0
4f74 91 24              STA (INDEXA),Y      ; update link low
4f76 98                 TYA                 ; A = 0
4f77 65 25              ADC INDEXA+1        ; A = new link high
4f79 c8                 INY                 ; Y = 1
4f7a 91 24              STA (INDEXA),Y      ; update link high
4f7c 86 24              STX INDEXA
4f7e 85 25              STA INDEXA+1        ; (INDEXA) = next line
4f80 90 d6              BCC Reli_10         ; branch always

              ; ********************
4f82            Set_TEXT_TOP ; $4f82
              ; ********************

4f82 18                 CLC
4f83 a5 24              LDA INDEXA
4f85 a4 25              LDY INDEXA+1
4f87 69 02              ADC #2
4f89 90 01              BCC STT_10
4f8b c8                 INY
4f8c 8d 10 12 STT_10    STA TEXT_TOP
4f8f 8c 11 12           STY TEXT_TOP+1
4f92 60       Reli_Ret  RTS ;Size   17 [Set_TEXT_TOP]

              ; *******************
4f93            Read_String ; $4f93
              ; *******************

4f93 a2 00              LDX #0
4f95 20 e5 90 ReaS_10   JSR CHRIN
4f98 c9 0d              CMP #CR
4f9a d0 03              BNE ReaS_20
4f9c 4c 8b 55           JMP Terminate_BUF
4f9f 9d 00 02 ReaS_20   STA BUF,X
4fa2 e8                 INX
4fa3 e0 a1              CPX #161            ; max. 2 lines at 80 characters each
4fa5 90 ee              BCC ReaS_10
4fa7 4c ed a5           JMP String_Too_Long

              ; FOR structure on BASIC stack
              ; ============================

              ;  0 : 81        loop marker (FOR token)
              ;  1 : FORPNT    address of index variable
              ;  2 : FORPNT+1

              ; ***************************
4faa            Find_Token_On_Stack ; $4faa
              ; ***************************

4faa 85 02              STA BANK            ; store search token
4fac 20 47 50           JSR Init_FNDPNT     ; (FNDPNT) = (TOS) = $09ff
4faf a5 3f    FTOS_10   LDA FNDPNT
4fb1 c9 ff              CMP #<[BASIC_STACK + $1ff]
4fb3 d0 06              BNE FTOS_20
4fb5 a5 40              LDA FNDPNT+1
4fb7 c9 09              CMP #>[BASIC_STACK + $1ff]
4fb9 f0 40              BEQ FTOS_60         ; -> stack is empty
4fbb 8d 03 ff FTOS_20   STA MMU_LCRC
4fbe a0 00              LDY #0
4fc0 a5 02              LDA BANK            ; search token
4fc2 c9 81              CMP #$81            ; FOR token
4fc4 d0 1b              BNE FTOS_40         ; -> not FOR token
4fc6 d1 3f              CMP (FNDPNT),Y      ; loop marker ?
4fc8 d0 33              BNE FTOS_Ret
4fca a0 02              LDY #2
4fcc a5 4c              LDA FORPNT+1
4fce c9 ff              CMP #$ff
4fd0 f0 2b              BEQ FTOS_Ret        ; -> invalid address of (FORPNT)
4fd2 d1 3f              CMP (FNDPNT),Y
4fd4 d0 07              BNE FTOS_30         ; -> index variables do not match
4fd6 88                 DEY
4fd7 a5 4b              LDA FORPNT
4fd9 d1 3f              CMP (FNDPNT),Y
4fdb f0 20              BEQ FTOS_Ret        ; -> Found valid FOR structure
4fdd a2 12    FTOS_30   LDX #$12            ; length of FOR structure
4fdf d0 0e              BNE FTOS_50         ; branch always

4fe1 b1 3f    FTOS_40   LDA (FNDPNT),Y
4fe3 c5 02              CMP BANK
4fe5 f0 16              BEQ FTOS_Ret        ; Found token on stack
4fe7 a2 12              LDX #$12            ; length of FOR structure
4fe9 c9 81              CMP #$81            ; looking for FOR ?
4feb f0 02              BEQ FTOS_50
4fed a2 05              LDX #5              ; length of other structures
4fef 8a       FTOS_50   TXA
4ff0 18                 CLC
4ff1 65 3f              ADC FNDPNT          ; move FNDPNT to next structure
4ff3 85 3f              STA FNDPNT
4ff5 90 b8              BCC FTOS_10
4ff7 e6 40              INC FNDPNT+1
4ff9 d0 b4              BNE FTOS_10         ; branch always
4ffb a0 01    FTOS_60   LDY #1              ; Z=0 : not found
4ffd 60       FTOS_Ret  RTS                 ; Z=1 : found ;Size   84 [Find_Token_On_Stack]

              ; ***************
4ffe            SUB_TOS ; $4ffe
              ; ***************

              ; Input : (A) = value to subtract from stack pointer TOS

4ffe 49 ff              EOR #$ff
5000 38                 SEC
5001 65 7d              ADC TOS
5003 85 7d              STA TOS
5005 a4 7e              LDY TOS+1
5007 b0 01              BCS SUTO_10
5009 88                 DEY
500a 84 7e    SUTO_10   STY TOS+1
500c c0 08              CPY #8
500e 90 34              BCC CMA_OOM
5010 d0 04              BNE SUTO_Ret
5012 c5 7d              CMP TOS
5014 90 2e              BCC CMA_OOM
5016 60       SUTO_Ret  RTS ;Size   25 [SUB_TOS]

              ; ***********************
5017            Check_Mem_Avail ; $5017
              ; ***********************

              ; Input:  A = new top of variables low
              ;         Y = new top of variables high
              ; Return if OK
              ; Jump to OOM error if not

5017 c4 36              CPY FRETOP+1
5019 90 28              BCC CMA_40
501b d0 04              BNE CMA_10
501d c5 35              CMP FRETOP
501f 90 22              BCC CMA_40
5021 48       CMA_10    PHA
5022 a2 09              LDX #9              ; push $59 - $62
5024 98                 TYA
5025 48       CMA_20    PHA
5026 b5 59              LDA FACTPA,X
5028 ca                 DEX
5029 10 fa              BPL CMA_20
502b 20 ea 92           JSR Garbage_Collection
502e a2 f7              LDX #$f7
5030 68       CMA_30    PLA
5031 95 63              STA FAC1_EX,X       ; pull $59 - $62
5033 e8                 INX
5034 30 fa              BMI CMA_30
5036 68                 PLA
5037 a8                 TAY
5038 68                 PLA
5039 c4 36              CPY FRETOP+1
503b 90 06              BCC CMA_40
503d d0 05              BNE CMA_OOM
503f c5 35              CMP FRETOP
5041 b0 01              BCS CMA_OOM
5043 60       CMA_40    RTS ;Size   45 [Check_Mem_Avail]
5044 4c 3a 4d CMA_OOM   JMP OOM_Error

              ; *******************
5047            Init_FNDPNT ; $5047
              ; *******************

5047 a5 7d              LDA TOS
5049 85 3f              STA FNDPNT
504b a5 7e              LDA TOS+1
504d 85 40              STA FNDPNT+1
504f 60                 RTS ;Size    9 [Init_FNDPNT]

              ; ******************
5050            Update_TOS ; $5050
              ; ******************

5050 a5 3f              LDA FNDPNT
5052 85 7d              STA TOS
5054 a5 40              LDA FNDPNT+1
5056 85 7e              STA TOS+1
5058 60                 RTS ;Size    9 [Update_TOS]

              ; ****************
5059            Free_TOS ; $5059
              ; ****************

5059 98                 TYA
505a 18                 CLC
505b 65 7d              ADC TOS
505d 85 7d              STA TOS
505f 90 02              BCC FreT_Ret
5061 e6 7e              INC TOS+1
5063 60       FreT_Ret  RTS ;Size   11 [Free_TOS]

              ; *************************
5064            Search_BASIC_Line ; $5964
              ; *************************

5064 a5 2d              LDA TXTTAB
5066 a6 2e              LDX TXTTAB+1

              ; *****************************************
5068            Find_LINNUM_AX ; $5068 - original ; $5068
              ; *****************************************

5068 a0 01              LDY #1
506a 85 61              STA LOWTR
506c 86 62              STX LOWTR+1
506e 20 ec 42           JSR Get_LOWTR_0     ; link high
5071 f0 2b              BEQ SBL_30
5073 c8                 INY                 ; Y = 2
5074 c8                 INY                 ; Y = 3
5075 20 ec 42           JSR Get_LOWTR_0     ; # high
5078 85 79              STA SYNTMP
507a a5 17              LDA LINNUM+1
507c c5 79              CMP SYNTMP
507e 90 1f              BCC SBL_Ret         ; beyond # -> not found
5080 f0 03              BEQ SBL_10          ; high bytes match: -> continue
5082 88                 DEY                 ; Y = 2
5083 d0 0e              BNE SBL_20          ; branch always
5085 88       SBL_10    DEY                 ; Y = 2
5086 20 ec 42           JSR Get_LOWTR_0     ; # low
5089 85 79              STA SYNTMP
508b a5 16              LDA LINNUM
508d c5 79              CMP SYNTMP
508f 90 0e              BCC SBL_Ret         ; beyond # -> not found
5091 f0 0c              BEQ SBL_Ret         ; -> found
5093 88       SBL_20    DEY                 ; Y = 1
5094 20 ec 42           JSR Get_LOWTR_0     ; link high
5097 aa                 TAX
5098 88                 DEY                 ; Y = 0
5099 20 ec 42           JSR Get_LOWTR_0     ; link low
509c b0 ca              BCS Find_LINNUM_AX  ; brnach always
509e 18       SBL_30    CLC                 ; C=0 : not found
509f 60       SBL_Ret   RTS ;Size   56 [Find_LINNUM_AX]

              ; ***********************
50a0            Scan_Linenumber ; $50a0
              ; ***********************

50a0 a2 00              LDX #0
50a2 86 0a              STX ENDCHR
50a4 86 16              STX LINNUM
50a6 86 17              STX LINNUM+1
50a8 b0 37    ScLi_10   BCS ScLi_Ret
50aa e6 0a              INC ENDCHR
50ac e9 2f              SBC #$2f ; '/'
50ae 85 09              STA CHARAC
50b0 a5 17              LDA LINNUM+1
50b2 85 24              STA INDEXA
50b4 c9 19              CMP #$19
50b6 90 03              BCC ScLi_20
50b8 4c 6c 79           JMP SYNTAX_ERROR
50bb a5 16    ScLi_20   LDA LINNUM
50bd 0a                 ASL A
50be 26 24              ROL INDEXA
50c0 0a                 ASL A
50c1 26 24              ROL INDEXA
50c3 65 16              ADC LINNUM
50c5 85 16              STA LINNUM
50c7 a5 24              LDA INDEXA
50c9 65 17              ADC LINNUM+1
50cb 85 17              STA LINNUM+1
50cd 06 16              ASL LINNUM
50cf 26 17              ROL LINNUM+1
50d1 a5 16              LDA LINNUM
50d3 65 09              ADC CHARAC
50d5 85 16              STA LINNUM
50d7 90 02              BCC ScLi_30
50d9 e6 17              INC LINNUM+1
50db 20 80 03 ScLi_30   JSR CHRGET
50de 4c a8 50           JMP ScLi_10
50e1 60       ScLi_Ret  RTS ;Size   66 [Scan_Linenumber]

              ; ******************
50e2            BASIC_LIST ; $50e2
              ; ******************

50e2 20 fb 5e           JSR Get_Line_Range
50e5 a0 01    LIST_10   LDY #1              ; Y = 1
50e7 20 ec 42           JSR Get_LOWTR_0     ; link high
50ea d0 06              BNE LIST_20
50ec 88                 DEY                 ; Y = 0
50ed 20 ec 42           JSR Get_LOWTR_0     ; link low
50f0 f0 2e              BEQ LIST_50         ; zero link: -> finish
50f2 20 b5 4b LIST_20   JSR Is_STOP_Key     ; check STOP key
50f5 20 98 55           JSR Print_CR        ; start listing with newline
50f8 a0 02              LDY #2              ; Y = 2
50fa 20 ec 42           JSR Get_LOWTR_0     ; line # low
50fd aa                 TAX
50fe c8                 INY                 ; Y = 3
50ff 20 ec 42           JSR Get_LOWTR_0     ; line # high
5102 c5 17              CMP LINNUM+1        ; compare with end value
5104 d0 04              BNE LIST_30
5106 e4 16              CPX LINNUM
5108 f0 02              BEQ LIST_40
510a b0 14    LIST_30   BCS LIST_50         ; line # > end -> finish
510c 20 23 51 LIST_40   JSR List_Line
510f a0 00              LDY #0              ; Y = 0
5111 20 ec 42           JSR Get_LOWTR_0     ; link low
5114 aa                 TAX
5115 c8                 INY                 ; Y = 1
5116 20 ec 42           JSR Get_LOWTR_0     ; link high
5119 86 61              STX LOWTR           ; set link to next line
511b 85 62              STA LOWTR+1
511d 4c e5 50           JMP LIST_10         ; continue with next line
5120 4c 98 55 LIST_50   JMP Print_CR        ; LIST finished

              ; *****************
5123            List_Line ; $5123
              ; *****************

5123 a0 03              LDY #3
5125 84 4b              STY FORPNT
5127 84 11              STY GARBFL
5129 20 32 8e           JSR Print_Integer_XA
512c a9 20              LDA #' '
512e a4 4b    LiLi_10   LDY FORPNT
5130 29 7f              AND #$7f
5132 20 0c 56 LiLi_15   JSR Print_Char
5135 c9 22              CMP #QUOTE
5137 d0 06              BNE LiLi_20
5139 a5 11              LDA GARBFL
513b 49 ff              EOR #$ff
513d 85 11              STA GARBFL
513f c8       LiLi_20   INY
5140 f0 de              BEQ LIST_50
5142 24 55              BIT HELPER
5144 10 03              BPL LiLi_25
5146 20 ac 59           JSR At_Error_Position
5149 20 ec 42 LiLi_25   JSR Get_LOWTR_0
514c f0 3d              BEQ LiLi_60
514e 6c 06 03           JMP (IQPLOP)

              ; *****************
5151            DEF_QPLOP ; $5151
              ; *****************

5151 10 df              BPL LiLi_15
5153 c9 ff              CMP #PICHAR
5155 f0 db              BEQ LiLi_15
5157 24 11              BIT GARBFL
5159 30 d7              BMI LiLi_15
515b c9 fe              CMP #$fe            ; token group $fe..
515d f0 2d              BEQ LiLi_65
515f c9 ce              CMP #$ce            ; token group $ce..
5161 f0 43              BEQ LiLi_70
5163 aa                 TAX
5164 84 4b              STY FORPNT
5166 a9 44              LDA #>BASIC_Keytab_A
5168 a0 17              LDY #<BASIC_Keytab_A
516a 85 25    LiLi_30   STA INDEXA+1
516c 84 24              STY INDEXA
516e a0 00              LDY #0
5170 ca       LiLi_35   DEX
5171 10 0f              BPL LiLi_55
5173 b1 24    LiLi_40   LDA (INDEXA),Y
5175 48                 PHA
5176 e6 24              INC INDEXA
5178 d0 02              BNE LiLi_45
517a e6 25              INC INDEXA+1
517c 68       LiLi_45   PLA
517d 10 f4              BPL LiLi_40
517f 30 ef              BMI LiLi_35
5181 c8       LiLi_50   INY
5182 b1 24    LiLi_55   LDA (INDEXA),Y
5184 30 a8              BMI LiLi_10
5186 20 0c 56           JSR Print_Char
5189 d0 f6              BNE LiLi_50
518b 60       LiLi_60   RTS ;Size   59 [DEF_QPLOP]
518c aa       LiLi_65   TAX
518d c8                 INY
518e 20 ec 42           JSR Get_LOWTR_0
5191 f0 9f              BEQ LiLi_15
5193 84 4b              STY FORPNT
5195 c9 02              CMP #2
5197 90 27              BCC LiLi_75
5199 c9 27              CMP #APOSTR
519b b0 23              BCS LiLi_75
519d 69 7e              ADC #$7e
519f aa                 TAX
51a0 a0 09              LDY #<BASIC_Keytab_C
51a2 a9 46              LDA #>BASIC_Keytab_C
51a4 d0 c4              BNE LiLi_30
51a6 aa       LiLi_70   TAX
51a7 c8                 INY
51a8 20 ec 42           JSR Get_LOWTR_0
51ab f0 85              BEQ LiLi_15
51ad 84 4b              STY FORPNT
51af c9 02              CMP #2              ; from $ce02 (POT)
51b1 90 0d              BCC LiLi_75
51b3 c9 0b              CMP #11             ; to   $ce0a (POINTER)
51b5 b0 09              BCS LiLi_75
51b7 69 7e              ADC #$7e
51b9 aa                 TAX
51ba a0 c9              LDY #<BASIC_Keytab_D
51bc a9 46              LDA #>BASIC_Keytab_D
51be d0 aa              BNE LiLi_30
51c0 e0 fe    LiLi_75   CPX #$fe
51c2 d0 03              BNE LiLi_80
51c4 a2 00              LDX #0
51c6 2c                 BIT
51c7 a2 ff    LiLi_80   LDX #$ff
51c9 38                 SEC
51ca 6c 0e 03           JMP (IESCPR)

              ; *****************
51cd            DEF_ESCPR ; $51cd
              ; *****************

51cd b0 04              BCS LiLi_85
51cf a0 00              LDY #0
51d1 f0 af              BEQ LiLi_55         ; branch always
51d3 4c 32 51 LiLi_85   JMP LiLi_15

              ; *****************
51d6            BASIC_NEW ; $51d6
              ; *****************

51d6 f0 01              BEQ NEW_10
51d8 60                 RTS ;Size    3 [BASIC_NEW]

              ; **************
51d9            NEW_10 ; $51d9
              ; **************

51d9 a9 00              LDA #0
51db a8                 TAY
51dc 91 2d              STA (TXTTAB),Y      ; insert zero link
51de c8                 INY
51df 91 2d              STA (TXTTAB),Y
51e1 8d 6f 11           STA TRCFLG
51e4 a5 2d              LDA TXTTAB
51e6 18                 CLC
51e7 69 02              ADC #2
51e9 8d 10 12           STA TEXT_TOP        ; (TEXT_TOP) = (TXTTAB) + 2
51ec a5 2e              LDA TXTTAB+1
51ee 69 00              ADC #0
51f0 8d 11 12           STA TEXT_TOP+1

              ; *****************************
51f3            Reset_BASIC_Execution ; $51f3
              ; *****************************

51f3 20 54 52           JSR Reset_TXTPTR    ; (TXTPTR) = (TXTTAB) - 1
51f6 a9 00              LDA #0

              ; *****************
51f8            BASIC_CLR ; $51f8
              ; *****************

51f8 d0 55              BNE IBS_Ret

              ; *******************
51fa            Clear_BASIC ; $51fa
              ; *******************

51fa 20 7b 92           JSR B_CLALL
51fd a0 00              LDY #0
51ff 84 7a              STY DS_LEN
5201 88                 DEY
5202 8c 0c 12           STY TRAPNO+1
5205 8c 09 12           STY ERRLIN
5208 8c 0a 12           STY ERRLIN+1
520b 8c 08 12           STY ERRNUM
520e a5 39              LDA MEMSIZ
5210 a4 3a              LDY MEMSIZ+1
5212 85 35              STA FRETOP
5214 84 36              STY FRETOP+1
5216 a9 ff              LDA #<[BASIC_STACK + $1ff]
5218 a0 09              LDY #>[BASIC_STACK + $1ff]
521a 85 7d              STA TOS
521c 84 7e              STY TOS+1
521e a5 2f              LDA VARTAB
5220 a4 30              LDY VARTAB+1
5222 85 31              STA ARYTAB
5224 84 32              STY ARYTAB+1
5226 85 33              STA STREND
5228 84 34              STY STREND+1
522a a2 03              LDX #3
522c bd 50 52 ClrB_10   LDA PUCHARS,X
522f 9d 04 12           STA PU_FILL,X
5232 ca                 DEX
5233 10 f7              BPL ClrB_10
5235 20 e1 5a ClrB_20   JSR Reset_DATPTR

              ; ************************
5238            Init_BASIC_Stack ; $5238
              ; ************************

5238 a2 1b              LDX #$1b
523a 86 18              STX TEMPPT
523c 68                 PLA
523d a8                 TAY
523e 68                 PLA
523f a2 fa              LDX #$fa            ; reset stackpointer
5241 9a                 TXS
5242 48                 PHA
5243 98                 TYA
5244 48                 PHA
5245 a9 00              LDA #0
5247 8d 03 12           STA OLDTXT+1
524a 85 12              STA SUBFLG
524c 8d df 03           STA BITS
524f 60       IBS_Ret   RTS ;Size   24 [Init_BASIC_Stack]

              ; ***************
5250            PUCHARS ; $5250
              ; ***************

5250 20 2c 2e           .BYTE " ,.$"        ; PU_FILL, PU_COMMA, PU_DOT, PU_MONEY

              ; ********************
5254            Reset_TXTPTR ; $5254
              ; ********************

5254 18                 CLC
5255 a5 2d              LDA TXTTAB
5257 69 ff              ADC #$ff
5259 85 3d              STA TXTPTR
525b a5 2e              LDA TXTTAB+1
525d 69 ff              ADC #$ff
525f 85 3e              STA TXTPTR+1
5261 60                 RTS ;Size   14 [Reset_TXTPTR]

              ; ********************
5262            BASIC_RETURN ; $5262
              ; ********************

5262 68                 PLA
5263 68                 PLA
5264 a9 8d              LDA #$8d            ; RETURN token
5266 20 aa 4f           JSR Find_Token_On_Stack
5269 f0 05              BEQ RET_10
526b a2 0c              LDX #12             ; RETURN WITHOUT GOSUB
526d 4c 3c 4d           JMP Print_Error_X
5270 20 50 50 RET_10    JSR Update_TOS
5273 a0 05              LDY #5
5275 20 59 50           JSR Free_TOS
5278 88                 DEY
5279 b1 3f              LDA (FNDPNT),Y
527b 85 3e              STA TXTPTR+1
527d 88                 DEY
527e b1 3f              LDA (FNDPNT),Y
5280 85 3d              STA TXTPTR
5282 88                 DEY
5283 b1 3f              LDA (FNDPNT),Y
5285 20 3b a8           JSR To_Direct_Mode
5288 b1 3f              LDA (FNDPNT),Y
528a 85 3b              STA CURLIN
528c 4c 8f 52           JMP Skip_Statement     ; obsolete

              ; *****************************************
528f            Skip_Statement ; $528f BASIC_DATA ; $528f
              ; *****************************************

528f 20 a2 52           JSR Skip_To_EOS

              ; **********************************
5292            Add_Y_To_Execution_Pointer ; $5292
              ; **********************************

5292 98                 TYA
5293 18                 CLC
5294 65 3d              ADC TXTPTR
5296 85 3d              STA TXTPTR
5298 90 02              BCC AYEP_Ret
529a e6 3e              INC TXTPTR+1
529c 60       AYEP_Ret  RTS ;Size   11 [Add_Y_To_Execution_Pointer]

              ; *****************
529d            BASIC_REM ; $529d
              ; *****************

529d 20 a5 52           JSR End_Of_Line
52a0 f0 f0              BEQ Add_Y_To_Execution_Pointer

              ; *******************
52a2            Skip_To_EOS ; $52a2
              ; *******************

52a2 a2 3a              LDX #':'
52a4 2c                 BIT

              ; *******************
52a5            End_Of_Line ; $52a5
              ; *******************

52a5 a2 00              LDX #0
52a7 86 09              STX CHARAC
52a9 a0 00              LDY #0
52ab 84 0a              STY ENDCHR
52ad a5 0a    EOL_10    LDA ENDCHR
52af a6 09              LDX CHARAC
52b1 85 09              STA CHARAC
52b3 86 0a              STX ENDCHR
52b5 20 c9 03 EOL_20    JSR INDTXT
52b8 f0 e2              BEQ AYEP_Ret
52ba c5 0a              CMP ENDCHR
52bc f0 de              BEQ AYEP_Ret
52be c8                 INY
52bf c9 22              CMP #QUOTE
52c1 d0 f2              BNE EOL_20
52c3 f0 e8              BEQ EOL_10

              ; ****************
52c5            BASIC_IF ; $52c5
              ; ****************

52c5 20 ef 77           JSR Eval_Expression
52c8 20 86 03           JSR CHRGOT
52cb c9 89              CMP #$89            ; GOTO token
52cd f0 05              BEQ IF_10
52cf a9 a7              LDA #$a7            ; THEN token
52d1 20 5e 79           JSR Need_A
52d4 a5 63    IF_10     LDA FAC1_EX         ; IF clause != 0 (true) or 0 (false)
52d6 d0 26              BNE IF_30
52d8 20 86 03           JSR CHRGOT
52db c9 fe              CMP #$fe            ; token group $fe..
52dd d0 0b              BNE IF_20
52df c8                 INY
52e0 20 c9 03           JSR INDTXT
52e3 c9 18              CMP #$18            ; BEGIN token
52e5 d0 03              BNE IF_20
52e7 20 20 53           JSR Skip_To_BEND
52ea 20 8f 52 IF_20     JSR Skip_Statement
52ed a0 00              LDY #0
52ef 20 c9 03           JSR INDTXT
52f2 f0 a9              BEQ BASIC_REM       ; skip rest of line
52f4 20 80 03           JSR CHRGET
52f7 c9 d5              CMP #$d5            ; ELSE token
52f9 d0 ef              BNE IF_20
52fb 20 80 03           JSR CHRGET
52fe 20 86 03 IF_30     JSR CHRGOT
5301 f0 17              BEQ IF_50
5303 b0 03              BCS IF_40
5305 4c db 59           JMP BASIC_GOTO
5308 c9 fe    IF_40     CMP #$fe            ; token group $fe..
530a d0 0e              BNE IF_50
530c c8                 INY
530d 20 c9 03           JSR INDTXT
5310 c9 18              CMP #$18            ; BEGIN token
5312 d0 06              BNE IF_50
5314 20 80 03           JSR CHRGET
5317 20 80 03           JSR CHRGET
531a 20 86 03 IF_50     JSR CHRGOT
531d 4c 3f 4b           JMP Execute

              ; ********************
5320            Skip_To_BEND ; $5320
              ; ********************

5320 20 80 03           JSR CHRGET
5323 d0 27              BNE BEND_30
5325 c9 3a    BEND_10   CMP #':'
5327 f0 f7              BEQ Skip_To_BEND
5329 24 7f    BEND_20   BIT RUNMOD
532b 10 4a              BPL BEND_Err
532d a0 02              LDY #2
532f 20 c9 03           JSR INDTXT          ; link high
5332 f0 43              BEQ BEND_Err
5334 c8                 INY                 ; Y = 3
5335 20 c9 03           JSR INDTXT
5338 85 3b              STA CURLIN
533a c8                 INY                 ; Y = 4
533b 20 c9 03           JSR INDTXT
533e 85 3c              STA CURLIN+1
5340 98                 TYA
5341 18                 CLC
5342 65 3d              ADC TXTPTR          ; next line
5344 85 3d              STA TXTPTR
5346 90 d8              BCC Skip_To_BEND
5348 e6 3e              INC TXTPTR+1
534a d0 d4              BNE Skip_To_BEND
534c c9 22    BEND_30   CMP #QUOTE
534e d0 07              BNE BEND_40
5350 20 7c 53           JSR Skip_To_End_Of_String
5353 f0 d0              BEQ BEND_10
5355 d0 c9              BNE Skip_To_BEND
5357 c9 8f    BEND_40   CMP #$8f            ; REM token
5359 d0 06              BNE BEND_50
535b 20 9d 52           JSR BASIC_REM
535e 4c 29 53           JMP BEND_20
5361 c9 fe    BEND_50   CMP #$fe            ; $fe.. token ?
5363 d0 bb              BNE Skip_To_BEND
5365 20 80 03           JSR CHRGET
5368 c9 19              CMP #$19            ; $fe19 = BEND token
536a f0 0a              BEQ BEND_60
536c c9 18              CMP #$18            ; $fe18 = BEGIN token
536e d0 b0              BNE Skip_To_BEND
5370 20 20 53           JSR Skip_To_BEND    ; nested BEGIN .. BEND
5373 4c 20 53           JMP Skip_To_BEND
5376 60       BEND_60   RTS ;Size   87 [Skip_To_BEND]
5377 a2 25    BEND_Err  LDX #$25            ; BEND NOT FOUND
5379 4c 3c 4d           JMP Print_Error_X

              ; *****************************
537c            Skip_To_End_Of_String ; $537c
              ; *****************************

537c a0 00              LDY #0
537e e6 3d    SEOS_10   INC TXTPTR
5380 d0 02              BNE SEOS_20
5382 e6 3e              INC TXTPTR+1
5384 20 c9 03 SEOS_20   JSR INDTXT
5387 f0 07              BEQ SEOS_Ret
5389 c9 22              CMP #QUOTE
538b d0 f1              BNE SEOS_10
538d 4c 80 03           JMP CHRGET
5390 60       SEOS_Ret  RTS ;Size   21 [Skip_To_End_Of_String]

              ; ******************
5391            BASIC_ELSE ; $5391
              ; ******************

5391 c9 fe              CMP #$fe            ; $fe.. token ?
5393 d0 0b              BNE ELSE_10
5395 c8                 INY
5396 20 c9 03           JSR INDTXT
5399 c9 18              CMP #$18            ; BEGIN token
539b d0 03              BNE ELSE_10
539d 20 20 53           JSR Skip_To_BEND
53a0 4c 9d 52 ELSE_10   JMP BASIC_REM

              ; ****************
53a3            BASIC_ON ; $53a3
              ; ****************

53a3 20 f4 87           JSR Get_Byte_Var
53a6 48                 PHA
53a7 c9 8d              CMP #$8d            ; GOSUB
53a9 f0 07              BEQ ON_10
53ab c9 89              CMP #$89            ; GOTO
53ad f0 03              BEQ ON_10
53af 4c 6c 79           JMP SYNTAX_ERROR
53b2 c6 67    ON_10     DEC FAC1_M4         ; ON value
53b4 d0 04              BNE ON_20
53b6 68                 PLA
53b7 4c 59 4b           JMP Exec_05
53ba 20 80 03 ON_20     JSR CHRGET
53bd 20 a0 50           JSR Scan_Linenumber
53c0 c9 2c              CMP #','
53c2 f0 ee              BEQ ON_10           ; next target
53c4 68                 PLA
53c5 60                 RTS ;Size   35 [BASIC_ON]

              ; *****************
53c6            BASIC_LET ; $53c6
              ; *****************

53c6 20 af 7a           JSR Parse_Name
53c9 85 4b              STA FORPNT
53cb 84 4c              STY FORPNT+1
53cd a9 b2              LDA #$b2            ; '=' token
53cf 20 5e 79           JSR Need_A
53d2 a5 10              LDA INTFLG          ; save attributes
53d4 48                 PHA                 ; of variable
53d5 a5 0f              LDA VALTYP
53d7 48                 PHA
53d8 20 ef 77           JSR Eval_Expression ; FAC1 = value or pointer
53db 68                 PLA                 ; VALTYP
53dc 2a                 ROL A               ; C=1 : string   C=0 : numeric
53dd 20 de 77           JSR Check_Var_Type
53e0 d0 22              BNE LET_20          ; branch for string
53e2 68                 PLA                 ; INTFLG

              ; *******************************
53e3            Assign_Numeric_Variable ; $53e3
              ; *******************************

53e3 10 15              BPL LET_10          ; branch for real
53e5 20 47 8c           JSR Round_FAC1
53e8 20 b4 84           JSR Real_To_Integer
53eb a0 00              LDY #0
53ed a5 66              LDA FAC1_M3
53ef 8d 04 ff           STA MMU_LCRD        ; write to RAM 1
53f2 91 4b              STA (FORPNT),Y      ; integer high byte
53f4 c8                 INY
53f5 a5 67              LDA FAC1_M4
53f7 91 4b              STA (FORPNT),Y      ; integer low  byte
53f9 60                 RTS ;Size   23 [Assign_Numeric_Variable]

53fa a6 4b    LET_10    LDX FORPNT
53fc a4 4c              LDY FORPNT+1
53fe 8d 04 ff           STA MMU_LCRD        ; select RAM1
5401 4c 00 8c           JMP FAC1_To_XY      ; (FORPNT) := FAC1

5404 68       LET_20    PLA                 ; INTFLG

              ; ******************************
5405            Assign_String_Variable ; $5405
              ; ******************************

5405 a4 4c              LDY FORPNT+1
5407 c0 03              CPY #3              ; void string descriptor for TI$
5409 d0 72              BNE Assign_Normal_String
540b 20 81 87           JSR Free_String_FAC1
540e c9 06              CMP #6              ; setting TI$ requires 6 digits
5410 d0 3e              BNE CLOCK_ERR
5412 a0 00              LDY #0              ; FAC1 = 0.0
5414 84 63              STY FAC1_EX
5416 84 68              STY FAC1_SI
5418 84 72    CLOCK_10  STY STRNG2
541a 20 48 54           JSR Add_TI_String_Digit_To_FAC1
541d 20 17 8b           JSR Multiply_FAC1_BY_10
5420 e6 72              INC STRNG2
5422 a4 72              LDY STRNG2
5424 20 48 54           JSR Add_TI_String_Digit_To_FAC1
5427 20 38 8c           JSR FAC1_Round_And_Copy_To_FAC2
542a aa                 TAX
542b f0 05              BEQ CLOCK_20
542d e8                 INX
542e 8a                 TXA                 ; FAC2 *= 2
542f 20 22 8b           JSR Add_And_Double  ; FAC1  = (FAC1 + FAC2) * 2
5432 a4 72    CLOCK_20  LDY STRNG2
5434 c8                 INY
5435 c0 06              CPY #6
5437 d0 df              BNE CLOCK_10
5439 20 17 8b           JSR Multiply_FAC1_BY_10
543c 20 c7 8c           JSR FAC1_INT
543f a6 66              LDX FAC1_M3
5441 a4 65              LDY FAC1_M2
5443 a5 67              LDA FAC1_M4
5445 4c db ff           JMP K_SETTIM

              ; ***********************************
5448            Add_TI_String_Digit_To_FAC1 ; $5448
              ; ***********************************

5448 20 b7 03           JSR Get_INDEXA_1
544b 20 90 03           JSR ISNUM
544e 90 03              BCC ATSD_20
5450 4c 28 7d CLOCK_ERR JMP Error_Illegal_Quantity

5453 e9 2f    ATSD_20   SBC #$2f            ; subtract "0" (C=0)
5455 4c b0 8d           JMP Add_A_To_FAC1

5458 68       ANS_10    PLA
5459 c8                 INY
545a c5 36    ANS_20    CMP FRETOP+1        ; address < FRETOP ?
545c 90 18              BCC ANS_40
545e d0 08              BNE ANS_30
5460 88                 DEY
5461 20 e7 42           JSR Get_FAC1_M3_1
5464 c5 35              CMP FRETOP
5466 90 0e              BCC ANS_40
5468 a4 67    ANS_30    LDY FAC1_M4
546a c4 30              CPY VARTAB+1
546c 90 08              BCC ANS_40
546e d0 24              BNE Assing_String_From_Variable
5470 a5 66              LDA FAC1_M3
5472 c5 2f              CMP VARTAB
5474 b0 1e              BCS Assing_String_From_Variable
5476 a5 66    ANS_40    LDA FAC1_M3         ; static string
5478 a4 67              LDY FAC1_M4
547a 4c b2 54           JMP ANS_50

              ; ****************************
547d            Assign_Normal_String ; $547d
              ; ****************************

547d a0 02              LDY #2
547f 20 e7 42           JSR Get_FAC1_M3_1
5482 c5 7c              CMP DS_ADR+1
5484 d0 d4              BNE ANS_20
5486 48                 PHA
5487 88                 DEY
5488 20 e7 42           JSR Get_FAC1_M3_1
548b c5 7b              CMP DS_ADR
548d d0 c9              BNE ANS_10
548f a5 7a              LDA DS_LEN
5491 f0 c5              BEQ ANS_10          ; -> DS$ undefined
5493 68                 PLA

              ; ***********************************
5494            Assing_String_From_Variable ; $5494
              ; ***********************************

5494 a0 00              LDY #0
5496 20 e7 42           JSR Get_FAC1_M3_1
5499 20 88 86           JSR Allocate_String_FAC1
549c a5 52              LDA DSCPNT
549e a4 53              LDY DSCPNT+1
54a0 85 70              STA STRPTR
54a2 84 71              STY STRPTR+1
54a4 20 4e 87           JSR Store_String_STRPTR
54a7 a5 70              LDA STRPTR
54a9 a4 71              LDY STRPTR+1
54ab 20 e0 87           JSR Pop_Descriptor_Stack
54ae a9 63              LDA #<FAC1_EX
54b0 a0 00              LDY #>FAC1_EX

54b2 85 52    ANS_50    STA DSCPNT
54b4 84 53              STY DSCPNT+1
54b6 85 24              STA INDEXA
54b8 84 25              STY INDEXA+1
54ba 20 e0 87           JSR Pop_Descriptor_Stack
54bd 20 f6 54           JSR Back_Reference_Position
54c0 90 0e              BCC ANS_60
54c2 a0 00              LDY #0
54c4 a5 4b              LDA FORPNT
54c6 8d 04 ff           STA MMU_LCRD
54c9 91 24              STA (INDEXA),Y
54cb c8                 INY
54cc a5 4c              LDA FORPNT+1
54ce 91 24              STA (INDEXA),Y
54d0 a5 4b    ANS_60    LDA FORPNT
54d2 85 24              STA INDEXA
54d4 a5 4c              LDA FORPNT+1
54d6 85 25              STA INDEXA+1
54d8 20 f6 54           JSR Back_Reference_Position
54db 90 0c              BCC ANS_70
54dd 88                 DEY
54de a9 ff              LDA #$ff
54e0 8d 04 ff           STA MMU_LCRD
54e3 91 24              STA (INDEXA),Y
54e5 88                 DEY
54e6 8a                 TXA
54e7 91 24              STA (INDEXA),Y
54e9 a0 02    ANS_70    LDY #2
54eb a9 52    ANS_80    LDA #$52 ; 'R'
54ed 20 ab 03           JSR Fetch_1
54f0 91 4b              STA (FORPNT),Y
54f2 88                 DEY
54f3 10 f6              BPL ANS_80
54f5 60                 RTS ;Size   98 [Assing_String_From_Variable]

              ; *******************************
54f6            Back_Reference_Position ; $54f6
              ; *******************************

              ; Input:  INDEXA = pointer to string descriptor
              ; Output: INDEXA = points to address after string
              ;         X = length of string
              ;         C = 1 : INDEXA set
              ;         C = 0 : nothing changed

54f6 a0 00              LDY #0
54f8 20 b7 03           JSR Get_INDEXA_1        ; A = length
54fb 48                 PHA                 ; push length
54fc f0 39              BEQ BRP_50
54fe c8                 INY
54ff 20 b7 03           JSR Get_INDEXA_1
5502 aa                 TAX                 ; X = pointer low
5503 c8                 INY
5504 20 b7 03           JSR Get_INDEXA_1        ; A = pointer high
5507 c5 3a              CMP MEMSIZ+1
5509 90 06              BCC BRP_10
550b d0 2a              BNE BRP_50
550d e4 39              CPX MEMSIZ       ; return for addr >= MEMTOP
550f b0 26              BCS BRP_50
5511 20 b7 03 BRP_10    JSR Get_INDEXA_1
5514 c5 36              CMP FRETOP+1
5516 90 1f              BCC BRP_50
5518 d0 04              BNE BRP_20
551a e4 35              CPX FRETOP          ; return for addr < FRETOP
551c 90 19              BCC BRP_50
551e c5 7c    BRP_20    CMP DS_ADR+1
5520 d0 04              BNE BRP_30
5522 e4 7b              CPX DS_ADR
5524 f0 11              BEQ BRP_50          ; return for addr == DS$
5526 86 24    BRP_30    STX INDEXA
5528 85 25              STA INDEXA+1        ; (INDEXA) = address of string
552a 68                 PLA
552b aa                 TAX
552c 18                 CLC
552d 65 24              ADC INDEXA
552f 85 24              STA INDEXA
5531 90 02              BCC BRP_40
5533 e6 25              INC INDEXA+1        ; (SP24IX) = address + length
5535 38       BRP_40    SEC
5536 60                 RTS ;Size   65 [Back_Reference_Position]
5537 68       BRP_50    PLA
5538 18                 CLC
5539 60                 RTS ;Size   68 [Back_Reference_Position]

              ; *********************
553a            BASIC_PRINT_D ; $553a
              ; *********************

553a 20 40 55           JSR BASIC_CMD
553d 4c 58 56           JMP Set_Default_Channels

              ; *****************
5540            BASIC_CMD ; $5540
              ; *****************

5540 20 f4 87           JSR Get_Byte_Var
5543 f0 05              BEQ CMD_10
5545 a9 2c              LDA #','
5547 20 5e 79           JSR Need_A
554a 08       CMD_10    PHP
554b 86 15              STX CHANNL
554d 20 eb 90           JSR B_CKOUT
5550 28                 PLP
5551 4c 5a 55           JMP BASIC_PRINT


5554 20 e5 55 PRINT_10  JSR Print_String_From_Descriptor
5557 20 86 03 PRINT_20  JSR CHRGOT

              ; *******************
555a            BASIC_PRINT ; $555a
              ; *******************

555a f0 3c              BEQ Print_CR
555c c9 fb              CMP #$fb            ; USING
555e d0 03              BNE PRINT_30
5560 4c 20 95           JMP PRINT_USING
5563 f0 43    PRINT_30  BEQ Print_Ret
5565 c9 a3              CMP #$a3            ; TAB(
5567 f0 50              BEQ Tab_Spc
5569 c9 a6              CMP #$a6            ; SPC(
556b 18                 CLC
556c f0 4b              BEQ Tab_Spc
556e c9 2c              CMP #','
5570 f0 37              BEQ Comma_Tab
5572 c9 3b              CMP #';'
5574 f0 5e              BEQ TaSp_40
5576 20 ef 77           JSR Eval_Expression
5579 24 0f              BIT VALTYP
557b 30 d7              BMI PRINT_10
557d 20 42 8e           JSR Format_FAC1
5580 20 9a 86           JSR Create_String_Descriptor
5583 20 e5 55           JSR Print_String_From_Descriptor
5586 20 00 56           JSR Space_Or_Right
5589 d0 cc              BNE PRINT_20          ; always

              ; *********************
558b            Terminate_BUF ; $558b
              ; *********************

558b a9 00              LDA #0
558d 9d 00 02           STA BUF,X
5590 a2 ff              LDX #<[BUF-1]
5592 a0 01              LDY #>[BUF-1]
5594 a5 15              LDA CHANNL
5596 d0 10              BNE Print_Ret

              ; ****************
5598            Print_CR ; $5598
              ; ****************

5598 a9 0d              LDA #CR
559a 20 0c 56           JSR Print_Char
559d 24 15              BIT CHANNL
559f 10 05              BPL Accu_EOR
55a1 a9 0a              LDA #LF
55a3 20 0c 56           JSR Print_Char

              ; ****************
55a6            Accu_EOR ; $55a6
              ; ****************

55a6 49 ff              EOR #$ff
55a8 60       Print_Ret RTS ;Size    3 [Accu_EOR]

              ; *****************
55a9            Comma_Tab ; $55a9
              ; *****************

55a9 38                 SEC
55aa 20 8d 92           JSR B_PLOT
55ad 98                 TYA
55ae 38                 SEC
55af e9 0a    CoTa_10   SBC #10
55b1 b0 fc              BCS CoTa_10
55b3 49 ff              EOR #$ff
55b5 69 01              ADC #1
55b7 d0 16              BNE TaSp_10

              ; ***************
55b9            Tab_Spc ; $55b9
              ; ***************

55b9 08                 PHP
55ba 38                 SEC
55bb 20 8d 92           JSR B_PLOT
55be 84 0b              STY TRMPOS
55c0 20 f1 87           JSR Get_Next_Byte_Var
55c3 c9 29              CMP #')'
55c5 d0 13              BNE TaSp_50
55c7 28                 PLP
55c8 90 06              BCC TaSp_20
55ca 8a                 TXA
55cb e5 0b              SBC TRMPOS
55cd 90 05              BCC TaSp_40
55cf aa       TaSp_10   TAX
55d0 e8       TaSp_20   INX
55d1 ca       TaSp_30   DEX
55d2 d0 09              BNE TaSp_60
55d4 20 80 03 TaSp_40   JSR CHRGET
55d7 4c 63 55           JMP PRINT_30
55da 4c 6c 79 TaSp_50   JMP SYNTAX_ERROR
55dd 20 00 56 TaSp_60   JSR Space_Or_Right
55e0 d0 ef              BNE TaSp_30

              ; ********************
55e2            Print_String ; $55e2
              ; ********************

55e2 20 9a 86           JSR Create_String_Descriptor

              ; ************************************
55e5            Print_String_From_Descriptor ; $55e5
              ; ************************************

55e5 20 81 87           JSR Free_String_FAC1
55e8 aa                 TAX
55e9 a0 00              LDY #0
55eb e8                 INX
55ec ca       PSFD_10   DEX
55ed f0 b9              BEQ Print_Ret
55ef 20 b7 03           JSR Get_INDEXA_1
55f2 20 0c 56           JSR Print_Char
55f5 c8                 INY
55f6 c9 0d              CMP #CR
55f8 d0 f2              BNE PSFD_10
55fa 20 a6 55           JSR Accu_EOR
55fd 4c ec 55           JMP PSFD_10

              ; **********************
5600            Space_Or_Right ; $5600
              ; **********************

5600 a5 15              LDA CHANNL
5602 f0 03              BEQ SOR_10

              ; *******************
5604            Print_Blank ; $5604
              ; *******************

5604 a9 20              LDA #' '
5606 2c                 BIT
5607 a9 1d    SOR_10    LDA #RIGHT
5609 2c                 BIT

              ; ***************************
560a            Print_Question_Mark ; $5606
              ; ***************************

560a a9 3f              LDA #'?'

              ; ******************
560c            Print_Char ; $560c
              ; ******************

560c 20 df 90           JSR CHROUT
560f 29 ff              AND #$ff
5611 60                 RTS ;Size    6 [Print_Char]

              ; *****************
5612            BASIC_GET ; $5612
              ; *****************

5612 20 d9 84           JSR Assert_Non_Direct
5615 85 77              STA TEMP_A
5617 c9 23              CMP #'#'
5619 f0 0a              BEQ GET_10
561b c9 f9              CMP #$f9            ; KEY
561d d0 16              BNE GET_20
561f 20 80 03           JSR CHRGET
5622 4c 35 56           JMP GET_20
5625 20 80 03 GET_10    JSR CHRGET
5628 20 f4 87           JSR Get_Byte_Var
562b a9 2c              LDA #','
562d 20 5e 79           JSR Need_A
5630 86 15              STX CHANNL
5632 20 fd 90           JSR B_CHKIN
5635 a2 01    GET_20    LDX #1
5637 a0 02              LDY #2
5639 a9 00              LDA #0
563b 8d 01 02           STA BUF+1
563e a9 40              LDA #$40
5640 20 b2 56           JSR Read_Get
5643 a6 15              LDX CHANNL
5645 d0 13              BNE SDC_10
5647 60                 RTS ;Size   54 [BASIC_GET]

              ; *********************
5648            BASIC_INPUT_D ; $5648
              ; *********************

5648 20 f4 87           JSR Get_Byte_Var
564b a9 2c              LDA #','
564d 20 5e 79           JSR Need_A
5650 86 15              STX CHANNL
5652 20 fd 90           JSR B_CHKIN
5655 20 71 56           JSR Input_String

              ; ****************************
5658            Set_Default_Channels ; $5658
              ; ****************************

5658 a5 15              LDA CHANNL
565a 20 6f 92 SDC_10    JSR B_CLRCH
565d a2 00              LDX #0
565f 86 15              STX CHANNL
5661 60                 RTS ;Size   10 [Set_Default_Channels]

              ; *******************
5662            BASIC_INPUT ; $5662
              ; *******************

5662 c9 22              CMP #QUOTE
5664 d0 0b              BNE Input_String
5666 20 13 79           JSR Create_Descriptor_From_TXTPTR
5669 a9 3b              LDA #';'
566b 20 5e 79           JSR Need_A
566e 20 e5 55           JSR Print_String_From_Descriptor

              ; ********************
5671            Input_String ; $5671
              ; ********************

5671 20 d9 84           JSR Assert_Non_Direct
5674 a9 2c              LDA #','
5676 8d ff 01           STA BUF-1
5679 20 9c 56 InSt_10   JSR Prompt_And_Input
567c a5 15              LDA CHANNL
567e f0 0d              BEQ InSt_20
5680 20 51 92           JSR B_READST
5683 29 02              AND #%0000 0010 ; $02
5685 f0 06              BEQ InSt_20
5687 20 58 56           JSR Set_Default_Channels
568a 4c 8f 52           JMP Skip_Statement
568d ad 00 02 InSt_20   LDA BUF
5690 d0 1e              BNE READ_10
5692 a5 15              LDA CHANNL
5694 d0 e3              BNE InSt_10
5696 20 a2 52           JSR Skip_To_EOS
5699 4c 92 52           JMP Add_Y_To_Execution_Pointer

              ; ************************
569c            Prompt_And_Input ; $569c
              ; ************************

569c a5 15              LDA CHANNL
569e d0 06              BNE PAT_10
56a0 20 0a 56           JSR Print_Question_Mark
56a3 20 04 56           JSR Print_Blank
56a6 4c 93 4f PAT_10    JMP Read_String

              ; ******************
56a9            BASIC_READ ; $56a9
              ; ******************

56a9 a6 43              LDX DATPTR
56ab a4 44              LDY DATPTR+1
56ad a9 98              LDA #$98
56af 2c                 BIT
56b0 a9 00    READ_10   LDA #0

              ; ****************
56b2            Read_Get ; $56b2
              ; ****************

56b2 85 13              STA INPFLG
56b4 86 45              STX INPPTR
56b6 84 46              STY INPPTR+1

              ; loop reading variables

56b8 20 af 7a READ_12   JSR Parse_Name
56bb 85 4b              STA FORPNT
56bd 84 4c              STY FORPNT+1
56bf a2 01              LDX #1
56c1 b5 3d    READ_14   LDA TXTPTR,X
56c3 95 4d              STA VARTXT,X
56c5 b5 45              LDA INPPTR,X
56c7 95 3d              STA TXTPTR,X
56c9 ca                 DEX
56ca 10 f5              BPL READ_14
56cc 20 86 03           JSR CHRGOT
56cf d0 31              BNE READ_30
56d1 24 13              BIT INPFLG
56d3 50 1a              BVC READ_22         ; bit 6 set: GETIN
56d5 a5 77              LDA TEMP_A
56d7 c9 f9              CMP #$f9
56d9 d0 08              BNE READ_18
56db 20 09 91 READ_16   JSR B_GETIN
56de aa                 TAX
56df f0 fa              BEQ READ_16
56e1 d0 03              BNE READ_20         ; always

56e3 20 09 91 READ_18   JSR B_GETIN
56e6 8d 00 02 READ_20   STA BUF
56e9 a2 ff              LDX #<[BUF-1]
56eb a0 01              LDY #>[BUF-1]
56ed d0 0f              BNE READ_28         ; always

56ef 10 03    READ_22   BPL READ_24         ; bit 7 set: READ
56f1 4c ca 57           JMP READ_DATA
56f4 a5 15    READ_24   LDA CHANNL
56f6 d0 03              BNE READ_26
56f8 20 0a 56           JSR Print_Question_Mark
56fb 20 9c 56 READ_26   JSR Prompt_And_Input
56fe 86 3d    READ_28   STX TXTPTR
5700 84 3e              STY TXTPTR+1

              ; loop reading character

5702 20 80 03 READ_30   JSR CHRGET
5705 24 0f              BIT VALTYP
5707 10 31              BPL READ_38
5709 24 13              BIT INPFLG
570b 50 09              BVC READ_32
570d e8                 INX
570e 86 3d              STX TXTPTR
5710 a9 00              LDA #0
5712 85 09              STA CHARAC
5714 f0 0c              BEQ READ_34
5716 85 09    READ_32   STA CHARAC
5718 c9 22              CMP #QUOTE
571a f0 07              BEQ READ_35
571c a9 3a              LDA #':'
571e 85 09              STA CHARAC
5720 a9 2c              LDA #','
5722 18       READ_34   CLC
5723 85 0a    READ_35   STA ENDCHR
5725 a5 3d              LDA TXTPTR
5727 a4 3e              LDY TXTPTR+1
5729 69 00              ADC #0
572b 90 01              BCC READ_36
572d c8                 INY
572e 20 a0 86 READ_36   JSR Create_String_Descriptor_AY
5731 20 1f 79           JSR Restore_Execution_Pointer
5734 20 05 54           JSR Assign_String_Variable
5737 4c 44 57           JMP READ_40

573a a2 00    READ_38   LDX #0
573c 20 22 8d           JSR Read_Real_To_FAC1
573f a5 10              LDA INTFLG
5741 20 e3 53           JSR Assign_Numeric_Variable
5744 20 86 03 READ_40   JSR CHRGOT
5747 f0 3b              BEQ READ_52
5749 c9 2c              CMP #','
574b f0 37              BEQ READ_52
574d a5 13              LDA INPFLG
574f f0 0a              BEQ READ_44
5751 30 04              BMI READ_42
5753 a6 15              LDX CHANNL
5755 d0 08              BNE READ_46
5757 a2 16    READ_42   LDX #$16            ; TYPE MISMATCH
5759 d0 06              BNE READ_48
575b a5 15    READ_44   LDA CHANNL
575d f0 05              BEQ READ_50
575f a2 18    READ_46   LDX #$18            ; FILE DATA
5761 4c 3c 4d READ_48   JMP Print_Error_X
5764 20 81 92 READ_50   JSR B_PRIMM
5767 3f 52 45           .BYTE "?REDO FROM START\r",0

5779 ad 02 12           LDA OLDTXT
577c ac 03 12           LDY OLDTXT+1
577f 85 3d              STA TXTPTR
5781 84 3e              STY TXTPTR+1
5783 60                 RTS ;Size  210 [Read_Get]

5784 a2 01    READ_52   LDX #1
5786 b5 3d    READ_54   LDA TXTPTR,X
5788 95 45              STA INPPTR,X
578a b5 4d              LDA VARTXT,X
578c 95 3d              STA TXTPTR,X
578e ca                 DEX
578f 10 f5              BPL READ_54
5791 20 86 03           JSR CHRGOT
5794 f0 06              BEQ READ_56
5796 20 5c 79           JSR Need_Comma
5799 4c b8 56           JMP READ_12
579c a5 45    READ_56   LDA INPPTR
579e a4 46              LDY INPPTR+1
57a0 a6 13              LDX INPFLG
57a2 10 05              BPL READ_58
57a4 85 43              STA DATPTR
57a6 84 44              STY DATPTR+1
57a8 60                 RTS ;Size  247 [Read_Get]

57a9 a0 00    READ_58   LDY #0
57ab a9 45              LDA #INPPTR
57ad 20 9f 03           JSR Fetch_0
57b0 f0 17              BEQ READ_Ret
57b2 a5 15              LDA CHANNL
57b4 d0 13              BNE READ_Ret
57b6 20 81 92           JSR B_PRIMM
57b9 3f 45 58           .BYTE "?EXTRA IGNORED\r",0

57c9 60       READ_Ret  RTS ;Size  280 [Read_Get]

              ; *****************
57ca            READ_DATA ; $57ca
              ; *****************

57ca 20 a2 52           JSR Skip_To_EOS
57cd c8                 INY
57ce aa                 TAX
57cf d0 15              BNE REDA_10
57d1 a2 0d              LDX #13
57d3 c8                 INY
57d4 20 c9 03           JSR INDTXT
57d7 f0 40              BEQ NEXT_40
57d9 c8                 INY
57da 20 c9 03           JSR INDTXT
57dd 85 41              STA DATLIN
57df c8                 INY
57e0 20 c9 03           JSR INDTXT
57e3 c8                 INY
57e4 85 42              STA DATLIN+1
57e6 20 92 52 REDA_10   JSR Add_Y_To_Execution_Pointer
57e9 20 86 03           JSR CHRGOT
57ec aa                 TAX
57ed e0 83              CPX #$83            ; DATA token
57ef d0 d9              BNE READ_DATA
57f1 4c 02 57           JMP READ_30

              ; ******************
57f4            BASIC_NEXT ; $57f4
              ; ******************

57f4 d0 13              BNE NEXT_20         ; branch if index after NEXT
57f6 a0 ff              LDY #$ff
57f8 d0 14              BNE NEXT_30         ; mark no index variable given
57fa a0 12    NEXT_10   LDY #$12            ; size of FOR..NEXT structure
57fc 20 59 50           JSR Free_TOS
57ff 20 86 03           JSR CHRGOT
5802 c9 2c              CMP #','
5804 d0 71              BNE NEXT_Ret
5806 20 80 03           JSR CHRGET
5809 20 af 7a NEXT_20   JSR Parse_Name
580c 85 4b              STA FORPNT
580e 84 4c    NEXT_30   STY FORPNT+1
5810 a9 81              LDA #$81            ; FOR marker
5812 20 aa 4f           JSR Find_Token_On_Stack
5815 f0 05              BEQ NEXT_50
5817 a2 0a              LDX #10             ; NEXT WITHOUT FOR
5819 4c 3c 4d NEXT_40   JMP Print_Error_X
581c 20 50 50 NEXT_50   JSR Update_TOS
581f a5 3f              LDA FNDPNT
5821 18                 CLC
5822 69 03              ADC #3
5824 a4 40              LDY FNDPNT+1
5826 90 01              BCC NEXT_60
5828 c8                 INY
5829 20 d4 8b NEXT_60   JSR Load_FAC1_AY    ; STEP value
582c a0 08              LDY #8
582e b1 3f              LDA (FNDPNT),Y      ; STEP sign
5830 85 68              STA FAC1_SI
5832 a0 01              LDY #1
5834 b1 3f              LDA (FNDPNT),Y
5836 48                 PHA
5837 aa                 TAX
5838 c8                 INY
5839 b1 3f              LDA (FNDPNT),Y
583b 48                 PHA
583c a8                 TAY
583d 8a                 TXA
583e 20 45 88           JSR Add_Var_AY_To_FAC1 ; FAC1 = index + STEP
5841 68                 PLA
5842 a8                 TAY
5843 68                 PLA
5844 aa                 TAX
5845 8d 04 ff           STA MMU_LCRD
5848 20 00 8c           JSR FAC1_To_XY      ; store new index value
584b a5 3f              LDA FNDPNT
584d 18                 CLC
584e 69 09              ADC #9
5850 a4 40              LDY FNDPNT+1        ; (A/Y) = address of TO value
5852 90 01              BCC NEXT_70
5854 c8                 INY
5855 8d 03 ff NEXT_70   STA MMU_LCRC
5858 20 87 8c           JSR Compare_AY_FAC1
585b a0 08              LDY #8
585d 38                 SEC
585e f1 3f              SBC (FNDPNT),Y
5860 f0 98              BEQ NEXT_10         ; -> exit FOR..NEXT loop
5862 a0 11              LDY #$11
5864 b1 3f              LDA (FNDPNT),Y      ; set TXTPTR and CURLIN to loop start
5866 85 3d              STA TXTPTR          ; and continue
5868 88                 DEY
5869 b1 3f              LDA (FNDPNT),Y
586b 85 3e              STA TXTPTR+1
586d 88                 DEY
586e b1 3f              LDA (FNDPNT),Y
5870 85 3c              STA CURLIN+1
5872 88                 DEY
5873 b1 3f              LDA (FNDPNT),Y
5875 85 3b              STA CURLIN
5877 60       NEXT_Ret  RTS ;Size  132 [BASIC_NEXT]

5878 20 5c 79 DIM_10    JSR Need_Comma

              ; *****************
587b            BASIC_DIM ; $587b
              ; *****************

587b aa                 TAX
587c 20 b4 7a           JSR Get_Array_Address
587f 20 86 03           JSR CHRGOT
5882 d0 f4              BNE DIM_10
5884 60                 RTS ;Size   10 [BASIC_DIM]

              ; *****************
5885            BASIC_SYS ; $5885
              ; *****************

5885 20 12 88           JSR Get_Integer
5888 a5 16              LDA LINNUM
588a 85 04              STA PC_LO
588c a5 17              LDA LINNUM+1
588e 85 03              STA PC_HI
5890 ad d5 03           LDA USER_BANK
5893 85 02              STA BANK
5895 20 1e 9e           JSR Get_Byte_Or_Void
5898 90 02              BCC SYS_10
589a 86 06              STX A_REG
589c 20 1e 9e SYS_10    JSR Get_Byte_Or_Void
589f 90 02              BCC SYS_20
58a1 86 07              STX X_REG
58a3 20 1e 9e SYS_20    JSR Get_Byte_Or_Void
58a6 90 02              BCC SYS_30
58a8 86 08              STX Y_REG
58aa 20 1e 9e SYS_30    JSR Get_Byte_Or_Void
58ad 90 02              BCC SYS_40
58af 86 05              STX S_REG
58b1 4c 6e ff SYS_40    JMP K_JSRFAR

              ; ******************
58b4            BASIC_TRON ; $58b4
              ; ******************

58b4 a9 ff              LDA #$ff
58b6 2c                 BIT

              ; *******************
58b7            BASIC_TROFF ; $58b7
              ; *******************

58b7 a9 00              LDA #0
58b9 8d 6f 11           STA TRCFLG
58bc 60                 RTS ;Size    6 [BASIC_TROFF]

              ; ******************
58bd            BASIC_RREG ; $58bd
              ; ******************

58bd a9 00              LDA #0
58bf 85 0d              STA B_COUNT         ; count arguments
58c1 20 86 03 RREG_10   JSR CHRGOT
58c4 f0 37              BEQ RREG_25
58c6 c9 2c              CMP #','
58c8 f0 21              BEQ RREG_20         ; next argument
58ca 20 af 7a           JSR Parse_Name
58cd 85 4b              STA FORPNT
58cf 84 4c              STY FORPNT+1        ; variable name
58d1 a5 0f              LDA VALTYP
58d3 d0 29              BNE RREG_30         ; -> string variable not allowed
58d5 a4 0d              LDY B_COUNT
58d7 b9 06 00           LDA A_REG,Y
58da c0 03              CPY #3
58dc d0 02              BNE RREG_15
58de a5 05              LDA S_REG
58e0 a8       RREG_15   TAY
58e1 a9 00              LDA #0
58e3 20 3c 79           JSR Integer_To_Real
58e6 a5 10              LDA INTFLG
58e8 20 e3 53           JSR Assign_Numeric_Variable
58eb e6 0d    RREG_20   INC B_COUNT
58ed a5 0d              LDA B_COUNT
58ef c9 04              CMP #4
58f1 b0 0a              BCS RREG_25         ; loaded A,X,Y,S
58f3 20 86 03           JSR CHRGOT
58f6 f0 05              BEQ RREG_25
58f8 20 80 03           JSR CHRGET
58fb d0 c4              BNE RREG_10
58fd 60       RREG_25   RTS ;Size   65 [BASIC_RREG]
58fe 4c e7 77 RREG_30   JMP TYPE_MISMATCH

              ; ******************
5901            MID_ASSIGN ; $5901
              ; ******************

5901 20 59 79           JSR Need_Left_Par
5904 20 af 7a           JSR Parse_Name
5907 85 4b              STA FORPNT
5909 84 4c              STY FORPNT+1
590b 20 dd 77           JSR Need_String
590e 20 09 88           JSR Comma_And_Byte
5911 ca                 DEX
5912 86 78              STX KEYSIZ          ; start of substring
5914 c9 29              CMP #')'
5916 f0 04              BEQ MIDA_10
5918 20 09 88           JSR Comma_And_Byte
591b 2c                 BIT
591c a2 ff    MIDA_10   LDX #$ff
591e 86 77              STX TEMP_A          ; length of substring
5920 20 56 79           JSR Need_Right_Par
5923 a9 b2              LDA #$b2            ; '=' token
5925 20 5e 79           JSR Need_A
5928 20 ef 77           JSR Eval_Expression
592b 20 dd 77           JSR Need_String
592e a0 02              LDY #2
5930 a9 4b    MIDA_20   LDA #FORPNT
5932 20 ab 03           JSR Fetch_1
5935 99 5d 00           STA HIGHTR+1,Y
5938 20 e7 42           JSR Get_FAC1_M3_1
593b 99 60 00           STA TENEXP,Y
593e 88                 DEY
593f 10 ef              BPL MIDA_20
5941 38                 SEC
5942 a5 61              LDA LOWTR
5944 e5 78              SBC KEYSIZ
5946 85 61              STA LOWTR
5948 b0 02              BCS MIDA_30
594a c6 62              DEC LOWTR+1         ; (LOWTR) = start of substring
594c a5 77    MIDA_30   LDA TEMP_A
594e c5 60              CMP TENEXP
5950 90 02              BCC MIDA_40
5952 a5 60              LDA TENEXP
5954 aa       MIDA_40   TAX
5955 f0 18              BEQ MIDA_70
5957 18                 CLC
5958 65 78              ADC KEYSIZ
595a b0 16              BCS MIDA_Err
595c c5 5d              CMP HIGHTR+1
595e 90 02              BCC MIDA_50
5960 d0 10              BNE MIDA_Err
5962 a4 78    MIDA_50   LDY KEYSIZ
5964 a9 61    MIDA_60   LDA #LOWTR          ; copy content into substring
5966 20 ab 03           JSR Fetch_1
5969 91 5e              STA (FACTPB),Y
596b c8                 INY
596c ca                 DEX
596d d0 f5              BNE MIDA_60
596f 4c 81 87 MIDA_70   JMP Free_String_FAC1
5972 4c 28 7d MIDA_Err  JMP Error_Illegal_Quantity

              ; ******************
5975            BASIC_AUTO ; $5975
              ; ******************

5975 20 f0 84           JSR Assert_Direct_Mode
5978 20 a0 50           JSR Scan_Linenumber
597b a5 16              LDA LINNUM
597d 85 74              STA AUTINC
597f a5 17              LDA LINNUM+1
5981 85 75              STA AUTINC+1
5983 4c 37 4d           JMP BASIC_Ready

              ; *************************
5986            BASIC_HELP ; 5986 ; $5986
              ; *************************

5986 ae 08 12           LDX ERRNUM
5989 e8                 INX
598a f0 1d              BEQ HELP_10
598c ad 09 12           LDA ERRLIN
598f ac 0a 12           LDY ERRLIN+1
5992 85 16              STA LINNUM
5994 84 17              STY LINNUM+1
5996 20 64 50           JSR Search_BASIC_Line
5999 90 0e              BCC HELP_10
599b 66 55              ROR HELPER
599d 20 98 55           JSR Print_CR
59a0 a6 16              LDX LINNUM
59a2 a5 17              LDA LINNUM+1
59a4 20 23 51           JSR List_Line
59a7 46 55              LSR HELPER
59a9 4c 98 55 HELP_10   JMP Print_CR

              ; *************************
59ac            At_Error_Position ; $59ac
              ; *************************

59ac a6 62              LDX LOWTR+1
59ae 98                 TYA
59af 18                 CLC
59b0 65 61              ADC LOWTR
59b2 90 01              BCC AEP_10
59b4 e8                 INX
59b5 ec 0f 12 AEP_10    CPX ERRTXT+1
59b8 d0 14              BNE AEP_Ret
59ba cd 0e 12           CMP ERRTXT
59bd 90 0f              BCC AEP_Ret
59bf f0 0d              BEQ AEP_Ret
59c1 46 55              LSR HELPER
59c3 a9 12              LDA #$12
59c5 24 d7              BIT MODE_80
59c7 10 02              BPL AEP_20
59c9 a9 02              LDA #2
59cb 4c 0c 56 AEP_20    JMP Print_Char
59ce 60       AEP_Ret   RTS ;Size   35 [At_Error_Position]

              ; *******************
59cf            BASIC_GOSUB ; $59cf
              ; *******************

59cf 20 1d 5a           JSR Push_GOSUB
59d2 20 86 03           JSR CHRGOT
59d5 20 db 59           JSR BASIC_GOTO
59d8 4c f6 4a           JMP Next_Statement

              ; ******************
59db            BASIC_GOTO ; $59db
              ; ******************

59db 20 a0 50           JSR Scan_Linenumber
59de a5 0a              LDA ENDCHR          ; line # needed
59e0 f0 38              BEQ GoTo_Err        ; SYNTAX ERROR

              ; ************
59e2            GoTo ; $59e2
              ; ************

59e2 20 a5 52           JSR End_Of_Line
59e5 38                 SEC
59e6 a5 3b              LDA CURLIN
59e8 e5 16              SBC LINNUM
59ea a5 3c              LDA CURLIN+1
59ec e5 17              SBC LINNUM+1
59ee b0 0b              BCS GoTo_10
59f0 98                 TYA
59f1 38                 SEC
59f2 65 3d              ADC TXTPTR
59f4 a6 3e              LDX TXTPTR+1
59f6 90 07              BCC GoTo_20
59f8 e8                 INX
59f9 b0 04              BCS GoTo_20

              ; ***************
59fb            GoTo_10 ; $59fb
              ; ***************

59fb a5 2d              LDA TXTTAB
59fd a6 2e              LDX TXTTAB+1
59ff 20 68 50 GoTo_20   JSR Find_LINNUM_AX
5a02 90 11              BCC UNDEFINED_STATEMENT
5a04 a5 61              LDA LOWTR
5a06 e9 01              SBC #1
5a08 85 3d              STA TXTPTR
5a0a a5 62              LDA LOWTR+1
5a0c e9 00              SBC #0
5a0e 85 3e              STA TXTPTR+1
5a10 24 7f              BIT RUNMOD
5a12 10 6d              BPL Set_Run_Mode
5a14 60                 RTS ;Size   26 [GoTo_10]

              ; ***************************
5a15            UNDEFINED_STATEMENT ; $5a15
              ; ***************************

5a15 a2 11              LDX #$11            ; UNDEF'D STATEMENT
5a17 4c 3c 4d           JMP Print_Error_X
5a1a 4c 6c 79 GoTo_Err  JMP SYNTAX_ERROR

              ; ******************
5a1d            Push_GOSUB ; $5a1d
              ; ******************

5a1d a9 05              LDA #5
5a1f 20 fe 4f           JSR SUB_TOS
5a22 a0 04              LDY #4
5a24 a5 3e              LDA TXTPTR+1
5a26 91 7d              STA (TOS),Y
5a28 88                 DEY
5a29 a5 3d              LDA TXTPTR
5a2b 91 7d              STA (TOS),Y
5a2d 88                 DEY
5a2e a5 3c              LDA CURLIN+1
5a30 91 7d              STA (TOS),Y
5a32 88                 DEY
5a33 a5 3b              LDA CURLIN
5a35 91 7d              STA (TOS),Y
5a37 88                 DEY
5a38 a9 8d              LDA #$8d            ; GOSUB token
5a3a 91 7d              STA (TOS),Y
5a3c 60                 RTS ;Size   32 [Push_GOSUB]

              ; ****************
5a3d            BASIC_GO ; $5a3d
              ; ****************

5a3d 20 80 03           JSR CHRGET
5a40 c9 a4              CMP #$a4            ; TO token
5a42 d0 06              BNE GO_10
5a44 20 80 03           JSR CHRGET
5a47 4c db 59           JMP BASIC_GOTO
5a4a 20 f4 87 GO_10     JSR Get_Byte_Var
5a4d e0 40              CPX #64             ; GO64 ?
5a4f f0 03              BEQ GO_20
5a51 4c 6c 79           JMP SYNTAX_ERROR
5a54 20 e1 a7 GO_20     JSR ARE_YOU_SURE
5a57 d0 06              BNE GO_Ret
5a59 20 45 a8           JSR Map_IO
5a5c 4c 4d ff           JMP K_C64
5a5f 60       GO_Ret    RTS ;Size   35 [BASIC_GO]

              ; ******************
5a60            BASIC_CONT ; $5a60
              ; ******************

5a60 d0 38              BNE SRM_Ret
5a62 24 7f              BIT RUNMOD
5a64 30 34              BMI SRM_Ret
5a66 a2 1a              LDX #$1a            ; CAN'T CONTINUE
5a68 ac 03 12           LDY OLDTXT+1
5a6b d0 03              BNE CONT_10
5a6d 4c 3c 4d           JMP Print_Error_X
5a70 ad 02 12 CONT_10   LDA OLDTXT
5a73 85 3d              STA TXTPTR
5a75 84 3e              STY TXTPTR+1
5a77 ad 00 12           LDA OLDLIN
5a7a ac 01 12           LDY OLDLIN+1
5a7d 85 3b              STA CURLIN
5a7f 84 3c              STY CURLIN+1

              ; ********************
5a81            Set_Run_Mode ; $5a81
              ; *******************

5a81 a9 80              LDA #$80
5a83 85 7f              STA RUNMOD
5a85 0a                 ASL A               ; A = 0
5a86 85 74              STA AUTINC          ; disable AUTO
5a88 85 75              STA AUTINC+1
5a8a 8d 7f 12           STA INT_VAL
5a8d 85 f6              STA INSFLG
5a8f a2 02              LDX #2
5a91 9d 76 12 SRM_10    STA INT_TRIP_FLAG,X
5a94 ca                 DEX
5a95 10 fa              BPL SRM_10
5a97 4c 90 ff           JMP K_SETMSG
5a9a 60       SRM_Ret   RTS ;Size   26 [Set_Run_Mode]

              ; *****************
5a9b            BASIC_RUN ; $5a9b
              ; *****************

5a9b f0 18              BEQ RUN_10          ; RUN
5a9d 90 1c              BCC RUN_20          ; RUN line
5a9f a9 40              LDA #$40
5aa1 85 7f              STA RUNMOD
5aa3 20 a7 a1           JSR BASIC_DLOAD     ; LOAD and RUN

              ; ****************
5aa6            LINK_RUN ; $5aa6
              ; ****************

5aa6 20 81 5a           JSR Set_Run_Mode
5aa9 20 f3 51           JSR Reset_BASIC_Execution
5aac 20 4f 4f           JSR Relink
5aaf 20 98 55           JSR Print_CR
5ab2 4c f6 4a           JMP Next_Statement
5ab5 20 81 5a RUN_10    JSR Set_Run_Mode
5ab8 4c f3 51           JMP Reset_BASIC_Execution
5abb 20 fa 51 RUN_20    JSR Clear_BASIC
5abe 20 86 03           JSR CHRGOT
5ac1 20 db 59           JSR BASIC_GOTO
5ac4 20 81 5a           JSR Set_Run_Mode
5ac7 4c f6 4a           JMP Next_Statement

              ; *********************
5aca            BASIC_RESTORE ; $5aca
              ; *********************

5aca f0 15              BEQ Reset_DATPTR
5acc 20 12 88           JSR Get_Integer
5acf 84 16              STY LINNUM
5ad1 85 17              STA LINNUM+1
5ad3 20 64 50           JSR Search_BASIC_Line
5ad6 b0 03              BCS REST_10
5ad8 4c 15 5a           JMP UNDEFINED_STATEMENT
5adb a5 61    REST_10   LDA LOWTR
5add a4 62              LDY LOWTR+1
5adf b0 05              BCS ReDP_10

              ; ********************
5ae1            Reset_DATPTR ; $5ae1
              ; ********************

5ae1 38                 SEC
5ae2 a5 2d              LDA TXTTAB
5ae4 a4 2e              LDY TXTTAB+1
5ae6 e9 01    ReDP_10   SBC #1
5ae8 b0 01              BCS ReDP_20
5aea 88                 DEY
5aeb 85 43    ReDP_20   STA DATPTR
5aed 84 44              STY DATPTR+1
5aef 60                 RTS ;Size   15 [Reset_DATPTR]


              ; **************
5af0            Renumber_Token
              ; **************

5af0 89                  .BYTE $89 ; GOTO
5af1 8a                  .BYTE $8a ; RUN
5af2 8d                  .BYTE $8d ; GOSUB
5af3 a7                  .BYTE $a7 ; THEN
5af4 8c                  .BYTE $8c ; RESTORE
5af5 d6                  .BYTE $d6 ; RESUME
5af6 d7                  .BYTE $d7 ; TRAP
5af7 d5                  .BYTE $d5 ; ELSE

              ; **************
5af8            BASIC_RENUMBER
              ; **************

5af8 20 f0 84            JSR Assert_Direct_Mode
5afb a9 00               LDA #>10           ; default start & increment = 10
5afd a2 0a               LDX #<10
5aff 8e 70 11            STX Ren_Line_Lo
5b02 8d 71 11            STA Ren_Line_Hi
5b05 8e 72 11            STX Ren_Step_Lo
5b08 8d 73 11            STA Ren_Step_Hi
5b0b 85 5c               STA HIGHTR
5b0d 85 5d               STA HIGHTR+1
5b0f 20 86 03            JSR CHRGOT
5b12 f0 54               BEQ RENU_08        ; -> no arguments after RENUMBER
5b14 20 a0 50            JSR Scan_Linenumber
5b17 a5 0a               LDA ENDCHR
5b19 f0 0a               BEQ RENU_02        ; -> only increment given
5b1b a5 16               LDA LINNUM
5b1d a6 17               LDX LINNUM+1
5b1f 8d 70 11            STA Ren_Line_Lo    ; new start value
5b22 8e 71 11            STX Ren_Line_Hi
5b25 20 06 9e RENU_02    JSR Get_Comma_And_Integer
5b28 90 0e               BCC RENU_06
5b2a 8c 72 11            STY Ren_Step_Lo    ; increment value
5b2d 8d 73 11            STA Ren_Step_Hi
5b30 0d 72 11            ORA Ren_Step_Lo    ; test for zero
5b33 d0 03               BNE RENU_06
5b35 4c 28 7d RENU_04    JMP Error_Illegal_Quantity ; zero increment
5b38 20 06 9e RENU_06    JSR Get_Comma_And_Integer
5b3b 90 2b               BCC RENU_08        ; -> no old start value given
5b3d 84 5c               STY HIGHTR
5b3f 84 16               STY LINNUM
5b41 85 5d               STA HIGHTR+1
5b43 85 17               STA LINNUM+1
5b45 20 64 50            JSR Search_BASIC_Line
5b48 a5 61               LDA LOWTR
5b4a a6 62               LDX LOWTR+1
5b4c 85 5a               STA ARYPNT
5b4e 86 5b               STX ARYPNT+1
5b50 ad 70 11            LDA Ren_Line_Lo
5b53 ae 71 11            LDX Ren_Line_Hi
5b56 85 16               STA LINNUM
5b58 86 17               STX LINNUM+1
5b5a 20 64 50            JSR Search_BASIC_Line
5b5d 38                  SEC
5b5e a5 61               LDA LOWTR
5b60 e5 5a               SBC ARYPNT
5b62 a5 62               LDA LOWTR+1
5b64 e5 5b               SBC ARYPNT+1
5b66 90 cd               BCC RENU_04
5b68 20 68 5d RENU_08    JSR Ren_Line_To_FAC          ; RENUMBER pass 1
5b6b 20 9c 5d            JSR Next_Byte                ; check range of new line numbers
5b6e c8                  INY
5b6f 20 c9 03            JSR INDTXT
5b72 f0 3a               BEQ RENUMBER_PASS_2
5b74 c8       RENU_10    INY
5b75 20 c9 03            JSR INDTXT
5b78 38                  SEC
5b79 e5 5c               SBC HIGHTR
5b7b c8                  INY
5b7c 20 c9 03            JSR INDTXT
5b7f e5 5d               SBC HIGHTR+1
5b81 b0 07               BCS RENU_12
5b83 20 9d 5b            JSR Next_BASIC_Line
5b86 d0 ec               BNE RENU_10
5b88 f0 24               BEQ RENUMBER_PASS_2
5b8a 20 9d 5b RENU_12    JSR Next_BASIC_Line
5b8d f0 1f               BEQ RENUMBER_PASS_2
5b8f 20 89 5d            JSR Add_Renumber_Step
5b92 b0 04               BCS RENU_14
5b94 c9 f9               CMP #$f9           ; line number < $f900 (63744)
5b96 90 f2               BCC RENU_12
5b98 a2 26    RENU_14    LDX #$26           ; line number too large
5b9a 4c 3c 4d            JMP Print_Error_X

              ; ***************
5b9d            Next_BASIC_Line
              ; ***************

5b9d a0 00               LDY #0
5b9f 20 c9 03            JSR INDTXT
5ba2 aa                  TAX
5ba3 c8                  INY
5ba4 20 c9 03            JSR INDTXT
5ba7 f0 04               BEQ NBL_Ret
5ba9 86 3d               STX TXTPTR
5bab 85 3e               STA TXTPTR+1
5bad 60       NBL_Ret    RTS ;Size   17 [Next_BASIC_Line]

              ; ***************
5bae            RENUMBER_PASS_2
              ; ***************

5bae a9 01               LDA #1
5bb0 85 77               STA TEMP_A         ; Flag for test run
5bb2 ad 10 12            LDA TEXT_TOP
5bb5 ae 11 12            LDX TEXT_TOP+1
5bb8 85 3f               STA FNDPNT
5bba 86 40               STX FNDPNT+1
5bbc 20 fb 5b            JSR Replace_Targets
5bbf c6 77               DEC TEMP_A         ; Flag for run
5bc1 20 fb 5b            JSR Replace_Targets
5bc4 20 99 5d RENU_20    JSR Get_Link_Hi
5bc7 f0 2f               BEQ RENU_26
5bc9 20 9c 5d            JSR Next_Byte
5bcc 85 16               STA LINNUM         ; line # lo
5bce c8                  INY
5bcf 20 c9 03            JSR INDTXT         ; line # hi
5bd2 38                  SEC
5bd3 e5 5d               SBC HIGHTR+1
5bd5 90 19               BCC RENU_24        ; -> line # < old start
5bd7 d0 06               BNE RENU_22
5bd9 a5 16               LDA LINNUM
5bdb e5 5c               SBC HIGHTR
5bdd 90 11               BCC RENU_24        ; -> line # < old start
5bdf a5 64    RENU_22    LDA FAC1_M1
5be1 91 3d               STA (TXTPTR),Y     ; new line # hi
5be3 88                  DEY
5be4 a5 65               LDA FAC1_M2
5be6 91 3d               STA (TXTPTR),Y     ; new line # lo
5be8 20 9c 5d            JSR Next_Byte
5beb 20 80 5d            JSR Next_Number
5bee f0 d4               BEQ RENU_20
5bf0 20 9c 5d RENU_24    JSR Next_Byte
5bf3 20 83 5d            JSR Skip_To_EOL
5bf6 f0 cc               BEQ RENU_20
5bf8 4c e5 5e RENU_26    JMP Relink_Set_Top ; finished

              ; ***************
5bfb            Replace_Targets
              ; ***************

5bfb 20 54 52            JSR Reset_TXTPTR
5bfe 20 99 5d RENU_30    JSR Get_Link_Hi
5c01 d0 03               BNE RENU_32
5c03 4c 68 5d            JMP Ren_Line_To_FAC ; -> return
5c06 20 9c 5d RENU_32    JSR Next_Byte
5c09 85 4b               STA FORPNT
5c0b 20 9c 5d            JSR Next_Byte
5c0e 85 4c               STA FORPNT+1       ; (FORPNT) := old number
5c10 20 9c 5d RENU_34    JSR Next_Byte
5c13 c9 22    RENU_36    CMP #QUOTE
5c15 d0 0b               BNE RENU_40
5c17 20 9c 5d RENU_38    JSR Next_Byte
5c1a f0 e2               BEQ RENU_30
5c1c c9 22               CMP #QUOTE
5c1e d0 f7               BNE RENU_38
5c20 f0 ee               BEQ RENU_34
5c22 aa       RENU_40    TAX
5c23 f0 d9               BEQ RENU_30        ; -> end of line
5c25 10 e9               BPL RENU_34        ; -> no token
5c27 a2 08               LDX #8             ; # of tokens
5c29 dd ef 5a RENU_42    CMP Renumber_Token-1,X
5c2c f0 28               BEQ RENU_50
5c2e ca                  DEX
5c2f d0 f8               BNE RENU_42
5c31 c9 cb               CMP #$cb           ; GO token
5c33 d0 0b               BNE RENU_46
5c35 20 80 03 RENU_44    JSR CHRGET
5c38 f0 c4               BEQ RENU_30
5c3a c9 a4               CMP #$a4           ; TO token
5c3c f0 18               BEQ RENU_50
5c3e d0 d0               BNE RENU_34
5c40 c9 fe    RENU_46    CMP #$fe           ; start of 2-byte token
5c42 d0 cc               BNE RENU_34
5c44 20 80 03            JSR CHRGET
5c47 f0 ec               BEQ RENU_44
5c49 c9 17               CMP #$17           ; COLLISION token
5c4b d0 c3               BNE RENU_34
5c4d 20 80 03 RENU_48    JSR CHRGET
5c50 f0 e3               BEQ RENU_44
5c52 c9 2c               CMP #','
5c54 d0 f7               BNE RENU_48
5c56 a5 3d    RENU_50    LDA TXTPTR         ; found token with target
5c58 8d 00 12            STA OLDLIN
5c5b a5 3e               LDA TXTPTR+1
5c5d 8d 01 12            STA OLDLIN+1
5c60 20 80 03            JSR CHRGET
5c63 b0 ae               BCS RENU_36
5c65 20 a0 50            JSR Scan_Linenumber
5c68 20 19 5d            JSR Replace_Number
5c6b ad 00 12            LDA OLDLIN
5c6e 85 3d               STA TXTPTR
5c70 ad 01 12            LDA OLDLIN+1
5c73 85 3e               STA TXTPTR+1
5c75 20 80 03            JSR CHRGET
5c78 a5 3d               LDA TXTPTR
5c7a d0 02               BNE RENU_52
5c7c c6 3e               DEC TXTPTR+1
5c7e c6 3d    RENU_52    DEC TXTPTR
5c80 a2 ff               LDX #$ff
5c82 a5 77               LDA TEMP_A         ; test run or active run ?
5c84 f0 41               BEQ RENU_60        ; -> do replacement
5c86 20 8e 7e            JSR Test_OOM_CHRGOT
5c89 c9 2c    RENU_54    CMP #','
5c8b f0 c9               BEQ RENU_50        ; -> multiple targets
5c8d d0 84               BNE RENU_36        ; -> look for next token

              ; ***************
5c8f            Test_OOM_Bank_0
              ; ***************

5c8f e8                  INX                ; X = length of old number
5c90 bd 01 01            LDA STACK+1,X
5c93 f0 1f               BEQ OOM0_30
5c95 20 80 03            JSR CHRGET
5c98 90 f5               BCC Test_OOM_Bank_0
5c9a e6 3f    OOM0_10    INC FNDPNT
5c9c d0 02               BNE OOM0_20
5c9e e6 40               INC FNDPNT+1
5ca0 38       OOM0_20    SEC
5ca1 a5 3f               LDA FNDPNT
5ca3 ed 12 12            SBC TEXT_MAX
5ca6 a5 40               LDA FNDPNT+1
5ca8 ed 13 12            SBC TEXT_MAX+1
5cab b0 17               BCS OOM0_Err
5cad e8                  INX
5cae bd 01 01            LDA STACK+1,X
5cb1 d0 e7               BNE OOM0_10
5cb3 60                  RTS ;Size   37 [Test_OOM_Bank_0]
5cb4 20 80 03 OOM0_30    JSR CHRGET
5cb7 b0 0a               BCS OOM0_Ret
5cb9 a5 3f               LDA FNDPNT
5cbb d0 02               BNE OOM0_40
5cbd c6 40               DEC FNDPNT+1
5cbf c6 3f    OOM0_40    DEC FNDPNT
5cc1 90 f1               BCC OOM0_30
5cc3 60       OOM0_Ret   RTS ;Size   53 [Test_OOM_Bank_0]
5cc4 4c 3a 4d OOM0_Err   JMP OOM_Error



              ; *******
5cc7            RENU_60
              ; *******

5cc7 e8                  INX
5cc8 bd 01 01 RENU_62    LDA STACK+1,X
5ccb f0 2c               BEQ RENU_68
5ccd 48                  PHA
5cce 20 9c 5d            JSR Next_Byte
5cd1 c9 3a               CMP #':'
5cd3 b0 0c               BCS RENU_64
5cd5 c9 20               CMP #' '
5cd7 f0 08               BEQ RENU_64
5cd9 38                  SEC
5cda e9 30               SBC #'0'
5cdc 38                  SEC
5cdd e9 d0               SBC #$d0
5cdf 90 10               BCC RENU_66        ; -> no digit
5ce1 20 a7 5d RENU_64    JSR Save_TXTPTR
5ce4 e6 6d               INC FAC2_M3
5ce6 20 df 5d            JSR Move_Text_Down ; delete old number
5ce9 ee 10 12            INC TEXT_TOP
5cec d0 03               BNE RENU_66
5cee ee 11 12            INC TEXT_TOP+1
5cf1 68       RENU_66    PLA
5cf2 a0 00               LDY #0
5cf4 91 3d               STA (TXTPTR),Y
5cf6 e8                  INX
5cf7 d0 cf               BNE RENU_62
5cf9 20 80 03 RENU_68    JSR CHRGET
5cfc b0 8b               BCS RENU_54
5cfe 20 a7 5d RENU_70    JSR Save_TXTPTR
5d01 c6 6d               DEC FAC2_M3
5d03 20 c6 5d            JSR Move_Text_Up   ; insert new number
5d06 ad 10 12            LDA TEXT_TOP
5d09 d0 03               BNE RENU_72
5d0b ce 11 12            DEC TEXT_TOP+1
5d0e ce 10 12 RENU_72    DEC TEXT_TOP
5d11 20 86 03            JSR CHRGOT
5d14 90 e8               BCC RENU_70
5d16 4c 89 5c            JMP RENU_54        ; replacement done

              ; **************
5d19            Replace_Number
              ; **************

5d19 20 68 5d            JSR Ren_Line_To_FAC
5d1c 20 99 5d RENU_80    JSR Get_Link_Hi
5d1f d0 0d               BNE RENU_82
5d21 a2 27               LDX #$27           ; unresolved reference
5d23 a5 4b               LDA FORPNT
5d25 85 3b               STA CURLIN
5d27 a5 4c               LDA FORPNT+1
5d29 85 3c               STA CURLIN+1
5d2b 4c 3c 4d            JMP Print_Error_X
5d2e 20 9c 5d RENU_82    JSR Next_Byte      ; line # lo
5d31 85 5a               STA ARYPNT
5d33 c5 16               CMP LINNUM
5d35 d0 27               BNE RENU_88
5d37 20 9c 5d            JSR Next_Byte      ; line # hi
5d3a 85 5b               STA ARYPNT+1
5d3c c5 17               CMP LINNUM+1
5d3e d0 23               BNE RENU_90
5d40 38                  SEC
5d41 e5 5d               SBC HIGHTR+1
5d43 90 08               BCC RENU_84
5d45 d0 0e               BNE RENU_86
5d47 a5 16               LDA LINNUM
5d49 e5 5c               SBC HIGHTR
5d4b b0 08               BCS RENU_86
5d4d a5 16    RENU_84    LDA LINNUM
5d4f 85 65               STA FAC1_M2
5d51 a5 17               LDA LINNUM+1
5d53 85 64               STA FAC1_M1
5d55 a2 90    RENU_86    LDX #$90
5d57 38                  SEC
5d58 20 75 8c            JSR Word_To_FAC1
5d5b 4c 42 8e            JMP Format_FAC1

5d5e 20 9c 5d RENU_88    JSR Next_Byte
5d61 85 5b               STA ARYPNT+1
5d63 20 75 5d RENU_90    JSR Next_Line
5d66 f0 b4               BEQ RENU_80

              ; ***************
5d68            Ren_Line_To_FAC
              ; ***************

5d68 ad 70 11            LDA Ren_Line_Lo
5d6b 85 65               STA FAC1_M2
5d6d ad 71 11            LDA Ren_Line_Hi
5d70 85 64               STA FAC1_M1
5d72 4c 54 52            JMP Reset_TXTPTR

              ; *********
5d75            Next_Line
              ; *********

5d75 a5 5a               LDA ARYPNT
5d77 38                  SEC
5d78 e5 5c               SBC HIGHTR
5d7a a5 5b               LDA ARYPNT+1
5d7c e5 5d               SBC HIGHTR+1
5d7e 90 03               BCC Skip_To_EOL

              ; ***********
5d80            Next_Number
              ; ***********

5d80 20 89 5d            JSR Add_Renumber_Step

              ; ***********
5d83            Skip_To_EOL
              ; ***********

5d83 20 9c 5d            JSR Next_Byte
5d86 d0 fb               BNE Skip_To_EOL
5d88 60                  RTS ;Size    6 [Skip_To_EOL]

              ; *****************
5d89            Add_Renumber_Step
              ; *****************

5d89 a5 65               LDA FAC1_M2
5d8b 18                  CLC
5d8c 6d 72 11            ADC Ren_Step_Lo
5d8f 85 65               STA FAC1_M2
5d91 a5 64               LDA FAC1_M1
5d93 6d 73 11            ADC Ren_Step_Hi
5d96 85 64               STA FAC1_M1
5d98 60                  RTS ;Size   16 [Add_Renumber_Step]

              ; ***********
5d99            Get_Link_Hi
              ; ***********

5d99 20 9c 5d            JSR Next_Byte

              ; *********
5d9c            Next_Byte
              ; *********

5d9c a0 00               LDY #0
5d9e e6 3d               INC TXTPTR
5da0 d0 02               BNE NeBy_10
5da2 e6 3e               INC TXTPTR+1
5da4 4c c9 03 NeBy_10    JMP INDTXT

              ; ***********
5da7            Save_TXTPTR
              ; ***********

5da7 a5 3d               LDA TXTPTR
5da9 85 24               STA INDEXA
5dab a5 3e               LDA TXTPTR+1
5dad 85 25               STA INDEXA+1
5daf ad 10 12            LDA TEXT_TOP
5db2 85 26               STA INDEXB
5db4 ad 11 12            LDA TEXT_TOP+1
5db7 85 27               STA INDEXB+1
5db9 a0 00               LDY #0
5dbb 84 0d               STY B_COUNT
5dbd 84 6d               STY FAC2_M3
5dbf 60                  RTS ;Size   25 [Save_TXTPTR]


              ; **********
5dc0            Inc_INDEXB
              ; **********

5dc0 e6 24               INC INDEXA
5dc2 d0 02               BNE Move_Text_Up
5dc4 e6 25               INC INDEXA+1

              ; ************
5dc6            Move_Text_Up
              ; ************

5dc6 a4 0d               LDY B_COUNT
5dc8 c8                  INY
5dc9 20 05 43            JSR Get_INDEXA_0
5dcc a4 6d               LDY FAC2_M3
5dce c8                  INY
5dcf 91 24               STA (INDEXA),Y
5dd1 20 ee 5d            JSR INDEXA_EQ_INDEXB
5dd4 d0 ea               BNE Inc_INDEXB
5dd6 60                  RTS ;Size   17 [Move_Text_Up]


              ; **********
5dd7            Dec_INDEXB
              ; **********

5dd7 a5 26               LDA INDEXB
5dd9 d0 02               BNE DEI2_10
5ddb c6 27               DEC INDEXB+1
5ddd c6 26    DEI2_10    DEC INDEXB

              ; **************
5ddf            Move_Text_Down
              ; **************

5ddf a4 0d               LDY B_COUNT
5de1 20 c0 03            JSR Get_INDEXB_0
5de4 a4 6d               LDY FAC2_M3
5de6 91 26               STA (INDEXB),Y
5de8 20 ee 5d            JSR INDEXA_EQ_INDEXB
5deb d0 ea               BNE Dec_INDEXB
5ded 60                  RTS ;Size   15 [Move_Text_Down]

              ; ****************
5dee            INDEXA_EQ_INDEXB
              ; ****************

5dee a5 24               LDA INDEXA
5df0 c5 26               CMP INDEXB
5df2 d0 04               BNE CII2_Ret
5df4 a5 25               LDA INDEXA+1
5df6 c5 27               CMP INDEXB+1
5df8 60       CII2_Ret   RTS ;Size   11 [INDEXA_EQ_INDEXB]


              ; *****************
5df9            BASIC_FOR ; $5df9
              ; *****************

5df9 a9 80              LDA #$80
5dfb 85 12              STA SUBFLG          ; Inhibit integer index
5dfd 20 c6 53           JSR BASIC_LET       ; define index variable
5e00 a9 81              LDA #$81            ; FOR token
5e02 20 aa 4f           JSR Find_Token_On_Stack
5e05 f0 08              BEQ FOR_10          ; -> found
5e07 a9 12              LDA #$12            ; allocate 18 bytes for structure
5e09 20 fe 4f           JSR SUB_TOS
5e0c 20 47 50           JSR Init_FNDPNT
5e0f 20 50 50 FOR_10    JSR Update_TOS
5e12 20 a2 52           JSR Skip_To_EOS
5e15 98                 TYA
5e16 a0 11              LDY #$11
5e18 18                 CLC
5e19 65 3d              ADC TXTPTR
5e1b 91 7d              STA (TOS),Y         ; 11 : TXTPTR of loop body
5e1d a5 3e              LDA TXTPTR+1
5e1f 69 00              ADC #0
5e21 88                 DEY
5e22 91 7d              STA (TOS),Y         ; 10 : TXTPTR+1
5e24 a5 3c              LDA CURLIN+1
5e26 88                 DEY
5e27 91 7d              STA (TOS),Y         ; 0f : CURLIN+1
5e29 a5 3b              LDA CURLIN
5e2b 88                 DEY
5e2c 91 7d              STA (TOS),Y         ; 0e : CURLIN
5e2e a9 a4              LDA #$a4            ; TO token
5e30 20 5e 79           JSR Need_A
5e33 20 da 77           JSR Assert_Numeric
5e36 20 d7 77           JSR Eval_Numeric
5e39 a5 68              LDA FAC1_SI
5e3b 09 7f              ORA #$7f
5e3d 25 64              AND FAC1_M1         ; put sign bit into M1
5e3f 85 64              STA FAC1_M1
5e41 a2 04              LDX #4
5e43 a0 0d              LDY #13
5e45 b5 63    FOR_20    LDA FAC1_EX,X       ; 09-0d : store TO value
5e47 91 7d              STA (TOS),Y
5e49 ca                 DEX                 ; non fatal bug
5e4a 88                 DEY                 ; X<0 should end the loop
5e4b 10 f8              BPL FOR_20
5e4d a9 9c              LDA #<Real_1        ; default STEP value = 1.0
5e4f a0 89              LDY #>Real_1
5e51 20 d4 8b           JSR Load_FAC1_AY
5e54 20 86 03           JSR CHRGOT
5e57 c9 a9              CMP #$a9            ; STEP token
5e59 d0 06              BNE FOR_30
5e5b 20 80 03           JSR CHRGET
5e5e 20 d7 77           JSR Eval_Numeric    ; get STEP value
5e61 20 57 8c FOR_30    JSR Test_FAC1_Sign
5e64 48                 PHA
5e65 20 47 8c           JSR Round_FAC1
5e68 68                 PLA
5e69 a0 08              LDY #8
5e6b a2 05              LDX #5
5e6d 91 7d    FOR_40    STA (TOS),Y         ; 08    : store STEP sign
5e6f b5 62              LDA FAC1_EX-1,X     ; 03-07 : store STEP value
5e71 88                 DEY
5e72 ca                 DEX
5e73 10 f8              BPL FOR_40
5e75 a5 4c              LDA FORPNT+1
5e77 91 7d              STA (TOS),Y         ; 02 : FORPNT+1
5e79 a5 4b              LDA FORPNT
5e7b 88                 DEY
5e7c 91 7d              STA (TOS),Y         ; 01 : FORPNT
5e7e a9 81              LDA #$81
5e80 88                 DEY
5e81 91 7d              STA (TOS),Y         ; 00 : FOR token marker
5e83 60                 RTS ;Size  139 [BASIC_FOR]
5e84 4c 6c 79 FOR_Err   JMP SYNTAX_ERROR

              ; ********************
5e87            BASIC_DELETE ; $5e87
              ; ********************

5e87 20 f0 84           JSR Assert_Direct_Mode
5e8a 20 86 03           JSR CHRGOT
5e8d f0 f5              BEQ FOR_Err
5e8f 20 fb 5e           JSR Get_Line_Range
5e92 a5 61              LDA LOWTR
5e94 a6 62              LDX LOWTR+1
5e96 85 26              STA INDEXB
5e98 86 27              STX INDEXB+1
5e9a 20 64 50           JSR Search_BASIC_Line
5e9d 90 15              BCC DEL_20          ; -> not found
5e9f a0 01              LDY #1
5ea1 20 ec 42           JSR Get_LOWTR_0     ; link high
5ea4 88                 DEY
5ea5 aa                 TAX
5ea6 d0 05              BNE DEL_10
5ea8 20 ec 42           JSR Get_LOWTR_0     ; link low
5eab f0 07              BEQ DEL_20          ; -> end of program
5ead 20 ec 42 DEL_10    JSR Get_LOWTR_0
5eb0 85 61              STA LOWTR
5eb2 86 62              STX LOWTR+1         ; (LOWTR) = next line
5eb4 a5 26    DEL_20    LDA INDEXB
5eb6 38                 SEC
5eb7 e5 61              SBC LOWTR
5eb9 aa                 TAX
5eba a5 27              LDA INDEXB+1
5ebc e5 62              SBC LOWTR+1
5ebe a8                 TAY
5ebf b0 24              BCS Relink_Set_Top  ; -> finished deleting
5ec1 8a                 TXA
5ec2 18                 CLC
5ec3 6d 10 12           ADC TEXT_TOP
5ec6 8d 10 12           STA TEXT_TOP
5ec9 98                 TYA
5eca 6d 11 12           ADC TEXT_TOP+1
5ecd 8d 11 12           STA TEXT_TOP+1
5ed0 a0 00              LDY #0
5ed2 20 ec 42 DEL_30    JSR Get_LOWTR_0     ; move upper part of program
5ed5 91 26              STA (INDEXB),Y      ; down, deleting current line
5ed7 e6 61              INC LOWTR
5ed9 d0 02              BNE DEL_40
5edb e6 62              INC LOWTR+1
5edd 20 94 7e DEL_40    JSR Inc_INDEXB_Cmp_TEXT_TOP
5ee0 90 f0              BCC DEL_30
5ee2 ea                 NOP
5ee3 ea                 NOP
5ee4 ea                 NOP

              ; **********************
5ee5            Relink_Set_Top ; $5ee5
              ; **********************

5ee5 20 4f 4f           JSR Relink
5ee8 a5 24              LDA INDEXA
5eea a6 25              LDX INDEXA+1
5eec 18                 CLC
5eed 69 02              ADC #2
5eef 8d 10 12           STA TEXT_TOP
5ef2 90 01              BCC ReST_10
5ef4 e8                 INX
5ef5 8e 11 12 ReST_10   STX TEXT_TOP+1
5ef8 60                 RTS ;Size   20 [Relink_Set_Top]

5ef9 00 00              .FILL $5efb-* ($00) ;    2 bytes ; 2 bytes

              ; **********************
5efb            Get_Line_Range ; $5efb
              ; **********************

5efb f0 12              BEQ GLR_10          ; -> no arguments
5efd 90 10              BCC GLR_10          ; -> digit
5eff c9 ab              CMP #$ab            ; leading '-' token
5f01 d0 2e              BNE GLR_ERR         ; neither number nor minus
5f03 a0 01              LDY #1
5f05 20 c9 03           JSR INDTXT          ; char after -
5f08 f0 27              BEQ GLR_ERR         ; none:  -> error
5f0a c9 3a              CMP #':'
5f0c f0 23              BEQ GLR_ERR         ; colon: -> error
5f0e 38                 SEC
5f0f 20 a0 50 GLR_10    JSR Scan_Linenumber
5f12 20 64 50           JSR Search_BASIC_Line
5f15 20 86 03           JSR CHRGOT
5f18 f0 0c              BEQ GLR_20          ; -> end of statement
5f1a c9 ab              CMP #$ab            ; '-' token
5f1c d0 13              BNE GLR_ERR
5f1e 20 80 03           JSR CHRGET
5f21 20 a0 50           JSR Scan_Linenumber
5f24 d0 0b              BNE GLR_ERR
5f26 a5 0a    GLR_20    LDA ENDCHR          ; # of digits
5f28 d0 06              BNE GLR_Ret
5f2a a9 ff              LDA #$ff            ; endline default = $ffff
5f2c 85 16              STA LINNUM
5f2e 85 17              STA LINNUM+1
5f30 60       GLR_Ret   RTS ;Size   54 [Get_Line_Range]
5f31 4c 6c 79 GLR_ERR   JMP SYNTAX_ERROR

              ; *******************
5f34            BASIC_PUDEF ; $5f34
              ; *******************

5f34 20 7b 87           JSR Eval_String
5f37 a8                 TAY                 ; length of string
5f38 88                 DEY
5f39 c0 04              CPY #4
5f3b 90 03              BCC PUDEF_10
5f3d 4c 28 7d           JMP Error_Illegal_Quantity ; PUDEF string too long
5f40 20 b7 03 PUDEF_10  JSR Get_INDEXA_1
5f43 8d 03 ff           STA MMU_LCRC
5f46 99 04 12           STA PU_FILL,Y        ; redefine PU characters
5f49 88                 DEY
5f4a 10 f4              BPL PUDEF_10
5f4c 60                 RTS ;Size   25 [BASIC_PUDEF]

              ; ******************
5f4d            BASIC_TRAP ; $5f4d
              ; ******************

5f4d 20 d9 84           JSR Assert_Non_Direct
5f50 20 86 03           JSR CHRGOT
5f53 f0 07              BEQ TRAP_10         ; -> disable trapping
5f55 20 12 88           JSR Get_Integer
5f58 8c 0b 12           STY TRAPNO
5f5b 2c                 BIT
5f5c a9 ff    TRAP_10   LDA #$ff
5f5e 8d 0c 12           STA TRAPNO+1
5f61 60                 RTS ;Size   21 [BASIC_TRAP]

              ; ********************
5f62            BASIC_RESUME ; $5f62
              ; ********************

5f62 20 d9 84           JSR Assert_Non_Direct
5f65 ae 0a 12           LDX ERRLIN+1
5f68 e8                 INX
5f69 f0 70              BEQ CANT_RESUME     ; no error line defined
5f6b 20 86 03           JSR CHRGOT
5f6e f0 47              BEQ Resume_Execution
5f70 90 3a              BCC RESU_30
5f72 c9 82              CMP #$82            ; NEXT token
5f74 d0 62              BNE RESU_Err
5f76 20 b7 5f           JSR Resume_Execution
5f79 a0 00              LDY #0
5f7b 20 c9 03           JSR INDTXT
5f7e d0 26              BNE RESU_20
5f80 c8                 INY
5f81 20 c9 03           JSR INDTXT
5f84 d0 09              BNE RESU_10
5f86 c8                 INY
5f87 20 c9 03           JSR INDTXT
5f8a d0 03              BNE RESU_10
5f8c 4c 37 4d           JMP BASIC_Ready
5f8f a0 03    RESU_10   LDY #3
5f91 20 c9 03           JSR INDTXT
5f94 85 3b              STA CURLIN
5f96 c8                 INY
5f97 20 c9 03           JSR INDTXT
5f9a 85 3c              STA CURLIN+1
5f9c 98                 TYA
5f9d 18                 CLC
5f9e 65 3d              ADC TXTPTR
5fa0 85 3d              STA TXTPTR
5fa2 90 02              BCC RESU_20
5fa4 e6 3e              INC TXTPTR+1
5fa6 20 80 03 RESU_20   JSR CHRGET
5fa9 4c 8f 52           JMP Skip_Statement
5fac 20 12 88 RESU_30   JSR Get_Integer
5faf 85 17              STA LINNUM+1
5fb1 20 c6 5f           JSR Clear_Error_Flag
5fb4 4c fb 59           JMP GoTo_10

              ; *********************************
5fb7            Resume_Execution ; $ 5fb7 ; $5fb7
              ; *********************************

5fb7 a2 01              LDX #1
5fb9 bd 09 12 ReEx_10   LDA ERRLIN,X
5fbc 95 3b              STA CURLIN,X
5fbe bd 0e 12           LDA ERRTXT,X
5fc1 95 3d              STA TXTPTR,X
5fc3 ca                 DEX
5fc4 10 f3              BPL ReEx_10

              ; ************************
5fc6            Clear_Error_Flag ; $5fc6
              ; ************************

5fc6 a2 ff              LDX #$ff
5fc8 8e 08 12           STX ERRNUM
5fcb 8e 09 12           STX ERRLIN
5fce 8e 0a 12           STX ERRLIN+1
5fd1 ae 0d 12           LDX TMPTRP
5fd4 8e 0c 12           STX TRAPNO+1
5fd7 60                 RTS ;Size   18 [Clear_Error_Flag]
5fd8 4c 6c 79 RESU_Err  JMP SYNTAX_ERROR

              ; ****************************
5fdb            CANT_RESUME ; $b5fdb ; $5fdb
              ; ****************************

5fdb a2 1f          LDX #$1f
5fdd 4c 3c 4d       JMP Print_Error_X

              ; ****************
5fe0            BASIC_DO ; $5fe0
              ; ****************

5fe0 a0 01              LDY #1
5fe2 b9 3d 00 DO_10     LDA TXTPTR,Y        ; save position and line #
5fe5 99 14 12           STA TEXT_TMP,Y
5fe8 b9 3b 00           LDA CURLIN,Y
5feb 99 16 12           STA TEXT_LIN,Y
5fee 88                 DEY
5fef 10 f1              BPL DO_10
5ff1 20 86 03           JSR CHRGOT
5ff4 f0 1c              BEQ DO_40           ; -> unconditional DO
5ff6 c9 fc              CMP #$fc            ; UNTIL token
5ff8 f0 11              BEQ DO_30
5ffa c9 fd              CMP #$fd            ; WHILE token
5ffc d0 43              BNE Exit_Syn        ; SYNTAX ERROR
5ffe 20 db 60           JSR Next_Expression
6001 a5 63              LDA FAC1_EX
6003 d0 0d              BNE DO_40           ; -> WHILE(true)
6005 20 86 03 DO_20     JSR CHRGOT
6008 4c 47 60           JMP EXIT_10         ; -> WHILE(false)

600b 20 db 60 DO_30     JSR Next_Expression
600e a5 63              LDA FAC1_EX
6010 d0 f3              BNE DO_20           ; -> UNTIL(true)
6012 a9 05    DO_40     LDA #5
6014 20 fe 4f           JSR SUB_TOS         ; allocate DO structure
6017 8d 03 ff           STA MMU_LCRC
601a a0 04              LDY #4
601c ad 15 12           LDA TEXT_TMP+1
601f 91 7d              STA (TOS),Y         ; TXTPTR loop body
6021 88                 DEY
6022 ad 14 12           LDA TEXT_TMP
6025 91 7d              STA (TOS),Y
6027 88                 DEY
6028 ad 17 12           LDA TEXT_LIN+1      ; LINE # loop body
602b 91 7d              STA (TOS),Y
602d 88                 DEY
602e ad 16 12           LDA TEXT_LIN
6031 91 7d              STA (TOS),Y
6033 88                 DEY
6034 a9 eb              LDA #$eb            ; DO token marker
6036 91 7d              STA (TOS),Y
6038 60                 RTS ;Size   89 [BASIC_DO]

              ; ******************
6039            BASIC_EXIT ; $6039
              ; ******************

6039 20 9b 60           JSR Exit_DO
603c 20 86 03           JSR CHRGOT
603f f0 06              BEQ EXIT_10
6041 4c 6c 79 Exit_Syn  JMP SYNTAX_ERROR

              ; *****************
6044            Exit_LOOP ; $6044
              ; *****************

6044 20 80 03           JSR CHRGET
6047 f0 17    EXIT_10   BEQ EXIT_30
6049 c9 ec              CMP #$ec            ; LOOP token
604b f0 3a              BEQ EXIT_40
604d c9 22              CMP #QUOTE
604f f0 0a              BEQ EXIT_20
6051 c9 eb              CMP #$eb            ; DO token
6053 d0 ef              BNE Exit_LOOP
6055 20 44 60           JSR Exit_LOOP
6058 4c 05 60           JMP DO_20
605b 20 7c 53 EXIT_20   JSR Skip_To_End_Of_String
605e d0 e4              BNE Exit_LOOP
6060 c9 3a    EXIT_30   CMP #':'
6062 f0 e0              BEQ Exit_LOOP
6064 24 7f              BIT RUNMOD
6066 10 42              BPL EXIT_50
6068 a0 02              LDY #2
606a 20 c9 03           JSR INDTXT
606d f0 3b              BEQ EXIT_50
606f c8                 INY
6070 20 c9 03           JSR INDTXT
6073 85 3b              STA CURLIN
6075 c8                 INY
6076 20 c9 03           JSR INDTXT
6079 85 3c              STA CURLIN+1
607b 98                 TYA
607c 18                 CLC
607d 65 3d              ADC TXTPTR
607f 85 3d              STA TXTPTR
6081 90 c1              BCC Exit_LOOP
6083 e6 3e              INC TXTPTR+1
6085 d0 bd              BNE Exit_LOOP
6087 4c 8f 52 EXIT_40   JMP Skip_Statement

              ; ******************
608a            BASIC_LOOP ; $608a
              ; ******************

608a f0 35              BEQ EXIT_80
608c c9 fd              CMP #$fd
608e f0 2c              BEQ EXIT_70
6090 c9 fc              CMP #$fc
6092 d0 ad              BNE Exit_Syn
6094 20 db 60           JSR Next_Expression
6097 a5 63              LDA FAC1_EX
6099 f0 26              BEQ EXIT_80

              ; ***************
609b            Exit_DO ; $609b
              ; ***************

609b a9 eb              LDA #$eb            ; DO token
609d 20 aa 4f           JSR Find_Token_On_Stack
60a0 d0 15              BNE EXIT_60
60a2 20 50 50           JSR Update_TOS
60a5 a0 05              LDY #5
60a7 4c 59 50           JMP Free_TOS

60aa ad 16 12 EXIT_50   LDA TEXT_LIN
60ad ae 17 12           LDX TEXT_LIN+1
60b0 85 3b              STA CURLIN
60b2 86 3c              STX CURLIN+1
60b4 a2 20              LDX #$20            ; LOOP NOT FOUND
60b6 2c                 BIT
60b7 a2 21    EXIT_60   LDX #$21            ; LOOP WITHOUT DO
60b9 4c 3c 4d           JMP Print_Error_X
60bc 20 db 60 EXIT_70   JSR Next_Expression
60bf f0 da              BEQ Exit_DO
60c1 20 9b 60 EXIT_80   JSR Exit_DO
60c4 88                 DEY
60c5 b1 3f              LDA (FNDPNT),Y
60c7 85 3e              STA TXTPTR+1
60c9 88                 DEY
60ca b1 3f              LDA (FNDPNT),Y
60cc 85 3d              STA TXTPTR
60ce 88                 DEY
60cf b1 3f              LDA (FNDPNT),Y
60d1 20 3b a8           JSR To_Direct_Mode
60d4 b1 3f              LDA (FNDPNT),Y
60d6 85 3b              STA CURLIN
60d8 4c e0 5f           JMP BASIC_DO

              ; ***********************
60db            Next_Expression ; $60db
              ; ***********************

60db 20 80 03           JSR CHRGET
60de 4c ef 77           JMP Eval_Expression

              ; ******************
60e1            Assign_Key ; $60e1
              ; ******************

60e1 20 f4 87           JSR Get_Byte_Var
60e4 ca                 DEX                 ; key # minus 1
60e5 e0 08              CPX #8              ; 8 function keys
60e7 90 03              BCC AsKe_10
60e9 4c 28 7d           JMP Error_Illegal_Quantity
60ec 86 77    AsKe_10   STX TEMP_A
60ee 20 5c 79           JSR Need_Comma
60f1 20 7b 87           JSR Eval_String
60f4 a8                 TAY
60f5 a9 01              LDA #1
60f7 85 26              STA INDEXB
60f9 a9 24              LDA #INDEXA
60fb a6 77              LDX TEMP_A
60fd e8                 INX                 ; X = key #
60fe 20 45 a8           JSR Map_IO
6101 20 65 ff           JSR K_PFKEY
6104 b0 01              BCS AsKe_OOM
6106 60                 RTS ;Size   38 [Assign_Key]
6107 4c 3a 4d AsKe_OOM  JMP OOM_Error

              ; *****************
610a            BASIC_KEY ; $610a
              ; *****************

610a f0 15              BEQ BKEY_10         ; -> list key strings
610c c9 91              CMP #$91            ; ON token
610e f0 0e              BEQ BKEY_Err
6110 c9 fe              CMP #$fe
6112 d0 cd              BNE Assign_Key
6114 20 80 03           JSR CHRGET
6117 c9 24              CMP #$24            ; $fe24 = OFF token
6119 f0 03              BEQ BKEY_Err
611b 4c 6c 79           JMP SYNTAX_ERROR
611e 4c 46 48 BKEY_Err  JMP Unimplemented

6121 a2 00    BKEY_10   LDX #0
6123 a0 00              LDY #0
6125 e8       BKEY_15   INX
6126 bd ff 0f           LDA PKYBUF-1,X      ; length of key string
6129 f0 53              BEQ BKEY_60          ; -> zero = unset
612b 85 78              STA KEYSIZ
612d 86 77              STX TEMP_A          ; key #
612f a2 05              LDX #5
6131 bd 2a a8 BKEY_20   LDA KEYREV,X        ; print KEY N,
6134 ca                 DEX
6135 d0 02              BNE BKEY_25
6137 05 77              ORA TEMP_A
6139 20 69 92 BKEY_25   JSR B_BSOUT
613c 8a                 TXA
613d 10 f2              BPL BKEY_20
613f a2 07              LDX #7
6141 b9 0a 10 BKEY_30   LDA PKYDEF,Y        ; next char
6144 c8                 INY
6145 48                 PHA
6146 86 79              STX SYNTMP          ; save X
6148 a2 04              LDX #4
614a dd a3 61 BKEY_35   CMP PFKEY_SPECIAL,X
614d f0 34              BEQ BKEY_65         ; -> found special char
614f ca                 DEX
6150 d0 f8              BNE BKEY_35
6152 a6 79              LDX SYNTMP          ; restore X
6154 e0 08              CPX #8
6156 90 07              BCC BKEY_40
6158 d0 0a              BNE BKEY_45
615a a9 2b              LDA #'+'
615c 20 69 92           JSR B_BSOUT
615f a9 22    BKEY_40   LDA #QUOTE
6161 20 69 92           JSR B_BSOUT
6164 68       BKEY_45   PLA
6165 20 69 92           JSR B_BSOUT
6168 a2 09              LDX #9
616a c6 78    BKEY_50   DEC KEYSIZ
616c d0 d3              BNE BKEY_30
616e e0 09              CPX #9
6170 90 05              BCC BKEY_55
6172 a9 22              LDA #QUOTE
6174 20 69 92           JSR B_BSOUT
6177 a9 8d    BKEY_55   LDA #$8d            ; SHIFT RETURN
6179 20 69 92           JSR B_BSOUT
617c a6 77              LDX TEMP_A
617e e0 08    BKEY_60   CPX #8
6180 d0 a3              BNE BKEY_15         ; -> loop to next key
6182 60                 RTS ;Size  121 [BASIC_KEY]

6183 a6 79    BKEY_65   LDX SYNTMP          ; handle printing of special chars
6185 bd 9a 61 BKEY_70   LDA REVCHR-3,X
6188 20 69 92           JSR B_BSOUT
618b ca                 DEX
618c e0 03              CPX #3
618e b0 f5              BCS BKEY_70
6190 68                 PLA
6191 20 30 a8           JSR Print_Byte_A
6194 a9 29              LDA #')'
6196 20 69 92           JSR B_BSOUT
6199 a2 08              LDX #8
619b d0 cd              BNE BKEY_50         ; always

619d 28 24 52 REVCHR    .BYTE "($RHC+"

61a3          PFKEY_SPECIAL
61a3 22 0d 8d           .BYTE $22,$0d,$8d,$22,$1b

              ; *******************
61a8            BASIC_PAINT ; $61a8
              ; *******************

61a8 20 2f 9e           JSR Assert_Color_Source
61ab a2 04              LDX #4
61ad 20 52 9e           JSR Get_Graphics_XY
61b0 20 f2 9d           JSR XY_DEST_To_POS
61b3 20 1c 9e           JSR Get_Byte_Or_Zero
61b6 e0 02              CPX #2
61b8 90 03              BCC PAINT_10        ; allow 0 or 1
61ba 4c 28 7d           JMP Error_Illegal_Quantity
61bd 8a       PAINT_10  TXA
61be 4a                 LSR A
61bf 6a                 ROR A
61c0 85 8b              STA STOPNB
61c2 10 04              BPL PAINT_15
61c4 a5 83              LDA COLSEL
61c6 f0 07              BEQ PAINT_20
61c8 20 49 9c PAINT_15  JSR Get_Pixel
61cb b0 02              BCS PAINT_20
61cd d0 01              BNE PAINT_25
61cf 60       PAINT_20  RTS ;Size   40 [BASIC_PAINT]

61d0 20 ea 92 PAINT_25  JSR Garbage_Collection
61d3 8d 03 ff           STA MMU_LCRC
61d6 a5 33              LDA STREND
61d8 85 24              STA INDEXA
61da a5 34              LDA STREND+1
61dc 85 25              STA INDEXA+1
61de 38                 SEC
61df a5 35              LDA FRETOP
61e1 e9 03              SBC #3
61e3 85 1b              STA TEMPST
61e5 a5 36              LDA FRETOP+1
61e7 e9 00              SBC #0
61e9 85 1c              STA TEMPST+1
61eb a2 00    PAINT_30  LDX #0
61ed 86 63              STX FAC1_EX
61ef 86 64              STX FAC1_M1
61f1 ae 33 11 PAINT_35  LDX YPOS
61f4 d0 03              BNE PAINT_40
61f6 ce 34 11           DEC YPOS+1
61f9 ce 33 11 PAINT_40  DEC YPOS
61fc 20 49 9c           JSR Get_Pixel
61ff b0 02              BCS PAINT_45
6201 d0 ee              BNE PAINT_35
6203 ee 33 11 PAINT_45  INC YPOS
6206 d0 03              BNE PAINT_50
6208 ee 34 11           INC YPOS+1
620b 20 19 9c PAINT_50  JSR Set_Pixel
620e ae 31 11           LDX XPOS
6211 d0 03              BNE PAINT_55
6213 ce 32 11           DEC XPOS+1
6216 ce 31 11 PAINT_55  DEC XPOS
6219 a5 63              LDA FAC1_EX
621b 20 7c 62           JSR Test_Pixel
621e 85 63              STA FAC1_EX
6220 18                 CLC
6221 ad 31 11           LDA XPOS
6224 69 02              ADC #2
6226 8d 31 11           STA XPOS
6229 90 03              BCC PAINT_60
622b ee 32 11           INC XPOS+1
622e a5 64    PAINT_60  LDA FAC1_M1
6230 20 7c 62           JSR Test_Pixel
6233 85 64              STA FAC1_M1
6235 ae 31 11           LDX XPOS
6238 d0 03              BNE PAINT_65
623a ce 32 11           DEC XPOS+1
623d ce 31 11 PAINT_65  DEC XPOS
6240 ee 33 11           INC YPOS
6243 d0 03              BNE PAINT_70
6245 ee 34 11           INC YPOS+1
6248 20 49 9c PAINT_70  JSR Get_Pixel
624b b0 02              BCS PAINT_75
624d d0 bc              BNE PAINT_50
624f a2 03    PAINT_75  LDX #3
6251 a0 00              LDY #0
6253 a5 25              LDA INDEXA+1
6255 c5 34              CMP STREND+1
6257 d0 06              BNE PAINT_80
6259 a5 24              LDA INDEXA
625b c5 33              CMP STREND
625d f0 1a              BEQ PAINT_90
625f a5 24    PAINT_80  LDA INDEXA
6261 d0 02              BNE PAINT_85
6263 c6 25              DEC INDEXA+1
6265 c6 24    PAINT_85  DEC INDEXA
6267 20 b7 03           JSR Get_INDEXA_1
626a 8d 03 ff           STA MMU_LCRC
626d 9d 31 11           STA XPOS,X
6270 ca                 DEX
6271 10 ec              BPL PAINT_80
6273 20 b5 4b           JSR Is_STOP_Key
6276 4c eb 61           JMP PAINT_30
6279 4c f2 9d PAINT_90  JMP XY_DEST_To_POS

              ; ******************
627c            Test_Pixel ; $627c
              ; ******************

627c 48                 PHA
627d 20 49 9c           JSR Get_Pixel
6280 b0 18              BCS TePi_10
6282 f0 16              BEQ TePi_10
6284 68                 PLA
6285 d0 16              BNE TePi_20
6287 aa                 TAX
6288 a8                 TAY
6289 a5 25              LDA INDEXA+1
628b c5 1c              CMP TEMPST+1
628d 90 0f              BCC TePi_30
628f d0 06              BNE TePi_OOM
6291 a5 24              LDA INDEXA
6293 c5 1b              CMP TEMPST
6295 90 07              BCC TePi_30
6297 4c 3a 4d TePi_OOM  JMP OOM_Error
629a 68       TePi_10   PLA
629b a9 00              LDA #0
629d 60       TePi_20   RTS ;Size   34 [Test_Pixel]
629e bd 31 11 TePi_30   LDA XPOS,X
62a1 8d 04 ff           STA MMU_LCRD
62a4 91 24              STA (INDEXA),Y
62a6 8d 03 ff           STA MMU_LCRC
62a9 e6 24              INC INDEXA
62ab d0 02              BNE TePi_40
62ad e6 25              INC INDEXA+1
62af e8       TePi_40   INX
62b0 e0 04              CPX #4
62b2 d0 ea              BNE TePi_30
62b4 a9 80              LDA #$80
62b6 60                 RTS ;Size   59 [Test_Pixel]

              ; *****************
62b7            BASIC_BOX ; $62b7
              ; *****************

62b7 20 2f 9e           JSR Assert_Color_Source
62ba a2 1f              LDX #XCIRCL-XPOS    ; $1f = address of upper left corner
62bc 20 6d 9e           JSR Get_Comma_And_Coordinates
62bf a2 2b              LDX #ANGBEG-XPOS    ; $2b = address of lower right corner
62c1 20 52 9e           JSR Get_Graphics_XY
62c4 20 06 9e           JSR Get_Comma_And_Integer
62c7 8c 54 11           STY XRADIUS
62ca 8d 55 11           STA XRADIUS+1
62cd 20 1c 9e           JSR Get_Byte_Or_Zero
62d0 e0 02              CPX #2
62d2 90 03              BCC BOX_02
62d4 4c 28 7d           JMP Error_Illegal_Quantity
62d7 8e 6c 11 BOX_02    STX FILFLG
62da 8a                 TXA
62db 48                 PHA
62dc 20 89 63           JSR BOX_SUB
62df 68                 PLA
62e0 d0 1c              BNE BOX_12
62e2 f0 03              BEQ BOX_06

62e4 20 0b 64 BOX_04    JSR BOX_PAINT
62e7 20 30 9b BOX_06    JSR Draw_Line
62ea ad 4e 11           LDA ANGCNT
62ed d0 f5              BNE BOX_04
62ef a2 04    BOX_08    LDX #4
62f1 bd 5b 11 BOX_10    LDA ANGBEG-1,X
62f4 9d 30 11           STA XPOS-1,X
62f7 ca                 DEX
62f8 d0 f7              BNE BOX_10
62fa 8e 6c 11           STX FILFLG
62fd 60                 RTS ;Size   71 [BASIC_BOX]
62fe a2 00    BOX_12    LDX #0
6300 ad 49 11           LDA ANGSGN
6303 4a                 LSR A
6304 90 02              BCC BOX_14
6306 a2 02              LDX #2
6308 bd 60 11 BOX_14    LDA XRCOS,X
630b 8d 5a 11           STA YDIST2
630e bd 61 11           LDA XRCOS+1,X
6311 8d 5b 11           STA YDIST2+1
6314 a9 00              LDA #0
6316 a2 03              LDX #3
6318 9d 56 11 BOX_16    STA YRADIUS,X
631b ca                 DEX
631c 10 fa              BPL BOX_16
631e a2 07    BOX_18    LDX #7
6320 bd 31 11 BOX_20    LDA XPOS,X
6323 48                 PHA
6324 ca                 DEX
6325 10 f9              BPL BOX_20
6327 20 30 9b           JSR Draw_Line
632a a2 00              LDX #0
632c 68       BOX_22    PLA
632d 9d 31 11           STA XPOS,X
6330 e8                 INX
6331 e0 08              CPX #8
6333 d0 f7              BNE BOX_22
6335 ad 5a 11 BOX_24    LDA YDIST2
6338 d0 05              BNE BOX_26
633a ce 5b 11           DEC YDIST2+1
633d 30 b0              BMI BOX_08
633f ce 5a 11 BOX_26    DEC YDIST2
6342 a2 25              LDX #$25 ; '%'
6344 a0 1b              LDY #$1b
6346 ad 49 11           LDA ANGSGN
6349 4a                 LSR A
634a 90 02              BCC BOX_28
634c a0 19              LDY #$19
634e a9 00    BOX_28    LDA #0
6350 4a       BOX_30    LSR A
6351 48                 PHA
6352 20 6d 9d           JSR LAY_Y_ADD_X
6355 9d 31 11           STA XPOS,X
6358 98                 TYA
6359 9d 32 11           STA XPOS+1,X
635c 68                 PLA
635d 90 02              BCC BOX_32
635f 09 a0              ORA #%1010 0000 ; $a0
6361 e8       BOX_32    INX
6362 e8                 INX
6363 a0 19              LDY #$19
6365 4e 49 11           LSR ANGSGN
6368 90 02              BCC BOX_34
636a a0 1b              LDY #$1b
636c 2e 49 11 BOX_34    ROL ANGSGN
636f e0 27              CPX #$27 ; '''
6371 f0 dd              BEQ BOX_30
6373 a2 06              LDX #6
6375 0a                 ASL A
6376 f0 bd              BEQ BOX_24
6378 90 08    BOX_36    BCC BOX_38
637a fe 31 11           INC XPOS,X
637d d0 03              BNE BOX_38
637f fe 32 11           INC XPOS+1,X
6382 0a       BOX_38    ASL A
6383 ca                 DEX
6384 ca                 DEX
6385 10 f1              BPL BOX_36
6387 30 95              BMI BOX_18

              ; ***************
6389            BOX_SUB ; $6389
              ; ***************

6389 a0 23              LDY #XRADIUS-XPOS   ; $23
638b 20 74 9a           JSR Sin_Cos_Ang
638e a2 1f              LDX #XCIRCL-XPOS    ; $1f
6390 a0 2b              LDY #ANGBEG-XPOS    ; $2b
6392 98       BOSU_10   TYA
6393 48                 PHA
6394 20 99 9d           JSR LAY_ABS_DIFF
6397 9d 35 11           STA XDEST,X
639a 9d 39 11           STA XABS,X
639d 9d 41 11           STA FCT,X
63a0 98                 TYA
63a1 9d 36 11           STA XDEST+1,X
63a4 9d 3a 11           STA XABS+1,X
63a7 9d 42 11           STA FCT+1,X
63aa 68                 PLA
63ab a8                 TAY
63ac 20 6d 9d           JSR LAY_Y_ADD_X
63af 9d 31 11           STA XPOS,X
63b2 98                 TYA
63b3 9d 32 11           STA XPOS+1,X
63b6 a0 2d              LDY #ANGEND-XPOS    ; $2d
63b8 e8                 INX
63b9 e8                 INX
63ba e0 21              CPX #YCIRCL-XPOS    ; $21
63bc f0 d4              BEQ BOSU_10
63be a9 90              LDA #$90
63c0 20 f3 9a           JSR ANG_DIST
63c3 ad 49 11           LDA ANGSGN
63c6 29 03              AND #%0000 0011     ; $03
63c8 8d 49 11           STA ANGSGN
63cb aa                 TAX
63cc bd ed 63           LDA BoxTab,X
63cf 20 0b 64           JSR BOX_PAINT
63d2 20 f2 9d           JSR XY_DEST_To_POS
63d5 ad 4e 11           LDA ANGCNT
63d8 20 0b 64           JSR BOX_PAINT
63db ae 49 11           LDX ANGSGN
63de bd ed 63           LDA BoxTab,X
63e1 29 f0              AND #%1111 0000     ; $f0
63e3 8d 4f 11           STA ANGCNT+1
63e6 bd f1 63           LDA AngTab,X
63e9 8d 4e 11           STA ANGCNT
63ec 60                 RTS ;Size  100 [BOX_SUB]

63ed be e4 41 BoxTab    .BYTE $be,$e4,$41,$1b
63f1 41 1b be AngTab    .BYTE $41,$1b,$be,$e4

              ;           Credits

63f5 46 52 45           .BYTE "FRED B\r"    ; Fred Bowen
63fc 54 45 52           .BYTE "TERRY R\r"   ; Terry Ryan
6404 4d 49 4b           .BYTE "MIKE I\r"    ; Mike Isgur

              ; *****************
640b            BOX_PAINT ; $640b
              ; *****************

640b 20 67 67           JSR anglpt
640e a2 04              LDX #4
6410 bd 32 11 BOPA_10   LDA XPOS+1,X
6413 0a                 ASL A
6414 7e 32 11           ROR XPOS+1,X
6417 7e 31 11           ROR XPOS,X
641a 90 08              BCC BOPA_20
641c fe 31 11           INC XPOS,X
641f d0 03              BNE BOPA_20
6421 fe 32 11           INC XPOS+1,X
6424 e8       BOPA_20   INX
6425 e8                 INX
6426 e0 06              CPX #6
6428 f0 e6              BEQ BOPA_10
642a 60                 RTS ;Size   32 [BOX_PAINT]

              ; ********************
642b            BASIC_SSHAPE ; $642b
              ; ********************

642b 20 74 a0           JSR Assert_Graphics_Mem
642e 20 af 7a           JSR Parse_Name
6431 8d 03 ff           STA MMU_LCRC
6434 8d 5f 11           STA ANGEND+1
6437 8c 60 11           STY XRCOS
643a 24 0f              BIT VALTYP
643c 30 03              BMI SSHA_02
643e 4c e7 77           JMP TYPE_MISMATCH
6441 a2 28    SSHA_02   LDX #$28
6443 20 6d 9e           JSR Get_Comma_And_Coordinates
6446 a2 04              LDX #4
6448 20 52 9e           JSR Get_Graphics_XY
644b a2 2a              LDX #$2a
644d a0 06              LDY #6
644f a9 02              LDA #2
6451 85 8e              STA VTEMPA
6453 20 99 9d SSHA_04   JSR LAY_ABS_DIFF
6456 aa                 TAX
6457 98                 TYA
6458 48                 PHA
6459 a4 8e              LDY VTEMPA
645b 20 f9 9d           JSR DEST_To_POS
645e 90 0c              BCC SSHA_06
6460 b9 59 11           LDA ROTANG+1,Y
6463 99 31 11           STA XPOS,Y
6466 b9 5a 11           LDA YDIST2,Y
6469 99 32 11           STA XPOS+1,Y
646c 8a       SSHA_06   TXA
646d 99 59 11           STA ROTANG+1,Y
6470 99 db 03           STA SAVSIZ,Y
6473 68                 PLA
6474 99 5a 11           STA YDIST2,Y
6477 99 dc 03           STA SAVSIZ+1,Y
647a a2 28              LDX #$28
647c a0 04              LDY #4
647e c6 8e              DEC VTEMPA
6480 c6 8e              DEC VTEMPA
6482 f0 cf              BEQ SSHA_04
6484 a0 ff              LDY #$ff
6486 8c 55 11           STY XRADIUS+1
6489 ad 31 11           LDA XPOS
648c 8d 5d 11           STA ANGBEG+1
648f ad 32 11           LDA XPOS+1
6492 8d 5e 11           STA ANGEND
6495 98                 TYA
6496 20 90 86           JSR Allocate_String_A
6499 8d 03 ff           STA MMU_LCRC
649c 20 e3 9c SSHA_08   JSR getpos
649f b1 8c              LDA (GRAPNT),Y
64a1 90 0e              BCC SSHA_12
64a3 ad 31 11           LDA XPOS
64a6 24 d8              BIT GRAPHM
64a8 10 02              BPL SSHA_10
64aa 38                 SEC
64ab 2a                 ROL A
64ac 29 07    SSHA_10   AND #%0000 0111 ; $07
64ae aa                 TAX
64af a9 00              LDA #0
64b1 24 d8    SSHA_12   BIT GRAPHM
64b3 10 01              BPL SSHA_14
64b5 ca                 DEX
64b6 8e 61 11 SSHA_14   STX XRCOS+1
64b9 0a       SSHA_16   ASL A
64ba ca                 DEX
64bb 10 fc              BPL SSHA_16
64bd 6a                 ROR A
64be 85 8e              STA VTEMPA
64c0 a9 08              LDA #8
64c2 24 d8              BIT GRAPHM
64c4 10 01              BPL SSHA_18
64c6 4a                 LSR A
64c7 18       SSHA_18   CLC
64c8 6d 31 11           ADC XPOS
64cb 8d 31 11           STA XPOS
64ce 90 03              BCC SSHA_20
64d0 ee 32 11           INC XPOS+1
64d3 20 e3 9c SSHA_20   JSR getpos
64d6 a9 00              LDA #0
64d8 b0 02              BCS SSHA_22
64da b1 8c              LDA (GRAPNT),Y
64dc 85 8f    SSHA_22   STA VTEMPA+1
64de ae 61 11           LDX XRCOS+1
64e1 4a       SSHA_24   LSR A
64e2 e8                 INX
64e3 e0 08              CPX #8
64e5 d0 fa              BNE SSHA_24
64e7 05 8e              ORA VTEMPA
64e9 ee 55 11           INC XRADIUS+1
64ec ac 55 11           LDY XRADIUS+1
64ef c0 fc              CPY #$fc
64f1 90 03              BCC SSHA_26
64f3 4c ed a5           JMP String_Too_Long
64f6 8d 04 ff SSHA_26      STA MMU_LCRD
64f9 91 64              STA (FAC1_M1),Y
64fb 8d 03 ff           STA MMU_LCRC
64fe ae 61 11           LDX XRCOS+1
6501 ad 59 11           LDA ROTANG+1
6504 38                 SEC
6505 24 d8              BIT GRAPHM
6507 10 03              BPL SSHA_28
6509 e9 04              SBC #4
650b 2c                 BIT
650c e9 08    SSHA_28   SBC #8
650e 8d 59 11           STA ROTANG+1
6511 a5 8f              LDA VTEMPA+1
6513 b0 a4              BCS SSHA_16
6515 ce 5a 11           DEC YDIST2
6518 10 9f              BPL SSHA_16
651a ae 5b 11           LDX YDIST2+1
651d d0 48              BNE SSHA_34
651f ce 5c 11           DEC ANGBEG
6522 10 43              BPL SSHA_34
6524 24 d8              BIT GRAPHM
6526 10 06              BPL SSHA_30
6528 0e db 03           ASL SAVSIZ
652b 2e dc 03           ROL SAVSIZ+1
652e a2 00    SSHA_30   LDX #0
6530 bd db 03 SSHA_32   LDA SAVSIZ,X
6533 c8                 INY
6534 8d 04 ff           STA MMU_LCRD
6537 91 64              STA (FAC1_M1),Y
6539 8d 03 ff           STA MMU_LCRC
653c e8                 INX
653d e0 04              CPX #4
653f d0 ef              BNE SSHA_32
6541 c8                 INY
6542 8c db 03           STY SAVSIZ
6545 a5 64              LDA FAC1_M1
6547 8d dc 03           STA SAVSIZ+1
654a a5 65              LDA FAC1_M2
654c 8d dd 03           STA SAVSIZ+2
654f a9 db              LDA #$db
6551 85 66              STA FAC1_M3
6553 a9 03              LDA #3
6555 85 67              STA FAC1_M4
6557 ad 5f 11           LDA ANGEND+1
655a 85 4b              STA FORPNT
655c ad 60 11           LDA XRCOS
655f 85 4c              STA FORPNT+1
6561 20 94 54           JSR Assing_String_From_Variable
6564 4c f2 9d           JMP XY_DEST_To_POS
6567 ce 5b 11 SSHA_34   DEC YDIST2+1
656a ee 33 11           INC YPOS
656d d0 03              BNE SSHA_36
656f ee 34 11           INC YPOS+1
6572 ad 5d 11 SSHA_36   LDA ANGBEG+1
6575 8d 31 11           STA XPOS
6578 ad 5e 11           LDA ANGEND
657b 8d 32 11           STA XPOS+1
657e ad db 03           LDA SAVSIZ
6581 8d 59 11           STA ROTANG+1
6584 ad dc 03           LDA SAVSIZ+1
6587 8d 5a 11           STA YDIST2
658a 4c 9c 64           JMP SSHA_08

              ; ********************
658d            BASIC_GSHAPE ; $658d
              ; ********************

658d 20 74 a0           JSR Assert_Graphics_Mem
6590 20 7b 87           JSR Eval_String
6593 8d 03 ff           STA MMU_LCRC
6596 8d 53 11           STA YCIRCL+1
6599 86 26              STX INDEXB
659b 84 27              STY INDEXB+1
659d a2 04              LDX #4
659f 20 52 9e           JSR Get_Graphics_XY
65a2 20 1c 9e           JSR Get_Byte_Or_Zero
65a5 e0 05              CPX #5
65a7 90 03              BCC GSHA_02
65a9 4c 28 7d           JMP Error_Illegal_Quantity
65ac 8e 54 11 GSHA_02   STX XRADIUS
65af a2 03              LDX #3
65b1 ac 53 11           LDY YCIRCL+1
65b4 c0 05              CPY #5
65b6 b0 01              BCS GSHA_04
65b8 60                 RTS ;Size   44 [BASIC_GSHAPE]
65b9 88       GSHA_04   DEY
65ba a9 26              LDA #$26 ; '&'
65bc 20 ab 03           JSR Fetch_1
65bf 8d 03 ff           STA MMU_LCRC
65c2 9d 59 11           STA ROTANG+1,X
65c5 ca                 DEX
65c6 10 f1              BPL GSHA_04
65c8 8e 55 11           STX XRADIUS+1
65cb 20 f2 9d           JSR XY_DEST_To_POS
65ce ad 59 11           LDA ROTANG+1
65d1 8d 5d 11           STA ANGBEG+1
65d4 ad 5a 11           LDA YDIST2
65d7 8d 5e 11           STA ANGEND
65da a9 08    GSHA_06   LDA #8
65dc 8d 69 11           STA BITCNT
65df ee 55 11           INC XRADIUS+1
65e2 ac 55 11           LDY XRADIUS+1
65e5 a9 26              LDA #$26 ; '&'
65e7 20 ab 03           JSR Fetch_1
65ea 8d 03 ff           STA MMU_LCRC
65ed 8d 57 11           STA YRADIUS+1
65f0 20 49 9c GSHA_08   JSR Get_Pixel
65f3 8d 56 11           STA YRADIUS
65f6 0e 57 11           ASL YRADIUS+1
65f9 2a                 ROL A
65fa ce 69 11           DEC BITCNT
65fd 24 d8              BIT GRAPHM
65ff 10 07              BPL GSHA_10
6601 0e 57 11           ASL YRADIUS+1
6604 2a                 ROL A
6605 ce 69 11           DEC BITCNT
6608 ae 54 11 GSHA_10   LDX XRADIUS
660b e0 03              CPX #3
660d 90 0c              BCC GSHA_14
660f f0 05              BEQ GSHA_12
6611 4d 56 11           EOR YRADIUS
6614 b0 11              BCS GSHA_18
6616 2d 56 11 GSHA_12   AND YRADIUS
6619 b0 0c              BCS GSHA_18
661b e0 01    GSHA_14   CPX #1
661d 90 08              BCC GSHA_18
661f f0 04              BEQ GSHA_16
6621 0d 56 11           ORA YRADIUS
6624 2c                 BIT
6625 49 ff    GSHA_16   EOR #%1111 1111 ; $ff
6627 29 03    GSHA_18   AND #%0000 0011 ; $03
6629 24 d8              BIT GRAPHM
662b 30 02              BMI GSHA_20
662d 29 01              AND #%0000 0001 ; $01
662f 85 83    GSHA_20   STA COLSEL
6631 20 19 9c           JSR Set_Pixel
6634 ee 31 11           INC XPOS
6637 d0 03              BNE GSHA_22
6639 ee 32 11           INC XPOS+1
663c 38       GSHA_22   SEC
663d ad 5d 11           LDA ANGBEG+1
6640 24 d8              BIT GRAPHM
6642 10 03              BPL GSHA_24
6644 e9 02              SBC #2
6646 2c                 BIT
6647 e9 01    GSHA_24   SBC #1
6649 8d 5d 11           STA ANGBEG+1
664c ad 5e 11           LDA ANGEND
664f e9 00              SBC #0
6651 8d 5e 11           STA ANGEND
6654 b0 2d              BCS GSHA_30
6656 a2 01              LDX #1
6658 bd 59 11 GSHA_26   LDA ROTANG+1,X
665b 9d 5d 11           STA ANGBEG+1,X
665e bd 35 11           LDA XDEST,X
6661 9d 31 11           STA XPOS,X
6664 ca                 DEX
6665 10 f1              BPL GSHA_26
6667 ee 33 11           INC YPOS
666a d0 03              BNE GSHA_28
666c ee 34 11           INC YPOS+1
666f 38       GSHA_28   SEC
6670 ad 5b 11           LDA YDIST2+1
6673 e9 01              SBC #1
6675 8d 5b 11           STA YDIST2+1
6678 ad 5c 11           LDA ANGBEG
667b e9 00              SBC #0
667d 8d 5c 11           STA ANGBEG
6680 b0 09              BCS GSHA_32
6682 60                 RTS ;Size  246 [BASIC_GSHAPE]
6683 ad 69 11 GSHA_30   LDA BITCNT
6686 f0 03              BEQ GSHA_32
6688 4c f0 65           JMP GSHA_08
668b 4c da 65 GSHA_32   JMP GSHA_06

              ; ********************
668e            BASIC_CIRCLE ; $668e
              ; ********************

668e 20 2f 9e           JSR Assert_Color_Source
6691 a2 1f              LDX #$1f
6693 20 52 9e           JSR Get_Graphics_XY
6696 20 06 9e           JSR Get_Comma_And_Integer
6699 8c 54 11           STY XRADIUS
669c 8d 55 11           STA XRADIUS+1
669f 20 06 9e           JSR Get_Comma_And_Integer
66a2 8c 56 11           STY YRADIUS
66a5 b0 11              BCS CIRC_10
66a7 ad 54 11           LDA XRADIUS
66aa 8d 56 11           STA YRADIUS
66ad ad 55 11           LDA XRADIUS+1
66b0 24 d8              BIT GRAPHM
66b2 10 04              BPL CIRC_10
66b4 0e 56 11           ASL YRADIUS
66b7 2a                 ROL A
66b8 8d 57 11 CIRC_10   STA YRADIUS+1
66bb a2 23              LDX #$23 ; '#'
66bd 20 4a 9d           JSR Scale_XY
66c0 ea                 NOP
66c1 ea                 NOP
66c2 ea                 NOP
66c3 ea                 NOP
66c4 ea                 NOP
66c5 20 06 9e           JSR Get_Comma_And_Integer
66c8 8c 5c 11           STY ANGBEG
66cb 8d 5d 11           STA ANGBEG+1
66ce 20 06 9e           JSR Get_Comma_And_Integer
66d1 8c 5e 11           STY ANGEND
66d4 8d 5f 11           STA ANGEND+1
66d7 20 06 9e           JSR Get_Comma_And_Integer
66da 85 77              STA TEMP_A
66dc 98                 TYA
66dd a4 77              LDY TEMP_A
66df 20 77 9a           JSR Sin_Cos_AY
66e2 a2 2d              LDX #$2d ; '-'
66e4 a0 2b              LDY #$2b ; '+'
66e6 20 7c 9d           JSR LAY_Y_SUB_X
66e9 90 0e              BCC CIRC_20
66eb a9 68              LDA #$68
66ed a0 01              LDY #1
66ef 20 70 9d           JSR LAY_ADD_X
66f2 9d 31 11           STA XPOS,X
66f5 98                 TYA
66f6 9d 32 11           STA XPOS+1,X
66f9 a2 03    CIRC_20   LDX #3
66fb bd 54 11 CIRC_30   LDA XRADIUS,X
66fe 9d 58 11           STA ROTANG,X
6701 ca                 DEX
6702 10 f7              BPL CIRC_30
6704 a9 90              LDA #$90
6706 20 f3 9a           JSR ANG_DIST
6709 a2 07              LDX #7
670b bd 54 11 CIRC_40   LDA XRADIUS,X
670e 9d 60 11           STA XRCOS,X
6711 ca                 DEX
6712 10 f7              BPL CIRC_40
6714 20 50 67           JSR CIRC_SUB
6717 20 f2 9d           JSR XY_DEST_To_POS
671a a2 02              LDX #2
671c 20 1e 9e           JSR Get_Byte_Or_Void
671f 8a                 TXA
6720 d0 03              BNE CIRC_50
6722 4c 28 7d           JMP Error_Illegal_Quantity
6725 8e 20 12 CIRC_50   STX ARC_SEG
6728 18                 CLC
6729 ad 20 12 CIRC_60   LDA ARC_SEG
672c 6d 5c 11           ADC ANGBEG
672f 8d 5c 11           STA ANGBEG
6732 90 03              BCC CIRC_70
6734 ee 5d 11           INC ANGBEG+1
6737 a2 2d    CIRC_70   LDX #$2d ; '-'
6739 a0 2b              LDY #$2b ; '+'
673b 20 7c 9d           JSR LAY_Y_SUB_X
673e b0 08              BCS CIRC_80
6740 20 50 67           JSR CIRC_SUB
6743 20 30 9b           JSR Draw_Line
6746 90 e1              BCC CIRC_60
6748 a0 2d    CIRC_80   LDY #$2d ; '-'
674a 20 52 67           JSR CIRC_SUB_Y
674d 4c 30 9b           JMP Draw_Line

              ; ****************
6750            CIRC_SUB ; $6750
              ; ****************

6750 a0 2b              LDY #ANGBEG-XPOS    ; $2b

              ; ******************
6752            CIRC_SUB_Y ; $6752
              ; ******************

6752 20 74 9a           JSR Sin_Cos_Ang
6755 a2 07              LDX #7
6757 bd 60 11 CISU_10   LDA XRCOS,X
675a 9d 54 11           STA XRADIUS,X
675d ca                 DEX
675e 10 f7              BPL CISU_10
6760 a9 50              LDA #$50
6762 20 f3 9a           JSR ANG_DIST
6765 a9 10              LDA #16

              ; **************
6767            anglpt ; $6767
              ; **************

6767 8d 4e 11           STA ANGCNT
676a a0 1f              LDY #$1f
676c a2 23              LDX #$23 ; '#'
676e 0e 4f 11 anglpt_1  ASL ANGCNT+1
6771 2e 4e 11           ROL ANGCNT
6774 20 6b 9d           JSR LAY_SUB_ADD
6777 e8                 INX
6778 e8                 INX
6779 0e 4f 11           ASL ANGCNT+1
677c 2e 4e 11           ROL ANGCNT
677f 20 67 9d           JSR LAY_ADD_SUB
6782 48                 PHA
6783 98                 TYA
6784 48                 PHA
6785 a0 21              LDY #$21 ; '!'
6787 e8                 INX
6788 e8                 INX
6789 e0 27              CPX #$27 ; '''
678b f0 e1              BEQ anglpt_1
678d a2 03              LDX #3
678f 68       anglpt_2  PLA
6790 9d 35 11           STA XDEST,X
6793 ca                 DEX
6794 10 f9              BPL anglpt_2
6796 60                 RTS ;Size   48 [anglpt]

              ; ******************
6797            BASIC_DRAW ; $6797
              ; ******************

6797 20 74 a0           JSR Assert_Graphics_Mem
679a a2 01              LDX #1              ; default = foreground color
679c 86 83              STX COLSEL
679e 20 86 03           JSR CHRGOT
67a1 c9 a4              CMP #$a4            ; TO token
67a3 f0 0b              BEQ DRAW_10
67a5 20 32 9e           JSR Get_Color_Source
67a8 20 86 03           JSR CHRGOT
67ab d0 03              BNE DRAW_10
67ad 4c fb 9b           JMP Double_Pixel
67b0 20 86 03 DRAW_10   JSR CHRGOT
67b3 c9 2c              CMP #','
67b5 f0 05              BEQ DRAW_20
67b7 c9 a4              CMP #$a4            ; TO token
67b9 f0 01              BEQ DRAW_20
67bb 60                 RTS ;Size   37 [BASIC_DRAW]
67bc 48       DRAW_20   PHA
67bd 20 80 03           JSR CHRGET
67c0 a2 04              LDX #4
67c2 20 70 9e           JSR Get_Coordinates
67c5 68                 PLA
67c6 10 06              BPL DRAW_30
67c8 20 30 9b           JSR Draw_Line
67cb 4c b0 67           JMP DRAW_10
67ce 20 f2 9d DRAW_30   JSR XY_DEST_To_POS
67d1 20 fb 9b           JSR Double_Pixel
67d4 4c b0 67           JMP DRAW_10

              ; ******************
67d7            BASIC_CHAR ; $67d7
              ; ******************

67d7 20 32 9e           JSR Get_Color_Source
67da a2 29              LDX #$29 ; ')'
67dc a0 1a              LDY #$1a
67de a5 d8              LDA GRAPHM
67e0 d0 05              BNE CHAR_10
67e2 20 ed ff           JSR K_SCRORG
67e5 e8                 INX
67e6 c8                 INY
67e7 8e 5e 11 CHAR_10   STX ANGEND
67ea 8c 5f 11           STY ANGEND+1
67ed 20 09 88           JSR Comma_And_Byte
67f0 ec 5e 11           CPX ANGEND
67f3 b0 0b              BCS CHAR_15
67f5 8e 5e 11           STX ANGEND
67f8 20 09 88           JSR Comma_And_Byte
67fb ec 5f 11           CPX ANGEND+1
67fe 90 03              BCC CHAR_20
6800 4c 28 7d CHAR_15   JMP Error_Illegal_Quantity
6803 8e 5f 11 CHAR_20   STX ANGEND+1
6806 20 86 03           JSR CHRGOT
6809 d0 04              BNE CHAR_25
680b a9 00              LDA #0
680d f0 06              BEQ CHAR_30
680f 20 5c 79 CHAR_25   JSR Need_Comma
6812 20 7b 87           JSR Eval_String
6815 8d 03 ff CHAR_30   STA MMU_LCRC
6818 8d 6e 11           STA NUMCNT
681b 98                 TYA
681c 48                 PHA
681d 8a                 TXA
681e 48                 PHA
681f 20 1c 9e           JSR Get_Byte_Or_Zero
6822 8a                 TXA
6823 6a                 ROR A
6824 6e 3d 11           ROR XSGN
6827 68                 PLA
6828 85 24              STA INDEXA
682a 68                 PLA
682b 85 25              STA INDEXA+1
682d a5 d8              LDA GRAPHM
682f d0 32              BNE CHAR_50
6831 ae 5f 11           LDX ANGEND+1
6834 ac 5e 11           LDY ANGEND
6837 18                 CLC
6838 20 82 7e           JSR J_PLOT
683b a0 00              LDY #0
683d 2c 3d 11           BIT XSGN
6840 10 05              BPL CHAR_35
6842 a9 12              LDA #$12
6844 20 88 7e           JSR J_PRINT
6847 cc 6e 11 CHAR_35   CPY NUMCNT
684a f0 0c              BEQ CHAR_40
684c 20 b7 03           JSR Get_INDEXA_1
684f 20 45 a8           JSR Map_IO
6852 20 0c c0           JSR E_PRINT
6855 c8                 INY
6856 d0 ef              BNE CHAR_35
6858 2c 3d 11 CHAR_40   BIT XSGN
685b 10 05              BPL CHAR_45
685d a9 92              LDA #$92
685f 20 88 7e           JSR J_PRINT
6862 60       CHAR_45   RTS ;Size  140 [BASIC_CHAR]
6863 20 74 a0 CHAR_50   JSR Assert_Graphics_Mem
6866 ad ec 11           LDA CHARGEN_GRAF
6869 8d 68 11           STA CHRPAG
686c a5 86              LDA FG_COL
686e aa                 TAX
686f 48                 PHA
6870 a5 83              LDA COLSEL
6872 48                 PHA
6873 24 d8              BIT GRAPHM
6875 10 0e              BPL CHAR_55
6877 68                 PLA
6878 f0 16              BEQ CHAR_60
687a 4a                 LSR A
687b f0 13              BEQ CHAR_60
687d a6 84              LDX MULCO1
687f 90 0f              BCC CHAR_60
6881 a6 85              LDX MULCO2
6883 b0 0b              BCS CHAR_60
6885 a6 86    CHAR_55   LDX FG_COL
6887 68                 PLA
6888 d0 06              BNE CHAR_60
688a 20 45 a8           JSR Map_IO
688d ae 21 d0           LDX VIC_BG_COL
6890 86 86    CHAR_60   STX FG_COL
6892 ae 5f 11           LDX ANGEND+1
6895 a0 00              LDY #0
6897 8c 60 11           STY XRCOS
689a ac 60 11 CHAR_65   LDY XRCOS
689d ee 60 11           INC XRCOS
68a0 20 b7 03           JSR Get_INDEXA_1
68a3 8d 03 ff           STA MMU_LCRC
68a6 ce 6e 11           DEC NUMCNT
68a9 30 2c              BMI CHAR_90
68ab c9 0e              CMP #14
68ad d0 05              BNE CHAR_70
68af ad eb 11           LDA CHARGEN_TEXT
68b2 d0 07              BNE CHAR_75
68b4 c9 8e    CHAR_70   CMP #$8e
68b6 d0 08              BNE CHAR_80
68b8 ad ec 11           LDA CHARGEN_GRAF
68bb 8d 68 11 CHAR_75   STA CHRPAG
68be d0 09              BNE CHAR_85
68c0 ac 5e 11 CHAR_80   LDY ANGEND
68c3 20 db 68           JSR Display_Character
68c6 ee 5e 11           INC ANGEND
68c9 c0 27    CHAR_85   CPY #$27 ; '''
68cb 90 cd              BCC CHAR_65
68cd a0 00              LDY #0
68cf 8c 5e 11           STY ANGEND
68d2 e8                 INX
68d3 e0 18              CPX #$18
68d5 90 c3              BCC CHAR_65
68d7 68       CHAR_90   PLA
68d8 85 86              STA FG_COL
68da 60                 RTS ;Size  260 [BASIC_CHAR]

              ; *************************
68db            Display_Character ; $68db
              ; *************************

68db 48                 PHA
68dc 20 70 9c           JSR Color_Character
68df 98                 TYA
68e0 18                 CLC
68e1 7d 33 c0           ADC E_40_Line_Lo,X
68e4 85 8c              STA GRAPNT
68e6 bd 4c c0           LDA E_40_Line_Hi,X
68e9 69 00              ADC #0
68eb 06 8c              ASL GRAPNT
68ed 2a                 ROL A
68ee 06 8c              ASL GRAPNT
68f0 2a                 ROL A
68f1 06 8c              ASL GRAPNT
68f3 2a                 ROL A
68f4 85 8d              STA GRAPNT+1
68f6 8d 03 ff           STA MMU_LCRC
68f9 a9 00              LDA #0
68fb 85 77              STA TEMP_A
68fd 68                 PLA
68fe 48                 PHA
68ff 0a                 ASL A
6900 26 77              ROL TEMP_A
6902 0a                 ASL A
6903 0a                 ASL A
6904 26 77              ROL TEMP_A
6906 85 26              STA INDEXB
6908 a5 77              LDA TEMP_A
690a 6d 68 11           ADC CHRPAG
690d 85 27              STA INDEXB+1
690f 98                 TYA
6910 48                 PHA
6911 a0 07              LDY #7
6913 ad 3d 11 DiCh_10   LDA XSGN
6916 0a                 ASL A
6917 b1 26              LDA (INDEXB),Y
6919 90 02              BCC DiCh_20
691b 49 ff              EOR #%1111 1111 ; $ff
691d 24 d8    DiCh_20   BIT GRAPHM
691f 10 2b              BPL DiCh_70
6921 29 aa              AND #%1010 1010 ; $aa
6923 85 77              STA TEMP_A
6925 a5 83              LDA COLSEL
6927 d0 0f              BNE DiCh_40
6929 a5 77              LDA TEMP_A
692b b0 07              BCS DiCh_30
692d 4a                 LSR A
692e 45 77              EOR TEMP_A
6930 49 aa              EOR #%1010 1010 ; $aa
6932 d0 18              BNE DiCh_70
6934 09 55    DiCh_30   ORA #%0101 0101 ; $55 ; 'U'
6936 d0 14              BNE DiCh_70
6938 c9 02    DiCh_40   CMP #2
693a d0 04              BNE DiCh_50
693c a5 77              LDA TEMP_A
693e b0 0c              BCS DiCh_70
6940 90 07    DiCh_50   BCC DiCh_60
6942 a5 77              LDA TEMP_A
6944 4a                 LSR A
6945 45 77              EOR TEMP_A
6947 90 03              BCC DiCh_70
6949 a5 77    DiCh_60   LDA TEMP_A
694b 4a                 LSR A
694c 91 8c    DiCh_70   STA (GRAPNT),Y
694e 88                 DEY
694f 10 c2              BPL DiCh_10
6951 68                 PLA
6952 a8                 TAY
6953 68                 PLA
6954 60                 RTS ;Size  122 [Display_Character]

              ; ********************
6955            BASIC_LOCATE ; $6955
              ; ********************

6955 20 74 a0           JSR Assert_Graphics_Mem
6958 a2 04              LDX #4
695a 20 70 9e           JSR Get_Coordinates
695d 4c f2 9d           JMP XY_DEST_To_POS

              ; *******************
6960            BASIC_SCALE ; $6960
              ; *******************

6960 20 f4 87           JSR Get_Byte_Var
6963 e0 02              CPX #2
6965 90 03              BCC SCAL_10
6967 4c 28 7d           JMP Error_Illegal_Quantity
696a 8e 6a 11 SCAL_10   STX SCALEM
696d 20 86 03           JSR CHRGOT
6970 d0 14              BNE SCAL_30
6972 a2 00              LDX #0
6974 a9 50              LDA #$50 ; 'P'
6976 a0 32              LDY #$32 ; '2'
6978 24 d8              BIT GRAPHM
697a 10 01              BPL SCAL_20
697c 4a                 LSR A
697d 86 87    SCAL_20   STX SCALE_X
697f 85 88              STA SCALE_X+1
6981 86 89              STX SCALE_Y
6983 84 8a              STY SCALE_Y+1
6985 60                 RTS ;Size   38 [BASIC_SCALE]
6986 20 c4 69 SCAL_30   JSR Get_Scale
6989 a9 d8              LDA #<SC_320
698b a0 69              LDY #>SC_320
698d 20 89 8a           JSR Load_FAC2_From_AY_ROM
6990 20 4c 8b           JSR OP_DIV
6993 20 15 88           JSR FAC1_To_LINNUM
6996 c9 00              CMP #0
6998 d0 04              BNE SCAL_40
699a c0 00              CPY #0
699c f0 37              BEQ GeSc_Err
699e 48       SCAL_40   PHA
699f 98                 TYA
69a0 48                 PHA
69a1 20 c4 69           JSR Get_Scale
69a4 a9 dd              LDA #<SC_200
69a6 a0 69              LDY #>SC_200
69a8 20 89 8a           JSR Load_FAC2_From_AY_ROM
69ab 20 4c 8b           JSR OP_DIV
69ae 20 15 88           JSR FAC1_To_LINNUM
69b1 c9 00              CMP #0
69b3 d0 04              BNE SCAL_50
69b5 c0 00              CPY #0
69b7 f0 1c              BEQ GeSc_Err
69b9 84 89    SCAL_50   STY SCALE_Y
69bb 85 8a              STA SCALE_Y+1
69bd 68                 PLA
69be 85 87              STA SCALE_X
69c0 68                 PLA
69c1 85 88              STA SCALE_X+1
69c3 60                 RTS ;Size  100 [BASIC_SCALE]

              ; *****************
69c4            Get_Scale ; $69c4
              ; *****************

69c4 20 5c 79           JSR Need_Comma
69c7 20 d7 77           JSR Eval_Numeric
69ca a5 68              LDA FAC1_SI
69cc 30 07              BMI GeSc_Err
69ce a5 63              LDA FAC1_EX
69d0 c9 90              CMP #$90
69d2 b0 01              BCS GeSc_Err
69d4 60                 RTS ;Size   17 [Get_Scale]
69d5 4c 28 7d GeSc_Err  JMP Error_Illegal_Quantity

69d8 99 1f ff SC_320    .REAL $991fff6000 ; 20971200 = 320 * 65535
69dd 98 47 ff SC_200    .REAL $9847ff3800 ; 13107000 = 200 * 65535

              ; *******************
69e2            BASIC_COLOR ; $69e2
              ; *******************

69e2 20 f4 87           JSR Get_Byte_Var
69e5 e0 07              CPX #7
69e7 b0 60              BCS COLO_90
69e9 86 77              STX TEMP_A
69eb 20 09 88           JSR Comma_And_Byte
69ee ca                 DEX
69ef e0 10              CPX #16
69f1 b0 56              BCS COLO_90
69f3 20 45 a8           JSR Map_IO
69f6 8a                 TXA
69f7 a6 77              LDX TEMP_A
69f9 e0 01              CPX #1
69fb f0 07              BEQ COLO_10
69fd b0 09              BCS COLO_20
69ff 8d 21 d0           STA VIC_BG_COL
6a02 d0 3f              BNE COLO_80
6a04 85 86    COLO_10   STA FG_COL
6a06 f0 3b              BEQ COLO_80
6a08 e0 03    COLO_20   CPX #3
6a0a f0 06              BEQ COLO_30
6a0c b0 08              BCS COLO_40
6a0e 85 84              STA MULCO1
6a10 d0 31              BNE COLO_80
6a12 85 85    COLO_30   STA MULCO2
6a14 f0 2d              BEQ COLO_80
6a16 e0 05    COLO_40   CPX #5
6a18 f0 07              BEQ COLO_50
6a1a b0 16              BCS COLO_70
6a1c 8d 20 d0           STA Vd020
6a1f d0 22              BNE COLO_80
6a21 24 d7    COLO_50   BIT MODE_80
6a23 10 08              BPL COLO_60
6a25 aa                 TAX
6a26 a5 f1              LDA E_Attribute
6a28 29 f0              AND #%1111 0000 ; $f0
6a2a 1d 4c 6a           ORA VDC_Color,X
6a2d 85 f1    COLO_60   STA E_Attribute
6a2f 4c 43 6a           JMP COLO_80
6a32 aa       COLO_70   TAX
6a33 a9 1a              LDA #$1a
6a35 8d 00 d6           STA VDC_Register
6a38 ad 01 d6           LDA VDC_Data
6a3b 29 f0              AND #%1111 0000 ; $f0
6a3d 1d 4c 6a           ORA VDC_Color,X
6a40 8d 01 d6           STA VDC_Data
6a43 20 5c 6a COLO_80   JSR setpcl
6a46 4c 1e 9e           JMP Get_Byte_Or_Void
6a49 4c 28 7d COLO_90   JMP Error_Illegal_Quantity

6a4c 00 0f 08 VDC_Color .BYTE $00,$0f,$08,$07,$0b,$04,$02,$0d
6a54 0a 0c 09           .BYTE $0a,$0c,$09,$06,$01,$05,$03,$0e

              ; **************
6a5c            setpcl ; $6a5c
              ; **************

6a5c a5 86              LDA FG_COL
6a5e 0a                 ASL A
6a5f 0a                 ASL A
6a60 0a                 ASL A
6a61 0a                 ASL A
6a62 85 77              STA TEMP_A
6a64 20 45 a8           JSR Map_IO
6a67 ad 21 d0           LDA VIC_BG_COL
6a6a 29 0f              AND #%0000 1111 ; $0f
6a6c 05 77              ORA TEMP_A
6a6e 8d e2 03           STA FG_BG
6a71 a5 84              LDA MULCO1
6a73 05 77              ORA TEMP_A
6a75 8d e3 03           STA FG_MC1
6a78 60                 RTS ;Size   29 [setpcl]

              ; ********************
6a79            BASIC_SCNCLR ; $6a79
              ; ********************

6a79 d0 14              BNE SCLR_20
6a7b 20 8c 81           JSR Get_Graphics_Mode
6a7e c9 05              CMP #5
6a80 90 09              BCC SCLR_10
6a82 e9 05              SBC #5
6a84 f0 58              BEQ Clear_80_Column_Screen
6a86 48                 PHA
6a87 20 de 6a           JSR Clear_80_Column_Screen
6a8a 68                 PLA
6a8b aa       SCLR_10   TAX
6a8c 4c 9b 6a           JMP SCLR_40
6a8f 20 f4 87 SCLR_20   JSR Get_Byte_Var
6a92 e0 05    SCLR_30   CPX #5
6a94 f0 48              BEQ Clear_80_Column_Screen
6a96 90 03              BCC SCLR_40
6a98 4c 28 7d           JMP Error_Illegal_Quantity
6a9b 8a       SCLR_40   TXA
6a9c f0 54              BEQ Clear_40_Column_Screen
6a9e 20 74 a0           JSR Assert_Graphics_Mem
6aa1 8a                 TXA
6aa2 48                 PHA
6aa3 29 01              AND #%0000 0001 ; $01
6aa5 d0 21              BNE SCLR_60
6aa7 20 f2 6a           JSR Clear_40_Column_Screen
6aaa a5 d7              LDA MODE_80
6aac 48                 PHA
6aad 10 03              BPL SCLR_50
6aaf 20 5f ff           JSR K_SWAPPER
6ab2 ad 34 0a SCLR_50   LDA VSH_SPLIT
6ab5 38                 SEC
6ab6 e9 30              SBC #$30 ; '0'
6ab8 4a                 LSR A
6ab9 4a                 LSR A
6aba 4a                 LSR A
6abb aa                 TAX
6abc a0 00              LDY #0
6abe 18                 CLC
6abf 20 8d 92           JSR B_PLOT
6ac2 68                 PLA
6ac3 10 03              BPL SCLR_60
6ac5 20 5f ff           JSR K_SWAPPER
6ac8 68       SCLR_60   PLA
6ac9 29 02              AND #%0000 0010 ; $02
6acb f0 03              BEQ SCLR_70
6acd 20 17 6b           JSR Clear_Color_RAM
6ad0 20 30 6b SCLR_70   JSR Clear_Graphics_RAM
6ad3 a9 00              LDA #0
6ad5 a2 03              LDX #3
6ad7 9d 31 11 SCLR_80   STA XPOS,X
6ada ca                 DEX
6adb 10 fa              BPL SCLR_80
6add 60                 RTS ;Size  101 [BASIC_SCNCLR]

              ; ******************************
6ade            Clear_80_Column_Screen ; $6ade
              ; ******************************

6ade a5 d7              LDA MODE_80
6ae0 48                 PHA
6ae1 30 03              BMI CLR80_10
6ae3 20 5f ff           JSR K_SWAPPER
6ae6 a9 93    CLR80_10  LDA #$93            ; clear window
6ae8 20 69 92           JSR B_BSOUT
6aeb 68                 PLA
6aec 30 03              BMI CLR80_20
6aee 20 5f ff           JSR K_SWAPPER
6af1 60       CLR80_20  RTS ;Size   20 [Clear_80_Column_Screen]

              ; ******************************
6af2            Clear_40_Column_Screen ; $6af2
              ; ******************************

6af2 a5 d7              LDA MODE_80
6af4 48                 PHA
6af5 10 03              BPL CLR40_10
6af7 20 5f ff           JSR K_SWAPPER
6afa a9 93    CLR40_10  LDA #$93
6afc 20 69 92           JSR B_BSOUT
6aff 68                 PLA
6b00 10 03              BPL CLR40_20
6b02 20 5f ff           JSR K_SWAPPER
6b05 60       CLR40_20  RTS ;Size   20 [Clear_40_Column_Screen]

              ; ********************
6b06            Fill_X_Pages ; $6b06
              ; ********************

6b06 84 8d              STY GRAPNT+1
6b08 a0 00              LDY #0
6b0a 84 8c              STY GRAPNT
6b0c 91 8c    FXP_10    STA (GRAPNT),Y
6b0e 88                 DEY
6b0f d0 fb              BNE FXP_10
6b11 e6 8d              INC GRAPNT+1
6b13 ca                 DEX
6b14 d0 f6              BNE FXP_10
6b16 60                 RTS ;Size   17 [Fill_X_Pages]

              ; ***********************
6b17            Clear_Color_RAM ; $6b17
              ; ***********************

6b17 20 45 a8           JSR Map_IO
6b1a 78                 SEI
6b1b a5 01              LDA R8502
6b1d 48                 PHA
6b1e 29 fe              AND #%1111 1110     ; $fe
6b20 85 01              STA R8502           ; access color RAM
6b22 a5 85              LDA MULCO2          ; fill color
6b24 a0 d8              LDY #>VIC_COLOR_RAM ; $d800
6b26 a2 04              LDX #4              ; 4 pages
6b28 20 06 6b           JSR Fill_X_Pages
6b2b 68                 PLA
6b2c 85 01              STA R8502
6b2e 58                 CLI
6b2f 60                 RTS ;Size   25 [Clear_Color_RAM]

              ; **************************
6b30            Clear_Graphics_RAM ; $6b30
              ; **************************

6b30 a9 00              LDA #0              ; write zeroes
6b32 a0 20              LDY #>GRAFX_RAM     ; fill $2000 - $3fff
6b34 a2 20              LDX #$20            ; #$20 pages
6b36 20 06 6b           JSR Fill_X_Pages
6b39 ad e2 03           LDA FG_BG           ; foreground / background
6b3c 24 d8              BIT GRAPHM
6b3e 10 03              BPL CGR_10
6b40 ad e3 03           LDA FG_MC1          ; foreground mulricolor 1
6b43 20 45 a8 CGR_10    JSR Map_IO
6b46 a0 1c              LDY #>COLOR_RAM     ; fill $1c00 - $1fff
6b48 a2 04              LDX #4              ; 4 pages
6b4a 20 06 6b           JSR Fill_X_Pages

              ; Initialize sprite pointer

              ; sprite 0 : $1ff8 : pointer = $38 ($38 * $40) = $0e00
              ; sprite 1 : $1ff9 : pointer = $39 ($39 * $40) = $0e40
              ; sprite 7 : $1fff : pointer = $3f ($3f * $40) = $0fc0

6b4d a2 3f              LDX #$3f            ; $0fc0 / $40
6b4f a0 07              LDY #7
6b51 8a       CGR_20    TXA
6b52 99 f8 1f           STA GRAFX_RAM-8,Y   ; init sprite pointer
6b55 ca                 DEX
6b56 88                 DEY
6b57 10 f8              BPL CGR_20
6b59 60                 RTS ;Size   42 [Clear_Graphics_RAM]

              ; *********************
6b5a            BASIC_GRAPHIC ; $6b5a
              ; *********************

6b5a c9 9c              CMP #$9c
6b5c d0 0b              BNE GRAP_10
6b5e 20 22 a0           JSR Free_Graphics_RAM
6b61 20 80 03           JSR CHRGET
6b64 a9 00              LDA #0
6b66 85 d8              STA GRAPHM
6b68 60                 RTS ;Size   15 [BASIC_GRAPHIC]
6b69 20 f4 87 GRAP_10   JSR Get_Byte_Var
6b6c 8a                 TXA
6b6d 48                 PHA
6b6e e0 05              CPX #5
6b70 f0 42              BEQ GRAP_60
6b72 b0 4d              BCS GRAP_70
6b74 bd c4 6b           LDA Graphic_Modes,X
6b77 85 d8              STA GRAPHM
6b79 f0 07              BEQ GRAP_20
6b7b 20 4f 9f           JSR Allocate_Graphics_RAM
6b7e 24 d8              BIT GRAPHM
6b80 50 07              BVC GRAP_40
6b82 24 d7    GRAP_20   BIT MODE_80
6b84 10 03              BPL GRAP_40
6b86 20 5f ff GRAP_30   JSR K_SWAPPER
6b89 20 1c 9e GRAP_40   JSR Get_Byte_Or_Zero
6b8c e0 02              CPX #2
6b8e b0 31              BCS GRAP_70
6b90 8a                 TXA
6b91 48                 PHA
6b92 a2 14              LDX #$14
6b94 20 1e 9e           JSR Get_Byte_Or_Void
6b97 e0 1a              CPX #$1a
6b99 b0 26              BCS GRAP_70
6b9b 8a                 TXA
6b9c 0a                 ASL A
6b9d 0a                 ASL A
6b9e 0a                 ASL A
6b9f 69 30              ADC #$30 ; '0'
6ba1 8d 34 0a           STA VSH_SPLIT
6ba4 68                 PLA
6ba5 a8                 TAY
6ba6 68                 PLA
6ba7 aa                 TAX
6ba8 98                 TYA
6ba9 f0 03              BEQ GRAP_50
6bab 20 92 6a           JSR SCLR_30
6bae a9 00    GRAP_50   LDA #0
6bb0 8d 6a 11           STA SCALEM
6bb3 60                 RTS ;Size   90 [BASIC_GRAPHIC]
6bb4 24 d7    GRAP_60   BIT MODE_80
6bb6 30 d1              BMI GRAP_40
6bb8 a5 d8              LDA GRAPHM
6bba 29 bf              AND #%1011 1111 ; $bf
6bbc 85 d8              STA GRAPHM
6bbe 4c 86 6b           JMP GRAP_30
6bc1 4c 28 7d GRAP_70   JMP Error_Illegal_Quantity

              ; *********************
6bc4            Graphic_Modes ; $6bc4
              ; *********************

6bc4 00                 .BYTE $00           ; Text
6bc5 20                 .BYTE $20           ; High Resolution
6bc6 60                 .BYTE $60           ; High Resolution - Split
6bc7 a0                 .BYTE $a0           ; Multicolor
6bc8 e0                 .BYTE $e0           ; Multicolor - Split

              ; ******************
6bc9            BASIC_BANK ; $6bc9
              ; ******************

6bc9 20 f4 87           JSR Get_Byte_Var
6bcc e0 10              CPX #16
6bce b0 04              BCS BANK_Err
6bd0 8e d5 03           STX USER_BANK
6bd3 60                 RTS ;Size   11 [BASIC_BANK]
6bd4 4c 28 7d BANK_Err  JMP Error_Illegal_Quantity

              ; *******************
6bd7            BASIC_SLEEP ; $6bd7
              ; *******************

6bd7 20 12 88           JSR Get_Integer
6bda a2 00              LDX #0
6bdc 78                 SEI
6bdd 8c 1d 0a           STY JIFFY_COUNTDOWN
6be0 8d 1e 0a           STA JIFFY_COUNTDOWN+1
6be3 8e 1f 0a           STX JIFFY_COUNTDOWN+2
6be6 20 0c 6c           JSR ASL_TIMER
6be9 20 16 6c           JSR ADD_TIMER
6bec 20 09 6c           JSR TIMER_X4
6bef ac 1d 0a           LDY JIFFY_COUNTDOWN
6bf2 ad 1e 0a           LDA JIFFY_COUNTDOWN+1
6bf5 ae 1f 0a           LDX JIFFY_COUNTDOWN+2
6bf8 20 09 6c           JSR TIMER_X4
6bfb 20 16 6c           JSR ADD_TIMER
6bfe 58                 CLI
6bff 20 b5 4b SLEEP_10  JSR Is_STOP_Key
6c02 ae 1f 0a           LDX JIFFY_COUNTDOWN+2
6c05 e8                 INX
6c06 d0 f7              BNE SLEEP_10
6c08 60                 RTS ;Size   50 [BASIC_SLEEP]

              ; ****************
6c09            TIMER_X4 ; $6c09
              ; ****************

6c09 20 0c 6c           JSR ASL_TIMER

              ; *****************
6c0c            ASL_TIMER ; $6c0c
              ; *****************

6c0c 0e 1d 0a           ASL JIFFY_COUNTDOWN
6c0f 2e 1e 0a           ROL JIFFY_COUNTDOWN+1
6c12 2e 1f 0a           ROL JIFFY_COUNTDOWN+2
6c15 60                 RTS ;Size   10 [ASL_TIMER]

              ; *****************
6c16            ADD_TIMER ; $6c16
              ; *****************

6c16 48                 PHA
6c17 98                 TYA
6c18 6d 1d 0a           ADC JIFFY_COUNTDOWN
6c1b 8d 1d 0a           STA JIFFY_COUNTDOWN
6c1e 68                 PLA
6c1f 6d 1e 0a           ADC JIFFY_COUNTDOWN+1
6c22 8d 1e 0a           STA JIFFY_COUNTDOWN+1
6c25 8a                 TXA
6c26 6d 1f 0a           ADC JIFFY_COUNTDOWN+2
6c29 8d 1f 0a           STA JIFFY_COUNTDOWN+2
6c2c 60                 RTS ;Size   23 [ADD_TIMER]

              ; ******************
6c2d            BASIC_WAIT ; $6c2d
              ; ******************

6c2d 20 03 88           JSR LINNUM_Comma_Byte
6c30 86 4b              STX FORPNT
6c32 a2 00              LDX #0
6c34 20 86 03           JSR CHRGOT
6c37 f0 03              BEQ WAIT_10
6c39 20 09 88           JSR Comma_And_Byte
6c3c 86 4c    WAIT_10   STX FORPNT+1
6c3e a0 00    WAIT_20   LDY #0
6c40 ae d5 03           LDX USER_BANK
6c43 a9 16              LDA #$16
6c45 20 74 ff           JSR K_INDFET
6c48 45 4c              EOR FORPNT+1
6c4a 25 4b              AND FORPNT
6c4c f0 f0              BEQ WAIT_20
6c4e 60                 RTS ;Size   34 [BASIC_WAIT]

              ; ********************
6c4f            BASIC_SPRITE ; $6c4f
              ; ********************

6c4f 20 bb 6c           JSR Get_Sprite_Number
6c52 20 1e 9e           JSR Get_Byte_Or_Void
6c55 90 05              BCC SPRI_10
6c57 a0 15              LDY #$15
6c59 20 9b 6c           JSR Switch_Sprite
6c5c 20 1e 9e SPRI_10   JSR Get_Byte_Or_Void
6c5f 90 0e              BCC SPRI_20
6c61 ca                 DEX
6c62 e0 10              CPX #16
6c64 b0 32              BCS SPRI_Err
6c66 8a                 TXA
6c67 a6 77              LDX TEMP_A
6c69 20 45 a8           JSR Map_IO
6c6c 9d 27 d0           STA Vd027,X
6c6f 20 1e 9e SPRI_20   JSR Get_Byte_Or_Void
6c72 90 05              BCC SPRI_30
6c74 a0 1b              LDY #$1b
6c76 20 9b 6c           JSR Switch_Sprite
6c79 20 1e 9e SPRI_30   JSR Get_Byte_Or_Void
6c7c 90 05              BCC SPRI_40
6c7e a0 1d              LDY #$1d
6c80 20 9b 6c           JSR Switch_Sprite
6c83 20 1e 9e SPRI_40   JSR Get_Byte_Or_Void
6c86 90 05              BCC SPRI_50
6c88 a0 17              LDY #$17
6c8a 20 9b 6c           JSR Switch_Sprite
6c8d 20 1e 9e SPRI_50   JSR Get_Byte_Or_Void
6c90 90 05              BCC SPRI_Ret
6c92 a0 1c              LDY #$1c
6c94 20 9b 6c           JSR Switch_Sprite
6c97 60       SPRI_Ret  RTS ;Size   73 [BASIC_SPRITE]
6c98 4c 28 7d SPRI_Err  JMP Error_Illegal_Quantity

              ; *********************
6c9b            Switch_Sprite ; $6c9b
              ; *********************

6c9b 8a                 TXA
6c9c 4a                 LSR A               ; C=1 ON , C=0 OFF
6c9d d0 f9              BNE SPRI_Err
6c9f a6 77              LDX TEMP_A
6ca1 bd b3 6c           LDA Bit_Mask,X
6ca4 20 45 a8           JSR Map_IO
6ca7 19 00 d0           ORA VIC,Y
6caa b0 03              BCS SwSp_10
6cac 5d b3 6c           EOR Bit_Mask,X
6caf 99 00 d0 SwSp_10   STA VIC,Y
6cb2 60                 RTS ;Size   24 [Switch_Sprite]

6cb3 01 02 04 Bit_Mask  .BYTE $01,$02,$04,$08,$10,$20,$40,$80

              ; *************************
6cbb            Get_Sprite_Number ; $6cbb
              ; *************************

6cbb 20 f4 87           JSR Get_Byte_Var
6cbe ca                 DEX
6cbf e0 08              CPX #8
6cc1 b0 d5              BCS SPRI_Err
6cc3 86 77              STX TEMP_A
6cc5 60                 RTS ;Size   11 [Get_Sprite_Number]

              ; ********************
6cc6            BASIC_MOVSPR ; $6cc6
              ; ********************

6cc6 20 bb 6c           JSR Get_Sprite_Number
6cc9 20 9e 6d           JSR Get_Sprite_Coordinates
6ccc 2c 6e 11           BIT NUMCNT
6ccf 50 03              BVC MOVS_10
6cd1 4c 6c 79           JMP SYNTAX_ERROR
6cd4 8c 35 11 MOVS_10   STY XDEST
6cd7 8c 37 11           STY YDEST
6cda 8d 36 11           STA XDEST+1
6cdd 8d 38 11           STA YDEST+1
6ce0 20 9e 6d           JSR Get_Sprite_Coordinates
6ce3 2c 6e 11           BIT NUMCNT
6ce6 50 61              BVC MOVS_40
6ce8 30 3a              BMI MOVS_30
6cea 98                 TYA
6ceb 48                 PHA
6cec a0 04              LDY #4
6cee 20 74 9a           JSR Sin_Cos_Ang
6cf1 a6 77              LDX TEMP_A
6cf3 bc d9 6d           LDY Sprite_Offset,X
6cf6 a9 00              LDA #0
6cf8 99 7e 11           STA SPRITE_DATA,Y
6cfb c8                 INY
6cfc a2 03              LDX #3
6cfe 5e 4a 11 MOVS_15   LSR SINVAL,X
6d01 ca                 DEX
6d02 7e 4a 11           ROR SINVAL,X
6d05 ca                 DEX
6d06 10 f6              BPL MOVS_15
6d08 e8       MOVS_20   INX
6d09 bd 49 11           LDA ANGSGN,X
6d0c c8                 INY
6d0d 99 7e 11           STA SPRITE_DATA,Y
6d10 e0 04              CPX #4
6d12 d0 f4              BNE MOVS_20
6d14 a9 00              LDA #0
6d16 c8       MOVS_25   INY
6d17 99 7e 11           STA SPRITE_DATA,Y
6d1a ca                 DEX
6d1b d0 f9              BNE MOVS_25
6d1d 68                 PLA
6d1e 29 0f              AND #%0000 1111 ; $0f
6d20 99 74 11           STA T3,Y
6d23 60                 RTS ;Size   94 [BASIC_MOVSPR]
6d24 20 39 81 MOVS_30   JSR Swap_XY
6d27 a8                 TAY
6d28 8a                 TXA
6d29 20 77 9a           JSR Sin_Cos_AY
6d2c a2 04              LDX #4
6d2e 20 4a 9d           JSR Scale_XY
6d31 a2 04              LDX #4
6d33 18                 CLC
6d34 20 ce 9a MOVS_35   JSR LAY_SIN_X
6d37 9d 31 11           STA XPOS,X
6d3a 98                 TYA
6d3b 9d 32 11           STA XPOS+1,X
6d3e e8                 INX
6d3f e8                 INX
6d40 e0 06              CPX #6
6d42 f0 f0              BEQ MOVS_35
6d44 6e 6e 11           ROR NUMCNT
6d47 30 0b              BMI MOVS_45
6d49 8c 37 11 MOVS_40   STY YDEST
6d4c 8d 38 11           STA YDEST+1
6d4f a2 04              LDX #4
6d51 20 4a 9d           JSR Scale_XY
6d54 a5 77    MOVS_45   LDA TEMP_A
6d56 aa                 TAX
6d57 0a                 ASL A
6d58 a8                 TAY
6d59 ad 37 11           LDA YDEST
6d5c 0e 6e 11           ASL NUMCNT
6d5f 90 09              BCC MOVS_55
6d61 18                 CLC
6d62 10 03              BPL MOVS_50
6d64 49 ff              EOR #%1111 1111 ; $ff
6d66 38                 SEC
6d67 79 d7 11 MOVS_50   ADC VSH+1,Y
6d6a 78       MOVS_55   SEI
6d6b 99 d7 11           STA VSH+1,Y
6d6e ad 35 11           LDA XDEST
6d71 0e 6e 11           ASL NUMCNT
6d74 10 12              BPL MOVS_65
6d76 18                 CLC
6d77 79 d6 11           ADC VSH,Y
6d7a 99 d6 11           STA VSH,Y
6d7d b0 03              BCS MOVS_60
6d7f ee 36 11           INC XDEST+1
6d82 ad e6 11 MOVS_60   LDA VSH+16
6d85 4c 91 6d           JMP MOVS_70
6d88 99 d6 11 MOVS_65   STA VSH,Y
6d8b ad e6 11           LDA VSH+16
6d8e 1d b3 6c           ORA Bit_Mask,X
6d91 4e 36 11 MOVS_70   LSR XDEST+1
6d94 b0 03              BCS MOVS_75
6d96 5d b3 6c           EOR Bit_Mask,X
6d99 8d e6 11 MOVS_75   STA VSH+16
6d9c 58                 CLI
6d9d 60                 RTS ;Size  216 [BASIC_MOVSPR]

              ; ******************************
6d9e            Get_Sprite_Coordinates ; $6d9e
              ; ******************************

6d9e 20 c6 6d           JSR Comma_Check
6da1 6e 6e 11           ROR NUMCNT
6da4 10 0b              BPL GSC_10
6da6 c9 3b              CMP #';'
6da8 f0 13              BEQ GSC_30
6daa c9 23              CMP #'#'
6dac f0 0e              BEQ GSC_20
6dae 4c 6c 79           JMP SYNTAX_ERROR
6db1 20 86 03 GSC_10    JSR CHRGOT
6db4 c9 aa              CMP #$aa            ; +
6db6 f0 05              BEQ GSC_30
6db8 c9 ab              CMP #$ab            ; -
6dba f0 01              BEQ GSC_30
6dbc 18       GSC_20    CLC
6dbd 6e 6e 11 GSC_30    ROR NUMCNT
6dc0 20 d7 77 GSC_40    JSR Eval_Numeric    ; Call entry
6dc3 4c 19 88           JMP F1TL_10

              ; *******************
6dc6            Comma_Check ; $6dc6
              ; *******************

6dc6 20 86 03           JSR CHRGOT
6dc9 f0 0d              BEQ CoCh_20
6dcb c9 2c              CMP #','
6dcd 18                 CLC
6dce f0 01              BEQ CoCh_10
6dd0 38                 SEC
6dd1 08       CoCh_10   PHP
6dd2 48                 PHA
6dd3 20 80 03           JSR CHRGET
6dd6 68                 PLA
6dd7 28                 PLP
6dd8 60       CoCh_20   RTS ;Size   19 [Comma_Check]

              ; *********************
6dd9            Sprite_Offset ; $6dd9
              ; *********************

              ; offset = sprite number * 11

6dd9 00 0b 16           .BYTE $00,$0b,$16,$21,$2c,$37,$42,$4d

              ; ******************
6de1            BASIC_PLAY ; $6de1
              ; ******************

6de1 20 7b 87           JSR Eval_String
6de4 8d 03 ff           STA MMU_LCRC
6de7 85 77              STA TEMP_A
6de9 20 ce 6f           JSR Clear_Tone_Flags
6dec 85 78              STA KEYSIZ
6dee a4 78    PLAY_10   LDY KEYSIZ
6df0 c4 77              CPY TEMP_A
6df2 f0 0d              BEQ PLAY_Ret
6df4 20 b7 03           JSR Get_INDEXA_1
6df7 8d 03 ff           STA MMU_LCRC
6dfa 20 02 6e           JSR Play_Note
6dfd e6 78              INC KEYSIZ
6dff d0 ed              BNE PLAY_10
6e01 60       PLAY_Ret  RTS ;Size   33 [BASIC_PLAY]

              ; *****************
6e02            Play_Note ; $6e02
              ; *****************

6e02 c9 20              CMP #' '
6e04 d0 01              BNE PlNo_10
6e06 60                 RTS ;Size    5 [Play_Note]
6e07 c9 41    PlNo_10   CMP #'A'
6e09 90 07              BCC PlNo_15
6e0b c9 48              CMP #'H'
6e0d b0 03              BCS PlNo_15
6e0f 4c 1e 6f           JMP Set_Note
6e12 a2 04    PlNo_15   LDX #4
6e14 dd e7 6f PlNo_20   CMP notes,X
6e17 d0 03              BNE PlNo_25
6e19 4c 07 6f           JMP Set_Duration
6e1c ca       PlNo_25   DEX
6e1d 10 f5              BPL PlNo_20
6e1f c9 52              CMP #'R'
6e21 d0 03              BNE PlNo_30
6e23 4c 78 6f           JMP SeNo_75
6e26 c9 2e    PlNo_30   CMP #'.'
6e28 d0 03              BNE PlNo_35
6e2a 4c 03 6f           JMP Store_DNOTE
6e2d a2 05    PlNo_35   LDX #5
6e2f dd ec 6f PlNo_40   CMP mutabl,X
6e32 d0 03              BNE PlNo_45
6e34 4c 52 6f           JMP SeNo_40
6e37 ca       PlNo_45   DEX
6e38 10 f5              BPL PlNo_40
6e3a c9 23              CMP #'#'
6e3c d0 03              BNE PlNo_50
6e3e 4c 69 6f           JMP Play_Sharp
6e41 c9 24    PlNo_50   CMP #'$'
6e43 d0 03              BNE PlNo_55
6e45 4c 6c 6f           JMP Play_Flatc
6e48 38       PlNo_55   SEC
6e49 e9 30              SBC #'0'
6e4b c9 0a              CMP #10
6e4d 90 03              BCC PlNo_60
6e4f 4c fd 6e           JMP Error_Exit
6e52 0e 26 01 PlNo_60   ASL FLAG
6e55 b0 46              BCS PlNo_85
6e57 0e 26 01           ASL FLAG
6e5a b0 4c              BCS PlNo_90
6e5c 0e 26 01           ASL FLAG
6e5f b0 50              BCS PlNo_95
6e61 0e 26 01           ASL FLAG
6e64 90 77              BCC Set_Volume
6e66 c9 02              CMP #2
6e68 90 03              BCC PlNo_65
6e6a 4c fd 6e           JMP Error_Exit
6e6d 4a       PlNo_65   LSR A
6e6e ac 2f 12           LDY VOICE
6e71 be e4 6f           LDX times2,Y
6e74 bd 24 12 PlNo_70   LDA Snd_Duration+1,X
6e77 10 fb              BPL PlNo_70
6e79 b9 b3 6c           LDA Bit_Mask,Y
6e7c 0d 73 12           ORA FILTERS+2
6e7f b0 03              BCS PlNo_75
6e81 59 b3 6c           EOR Bit_Mask,Y
6e84 8d 73 12 PlNo_75   STA FILTERS+2
6e87 ad 74 12           LDA Old_Filter
6e8a 8d 75 12           STA Old_Volume
6e8d a2 03              LDX #3
6e8f bd 71 12 PlNo_80   LDA FILTERS,X
6e92 20 45 a8           JSR Map_IO
6e95 9d 15 d4           STA SID_Cutoff,X
6e98 ca                 DEX
6e99 10 f4              BPL PlNo_80
6e9b 30 5a              BMI Clear_FLAG
6e9d aa       PlNo_85   TAX
6e9e ca                 DEX
6e9f e0 03              CPX #3
6ea1 b0 5a              BCS Error_Exit
6ea3 8e 2f 12           STX VOICE
6ea6 90 4f              BCC Clear_FLAG
6ea8 c9 07    PlNo_90   CMP #7
6eaa b0 51              BCS Error_Exit
6eac 8d 2b 12           STA Snd_Octave
6eaf 90 46              BCC Clear_FLAG
6eb1 aa       PlNo_95   TAX

              ; ********************
6eb2            Set_Envelope ; $6eb2
              ; ********************

6eb2 20 45 a8           JSR Map_IO
6eb5 ac 2f 12           LDY VOICE
6eb8 bd 53 12           LDA WAVTAB,X
6ebb 99 30 12           STA WAVE0,Y
6ebe b9 39 70           LDA offtab,Y
6ec1 a8                 TAY
6ec2 bd 3f 12           LDA ATKTAB,X
6ec5 99 05 d4           STA SID_Attack_1,Y
6ec8 bd 49 12           LDA SUSTAB,X
6ecb 99 06 d4           STA SID_Sustain_1,Y
6ece bd 5d 12           LDA PULSLO,X
6ed1 99 02 d4           STA SID_Pulse_1,Y
6ed4 bd 67 12           LDA PULSHI,X
6ed7 99 03 d4           STA SID_Pulse_1+1,Y
6eda 4c f7 6e           JMP Clear_FLAG

              ; ******************
6edd            Set_Volume ; $6edd
              ; ******************

6edd aa                 TAX
6ede ad 74 12           LDA Old_Filter
6ee1 29 f0              AND #%1111 0000 ; $f0
6ee3 1d 3c 70           ORA voltab,X
6ee6 8d 74 12           STA Old_Filter
6ee9 ad 75 12           LDA Old_Volume
6eec 29 f0              AND #%1111 0000 ; $f0
6eee 1d 3c 70           ORA voltab,X
6ef1 20 45 a8           JSR Map_IO
6ef4 8d 18 d4           STA SID_Volume

              ; ******************
6ef7            Clear_FLAG ; $6ef7
              ; ******************

6ef7 a9 00              LDA #0
6ef9 8d 26 01           STA FLAG
6efc 60                 RTS ;Size    6 [Clear_FLAG]

              ; ******************
6efd            Error_Exit ; $6efd
              ; ******************

6efd 20 f7 6e           JSR Clear_FLAG
6f00 4c 28 7d           JMP Error_Illegal_Quantity

              ; *******************
6f03            Store_DNOTE ; $6f03
              ; *******************

6f03 8d 33 12           STA DNOTE
6f06 60                 RTS ;Size    4 [Store_DNOTE]

              ; ********************
6f07            Set_Duration ; $6f07
              ; ********************

6f07 a0 80              LDY #<$0480
6f09 8c 29 12           STY Snd_Dur_Tmp
6f0c a0 04              LDY #>$0480
6f0e 8c 2a 12           STY Snd_Dur_Tmp+1
6f11 ca       SeDu_10   DEX
6f12 30 09              BMI SeDu_Ret
6f14 4e 2a 12           LSR Snd_Dur_Tmp+1
6f17 6e 29 12           ROR Snd_Dur_Tmp
6f1a 4c 11 6f           JMP SeDu_10
6f1d 60       SeDu_Ret  RTS ;Size   23 [Set_Duration]

              ; ****************
6f1e            Set_Note ; $6f1e
              ; ****************

6f1e 38                 SEC
6f1f e9 41              SBC #'A'
6f21 aa                 TAX
6f22 bd f2 6f           LDA scalen,X
6f25 aa                 TAX
6f26 a9 06              LDA #6
6f28 38                 SEC
6f29 ed 2b 12           SBC Snd_Octave
6f2c a8                 TAY
6f2d 8a                 TXA
6f2e 18                 CLC
6f2f 6d 2c 12           ADC Snd_Sharp
6f32 10 03              BPL SeNo_10
6f34 a9 0b              LDA #11
6f36 c8                 INY
6f37 c9 0c    SeNo_10   CMP #12
6f39 90 03              BCC SeNo_20
6f3b a9 00              LDA #0
6f3d 88                 DEY
6f3e aa       SeNo_20   TAX
6f3f bd f9 6f           LDA Pitch_NTSC_Low,X
6f42 8d 2d 12           STA Snd_Pitch
6f45 20 a6 7e           JSR Get_Pitch       ; patch for NTSC / PAL pitch
6f48 88       SeNo_30   DEY
6f49 30 27              BMI SeNo_70
6f4b 4a                 LSR A
6f4c 6e 2d 12           ROR Snd_Pitch
6f4f 4c 48 6f           JMP SeNo_30
6f52 c9 4d    SeNo_40   CMP #$4d ; 'M'
6f54 f0 07              BEQ SeNo_50
6f56 bd 1c 9d           LDA rbits,X
6f59 8d 26 01           STA FLAG
6f5c 60                 RTS ;Size   63 [Set_Note]
6f5d a0 05    SeNo_50   LDY #5
6f5f b9 23 12 SeNo_60   LDA Snd_Duration,Y
6f62 10 fb              BPL SeNo_60
6f64 88                 DEY
6f65 88                 DEY
6f66 10 f7              BPL SeNo_60
6f68 60                 RTS ;Size   75 [Set_Note]

              ; ******************
6f69            Play_Sharp ; $6f69
              ; ******************

6f69 a9 01              LDA #1
6f6b 2c                 BIT

              ; ******************
6f6c            Play_Flatc ; $6f6c
              ; ******************

6f6c a9 ff              LDA #$ff
6f6e 8d 2c 12           STA Snd_Sharp
6f71 60                 RTS ;Size    6 [Play_Flatc]

6f72 8d 2e 12 SeNo_70   STA Snd_Pitch+1
6f75 a9 00              LDA #0
6f77 2c                 BIT
6f78 a9 ff    SeNo_75   LDA #$ff
6f7a 48                 PHA
6f7b ae 2f 12           LDX VOICE
6f7e bc e4 6f           LDY times2,X
6f81 b9 24 12 SeNo_80   LDA Snd_Duration+1,Y
6f84 10 fb              BPL SeNo_80
6f86 ad 29 12           LDA Snd_Dur_Tmp
6f89 99 23 12           STA Snd_Duration,Y
6f8c ad 2a 12           LDA Snd_Dur_Tmp+1
6f8f 99 24 12           STA Snd_Duration+1,Y
6f92 ad 33 12           LDA DNOTE
6f95 f0 17              BEQ SeNo_85
6f97 ad 2a 12           LDA Snd_Dur_Tmp+1
6f9a 4a                 LSR A
6f9b 48                 PHA
6f9c ad 29 12           LDA Snd_Dur_Tmp
6f9f 6a                 ROR A
6fa0 18                 CLC
6fa1 79 23 12           ADC Snd_Duration,Y
6fa4 99 23 12           STA Snd_Duration,Y
6fa7 68                 PLA
6fa8 79 24 12           ADC Snd_Duration+1,Y
6fab 99 24 12           STA Snd_Duration+1,Y
6fae 68       SeNo_85   PLA
6faf 30 1d              BMI Clear_Tone_Flags
6fb1 20 45 a8           JSR Map_IO
6fb4 bc 39 70           LDY offtab,X
6fb7 ad 2d 12           LDA Snd_Pitch
6fba 99 00 d4           STA SID_Freq_1,Y
6fbd ad 2e 12           LDA Snd_Pitch+1
6fc0 99 01 d4           STA SID_Freq_1+1,Y
6fc3 a9 08              LDA #8
6fc5 99 04 d4           STA SID_Control_1,Y
6fc8 bd 30 12           LDA WAVE0,X
6fcb 99 04 d4           STA SID_Control_1,Y

              ; ************************
6fce            Clear_Tone_Flags ; $6fce
              ; ************************

6fce a9 00              LDA #0
6fd0 8d 2c 12           STA Snd_Sharp
6fd3 8d 33 12           STA DNOTE
6fd6 60                 RTS ;Size    9 [Clear_Tone_Flags]

              ; *******************
6fd7            BASIC_TEMPO ; $6fd7
              ; *******************

6fd7 20 f4 87           JSR Get_Byte_Var
6fda 8a                 TXA
6fdb f0 04              BEQ TEMPO_Err
6fdd 8e 22 12           STX Snd_Tempo
6fe0 60                 RTS ;Size   10 [BASIC_TEMPO]
6fe1 4c 28 7d TEMPO_Err JMP Error_Illegal_Quantity

6fe4 00 02 04 times2    .BYTE $00,$02,$04
6fe7 57 48 51 notes     .BYTE "WHQIS"
6fec 56 4f 54 mutabl    .BYTE "VOTXUM"
6ff2 09 0b 00 scalen    .BYTE $09,$0b,$00,$02,$04,$05,$07

6ff9          Pitch_NTSC_Low
6ff9 0f 0c 45           .BYTE $0f,$0c,$45,$bf,$7d,$83,$d6,$79
7001 73 c7 7c           .BYTE $73,$c7,$7c,$97

7005          Pitch_NTSC_High
7005 43 47 4b           .BYTE $43,$47,$4b,$4f,$54,$59,$5e,$64
700d 6a 70 77           .BYTE $6a,$70,$77,$7e

7011 09 c0 00 stkmus    .BYTE $09,$c0,$00,$05,$94,$09,$09,$09
7019 89 09              .BYTE $89,$09
701b 00 c0 f0 susmus    .BYTE $00,$c0,$f0,$50,$40,$21,$00,$90
7023 41 00              .BYTE $41,$00
7025 41 21 11 wavmus    .BYTE $41,$21,$11,$81,$11,$21,$41,$41
702d 41 11              .BYTE $41,$11
702f 06 00 00 pwhmus    .BYTE $06,$00,$00,$00,$00,$00,$02,$08
7037 02 00              .BYTE $02,$00
7039 00 07 0e offtab    .BYTE $00,$07,$0e
703c 00 01 03 voltab    .BYTE $00,$01,$03,$05,$07,$08,$0a,$0c
7044 0e 0f              .BYTE $0e,$0f

              ; ********************
7046            BASIC_FILTER ; $7046
              ; ********************

7046 48                 PHA
7047 a0 03              LDY #3
7049 b9 71 12 FILT_10   LDA FILTERS,Y
704c 99 34 12           STA FLTSAV,Y
704f 88                 DEY
7050 10 f7              BPL FILT_10
7052 68                 PLA
7053 c9 2c              CMP #','
7055 f0 19              BEQ FILT_20
7057 20 12 88           JSR Get_Integer
705a c9 08              CMP #8
705c b0 60              BCS FILT_Err
705e 8c 34 12           STY FLTSAV
7061 8c 35 12           STY FLTSAV+1
7064 4a                 LSR A
7065 6e 35 12           ROR FLTSAV+1
7068 4a                 LSR A
7069 6e 35 12           ROR FLTSAV+1
706c 4a                 LSR A
706d 6e 35 12           ROR FLTSAV+1
7070 a9 10    FILT_20   LDA #16
7072 8d 38 12           STA FLTFLG
7075 20 1e 9e FILT_30   JSR Get_Byte_Or_Void
7078 90 17              BCC FILT_60
707a e0 01              CPX #1
707c 90 05              BCC FILT_40
707e f0 03              BEQ FILT_40
7080 4c 28 7d           JMP Error_Illegal_Quantity
7083 ad 37 12 FILT_40   LDA FLTSAV+3
7086 0d 38 12           ORA FLTFLG
7089 b0 03              BCS FILT_50
708b 4d 38 12           EOR FLTFLG
708e 8d 37 12 FILT_50   STA FLTSAV+3
7091 0e 38 12 FILT_60   ASL FLTFLG
7094 10 df              BPL FILT_30
7096 20 1e 9e           JSR Get_Byte_Or_Void
7099 90 17              BCC FILT_70
709b e0 10              CPX #16
709d b0 1f              BCS FILT_Err
709f 8a                 TXA
70a0 0a                 ASL A
70a1 0a                 ASL A
70a2 0a                 ASL A
70a3 0a                 ASL A
70a4 8d 39 12           STA NIBBLE
70a7 ad 36 12           LDA FLTSAV+2
70aa 29 0f              AND #%0000 1111 ; $0f
70ac 0d 39 12           ORA NIBBLE
70af 8d 36 12           STA FLTSAV+2
70b2 a0 03    FILT_70   LDY #3
70b4 b9 34 12 FILT_80   LDA FLTSAV,Y
70b7 99 71 12           STA FILTERS,Y
70ba 88                 DEY
70bb 10 f7              BPL FILT_80
70bd 60                 RTS ;Size  120 [BASIC_FILTER]
70be 4c 28 7d FILT_Err  JMP Error_Illegal_Quantity

              ; **********************
70c1            BASIC_ENVELOPE ; $70c1
              ; **********************

70c1 20 f4 87           JSR Get_Byte_Var
70c4 e0 0a              CPX #10
70c6 90 03              BCC ENVE_20
70c8 4c 28 7d ENVE_10   JMP Error_Illegal_Quantity
70cb 8e 3a 12 ENVE_20   STX TONNUM
70ce bd 3f 12           LDA ATKTAB,X
70d1 8d 3b 12           STA TONVAL
70d4 bd 49 12           LDA SUSTAB,X
70d7 8d 3c 12           STA TONVAL+1
70da bd 53 12           LDA WAVTAB,X
70dd 8d 3d 12           STA TONVAL+2
70e0 a2 00              LDX #0
70e2 8e 3e 12 ENVE_30   STX PARCNT
70e5 20 1e 9e           JSR Get_Byte_Or_Void
70e8 90 16              BCC ENVE_40
70ea 8a                 TXA
70eb 0a                 ASL A
70ec 0a                 ASL A
70ed 0a                 ASL A
70ee 0a                 ASL A
70ef 8d 39 12           STA NIBBLE
70f2 ae 3e 12           LDX PARCNT
70f5 bd 3b 12           LDA TONVAL,X
70f8 29 0f              AND #%0000 1111 ; $0f
70fa 0d 39 12           ORA NIBBLE
70fd 9d 3b 12           STA TONVAL,X
7100 20 1e 9e ENVE_40   JSR Get_Byte_Or_Void
7103 90 14              BCC ENVE_50
7105 8a                 TXA
7106 29 0f              AND #%0000 1111 ; $0f
7108 8d 39 12           STA NIBBLE
710b ae 3e 12           LDX PARCNT
710e bd 3b 12           LDA TONVAL,X
7111 29 f0              AND #%1111 0000 ; $f0
7113 0d 39 12           ORA NIBBLE
7116 9d 3b 12           STA TONVAL,X
7119 ae 3e 12 ENVE_50   LDX PARCNT
711c e8                 INX
711d e0 01              CPX #1
711f f0 c1              BEQ ENVE_30
7121 20 1e 9e           JSR Get_Byte_Or_Void
7124 90 10              BCC ENVE_70
7126 a9 15              LDA #$15
7128 e0 04              CPX #4
712a f0 07              BEQ ENVE_60
712c b0 9a              BCS ENVE_10
712e bd b7 6c           LDA Bit_Mask+4,X
7131 09 01              ORA #%0000 0001 ; $01
7133 8d 3d 12 ENVE_60   STA TONVAL+2
7136 20 06 9e ENVE_70   JSR Get_Comma_And_Integer
7139 90 13              BCC ENVE_80
713b aa                 TAX
713c ad 3d 12           LDA TONVAL+2
713f 29 40              AND #%0100 0000 ; $40 ; '@'
7141 f0 0b              BEQ ENVE_80
7143 8a                 TXA
7144 ae 3a 12           LDX TONNUM
7147 9d 67 12           STA PULSHI,X
714a 98                 TYA
714b 9d 5d 12           STA PULSLO,X
714e ae 3a 12 ENVE_80   LDX TONNUM
7151 ad 3b 12           LDA TONVAL
7154 9d 3f 12           STA ATKTAB,X
7157 ad 3c 12           LDA TONVAL+1
715a 9d 49 12           STA SUSTAB,X
715d ad 3d 12           LDA TONVAL+2
7160 9d 53 12           STA WAVTAB,X
7163 60                 RTS ;Size  163 [BASIC_ENVELOPE]

              ; ***********************
7164            BASIC_COLLISION ; $7164
              ; ***********************

7164 20 f4 87           JSR Get_Byte_Var
7167 ca                 DEX
7168 e0 03              CPX #3
716a b0 21              BCS COLL_Err
716c 8e 80 12           STX Collision_Type
716f 20 06 9e           JSR Get_Comma_And_Integer
7172 08                 PHP
7173 ae 80 12           LDX Collision_Type
7176 9d 7c 12           STA INT_ADR_HI,X
7179 98                 TYA
717a 9d 79 12           STA INT_ADR_LO,X
717d ad 7f 12           LDA INT_VAL
7180 1d b3 6c           ORA Bit_Mask,X
7183 28                 PLP
7184 b0 03              BCS COLL_10
7186 5d b3 6c           EOR Bit_Mask,X
7189 8d 7f 12 COLL_10   STA INT_VAL
718c 60                 RTS ;Size   41 [BASIC_COLLISION]
718d 4c 28 7d COLL_Err  JMP Error_Illegal_Quantity

              ; **********************
7190            BASIC_SPRCOLOR ; $7190
              ; **********************

7190 c9 2c              CMP #$2c ; ','
7192 f0 0e              BEQ SPRC_10
7194 20 f4 87           JSR Get_Byte_Var
7197 ca                 DEX
7198 e0 10              CPX #16
719a b0 17              BCS SPRC_Err
719c 20 45 a8           JSR Map_IO
719f 8e 25 d0           STX Vd025
71a2 20 1e 9e SPRC_10   JSR Get_Byte_Or_Void
71a5 90 0b              BCC SPRC_Ret
71a7 ca                 DEX
71a8 e0 10              CPX #16
71aa b0 07              BCS SPRC_Err
71ac 20 45 a8           JSR Map_IO
71af 8e 26 d0           STX Vd026
71b2 60       SPRC_Ret  RTS ;Size   35 [BASIC_SPRCOLOR]
71b3 4c 28 7d SPRC_Err  JMP Error_Illegal_Quantity

              ; *******************
71b6            BASIC_WIDTH ; $71b6
              ; *******************

71b6 20 f4 87           JSR Get_Byte_Var
71b9 ca                 DEX
71ba e0 02              CPX #2
71bc b0 04              BCS WIDT_Err
71be 8e 6b 11           STX WIDTH
71c1 60                 RTS ;Size   12 [BASIC_WIDTH]
71c2 4c 28 7d WIDT_Err  JMP Error_Illegal_Quantity

              ; *****************
71c5            BASIC_VOL ; $71c5
              ; *****************

71c5 20 f4 87           JSR Get_Byte_Var
71c8 e0 10              CPX #16
71ca b0 1d              BCS VOL_Err
71cc 86 77              STX TEMP_A
71ce ad 74 12           LDA Old_Filter
71d1 29 f0              AND #%1111 0000 ; $f0
71d3 05 77              ORA TEMP_A
71d5 8d 74 12           STA Old_Filter
71d8 ad 75 12           LDA Old_Volume
71db 29 f0              AND #%1111 0000 ; $f0
71dd 05 77              ORA TEMP_A
71df 8d 75 12           STA Old_Volume
71e2 20 45 a8           JSR Map_IO
71e5 8d 18 d4           STA SID_Volume
71e8 60                 RTS ;Size   36 [BASIC_VOL]
71e9 4c 28 7d VOL_Err   JMP Error_Illegal_Quantity

              ; *******************
71ec            BASIC_SOUND ; $71ec
              ; *******************

71ec 20 f4 87           JSR Get_Byte_Var
71ef ca                 DEX
71f0 e0 03              CPX #3
71f2 90 03              BCC SOUND_10
71f4 4c 28 7d SOUND_Err JMP Error_Illegal_Quantity
71f7 8e 81 12 SOUND_10  STX Voice_Number
71fa 20 0f 88           JSR Comma_And_LINNUM
71fd 8c a5 12           STY TEMP_MAX_LO
7200 8d a6 12           STA TEMP_MAX_HI
7203 8c ac 12           STY TEMP_FREQ_LO
7206 8d ad 12           STA TEMP_FREQ_HI
7209 20 0f 88           JSR Comma_And_LINNUM
720c c9 80              CMP #$80
720e b0 e4              BCS SOUND_Err
7210 8c a3 12           STY TEMP_TIME_LO
7213 8d a4 12           STA TEMP_TIME_HI
7216 20 1c 9e           JSR Get_Byte_Or_Zero
7219 e0 03              CPX #3
721b b0 d7    SOUND_15  BCS SOUND_Err
721d 8a                 TXA
721e 8d a9 12           STA TEMP_DIRECTION
7221 29 01              AND #%0000 0001 ; $01
7223 08                 PHP
7224 20 06 9e           JSR Get_Comma_And_Integer
7227 8c a7 12           STY TEMP_MIN_LO
722a 8d a8 12           STA TEMP_MIN_HI
722d 20 06 9e           JSR Get_Comma_And_Integer
7230 28                 PLP
7231 f0 0d              BEQ SOUND_20
7233 48                 PHA
7234 98                 TYA
7235 49 ff              EOR #%1111 1111 ; $ff
7237 18                 CLC
7238 69 01              ADC #1
723a a8                 TAY
723b 68                 PLA
723c 49 ff              EOR #%1111 1111 ; $ff
723e 69 00              ADC #0
7240 8d ab 12 SOUND_20  STA TEMP_STEP_HI
7243 98                 TYA
7244 8d aa 12           STA TEMP_STEP_LO
7247 a2 02              LDX #2
7249 20 1e 9e           JSR Get_Byte_Or_Void
724c e0 04              CPX #4
724e b0 cb              BCS SOUND_15
7250 bd b7 6c           LDA Bit_Mask+4,X
7253 09 01              ORA #%0000 0001 ; $01
7255 8d b0 12           STA TEMP_WAVEFORM
7258 20 06 9e           JSR Get_Comma_And_Integer
725b b0 04              BCS SOUND_25
725d a9 08              LDA #8
725f a0 00              LDY #0
7261 c9 10    SOUND_25  CMP #16
7263 b0 8f              BCS SOUND_Err
7265 8c ae 12           STY TEMP_PULSE_LO
7268 8d af 12           STA TEMP_PULSE_HI
726b ad a3 12           LDA TEMP_TIME_LO
726e 0d a4 12           ORA TEMP_TIME_HI
7271 f0 46              BEQ SOUND_50
7273 ae 81 12           LDX Voice_Number
7276 8a                 TXA
7277 0a                 ASL A
7278 a8                 TAY
7279 b9 24 12 SOUND_30  LDA Snd_Duration+1,Y
727c 10 fb              BPL SOUND_30
727e bd 85 12 SOUND_35  LDA Sound_Duration_1_Hi,X
7281 10 fb              BPL SOUND_35
7283 a0 00              LDY #0
7285 b9 a5 12 SOUND_40  LDA TEMP_MAX_LO,Y
7288 9d 88 12           STA SOUND_MAX_LO,X
728b e8                 INX
728c e8                 INX
728d e8                 INX
728e c8                 INY
728f c0 09              CPY #9
7291 d0 f2              BNE SOUND_40
7293 ae 81 12           LDX Voice_Number
7296 bc 39 70           LDY offtab,X
7299 20 45 a8           JSR Map_IO
729c a9 08              LDA #8
729e 99 04 d4           STA SID_Control_1,Y
72a1 a9 00              LDA #0
72a3 99 05 d4           STA SID_Attack_1,Y
72a6 a9 f0              LDA #$f0
72a8 99 06 d4           STA SID_Sustain_1,Y
72ab a2 00              LDX #0
72ad bd ac 12 SOUND_45  LDA TEMP_FREQ_LO,X
72b0 99 00 d4           STA SID_Freq_1,Y
72b3 c8                 INY
72b4 e8                 INX
72b5 e0 05              CPX #5
72b7 d0 f4              BNE SOUND_45
72b9 ae 81 12 SOUND_50  LDX Voice_Number
72bc ac a3 12           LDY TEMP_TIME_LO
72bf ad a4 12           LDA TEMP_TIME_HI
72c2 78                 SEI
72c3 9d 85 12           STA Sound_Duration_1_Hi,X
72c6 98                 TYA
72c7 9d 82 12           STA Sound_Duration_1_Lo,X
72ca 58                 CLI
72cb 60                 RTS ;Size  224 [BASIC_SOUND]

              ; ********************
72cc            BASIC_WINDOW ; $72cc
              ; ********************

72cc 20 f4 87           JSR Get_Byte_Var
72cf e0 28              CPX #40             ; limit for 40 column screen
72d1 24 d7              BIT MODE_80
72d3 10 02              BPL WIND_10
72d5 e0 50              CPX #80             ; limit for 80 column screen
72d7 b0 59    WIND_10   BCS WIND_Err
72d9 8e b3 12           STX Win_XL
72dc 20 09 88           JSR Comma_And_Byte
72df e0 19              CPX #25             ; row limit
72e1 b0 4f              BCS WIND_Err
72e3 8e b4 12           STX Win_YL
72e6 20 09 88           JSR Comma_And_Byte
72e9 e0 28              CPX #40             ; limit for 40 column screen
72eb 24 d7              BIT MODE_80
72ed 10 02              BPL WIND_20
72ef e0 50              CPX #80             ; limit for 80 column screen
72f1 b0 3f    WIND_20   BCS WIND_Err
72f3 8e b5 12           STX Win_XH
72f6 ec b3 12           CPX Win_XL
72f9 90 37              BCC WIND_Err
72fb 20 09 88           JSR Comma_And_Byte
72fe e0 19              CPX #25
7300 b0 30              BCS WIND_Err
7302 8e b6 12           STX Win_YH
7305 ec b4 12           CPX Win_YL
7308 90 28              BCC WIND_Err
730a 20 1c 9e           JSR Get_Byte_Or_Zero
730d e0 02              CPX #2
730f b0 21              BCS WIND_Err
7311 8a                 TXA
7312 48                 PHA
7313 ae b3 12           LDX Win_XL
7316 ad b4 12           LDA Win_YL
7319 18                 CLC
731a 20 2d c0           JSR E_WINDOW
731d ae b5 12           LDX Win_XH
7320 ad b6 12           LDA Win_YH
7323 38                 SEC
7324 20 2d c0           JSR E_WINDOW
7327 a2 13              LDX #$13            ; HOME
7329 68                 PLA
732a f0 02              BEQ WIND_30
732c a2 93              LDX #$93            ; CLR
732e 8a       WIND_30   TXA
732f 4c 69 92           JMP B_BSOUT
7332 4c 28 7d WIND_Err  JMP Error_Illegal_Quantity

              ; ******************
7335            BASIC_BOOT ; $7335
              ; ******************

7335 a9 e6              LDA #$e6
7337 a2 fc              LDX #$fc
7339 20 c3 a3           JSR DOS_Parser_AX
733c a5 80              LDA DOSFLA
733e 4a                 LSR A
733f 90 1d              BCC BABO_20
7341 20 1f a2           JSR BLOAD
7344 b0 29              BCS BABO_Err
7346 ae d5 03           LDX USER_BANK
7349 a5 81              LDA DOSFLB
734b 4a                 LSR A
734c 90 03              BCC BABO_10
734e ae 1f 01           LDX DOS_BANK
7351 86 02    BABO_10   STX BANK
7353 a5 ac              LDA SAL
7355 85 04              STA PC_LO
7357 a5 ad              LDA SAH
7359 85 03              STA PC_HI
735b 4c 6e ff           JMP K_JSRFAR
735e ad 12 01 BABO_20   LDA DOS_DRIVE_1
7361 09 30              ORA #'0'
7363 ae 1c 01           LDX DOS_FA
7366 20 45 a8           JSR Map_IO
7369 20 53 ff           JSR K_BOOT
736c b0 01              BCS BABO_Err
736e 60                 RTS ;Size   58 [BASIC_BOOT]
736f 4c d0 90 BABO_Err  JMP Break_On_Error


              ; ********************
7372            BASIC_SPRDEF ; $7372
              ; ********************

7372 20 4f 9f           JSR Allocate_Graphics_RAM
7375 20 45 a8           JSR Map_IO
7378 a9 d0              LDA #$d0
737a 8d 68 11           STA CHRPAG          ; $d000 : character rom
737d a9 20              LDA #$20
737f 85 d8              STA GRAPHM          ; $2000 : graphics screen
7381 20 30 6b           JSR Clear_Graphics_RAM
7384 a0 80              LDY #$80
7386 8c 3d 11           STY XSGN
7389 a0 18              LDY #24             ; display
738b a9 20              LDA #' '
738d a2 00              LDX #0
738f 20 db 68 SPRD_05   JSR Display_Character
7392 e8                 INX
7393 e0 15              CPX #21             ; display 21 blanks
7395 90 f8              BCC SPRD_05
7397 20 db 68 SPRD_10   JSR Display_Character
739a 88                 DEY
739b 10 fa              BPL SPRD_10
739d 20 45 a8           JSR Map_IO
73a0 a5 f1              LDA E_Attribute
73a2 48                 PHA
73a3 ad 21 d0           LDA VIC_BG_COL
73a6 85 f1              STA E_Attribute
73a8 a9 2b              LDA #'+'            ; sprite cursor
73aa a2 00              LDX #0
73ac 8e 3d 11           STX XSGN
73af a0 00    SPRD_15   LDY #0
73b1 20 db 68 SPRD_20   JSR Display_Character
73b4 c8                 INY
73b5 c0 18              CPY #24
73b7 90 f8              BCC SPRD_20
73b9 e8                 INX
73ba e0 15              CPX #21
73bc 90 f1              BCC SPRD_15
73be 68                 PLA
73bf 85 f1              STA E_Attribute
73c1 20 d4 76           JSR Clear_Sprite
73c4 a0 02    SPRD_25   LDY #2
73c6 a2 17              LDX #$17
73c8 b9 6c 76 SPRD_30   LDA SPRITE_NO-2,Y
73cb f0 06              BEQ SPRD_35
73cd 20 db 68           JSR Display_Character
73d0 c8                 INY
73d1 d0 f5              BNE SPRD_30
73d3 20 45 a8 SPRD_35   JSR Map_IO
73d6 20 e4 ff SPRD_40   JSR K_GETIN
73d9 f0 fb              BEQ SPRD_40
73db c9 0d              CMP #CR
73dd d0 08              BNE SPRD_45
73df 20 30 6b           JSR Clear_Graphics_RAM
73e2 a9 00              LDA #0
73e4 85 d8              STA GRAPHM
73e6 60                 RTS ;Size  117 [BASIC_SPRDEF]
73e7 38       SPRD_45   SEC
73e8 e9 31              SBC #'1'
73ea 8d fc 12           STA SPRNUM
73ed c9 08              CMP #8
73ef b0 e5              BCS SPRD_40
73f1 aa                 TAX
73f2 0a                 ASL A
73f3 a8                 TAY
73f4 bd b3 6c           LDA Bit_Mask,X
73f7 8d 6d 11           STA BITMSK
73fa 2d 1c d0           AND Vd01c
73fd f0 02              BEQ SPRD_50
73ff a9 80              LDA #$80
7401 8d fa 12 SPRD_50   STA DEFMOD
7404 a9 08              LDA #8
7406 99 d6 11           STA VSH,Y
7409 a9 4a              LDA #$4a ; 'J'
740b 99 d7 11           STA VSH+1,Y
740e ad 6d 11           LDA BITMSK
7411 0d e6 11           ORA VSH+16
7414 8d e6 11           STA VSH+16
7417 ad 6d 11           LDA BITMSK
741a 8d 15 d0           STA VIC_SPR_ENA
741d ae fc 12           LDX SPRNUM
7420 bc d9 6d           LDY Sprite_Offset,X
7423 a9 00              LDA #0
7425 99 7e 11           STA SPRITE_DATA,Y
7428 8a                 TXA
7429 a0 11              LDY #$11
742b a2 17              LDX #$17
742d 18                 CLC
742e 69 31              ADC #'1'
7430 20 db 68           JSR Display_Character
7433 20 45 a8           JSR Map_IO
7436 ad fc 12           LDA SPRNUM
7439 4a                 LSR A
743a 6a                 ROR A
743b 6a                 ROR A
743c 85 4b              STA FORPNT
743e a0 0e              LDY #14
7440 90 01              BCC SPRD_55
7442 c8                 INY
7443 84 4c    SPRD_55   STY FORPNT+1
7445 20 d1 75           JSR Show_Sprite
7448 a0 3f              LDY #$3f
744a b1 4b    SPRD_60   LDA (FORPNT),Y
744c 99 b7 12           STA SAVRAM,Y
744f 88                 DEY
7450 10 f8              BPL SPRD_60
7452 a2 00    SPRD_65   LDX #0
7454 8e 5f 11           STX ANGEND+1
7457 8e 5e 11           STX ANGEND
745a 20 4a 76 SPRD_70   JSR Show_Sprite_Cursor
745d 20 e4 ff SPRD_75   JSR K_GETIN
7460 f0 fb              BEQ SPRD_75
7462 48                 PHA
7463 20 4a 76           JSR Show_Sprite_Cursor
7466 68                 PLA
7467 a2 10              LDX #16
7469 dd b4 76 SPRD_80   CMP SPRITECOL-1,X
746c d0 0d              BNE SPRD_85
746e ca                 DEX
746f 8a                 TXA
7470 ae fc 12           LDX SPRNUM
7473 9d 27 d0           STA Vd027,X
7476 20 d1 75           JSR Show_Sprite
7479 b0 df              BCS SPRD_70
747b ca       SPRD_85   DEX
747c d0 eb              BNE SPRD_80
747e a2 11              LDX #$11
7480 dd 7f 76 SPRD_90   CMP SPRITECMD,X
7483 f0 05              BEQ SPRD_95
7485 ca                 DEX
7486 10 f8              BPL SPRD_90
7488 30 d0              BMI SPRD_70
748a 8a       SPRD_95   TXA
748b a8                 TAY
748c 0a                 ASL A
748d aa                 TAX
748e bd 91 76           LDA Sprite_Jump_Table,X
7491 48                 PHA
7492 bd 92 76           LDA Sprite_Jump_Table+1,X
7495 48                 PHA
7496 60                 RTS ;Size  293 [BASIC_SPRDEF]

              ; *****************
7497            SPR_Pixel ; $7497
              ; *****************

7497 98                 TYA
7498 85 8f              STA VTEMPA+1
749a 20 10 76           JSR Load_Sprite_Color
749d 48                 PHA
749e ac 5e 11           LDY ANGEND
74a1 ae 5f 11           LDX ANGEND+1
74a4 20 c5 76           JSR Set_Graphics_Pointer
74a7 68                 PLA
74a8 20 3f 76           JSR Store_Graphic_Byte
74ab ac 5e 11           LDY ANGEND
74ae 98                 TYA
74af 29 07              AND #%0000 0111 ; $07
74b1 aa                 TAX
74b2 98                 TYA
74b3 4a                 LSR A
74b4 4a                 LSR A
74b5 4a                 LSR A
74b6 18                 CLC
74b7 6d 5f 11           ADC ANGEND+1
74ba 6d 5f 11           ADC ANGEND+1
74bd 6d 5f 11           ADC ANGEND+1
74c0 a8                 TAY
74c1 b1 4b              LDA (FORPNT),Y
74c3 2c fa 12           BIT DEFMOD
74c6 10 18              BPL SPix_10
74c8 85 8e              STA VTEMPA
74ca bd 1c 9d           LDA rbits,X
74cd 1d 1d 9d           ORA rbits+1,X
74d0 48                 PHA
74d1 05 8e              ORA VTEMPA
74d3 85 8e              STA VTEMPA
74d5 68                 PLA
74d6 a6 8f              LDX VTEMPA+1
74d8 3d 25 9f           AND colval,X
74db 45 8e              EOR VTEMPA
74dd 4c ea 74           JMP SPix_12

74e0 1d 1c 9d SPix_10   ORA rbits,X
74e3 06 8f              ASL VTEMPA+1
74e5 d0 03              BNE SPix_12
74e7 5d 1c 9d           EOR rbits,X
74ea 91 4b    SPix_12   STA (FORPNT),Y
74ec 2c fa 12           BIT DEFMOD
74ef 50 4e              BVC SPix_30
74f1 4c 5a 74           JMP SPRD_70

74f4 a0 3f    SPix_14   LDY #$3f
74f6 b9 b7 12 SPix_16   LDA SAVRAM,Y
74f9 91 4b              STA (FORPNT),Y
74fb 88                 DEY
74fc 10 f8              BPL SPix_16
74fe a9 00    SPix_18   LDA #0
7500 8d 15 d0           STA VIC_SPR_ENA
7503 4c c4 73           JMP SPRD_25

7506 ad fa 12 SPix_20   LDA DEFMOD
7509 49 80              EOR #%1000 0000 ; $80
750b 8d fa 12           STA DEFMOD
750e 20 d1 75           JSR Show_Sprite
7511 ad 5e 11           LDA ANGEND
7514 29 fe              AND #%1111 1110 ; $fe
7516 8d 5e 11           STA ANGEND
7519 a0 1c              LDY #$1c
751b 2c                 BIT
751c a0 17    SPix_22   LDY #$17
751e 2c                 BIT
751f a0 1d    SPix_24   LDY #$1d
7521 b9 00 d0           LDA VIC,Y
7524 ae fc 12           LDX SPRNUM
7527 5d b3 6c           EOR Bit_Mask,X
752a 99 00 d0           STA VIC,Y
752d 4c 5a 74           JMP SPRD_70

7530 a0 3f    SPix_26   LDY #$3f
7532 a9 00              LDA #0
7534 91 4b    SPix_28   STA (FORPNT),Y
7536 88                 DEY
7537 10 fb              BPL SPix_28
7539 20 d4 76           JSR Clear_Sprite
753c 4c 52 74           JMP SPRD_65

753f a9 01    SPix_30   LDA #1
7541 2c                 BIT
7542 a9 ff    SPix_32   LDA #$ff
7544 2c fa 12           BIT DEFMOD
7547 10 01              BPL SPix_34
7549 0a                 ASL A
754a 18       SPix_34   CLC
754b 6d 5e 11           ADC ANGEND
754e 30 09              BMI SPix_36
7550 c9 18              CMP #$18
7552 b0 2d              BCS SPix_48
7554 8d 5e 11           STA ANGEND
7557 90 25              BCC SPix_46
7559 a2 17    SPix_36   LDX #$17
755b 2c fa 12           BIT DEFMOD
755e 10 01              BPL SPix_38
7560 ca                 DEX
7561 8e 5e 11 SPix_38   STX ANGEND
7564 a9 ff    SPix_40   LDA #$ff
7566 2c                 BIT
7567 a9 01    SPix_42   LDA #1
7569 18                 CLC
756a 6d 5f 11           ADC ANGEND+1
756d c9 15              CMP #$15
756f b0 0d              BCS SPix_46
7571 8d 5f 11           STA ANGEND+1
7574 90 08              BCC SPix_46
7576 ad fa 12 SPix_44   LDA DEFMOD
7579 49 40              EOR #%0100 0000 ; $40 ; '@'
757b 8d fa 12           STA DEFMOD
757e 4c 5a 74 SPix_46   JMP SPRD_70

7581 a9 00    SPix_48   LDA #0
7583 8d 5e 11           STA ANGEND
7586 f0 df              BEQ SPix_42
7588 a0 02    SPix_50   LDY #2
758a a2 18              LDX #$18
758c b9 61 76 SPix_52   LDA COPY_FROM-2,Y
758f f0 06              BEQ SPix_54
7591 20 db 68           JSR Display_Character
7594 c8                 INY
7595 d0 f5              BNE SPix_52
7597 20 45 a8 SPix_54   JSR Map_IO
759a 20 e4 ff SPix_56   JSR K_GETIN
759d f0 fb              BEQ SPix_56
759f c9 0d              CMP #CR
75a1 f0 1f              BEQ SPix_62
75a3 38                 SEC
75a4 e9 31              SBC #$31 ; '1'
75a6 c9 08              CMP #8
75a8 b0 f0              BCS SPix_56
75aa 4a                 LSR A
75ab 6a                 ROR A
75ac 6a                 ROR A
75ad 85 8e              STA VTEMPA
75af a0 0e              LDY #14
75b1 90 01              BCC SPix_58
75b3 c8                 INY
75b4 84 8f    SPix_58   STY VTEMPA+1
75b6 a0 3f              LDY #$3f
75b8 b1 8e    SPix_60   LDA (VTEMPA),Y
75ba 91 4b              STA (FORPNT),Y
75bc 88                 DEY
75bd 10 f9              BPL SPix_60
75bf 20 d1 75           JSR Show_Sprite
75c2 a9 00    SPix_62   LDA #0
75c4 a8                 TAY
75c5 99 00 3e SPix_64   STA V3e00,Y
75c8 88                 DEY
75c9 d0 fa              BNE SPix_64
75cb 4c 5a 74           JMP SPRD_70

75ce ff ff ff           .BYTE $ff,$ff,$ff ; unused

              ; *******************
75d1            Show_Sprite ; $75d1
              ; *******************

75d1 a2 00              LDX #0
75d3 8e 60 11           STX XRCOS
75d6 8e fb 12 ShSp_10   STX LINCNT
75d9 20 c5 76           JSR Set_Graphics_Pointer
75dc a0 00              LDY #0
75de a2 08    ShSp_20   LDX #8
75e0 8c 6e 11           STY NUMCNT
75e3 ac 60 11           LDY XRCOS
75e6 b1 4b              LDA (FORPNT),Y
75e8 ee 60 11           INC XRCOS
75eb ac 6e 11           LDY NUMCNT
75ee 0a       ShSp_30   ASL A
75ef 2c fa 12           BIT DEFMOD
75f2 10 02              BPL ShSp_40
75f4 2a                 ROL A
75f5 ca                 DEX
75f6 48       ShSp_40   PHA
75f7 2a                 ROL A
75f8 20 10 76           JSR Load_Sprite_Color
75fb 20 3f 76           JSR Store_Graphic_Byte
75fe c8                 INY
75ff 68                 PLA
7600 ca                 DEX
7601 d0 eb              BNE ShSp_30
7603 c0 18              CPY #$18
7605 90 d7              BCC ShSp_20
7607 ae fb 12           LDX LINCNT
760a e8                 INX
760b e0 15              CPX #$15
760d 90 c7              BCC ShSp_10
760f 60                 RTS ;Size   63 [Show_Sprite]

              ; *************************
7610            Load_Sprite_Color ; $7610
              ; *************************

7610 29 03              AND #3
7612 4a                 LSR A
7613 6a                 ROR A
7614 f0 0f              BEQ LSC_10
7616 2c fa 12           BIT DEFMOD
7619 10 0f              BPL LSC_20
761b ad 25 d0           LDA Vd025
761e 90 14              BCC Expand_Color_Nibble
7620 ad 26 d0           LDA Vd026
7623 b0 0f              BCS Expand_Color_Nibble
7625 ad 21 d0 LSC_10    LDA VIC_BG_COL
7628 90 0a              BCC Expand_Color_Nibble
762a 86 8e    LSC_20    STX VTEMPA
762c ae fc 12           LDX SPRNUM
762f bd 27 d0           LDA Vd027,X
7632 a6 8e              LDX VTEMPA

              ; ***************************
7634            Expand_Color_Nibble ; $7634
              ; ***************************

7634 29 0f              AND #%0000 1111 ; $0f
7636 85 8e              STA VTEMPA
7638 0a                 ASL A
7639 0a                 ASL A
763a 0a                 ASL A
763b 0a                 ASL A
763c 05 8e              ORA VTEMPA
763e 60                 RTS ;Size   11 [Expand_Color_Nibble]

              ; **************************
763f            Store_Graphic_Byte ; $763f
              ; **************************

763f 91 8c              STA (GRAPNT),Y
7641 2c fa 12           BIT DEFMOD
7644 10 03              BPL SGB_10
7646 c8                 INY
7647 91 8c              STA (GRAPNT),Y
7649 60       SGB_10    RTS ;Size   11 [Store_Graphic_Byte]

              ; **************************
764a            Show_Sprite_Cursor ; $764a
              ; **************************

764a ae 5f 11           LDX ANGEND+1
764d 20 c5 76           JSR Set_Graphics_Pointer
7650 ac 5e 11           LDY ANGEND
7653 2c fa 12           BIT DEFMOD
7656 10 03              BPL Toggle_Graphic_Bit7
7658 20 5b 76           JSR Toggle_Graphic_Bit7

              ; ***************************
765b            Toggle_Graphic_Bit7 ; $764a
              ; ***************************

765b b1 8c              LDA (GRAPNT),Y
765d 49 80              EOR #%1000 0000 ; $80
765f 91 8c              STA (GRAPNT),Y
7661 c8                 INY
7662 60                 RTS ;Size    8 [Toggle_Graphic_Bit7]

7663 43 4f 50 COPY_FROM .BYTE "COPY FROM?",0
766e 53 50 52 SPRITE_NO .BYTE "SPRITE NUMBER?  ",0
767f 31 32 33 SPRITECMD .BYTE "1234",$03,$8d,"XYM",$9d
7689 1d 91 11           .BYTE $1d,$91,$11,$93,$13,$41,$0d,$43

              ; *************************
7691            Sprite_Jump_Table ; $7691
              ; *************************

7691 74 96              .BYTE >[SPR_Pixel -1],<[SPR_Pixel -1]
7693 74 96              .BYTE >[SPR_Pixel -1],<[SPR_Pixel -1]
7695 74 96              .BYTE >[SPR_Pixel -1],<[SPR_Pixel -1]
7697 74 96              .BYTE >[SPR_Pixel -1],<[SPR_Pixel -1]
7699 74 f3              .BYTE >[SPix_14   -1],<[SPix_14   -1]
769b 74 fd              .BYTE >[SPix_18   -1],<[SPix_18   -1]
769d 75 1e              .BYTE >[SPix_24   -1],<[SPix_24   -1]
769f 75 1b              .BYTE >[SPix_22   -1],<[SPix_22   -1]
76a1 75 05              .BYTE >[SPix_20   -1],<[SPix_20   -1]
76a3 75 41              .BYTE >[SPix_32   -1],<[SPix_32   -1]
76a5 75 3e              .BYTE >[SPix_30   -1],<[SPix_30   -1]
76a7 75 63              .BYTE >[SPix_40   -1],<[SPix_40   -1]
76a9 75 66              .BYTE >[SPix_42   -1],<[SPix_42   -1]
76ab 75 2f              .BYTE >[SPix_26   -1],<[SPix_26   -1]
76ad 74 51              .BYTE >[SPRD_65   -1],<[SPRD_65   -1]
76af 75 75              .BYTE >[SPix_44   -1],<[SPix_44   -1]
76b1 75 80              .BYTE >[SPix_48   -1],<[SPix_48   -1]
76b3 75 87              .BYTE >[SPix_50   -1],<[SPix_50   -1]

76b5 90 05 1c SPRITECOL .BYTE $90,$05,$1c,$9f,$9c,$1e,$1f,$9e
76bd 81 95 96           .BYTE $81,$95,$96,$97,$98,$99,$9a,$9b

              ; ****************************
76c5            Set_Graphics_Pointer ; $76c5
              ; ****************************

76c5 bd 33 c0           LDA E_40_Line_Lo,X
76c8 85 8c              STA GRAPNT
76ca bd 4c c0           LDA E_40_Line_Hi,X
76cd 29 03              AND #%0000 0011 ; $03
76cf 09 1c              ORA #%0001 1100 ; $1c
76d1 85 8d              STA GRAPNT+1
76d3 60                 RTS ;Size   15 [Set_Graphics_Pointer]

              ; ********************
76d4            Clear_Sprite ; $76d4
              ; ********************

76d4 ad 21 d0           LDA VIC_BG_COL
76d7 20 34 76           JSR Expand_Color_Nibble
76da a2 14              LDX #20             ; start at row 20
76dc 48       ClSp_10   PHA
76dd 20 c5 76           JSR Set_Graphics_Pointer
76e0 68                 PLA
76e1 a0 17              LDY #23             ; start at column 23
76e3 91 8c    ClSp_20   STA (GRAPNT),Y
76e5 88                 DEY                 ; next column
76e6 10 fb              BPL ClSp_20
76e8 ca                 DEX                 ; next row
76e9 10 f1              BPL ClSp_10
76eb 60                 RTS ;Size   24 [Clear_Sprite]

              ; ********************
76ec            BASIC_SPRSAV ; $76ec
              ; ********************

76ec 20 7c 77           JSR Get_Sprite_Address
76ef b0 2f              BCS SPRS_20
76f1 85 4b              STA FORPNT
76f3 84 4c              STY FORPNT+1
76f5 a0 3e              LDY #$3e            ; length of sprite data
76f7 b1 4b    SPRS_10   LDA (FORPNT),Y
76f9 99 b7 12           STA SAVRAM,Y
76fc 88                 DEY
76fd 10 f8              BPL SPRS_10
76ff c8                 INY                 ; Y = 0
7700 8c f7 12           STY SAVRAM+$40      ; width  high
7703 8c f9 12           STY SAVRAM+$42      ; height high
7706 a9 17              LDA #$17
7708 8d f6 12           STA SAVRAM+$3f      ; width  low = 23
770b a9 14              LDA #$14
770d 8d f8 12           STA SAVRAM+$41      ; height low = 20
7710 a2 b7              LDX #<SAVRAM
7712 a0 12              LDY #>SAVRAM
7714 86 70              STX STRPTR
7716 84 71              STY STRPTR+1
7718 a9 43              LDA #$43            ; sprite data + size
771a 20 cc 86           JSR Store_String_Bank_0
771d 20 99 77           JSR LXAY_Descriptor
7720 8e db 03 SPRS_20   STX SAVSIZ          ; string descriptor
7723 8d dc 03           STA SAVSIZ+1
7726 8c dd 03           STY SAVSIZ+2
7729 20 5c 79           JSR Need_Comma
772c a5 3d              LDA TXTPTR
772e 8d e0 03           STA SPRTMP
7731 a5 3e              LDA TXTPTR+1
7733 8d e1 03           STA SPRTMP+1
7736 20 7c 77           JSR Get_Sprite_Address
7739 b0 25              BCS SPRS_50
773b 85 8c              STA GRAPNT
773d 84 8d              STY GRAPNT+1
773f ad dc 03           LDA SAVSIZ+1
7742 85 4b              STA FORPNT
7744 ad dd 03           LDA SAVSIZ+2
7747 85 4c              STA FORPNT+1
7749 a0 00              LDY #0
774b cc db 03 SPRS_30   CPY SAVSIZ
774e f0 0f              BEQ SPRS_40
7750 a9 4b              LDA #FORPNT
7752 20 ab 03           JSR Fetch_1
7755 8d 03 ff           STA MMU_LCRC
7758 91 8c              STA (GRAPNT),Y
775a c8                 INY
775b c0 3f              CPY #$3f
775d d0 ec              BNE SPRS_30
775f 60       SPRS_40   RTS ;Size  116 [BASIC_SPRSAV]
7760 ad e0 03 SPRS_50   LDA SPRTMP
7763 85 3d              STA TXTPTR
7765 ad e1 03           LDA SPRTMP+1
7768 85 3e              STA TXTPTR+1
776a 20 af 7a           JSR Parse_Name
776d 85 4b              STA FORPNT
776f 84 4c              STY FORPNT+1
7771 a9 db              LDA #<SAVSIZ
7773 85 66              STA FAC1_M3
7775 a9 03              LDA #>SAVSIZ
7777 85 67              STA FAC1_M4
7779 4c 05 54           JMP Assign_String_Variable

              ; **************************
777c            Get_Sprite_Address ; $777c
              ; **************************

777c 20 ef 77           JSR Eval_Expression
777f 24 0f              BIT VALTYP
7781 30 16              BMI LXAY_Descriptor
7783 20 f7 87           JSR Eval_Byte
7786 ca                 DEX
7787 e0 08              CPX #8
7789 b0 0b              BCS GSA_Err
778b 8a                 TXA
778c 4a                 LSR A
778d 6a                 ROR A
778e 6a                 ROR A
778f a0 0e              LDY #14
7791 90 01              BCC GSA_10
7793 c8                 INY
7794 18       GSA_10    CLC
7795 60                 RTS ;Size   26 [Get_Sprite_Address]
7796 4c 28 7d GSA_Err   JMP Error_Illegal_Quantity

              ; ***********************
7799            LXAY_Descriptor ; $7799
              ; ***********************

7799 a5 66              LDA FAC1_M3
779b a4 67              LDY FAC1_M4
779d 20 e0 87           JSR Pop_Descriptor_Stack
77a0 a0 00              LDY #0
77a2 20 e7 42           JSR Get_FAC1_M3_1
77a5 aa                 TAX
77a6 c8                 INY
77a7 20 e7 42           JSR Get_FAC1_M3_1
77aa 48                 PHA
77ab c8                 INY
77ac 20 e7 42           JSR Get_FAC1_M3_1
77af a8                 TAY
77b0 68                 PLA
77b1 38                 SEC
77b2 60                 RTS ;Size   26 [LXAY_Descriptor]

              ; ******************
77b3            BASIC_FAST ; $77b3
              ; ******************

77b3 20 45 a8           JSR Map_IO
77b6 ad 11 d0           LDA VIC_Ctrl_1
77b9 29 6f              AND #%0110 1111     ; clear device enable bit 4
77bb 8d 11 d0           STA VIC_Ctrl_1
77be a9 01              LDA #1
77c0 8d 30 d0           STA VIC_SPEED       ; set CPU speed to 2MHz
77c3 60                 RTS ;Size   17 [BASIC_FAST]

              ; ******************
77c4            BASIC_SLOW ; $77c4
              ; ******************

77c4 20 45 a8           JSR Map_IO
77c7 a9 00              LDA #0
77c9 8d 30 d0           STA VIC_SPEED       ; set CPU speed to 1MHz
77cc ad 11 d0           LDA VIC_Ctrl_1
77cf 29 7f              AND #%0111 1111     ; clear RST8
77d1 09 10              ORA #%0001 0000     ; set device enable bit 4
77d3 8d 11 d0           STA VIC_Ctrl_1
77d6 60                 RTS ;Size   19 [BASIC_SLOW]

              ; ********************
77d7            Eval_Numeric ; $77d7
              ; ********************

77d7 20 ef 77           JSR Eval_Expression

              ; **********************
77da            Assert_Numeric ; $77da
              ; **********************

77da 18                 CLC
77db 90 01              BCC Check_Var_Type

              ; *******************
77dd            Need_String ; $77dd
              ; *******************

77dd 38                 SEC

              ; **********************
77de            Check_Var_Type ; $77de
              ; **********************

77de 24 0f              BIT VALTYP          ; $FF = string   $00 = numeric
77e0 30 03              BMI CVT_10          ; branch on string type
77e2 b0 03              BCS TYPE_MISMATCH   ; string assert -> TYPE MISMATCH
77e4 60       CVT_Ret   RTS ;Size    7 [Check_Var_Type]
77e5 b0 fd    CVT_10    BCS CVT_Ret         ; looking for string, found string

              ; *********************
77e7            TYPE_MISMATCH ; $77e7
              ; *********************

77e7 a2 16              LDX #$16            ; TYPE MISMATCH
77e9 2c                 BIT                 ; skip word
77ea a2 19    Err_FTC   LDX #$19            ; FORMULA TOO COMPLEX
77ec 4c 3c 4d           JMP Print_Error_X

              ; ***********************
77ef            Eval_Expression ; $77ef
              ; ***********************

77ef a6 3d              LDX TXTPTR          ; TXTPTR--
77f1 d0 02              BNE EvEx_05
77f3 c6 3e              DEC TXTPTR+1
77f5 c6 3d    EvEx_05   DEC TXTPTR
77f7 a2 00              LDX #0
77f9 24                 .BYTE $24           ; skip next PHA
77fa 48       EvEx_10   PHA                 ; push ACCSYM (comparison op + type)
77fb 8a                 TXA
77fc 48                 PHA                 ; push X
77fd ba                 TSX
77fe e0 63              CPX #$63            ; remaining stack < $63
7800 90 e8              BCC Err_FTC
7802 20 d7 78           JSR Vectored_EVAL
7805 a9 00              LDA #0
7807 85 4f              STA OP_TMP
7809 20 86 03 EvEx_15   JSR CHRGOT
780c 38       EvEx_20   SEC
780d e9 b1              SBC #$b1            ; > token ( start of comparison ops)
780f 90 17              BCC EvEx_25
7811 c9 03              CMP #3              ; ( 3 comparison operators > = < )
7813 b0 13              BCS EvEx_25         ; -> function
7815 c9 01              CMP #1              ; CMP #2
7817 2a                 ROL A               ; ADC #1
7818 49 01              EOR #1              ; '>'  A = 1
781a 45 4f              EOR OP_TMP          ; '='  A = 2
781c c5 4f              CMP OP_TMP          ; '<'  A = 4
781e 90 61              BCC SynErr1
7820 85 4f              STA OP_TMP
7822 20 80 03           JSR CHRGET
7825 4c 0c 78           JMP EvEx_20         ; loop (maybe <= or >= or <>)

7828 a6 4f    EvEx_25   LDX OP_TMP
782a d0 2c              BNE EvEx_50
782c b0 7e              BCS Pop_FAC2          ; function ( SGN INT ... MID$ )
782e 69 07              ADC #7
7830 90 7a              BCC Pop_FAC2          ; branch always
7832 65 0f              ADC VALTYP          ; C=1               0 1 2 3 4  5  6
7834 d0 03              BNE EvEx_30         ; binary operator ( + - * / ^ AND OR )
7836 4c 0d 87           JMP Concatenate     ; '+' with strings

7839 69 ff    EvEx_30   ADC #$ff
783b 85 24              STA INDEXA          ; op code (0-9 for '+' to '<')
783d 0a                 ASL A               ; op code * 2
783e 65 24              ADC INDEXA          ; op code * 3
7840 a8                 TAY                 ; Y = index
7841 68       EvEx_35   PLA                 ; precedence
7842 d9 28 48           CMP BASIC_Operator,Y
7845 b0 6a              BCS PoFA_20         ; previous op has higher precedence
7847 20 da 77           JSR Assert_Numeric
784a 48       EvEx_40   PHA                 ; save precedence
784b 20 71 78 EvEx_45   JSR Use_Operator
784e 68                 PLA                 ; restore precedence
784f a4 4d              LDY VARTXT          ; restore index
7851 10 17              BPL EvEx_60
7853 aa                 TAX
7854 f0 59              BEQ PoFA_10
7856 d0 62              BNE PoFA_40         ; always

7858 46 0f    EvEx_50   LSR VALTYP          ; clear type
785a 8a                 TXA                 ; comparison operator
785b 2a                 ROL A               ; com op * 2
785c a6 3d              LDX TXTPTR          ; TXTPTR--
785e d0 02              BNE EvEx_55
7860 c6 3e              DEC TXTPTR+1
7862 c6 3d    EvEx_55   DEC TXTPTR
7864 a0 1b              LDY #$1b            ; index to Op_COMPARE
7866 85 4f              STA OP_TMP
7868 d0 d7              BNE EvEx_35
786a d9 28 48 EvEx_60   CMP BASIC_Operator,Y
786d b0 4b              BCS PoFA_40         ; higher or equal precedence
786f 90 d9              BCC EvEx_40         ; lower precedence

              ; ********************
7871            Use_Operator ; $7871
              ; ********************

7871 b9 2a 48           LDA BASIC_Operator+2,Y
7874 48                 PHA
7875 b9 29 48           LDA BASIC_Operator+1,Y
7878 48                 PHA
7879 20 84 78           JSR Push_Operand
787c a5 4f              LDA OP_TMP
787e 4c fa 77           JMP EvEx_10
7881 4c 6c 79 SynErr1   JMP SYNTAX_ERROR

              ; ********************
7884            Push_Operand ; $7884
              ; ********************

7884 a5 68              LDA FAC1_SI
7886 be 28 48           LDX BASIC_Operator,Y
7889 a8                 TAY
788a 18                 CLC
788b 68                 PLA
788c 69 01              ADC #1
788e 85 24              STA INDEXA          ; return address low
7890 68                 PLA
7891 69 00              ADC #0
7893 85 25              STA INDEXA+1        ; return address high
7895 98                 TYA
7896 48                 PHA                 ; sign of operand
7897 20 47 8c           JSR Round_FAC1
789a a5 67              LDA FAC1_M4
789c 48                 PHA
789d a5 66              LDA FAC1_M3
789f 48                 PHA
78a0 a5 65              LDA FAC1_M2
78a2 48                 PHA
78a3 a5 64              LDA FAC1_M1
78a5 48                 PHA
78a6 a5 63              LDA FAC1_EX
78a8 48                 PHA
78a9 6c 24 00           JMP (INDEXA)        ; RTS

              ; ****************
78ac            Pop_FAC2 ; $78ac
              ; ****************

78ac a0 ff              LDY #$ff
78ae 68                 PLA
78af f0 23    PoFA_10   BEQ PoFA_50
78b1 c9 64    PoFA_20   CMP #$64            ; precedence of Op_COMPARE
78b3 f0 03              BEQ PoFA_30         ; strings may be comapred too
78b5 20 da 77           JSR Assert_Numeric
78b8 84 4d    PoFA_30   STY VARTXT
78ba 68       PoFA_40   PLA
78bb 4a                 LSR A               ; C = VALTYPE
78bc 85 14              STA TANSGN          ; comparison operator
78be 68                 PLA
78bf 85 6a              STA FAC2_EX
78c1 68                 PLA
78c2 85 6b              STA FAC2_M1
78c4 68                 PLA
78c5 85 6c              STA FAC2_M2
78c7 68                 PLA
78c8 85 6d              STA FAC2_M3
78ca 68                 PLA
78cb 85 6e              STA FAC2_M4
78cd 68                 PLA
78ce 85 6f              STA FAC2_SI
78d0 45 68              EOR FAC1_SI
78d2 85 70              STA STRPTR
78d4 a5 63    PoFA_50   LDA FAC1_EX
78d6 60                 RTS ;Size   43 [Pop_FAC2]

              ; *********************
78d7            Vectored_EVAL ; $78d7
              ; *********************

78d7 6c 0a 03           JMP (IEVAL)

              ; ****************
78da            DEF_EVAL ; $78da
              ; ****************

78da a9 00              LDA #0
78dc 85 0f              STA VALTYP          ; default numeric
78de 20 80 03 Eva_10    JSR CHRGET
78e1 b0 05              BCS Eva_30          ; branch if not numeric
78e3 a2 00    Eva_20    LDX #0
78e5 4c 22 8d           JMP Read_Real_To_FAC1
78e8 20 3c 7b Eva_30    JSR Is_Alpha
78eb 90 03              BCC Eva_40
78ed 4c 78 79           JMP Get_Var
78f0 c9 ff    Eva_40    CMP #$ff            ; PI token
78f2 d0 0f              BNE qdot
78f4 a9 fe              LDA #<Real_PI
78f6 a0 78              LDY #>Real_PI
78f8 20 d4 8b           JSR Load_FAC1_AY
78fb 4c 80 03           JMP CHRGET

78fe 82 49 0f Real_PI   .REAL $82490fdaa1;    3.14159265254

              ; ************
7903            qdot ; $7903
              ; ************

7903 c9 2e              CMP #'.'
7905 f0 dc              BEQ Eva_20
7907 c9 ab              CMP #$ab            ; -
7909 f0 66              BEQ Prep_Minus_Op
790b c9 aa              CMP #$aa            ; +
790d f0 cf              BEQ Eva_10
790f c9 22              CMP #QUOTE
7911 d0 15              BNE qdot_10

              ; *************************************
7913            Create_Descriptor_From_TXTPTR ; $7913
              ; *************************************

7913 a5 3d              LDA TXTPTR
7915 a4 3e              LDY TXTPTR+1
7917 69 00              ADC #0
7919 90 01              BCC CDFT_10
791b c8                 INY
791c 20 9a 86 CDFT_10   JSR Create_String_Descriptor

              ; *********************************
791f            Restore_Execution_Pointer ; $791f
              ; *********************************

791f a6 72              LDX STRNG2
7921 a4 73              LDY STRNG2+1
7923 86 3d              STX TXTPTR
7925 84 3e              STY TXTPTR+1
7927 60                 RTS ;Size    9 [Restore_Execution_Pointer]

7928 c9 a8    qdot_10   CMP #$a8            ; compare with token for NOT
792a d0 16              BNE qdot_20         ; -> continue evaluation
792c a0 18              LDY #$18            ; offset to NOT function
792e d0 43              BNE Prep_Operation  ; always

              ; **************
7930            OP_NOT ; $7930
              ; **************

7930 20 b4 84           JSR Real_To_Integer
7933 a5 67              LDA FAC1_M4
7935 49 ff              EOR #$ff
7937 a8                 TAY
7938 a5 66              LDA FAC1_M3
793a 49 ff              EOR #$ff

              ; ***********************
793c            Integer_To_Real ; $793c
              ; ***********************

793c 20 e5 84           JSR Integer_To_FAC1
793f 4c 70 8c           JMP AFACX

7942 c9 a5    qdot_20   CMP #$a5            ; FN
7944 d0 03              BNE qdot_30
7946 4c 3b 85           JMP Eval_FNX
7949 c9 b4    qdot_30   CMP #$b4            ; SGN
794b 90 03              BCC Get_Arg
794d 4c f7 4b           JMP Call_Function

              ; ***************
7950            Get_Arg ; $7950
              ; ***************

7950 20 59 79           JSR Need_Left_Par
7953 20 ef 77           JSR Eval_Expression

              ; **********************
7956            Need_Right_Par ; $7956
              ; **********************

7956 a9 29              LDA #')'
7958 2c                 BIT

              ; *********************
7959            Need_Left_Par ; $7959
              ; *********************

7959 a9 28              LDA #'('
795b 2c                 BIT

              ; ******************
795c            Need_Comma ; $795c
              ; ******************

795c a9 2c              LDA #','

              ; **************
795e            Need_A ; $795e
              ; **************

795e a0 00              LDY #0
7960 85 79              STA SYNTMP
7962 20 c9 03           JSR INDTXT
7965 c5 79              CMP SYNTMP
7967 d0 03              BNE SYNTAX_ERROR
7969 4c 80 03           JMP CHRGET

              ; ********************
796c            SYNTAX_ERROR ; $796c
              ; ********************

796c a2 0b              LDX #11
796e 4c 3c 4d           JMP Print_Error_X

              ; *********************
7971            Prep_Minus_Op ; $7971
              ; *********************

7971 a0 15              LDY #$15            ; set offset from base to > operator

              ; **********************
7973            Prep_Operation ; $7973
              ; **********************

7973 68                 PLA                 ; dump return address low byte
7974 68                 PLA                 ; dump return address high byte
7975 4c 4b 78           JMP EvEx_45         ; execute function then continue evaluation

              ; ***************
7978            Get_Var ; $7978
              ; ***************

7978 20 af 7a           JSR Parse_Name
797b 85 66              STA FAC1_M3         ; save variable pointer
797d 84 67              STY FAC1_M4
797f a6 47              LDX VARNAM
7981 a4 48              LDY VARNAM+1
7983 a5 0f              LDA VALTYP          ; get data type flag, $FF = string, $00 = numeric
7985 f0 63              BEQ Load_Value
7987 a9 00              LDA #0
7989 85 71              STA STRPTR+1        ; clear FAC1 rounding byte
798b e0 54              CPX #'T'            ; TI$ ?
798d d0 25              BNE GeVa_10
798f c0 c9              CPY #'I'+$80        ; TI$ ?
7991 d0 20              BNE GeVa_Ret
7993 a5 66              LDA FAC1_M3
7995 c9 d2              CMP #<NULL_DESC
7997 d0 1a              BNE GeVa_Ret
7999 a5 67              LDA FAC1_M4
799b c9 03              CMP #>NULL_DESC
799d d0 14              BNE GeVa_Ret
799f 20 1a 7a           JSR Load_Jiffy_Clock
79a2 84 60              STY TENEXP
79a4 88                 DEY
79a5 84 72              STY STRNG2
79a7 a0 06              LDY #6              ; HHMMSS = 6 digits
79a9 84 5f              STY TMPVAR
79ab a0 24              LDY #$24
79ad 20 cd 8e           JSR Format_Clock_String
79b0 4c b8 85           JMP Create_Descriptor_for_FORMAT
79b3 60       GeVa_Ret  RTS ;Size   60 [Get_Var]
79b4 e0 44    GeVa_10   CPX #'D'            ; DS$ ?
79b6 d0 fb              BNE GeVa_Ret
79b8 c0 d3              CPY #'S'+$80        ; DS$ ?
79ba d0 f7              BNE GeVa_Ret
79bc 20 e3 79           JSR Get_Disk_Status
79bf a0 ff              LDY #$ff
79c1 c8       GeVa_20   INY
79c2 a9 7b              LDA #DS_ADR
79c4 20 ab 03           JSR Fetch_1
79c7 c9 00              CMP #0
79c9 d0 f6              BNE GeVa_20
79cb 98                 TYA                 ; Y = length of DS$
79cc 20 88 86           JSR Allocate_String_FAC1
79cf a8                 TAY
79d0 f0 0e              BEQ GeVa_40
79d2 88       GeVa_30   DEY
79d3 a9 7b              LDA #DS_ADR
79d5 20 ab 03           JSR Fetch_1
79d8 91 37              STA (FRESPC),Y      ; store string in RAM
79da 98                 TYA
79db d0 f5              BNE GeVa_30
79dd 20 71 87           JSR Adjust_FRESPC   ; obsolete (add 0 to FRESPC)
79e0 4c e3 86 GeVa_40   JMP Push_String_Descriptor

              ; ***********************
79e3            Get_Disk_Status ; $79e3
              ; ***********************

79e3 a5 7a              LDA DS_LEN
79e5 d0 40              BNE LJC_Ret
79e7 4c 78 a7           JMP Update_DS

              ; ******************
79ea            Load_Value ; $79ea
              ; ******************

79ea 24 10              BIT INTFLG          ; test data type flag, $80 = integer, $00 = float
79ec 10 0f              BPL LoVa_10
79ee a0 00              LDY #0
79f0 20 e7 42           JSR Get_FAC1_M3_1   ; get integer varlue low byte
79f3 aa                 TAX
79f4 c8                 INY
79f5 20 e7 42           JSR Get_FAC1_M3_1   ; get integer value high byte
79f8 a8                 TAY
79f9 8a                 TXA
79fa 4c 3c 79           JMP Integer_To_Real
79fd a5 67    LoVa_10   LDA FAC1_M4
79ff c9 03              CMP #>NULL_DESC
7a01 d0 7e              BNE LoVa_60
7a03 a5 66              LDA FAC1_M3
7a05 c9 d2              CMP #<NULL_DESC
7a07 d0 78              BNE LoVa_60
7a09 e0 54              CPX #'T'            ; TI ?
7a0b d0 1b              BNE LoVa_20
7a0d c0 49              CPY #'I'            ; TI ?
7a0f d0 70              BNE LoVa_60
7a11 20 1a 7a           JSR Load_Jiffy_Clock
7a14 98                 TYA                 ; clear A
7a15 a2 a0              LDX #$a0            ; set exponent to 32 bit value
7a17 4c 7b 8c           JMP IFACX     ; set exponent = X and normalise FAC1

              ; ************************
7a1a            Load_Jiffy_Clock ; $7a1a
              ; ************************

7a1a 20 de ff           JSR K_RDTIM
7a1d 86 66              STX FAC1_M3
7a1f 84 65              STY FAC1_M2
7a21 85 67              STA FAC1_M4
7a23 a0 00              LDY #0
7a25 84 64              STY FAC1_M1
7a27 60       LJC_Ret   RTS ;Size   14 [Load_Jiffy_Clock]

7a28 e0 53    LoVa_20   CPX #'S'            ; ST ?
7a2a d0 0a              BNE LoVa_30
7a2c c0 54              CPY #'T'            ; ST ?
7a2e d0 51              BNE LoVa_60
7a30 20 51 92           JSR B_READST
7a33 4c 68 8c           JMP A_To_FAC1
7a36 e0 44    LoVa_30   CPX #'D'            ; DS ?
7a38 d0 26              BNE LoVa_40
7a3a c0 53              CPY #'S'            ; DS ?
7a3c d0 43              BNE LoVa_60
7a3e 20 e3 79           JSR Get_Disk_Status
7a41 a0 00              LDY #0
7a43 a9 7b              LDA #DS_ADR
7a45 20 ab 03           JSR Fetch_1         ; 1st. digit of status
7a48 29 0f              AND #$0f            ; ASCII -> binary
7a4a 0a                 ASL A               ; multiply with 10
7a4b 85 11              STA GARBFL
7a4d 0a                 ASL A
7a4e 0a                 ASL A
7a4f 65 11              ADC GARBFL
7a51 85 11              STA GARBFL
7a53 c8                 INY
7a54 a9 7b              LDA #DS_ADR
7a56 20 ab 03           JSR Fetch_1         ; 2nd. digit of status
7a59 29 0f              AND #$0f            ; ASCII -> binary
7a5b 65 11              ADC GARBFL          ; combine 1st. and 2nd. digit
7a5d 4c 68 8c           JMP A_To_FAC1

7a60 e0 45    LoVa_40   CPX #'E'            ; ER or EL ?
7a62 d0 1d              BNE LoVa_60
7a64 c0 52              CPY #'R'            ; ER ?
7a66 f0 10              BEQ LoVa_50
7a68 c0 4c              CPY #'L'            ; EL ?
7a6a d0 15              BNE LoVa_60
7a6c 8d 03 ff           STA MMU_LCRC
7a6f ad 0a 12           LDA ERRLIN+1
7a72 ac 09 12           LDY ERRLIN
7a75 4c c9 84           JMP AY_To_FAC1

7a78 8d 03 ff LoVa_50   STA MMU_LCRC
7a7b ad 08 12           LDA ERRNUM
7a7e 4c 68 8c           JMP A_To_FAC1

7a81 a5 66    LoVa_60   LDA FAC1_M3         ; A/Y = address of variable
7a83 a4 67              LDY FAC1_M4
7a85 85 24    LoVa_70   STA INDEXA
7a87 84 25              STY INDEXA+1
7a89 a0 00              LDY #0
7a8b 20 b7 03           JSR Get_INDEXA_1
7a8e 85 63              STA FAC1_EX
7a90 84 71              STY FROUND          ; FROUND = 0
7a92 c8                 INY
7a93 20 b7 03           JSR Get_INDEXA_1
7a96 85 68              STA FAC1_SI
7a98 09 80              ORA #%1000 0000 ; $80
7a9a 85 64              STA FAC1_M1
7a9c c8                 INY
7a9d 20 b7 03           JSR Get_INDEXA_1
7aa0 85 65              STA FAC1_M2
7aa2 c8                 INY
7aa3 20 b7 03           JSR Get_INDEXA_1
7aa6 85 66              STA FAC1_M3
7aa8 c8                 INY
7aa9 20 b7 03           JSR Get_INDEXA_1
7aac 85 67              STA FAC1_M4
7aae 60                 RTS ;Size  149 [Load_Jiffy_Clock]

              ; ******************
7aaf            Parse_Name ; $7aaf
              ; ******************

7aaf a2 00              LDX #0
7ab1 20 86 03           JSR CHRGOT

              ; ********************************
7ab4            Get_Array_Address ; 7ab4 ; $7ab4
              ; ********************************

7ab4 86 0e              STX DIMFLG

              ; **********************
7ab6            Get_FN_Address ; $7ab6
              ; **********************

7ab6 85 47              STA VARNAM
7ab8 20 86 03           JSR CHRGOT
7abb 20 3c 7b           JSR Is_Alpha
7abe b0 03              BCS GeAd_05
7ac0 4c 6c 79 GeAd_Err  JMP SYNTAX_ERROR
7ac3 a2 00    GeAd_05   LDX #0              ; set defaults
7ac5 86 0f              STX VALTYP          ; numeric
7ac7 86 10              STX INTFLG          ; real
7ac9 20 80 03           JSR CHRGET          ; 2nd. char of name
7acc 90 05              BCC GeAd_10         ; -> branch if numeric
7ace 20 3c 7b           JSR Is_Alpha
7ad1 90 0b              BCC GeAd_20         ; -> branch if not alpha
7ad3 aa       GeAd_10   TAX                 ; X = 2nd. char of name
7ad4 20 80 03 GeAd_15   JSR CHRGET          ; skip all alphanumeric characters
7ad7 90 fb              BCC GeAd_15         ; after the 2nd. one
7ad9 20 3c 7b           JSR Is_Alpha
7adc b0 f6              BCS GeAd_15
7ade c9 24    GeAd_20   CMP #'$'            ; string ?
7ae0 d0 06              BNE GeAd_25
7ae2 a9 ff              LDA #$ff            ; set string flag
7ae4 85 0f              STA VALTYP          ; $ff = string  $00 = numeric
7ae6 d0 10              BNE GeAd_30
7ae8 c9 25    GeAd_25   CMP #'%'            ; integer ?
7aea d0 13              BNE GeAd_35
7aec a5 12              LDA SUBFLG          ; integer allowed ?
7aee d0 d0              BNE GeAd_Err        ; -> not in this context
7af0 a9 80              LDA #$80
7af2 85 10              STA INTFLG          ; integer flag
7af4 05 47              ORA VARNAM
7af6 85 47              STA VARNAM          ; mark variable as integer
7af8 8a       GeAd_30   TXA                 ; A = 2nd. char
7af9 09 80              ORA #$80            ; set string/integer bit
7afb aa                 TAX                 ; X = 2nd. char OR $80
7afc 20 80 03           JSR CHRGET          ; next char after '$' or '%'
7aff 86 48    GeAd_35   STX VARNAM+1        ; store 2nd. char of name
7b01 38                 SEC
7b02 05 12              ORA SUBFLG          ; Or with FOR, FN flag
7b04 e9 28              SBC #'('            ; array ?
7b06 d0 03              BNE GeAd_40         ; -> no
7b08 4c ab 7c           JMP Find_Array      ; read subscripts
7b0b a0 00    GeAd_40   LDY #0
7b0d 84 12              STY SUBFLG          ; clear integer disable flag
7b0f a5 2f              LDA VARTAB
7b11 a6 30              LDX VARTAB+1        ; (A/X) = VARTAB
7b13 86 62    GeAd_45   STX LOWTR+1         ; find variable in (VARTAB..ARYTAB)
7b15 85 61    GeAd_50   STA LOWTR           ; LOWTR = (A/X)
7b17 e4 32              CPX ARYTAB+1
7b19 d0 04              BNE GeAd_55
7b1b c5 31              CMP ARYTAB
7b1d f0 27              BEQ Create_Var      ; (A/X) == ARYTAB -> not found
7b1f 20 00 43 GeAd_55   JSR Get_LOWTR_1
7b22 c5 47              CMP VARNAM          ; compare 1st. char
7b24 d0 0c              BNE GeAd_65
7b26 c8                 INY                 ; Y = 1
7b27 20 00 43           JSR Get_LOWTR_1
7b2a c5 48              CMP VARNAM+1        ; compare 2nd. char
7b2c d0 03              BNE GeAd_60
7b2e 4c 57 7c           JMP CrVa_90         ; -> found
7b31 88       GeAd_60   DEY                 ; Y = 0
7b32 18       GeAd_65   CLC
7b33 a5 61              LDA LOWTR           ; LOWTR += 7
7b35 69 07              ADC #7
7b37 90 dc              BCC GeAd_50
7b39 e8                 INX
7b3a d0 d7              BNE GeAd_45         ; always

              ; ****************
7b3c            Is_Alpha ; $7b3c
              ; ****************

7b3c c9 41              CMP #'A'
7b3e 90 05              BCC IsAl_Ret
7b40 e9 5b              SBC #'Z'+1
7b42 38                 SEC
7b43 e9 a5              SBC #$a5            ; restore original content
7b45 60       IsAl_Ret  RTS                 ; C=1 if (A..Z) ;Size   10 [Is_Alpha]

              ; ******************
7b46            Create_Var ; $7b46
              ; ******************

7b46 ba                 TSX
7b47 bd 02 01           LDA STACK+2,X
7b4a c9 83              CMP #>[FUNC_Call+2] ; $83 called from FUNC_POINTER ?
7b4c f0 04              BEQ CrVa_05
7b4e c9 79              CMP #>[Get_Var+2]   ; $79 called from Get_Var
7b50 d0 2a              BNE CrVa_35
7b52 a9 d2    CrVa_05   LDA #<NULL_DESC     ; load NULL descriptor
7b54 a0 03              LDY #>NULL_DESC
7b56 60                 RTS ;Size   17 [Create_Var]
7b57 c0 c9    CrVa_10   CPY #'I'+$80        ; TI$ = "hhmmss" sets jiffy clock
7b59 f0 f7              BEQ CrVa_05         ; so don't create variable
7b5b c0 49              CPY #'I'            ; TI  (read only variable)
7b5d d0 31              BNE CrVa_40
7b5f f0 18              BEQ CrVa_30
7b61 c0 d3    CrVa_15   CPY #'S'+$80        ; DS$ (read only variable)
7b63 f0 14              BEQ CrVa_30
7b65 c0 53              CPY #'S'            ; DS  (read only variable)
7b67 d0 27              BNE CrVa_40
7b69 f0 0e              BEQ CrVa_30

7b6b c0 54    CrVa_20   CPY #'T'            ; ST  (read only variable)
7b6d d0 21              BNE CrVa_40
7b6f f0 08              BEQ CrVa_30

7b71 c0 52    CrVa_25   CPY #'R'           ;
7b73 f0 04              BEQ CrVa_30
7b75 c0 4c              CPY #'L'
7b77 d0 17              BNE CrVa_40
7b79 4c 6c 79 CrVa_30   JMP SYNTAX_ERROR

7b7c a5 47    CrVa_35   LDA VARNAM
7b7e a4 48              LDY VARNAM+1
7b80 c9 54              CMP #'T'
7b82 f0 d3              BEQ CrVa_10         ; -> check TI and TI$
7b84 c9 53              CMP #'S'
7b86 f0 e3              BEQ CrVa_20         ; -> check ST
7b88 c9 45              CMP #'E'
7b8a f0 e5              BEQ CrVa_25         ; -> check ER and EL
7b8c c9 44              CMP #'D'
7b8e f0 d1              BEQ CrVa_15         ; -> check DS and DS$

7b90 a5 31    CrVa_40   LDA ARYTAB
7b92 a4 32              LDY ARYTAB+1
7b94 85 61              STA LOWTR
7b96 84 62              STY LOWTR+1         ; LOWTR  = ARYTAB
7b98 a5 33              LDA STREND
7b9a a4 34              LDY STREND+1
7b9c 85 5c              STA HIGHTR
7b9e 84 5d              STY HIGHTR+1        ; HIGHTR = STREND
7ba0 18                 CLC
7ba1 69 07              ADC #7              ; 7 bytes for a new variable
7ba3 90 01              BCC CrVa_45
7ba5 c8                 INY
7ba6 85 5a    CrVa_45   STA ARYPNT
7ba8 84 5b              STY ARYPNT+1        ; ARYPNT = STREND + 7
7baa 20 66 7c           JSR Open_Up_Space   ; Move array space upwards
7bad a5 5a              LDA ARYPNT
7baf a4 5b              LDY ARYPNT+1
7bb1 c8                 INY
7bb2 85 31              STA ARYTAB          ; ARYTAB = ARYPNT + 256
7bb4 84 32              STY ARYTAB+1
7bb6 85 5a              STA ARYPNT
7bb8 84 5b              STY ARYPNT+1

              ; scan through array area and adjust all dynamic string
              ; back references to the new descriptor position

7bba a5 5a    CrVa_50   LDA ARYPNT
7bbc a6 5b              LDX ARYPNT+1
7bbe e4 34    CrVa_55   CPX STREND+1
7bc0 d0 06              BNE CrVa_60
7bc2 c5 33              CMP STREND
7bc4 d0 02              BNE CrVa_60         ; *** obsolete ***
7bc6 f0 78              BEQ CrVa_80
7bc8 85 24    CrVa_60   STA INDEXA
7bca 86 25              STX INDEXA+1
7bcc a0 00              LDY #0
7bce 20 b7 03           JSR Get_INDEXA_1
7bd1 aa                 TAX                 ; X = 1st. char
7bd2 c8                 INY                 ; Y = 1
7bd3 20 b7 03           JSR Get_INDEXA_1
7bd6 08                 PHP                 ; push flags of 2nd. char
7bd7 c8                 INY                 ; Y = 2
7bd8 20 b7 03           JSR Get_INDEXA_1    ; A = array length low
7bdb 65 5a              ADC ARYPNT
7bdd 85 5a              STA ARYPNT
7bdf c8                 INY                 ; Y = 3
7be0 20 b7 03           JSR Get_INDEXA_1    ; A = array length high
7be3 65 5b              ADC ARYPNT+1
7be5 85 5b              STA ARYPNT+1        ; ARYPNT += array length
7be7 28                 PLP                 ; flags of 2nd. char
7be8 10 d0              BPL CrVa_50         ; -> branch for real array
7bea 8a                 TXA                 ; flags for 1st. char
7beb 30 cd              BMI CrVa_50         ;-> branch for integer
7bed c8                 INY                 ; Y = 4
7bee 20 b7 03           JSR Get_INDEXA_1    ; A = # of dimensions
7bf1 a0 00              LDY #0
7bf3 0a                 ASL A               ; dimensions * 2
7bf4 69 05              ADC #5              ; plus 5 bytes for header
7bf6 65 24              ADC INDEXA
7bf8 85 24              STA INDEXA
7bfa 90 02              BCC CrVa_65
7bfc e6 25              INC INDEXA+1        ; INDEXA += header size
7bfe a6 25    CrVa_65   LDX INDEXA+1
7c00 e4 5b              CPX ARYPNT+1        ; INDEXA == ARYPNT (end of array) ?
7c02 d0 04              BNE CrVa_70
7c04 c5 5a              CMP ARYPNT
7c06 f0 b6              BEQ CrVa_55         ; -> branch on end of array
7c08 a0 00    CrVa_70   LDY #0
7c0a 20 b7 03           JSR Get_INDEXA_1    ; length of string
7c0d f0 24              BEQ CrVa_75         ; -> next item
7c0f 85 79              STA SYNTMP          ; save length
7c11 c8                 INY                 ; Y = 1
7c12 20 b7 03           JSR Get_INDEXA_1    ; address low
7c15 18                 CLC
7c16 65 79              ADC SYNTMP          ; add length
7c18 85 5c              STA HIGHTR
7c1a c8                 INY                 ; Y = 2
7c1b 20 b7 03           JSR Get_INDEXA_1    ; address high
7c1e 69 00              ADC #0
7c20 85 5d              STA HIGHTR+1        ; HIGHTR = back reference
7c22 a0 00              LDY #0
7c24 20 e2 42           JSR Get_HIGHTR_1    ; back reference low
7c27 69 07              ADC #7              ; add 7
7c29 91 5c              STA (HIGHTR),Y      ; store back
7c2b c8                 INY                 ; Y = 1
7c2c 20 e2 42           JSR Get_HIGHTR_1    ; back reference high
7c2f 69 00              ADC #0              ; add carry
7c31 91 5c              STA (HIGHTR),Y      ; store back
7c33 a9 03    CrVa_75   LDA #3              ; position to next descriptor
7c35 18                 CLC
7c36 65 24              ADC INDEXA
7c38 85 24              STA INDEXA
7c3a 90 c2              BCC CrVa_65
7c3c e6 25              INC INDEXA+1        ; INDEXA += 3 (next descriptor)
7c3e d0 be              BNE CrVa_65         ; branch always

              ; create a new entry for a variable with the contents initialized to zero

7c40 a0 00    CrVa_80   LDY #0
7c42 a5 47              LDA VARNAM
7c44 8d 04 ff           STA MMU_LCRD
7c47 91 61              STA (LOWTR),Y       ; byte 0: 1st. char
7c49 c8                 INY
7c4a a5 48              LDA VARNAM+1
7c4c 91 61              STA (LOWTR),Y       ; byte 1: 2nd. char
7c4e a9 00              LDA #0
7c50 c8       CrVa_85   INY
7c51 91 61              STA (LOWTR),Y       ; byte 2-6: 0
7c53 c0 06              CPY #6
7c55 d0 f9              BNE CrVa_85
7c57 a5 61    CrVa_90   LDA LOWTR
7c59 18                 CLC
7c5a 69 02              ADC #2
7c5c a4 62              LDY LOWTR+1
7c5e 90 01              BCC CrVa_95
7c60 c8                 INY
7c61 85 49    CrVa_95   STA VARPNT          ; VARPTR = value of variable
7c63 84 4a              STY VARPNT+1
7c65 60                 RTS ;Size  288 [Create_Var]

              ; *********************
7c66            Open_Up_Space ; $7c66
              ; *********************

              ; Input:  A = new top of variables low
              ;         Y = new top of variables high
              ;         ARYPNT = target pointer (upper boundary)
              ;         HIGHTR = source pointer (upper boundary)
              ;         LOWTR  = source pointer (lower boundary)

7c66 20 17 50           JSR Check_Mem_Avail ; may trigger a garbage collection
7c69 85 33              STA STREND
7c6b 84 34              STY STREND+1        ; save new top of variables
7c6d 38                 SEC
7c6e a5 5c              LDA HIGHTR
7c70 e5 61              SBC LOWTR
7c72 85 24              STA INDEXA
7c74 a8                 TAY
7c75 a5 5d              LDA HIGHTR+1
7c77 e5 62              SBC LOWTR+1
7c79 aa                 TAX                 ; Y/X = bytes to move
7c7a e8                 INX                 ; pages + 1
7c7b 98                 TYA
7c7c f0 25              BEQ OUS_40          ; -> no partial page
7c7e a5 5c              LDA HIGHTR
7c80 38                 SEC
7c81 e5 24              SBC INDEXA
7c83 85 5c              STA HIGHTR
7c85 b0 03              BCS OUS_10
7c87 c6 5d              DEC HIGHTR+1        ; HIGHTR = source pointer
7c89 38                 SEC
7c8a a5 5a    OUS_10    LDA ARYPNT
7c8c e5 24              SBC INDEXA
7c8e 85 5a              STA ARYPNT
7c90 b0 09              BCS OUS_30
7c92 c6 5b              DEC ARYPNT+1        ; ARYPNT = traget pointer
7c94 90 05              BCC OUS_30
7c96 20 e2 42 OUS_20    JSR Get_HIGHTR_1
7c99 91 5a              STA (ARYPNT),Y
7c9b 88       OUS_30    DEY
7c9c d0 f8              BNE OUS_20
7c9e 20 e2 42           JSR Get_HIGHTR_1    ; transfer for Y = 0
7ca1 91 5a              STA (ARYPNT),Y
7ca3 c6 5d    OUS_40    DEC HIGHTR+1
7ca5 c6 5b              DEC ARYPNT+1
7ca7 ca                 DEX
7ca8 d0 f1              BNE OUS_30
7caa 60                 RTS ;Size   69 [Open_Up_Space]

              ; ******************
7cab            Find_Array ; $7cab
              ; ******************

7cab a5 0e              LDA DIMFLG
7cad 05 10              ORA INTFLG
7caf 48                 PHA                 ; push INTFLG (bit 7) and DIMFLG (6-0)
7cb0 a5 0f              LDA VALTYP
7cb2 48                 PHA                 ; push VALTYP
7cb3 a0 00              LDY #0
7cb5 98       FiAr_10   TYA                 ; start loop evaluating subscripts
7cb6 48                 PHA                 ; push Y
7cb7 a5 48              LDA VARNAM+1
7cb9 48                 PHA
7cba a5 47              LDA VARNAM          ; push VARNAM
7cbc 48                 PHA
7cbd 20 a7 84           JSR Get_Positive_Integer
7cc0 68                 PLA
7cc1 85 47              STA VARNAM
7cc3 68                 PLA
7cc4 85 48              STA VARNAM+1        ; pull VARNAM
7cc6 68                 PLA
7cc7 a8                 TAY                 ; pull Y
7cc8 ba                 TSX
7cc9 bd 02 01           LDA STACK+2,X
7ccc 48                 PHA                 ; push DIMFLG/INTFLG again
7ccd bd 01 01           LDA STACK+1,X
7cd0 48                 PHA                 ; push VALTYP again
7cd1 a5 66              LDA FAC1_M3
7cd3 9d 02 01           STA STACK+2,X
7cd6 a5 67              LDA FAC1_M4         ; replace value above these flags
7cd8 9d 01 01           STA STACK+1,X       ; by the subscript pointer
7cdb c8                 INY                 ; check next subscript index
7cdc 84 0d              STY B_COUNT         ; # of subscripts
7cde 20 86 03           JSR CHRGOT
7ce1 a4 0d              LDY B_COUNT
7ce3 c9 2c              CMP #','
7ce5 f0 ce              BEQ FiAr_10         ; -> more subscripts
7ce7 20 56 79           JSR Need_Right_Par  ; else finish
7cea 68                 PLA
7ceb 85 0f              STA VALTYP
7ced 68                 PLA
7cee 85 10              STA INTFLG
7cf0 29 7f              AND #$7f            ; extract DIMFLG
7cf2 85 0e              STA DIMFLG
7cf4 a6 31              LDX ARYTAB
7cf6 a5 32              LDA ARYTAB+1
7cf8 86 61    FiAr_12   STX LOWTR           ; start search
7cfa 85 62              STA LOWTR+1
7cfc c5 34              CMP STREND+1
7cfe d0 04              BNE FiAr_14
7d00 e4 33              CPX STREND
7d02 f0 42              BEQ FiAr_22           ; -> end of array space
7d04 a0 00    FiAr_14   LDY #0
7d06 20 00 43           JSR Get_LOWTR_1
7d09 c8                 INY
7d0a c5 47              CMP VARNAM
7d0c d0 07              BNE FiAr_16
7d0e 20 00 43           JSR Get_LOWTR_1
7d11 c5 48              CMP VARNAM+1
7d13 f0 18              BEQ FiAr_20
7d15 c8       FiAr_16   INY
7d16 20 00 43           JSR Get_LOWTR_1
7d19 18                 CLC
7d1a 65 61              ADC LOWTR
7d1c aa                 TAX
7d1d c8                 INY
7d1e 20 00 43           JSR Get_LOWTR_1
7d21 65 62              ADC LOWTR+1
7d23 90 d3              BCC FiAr_12         ; always

7d25 a2 12    FiAr_Bad  LDX #$12            ; BAD SUBSCRIPT
7d27 2c                 BIT

              ;**********************
7d28           Error_Illegal_Quantity
              ;**********************

7d28 a2 0e              LDX #14
7d2a 4c 3c 4d FiAr_Err  JMP Print_Error_X

7d2d a2 13    FiAr_20   LDX #$13            ; REDIM'D ARRAY
7d2f a5 0e              LDA DIMFLG
7d31 d0 f7              BNE FiAr_Err
7d33 20 71 7e           JSR Array_Pointer_To_First
7d36 a0 04              LDY #4
7d38 20 00 43           JSR Get_LOWTR_1     ; # of declared dimensions
7d3b 85 79              STA SYNTMP
7d3d a5 0d              LDA B_COUNT         ; *** replace with CMP B_COUNT
7d3f c5 79              CMP SYNTMP          ;
7d41 d0 e2              BNE FiAr_Bad
7d43 4c d2 7d           JMP FiAr_38

              ; create array

7d46 20 71 7e FiAr_22   JSR Array_Pointer_To_First
7d49 20 17 50           JSR Check_Mem_Avail
7d4c a0 00              LDY #0
7d4e 84 73              STY STRNG2+1
7d50 a2 05              LDX #5              ; # of bytes per element (default REAL)
7d52 a5 47              LDA VARNAM
7d54 8d 04 ff           STA MMU_LCRD        ; select RAM bank 1
7d57 91 61              STA (LOWTR),Y       ; store 1st. char
7d59 10 01              BPL FiAr_24         ; branch if REAL or STRING
7d5b ca                 DEX                 ; # of bytes = 4
7d5c c8       FiAr_24   INY                 ; Y = 1
7d5d a5 48              LDA VARNAM+1
7d5f 91 61              STA (LOWTR),Y       ; store 2nd. char
7d61 10 02              BPL FiAr_26         ; branch if REAL
7d63 ca                 DEX
7d64 ca                 DEX                 ; # of bytes (2 INTEGER, 3 STRING)
7d65 86 72    FiAr_26   STX STRNG2          ; store size of elemnts
7d67 a5 0d              LDA B_COUNT         ; # of subscripts
7d69 c8                 INY
7d6a c8                 INY
7d6b c8                 INY                 ; Y = 4
7d6c 91 61              STA (LOWTR),Y       ; store # of dimensions
7d6e a2 0b    FiAr_28   LDX #11             ; default dimension (0..10)
7d70 a9 00              LDA #0
7d72 24 0e              BIT DIMFLG
7d74 50 08              BVC FiAr_30         ; -> branch for default dimension
7d76 68                 PLA
7d77 18                 CLC
7d78 69 01              ADC #1              ; add 1 because indices start at 0
7d7a aa                 TAX
7d7b 68                 PLA
7d7c 69 00              ADC #0              ; (X/A) = (subscript + 1)
7d7e c8       FiAr_30   INY                 ; Y = 5,7,...
7d7f 91 61              STA (LOWTR),Y       ; store dimension high
7d81 c8                 INY                 ; Y = 6,8,...
7d82 8a                 TXA
7d83 91 61              STA (LOWTR),Y       ; store dimension low
7d85 20 3e 7e           JSR Mult_16x16
7d88 86 72              STX STRNG2          ; size low
7d8a 85 73              STA STRNG2+1        ; size high
7d8c a4 24              LDY INDEXA
7d8e c6 0d              DEC B_COUNT         ; decrement dimension counter
7d90 d0 dc              BNE FiAr_28         ; loop for next dimension
7d92 65 5b              ADC ARYPNT+1
7d94 b0 67              BCS FiAr_44         ; -> out of memory
7d96 85 5b              STA ARYPNT+1
7d98 a8                 TAY
7d99 8a                 TXA
7d9a 65 5a              ADC ARYPNT
7d9c 90 03              BCC FiAr_32
7d9e c8                 INY
7d9f f0 5c              BEQ FiAr_44         ; -> out of memory
7da1 20 17 50 FiAr_32   JSR Check_Mem_Avail
7da4 85 33              STA STREND
7da6 84 34              STY STREND+1        ; new top of array area
7da8 a9 00              LDA #0              ; clear array content
7daa e6 73              INC STRNG2+1        ; size high
7dac a4 72              LDY STRNG2          ; Y = size low
7dae f0 05              BEQ FiAr_36
7db0 88       FiAr_34   DEY
7db1 91 5a              STA (ARYPNT),Y      ; clear array
7db3 d0 fb              BNE FiAr_34
7db5 c6 5b    FiAr_36   DEC ARYPNT+1
7db7 c6 73              DEC STRNG2+1
7db9 d0 f5              BNE FiAr_34
7dbb e6 5b              INC ARYPNT+1
7dbd 38                 SEC
7dbe a5 33              LDA STREND
7dc0 e5 61              SBC LOWTR
7dc2 a0 02              LDY #2
7dc4 91 61              STA (LOWTR),Y       ; store array size low
7dc6 a5 34              LDA STREND+1
7dc8 c8                 INY                 ; Y = 3
7dc9 e5 62              SBC LOWTR+1
7dcb 91 61              STA (LOWTR),Y       ; store array size high
7dcd a5 0e              LDA DIMFLG
7dcf d0 6c              BNE FiAr_Ret
7dd1 c8                 INY                 ; Y = 4
7dd2 20 00 43 FiAr_38   JSR Get_LOWTR_1
7dd5 85 0d              STA B_COUNT         ; # of dimensions
7dd7 a9 00              LDA #0
7dd9 85 72              STA STRNG2
7ddb 85 73    FiAr_40   STA STRNG2+1
7ddd c8                 INY                 ; Y = 5,7,...
7dde 68                 PLA
7ddf aa                 TAX
7de0 85 66              STA FAC1_M3
7de2 20 00 43           JSR Get_LOWTR_1
7de5 85 79              STA SYNTMP
7de7 68                 PLA
7de8 85 67              STA FAC1_M4         ; FAC1M3/4 = subscript
7dea c5 79              CMP SYNTMP          ; compare with dimension high
7dec 90 12              BCC FiAr_46         ; -> lower
7dee d0 0a              BNE FiAr_42         ; greater -> out of range
7df0 c8                 INY                 ; Y = 6,8,...
7df1 20 00 43           JSR Get_LOWTR_1
7df4 85 79              STA SYNTMP
7df6 e4 79              CPX SYNTMP          ; compare with dimension low
7df8 90 07              BCC FiAr_48         ; -> lower
7dfa 4c 25 7d FiAr_42   JMP FiAr_Bad        ; BAD SUBSCRIPT
7dfd 4c 3a 4d FiAr_44   JMP OOM_Error       ; OUT OF MEMORY
7e00 c8       FiAr_46   INY                 ; Y = 6,8,...
7e01 a5 73    FiAr_48   LDA STRNG2+1
7e03 05 72              ORA STRNG2
7e05 18                 CLC
7e06 f0 0a              BEQ FiAr_50         ; STRNG2 == 0 ?
7e08 20 3e 7e           JSR Mult_16x16
7e0b 8a                 TXA
7e0c 65 66              ADC FAC1_M3
7e0e aa                 TAX
7e0f 98                 TYA
7e10 a4 24              LDY INDEXA
7e12 65 67    FiAr_50   ADC FAC1_M4
7e14 86 72              STX STRNG2
7e16 c6 0d              DEC B_COUNT
7e18 d0 c1              BNE FiAr_40         ; next subscript
7e1a 85 73              STA STRNG2+1
7e1c a2 05              LDX #5              ; standard item size (REAL)
7e1e a5 47              LDA VARNAM
7e20 10 01              BPL FiAr_52         ; -> REAL or STRING
7e22 ca                 DEX                 ; X = 4
7e23 a5 48    FiAr_52   LDA VARNAM+1
7e25 10 02              BPL FiAr_54         ; -> REAL
7e27 ca                 DEX
7e28 ca                 DEX                 ; X = 2
7e29 86 2a    FiAr_54   STX FAC3_M3         ; item size (I=2, S=3, R=5)
7e2b a9 00              LDA #0
7e2d 20 49 7e           JSR Mult_16x16_A    ; # of items * item size
7e30 8a                 TXA
7e31 65 5a              ADC ARYPNT
7e33 85 49              STA VARPNT
7e35 98                 TYA
7e36 65 5b              ADC ARYPNT+1
7e38 85 4a              STA VARPNT+1        ; VARPTR = array element
7e3a a8                 TAY
7e3b a5 49              LDA VARPNT          ; (A/Y) = VARPTR
7e3d 60       FiAr_Ret  RTS ;Size  403 [Find_Array]

              ; ******************
7e3e            Mult_16x16 ; $7e3e
              ; ******************

7e3e 84 24              STY INDEXA
7e40 20 00 43           JSR Get_LOWTR_1
7e43 85 2a              STA FAC3_M3
7e45 88                 DEY
7e46 20 00 43           JSR Get_LOWTR_1

              ; ********************
7e49            Mult_16x16_A ; $7e49
              ; ********************

7e49 85 2b              STA FAC3_M4         ; FAC3M3/3 = Dimension
7e4b a9 10              LDA #16
7e4d 85 5f              STA TMPVAR          ; 16 bit multiplication
7e4f a2 00              LDX #0
7e51 a0 00              LDY #0
7e53 8a       Mu16_10   TXA                 ; (X/Y) = FAC3M3 * TMPPTD
7e54 0a                 ASL A
7e55 aa                 TAX
7e56 98                 TYA
7e57 2a                 ROL A
7e58 a8                 TAY
7e59 b0 a2              BCS FiAr_44
7e5b 06 72              ASL STRNG2
7e5d 26 73              ROL STRNG2+1
7e5f 90 0b              BCC Mu16_20
7e61 18                 CLC
7e62 8a                 TXA
7e63 65 2a              ADC FAC3_M3
7e65 aa                 TAX
7e66 98                 TYA
7e67 65 2b              ADC FAC3_M4
7e69 a8                 TAY
7e6a b0 91              BCS FiAr_44
7e6c c6 5f    Mu16_20   DEC TMPVAR          ; next bit
7e6e d0 e3              BNE Mu16_10
7e70 60                 RTS ;Size   40 [Mult_16x16_A]

              ; ******************************
7e71            Array_Pointer_To_First ; $7e71
              ; ******************************

7e71 a5 0d              LDA B_COUNT         ; # of dimensions
7e73 0a                 ASL A               ; in bytes
7e74 69 05              ADC #5              ; plus header size
7e76 65 61              ADC LOWTR           ; plus start of array
7e78 a4 62              LDY LOWTR+1
7e7a 90 01              BCC APTF_10
7e7c c8                 INY
7e7d 85 5a    APTF_10   STA ARYPNT          ; pointer to first elemnt
7e7f 84 5b              STY ARYPNT+1
7e81 60                 RTS ;Size   17 [Array_Pointer_To_First]

              ; **************
7e82            J_PLOT ; $7e82
              ; **************

7e82 20 45 a8           JSR Map_IO
7e85 4c f0 ff           JMP K_PLOT

              ; ***************
7e88            J_PRINT ; $7e88
              ; ***************

7e88 20 45 a8           JSR Map_IO
7e8b 4c 0c c0           JMP E_PRINT

              ; ***********************
7e8e            Test_OOM_CHRGOT ; $7e8e
              ; ***********************

7e8e 20 8f 5c           JSR Test_OOM_Bank_0
7e91 4c 86 03           JMP CHRGOT

              ; *******************************
7e94            Inc_INDEXB_Cmp_TEXT_TOP ; $7e94
              ; *******************************

7e94 e6 26              INC INDEXB
7e96 d0 02              BNE IICTT_10
7e98 e6 27              INC INDEXB+1
7e9a 38       IICTT_10  SEC
7e9b a5 26              LDA INDEXB
7e9d ed 10 12           SBC TEXT_TOP
7ea0 a5 27              LDA INDEXB+1
7ea2 ed 11 12           SBC TEXT_TOP+1
7ea5 60                 RTS ;Size   18 [Inc_INDEXB_Cmp_TEXT_TOP]

              ; *****************
7ea6            Get_Pitch ; $7ea6
              ; *****************

7ea6 2c 03 0a           BIT PALNTS          ; $ff = PAL , $00 = NTSC
7ea9 30 04              BMI GePi_PAL        ; -> PAL
7eab bd 05 70           LDA Pitch_NTSC_High,X
7eae 60                 RTS ;Size    9 [Get_Pitch]
7eaf bd b9 7e GePi_PAL  LDA Pitch_PAL_Low,X
7eb2 8d 2d 12           STA Snd_Pitch
7eb5 bd c5 7e           LDA Pitch_PAL_High,X
7eb8 60                 RTS ;Size   19 [Get_Pitch]

              ; *********************
7eb9            Pitch_PAL_Low ; $7eb9
              ; *********************

7eb9 9c bf 22           .BYTE $9c,$bf,$22,$c8,$b4,$eb,$71,$4c
7ec1 7f 12 08           .BYTE $7f,$12,$08,$68

              ; **********************
7ec5            Pitch_PAL_High ; $7ec5
              ; **********************

7ec5 45 49 4e           .BYTE $45,$49,$4e,$52,$57,$5c,$62,$68
7ecd 6e 75 7c           .BYTE $6e,$75,$7c,$83

              ; ******************************
7ed1            Reset_Descriptor_Stack ; $7ed1
              ; ******************************

7ed1 8e 0c 12           STX TRAPNO+1
7ed4 a2 1b              LDX #$1b
7ed6 86 18              STX TEMPPT
7ed8 60                 RTS ;Size    8 [Reset_Descriptor_Stack]

              ;         .REAL 0.0
              ;         .REAL 1.0
              ;         .REAL 2.0
              ;         .REAL 3.0
              ;         .REAL 4.0
              ;         .REAL 5.0
              ;         .REAL 6.0
              ;         .REAL 7.0
              ;         .REAL 8.0
              ;         .REAL 9.0

7ed9 ff ff ff           .FILL $7fc0-* ($ff) ; 231 bytes ; 231 bytes

7fc0 28 43 29           .BYTE "(C)1986 COMMODORE ELECTRONICS"
7fdd 2c 20 4c           .BYTE ", LTD. ALL RIGHTS RESERVED."
7ff8 ff ff ff           .BYTE $ff,$ff,$ff,$ff
7ffc ef 8d 01           .BYTE $ef,$8d,$01,$61

              ; ****************
8000            FUNC_FRE ; $8000
              ; ****************

8000 20 f7 87           JSR Eval_Byte       ; allow FRE(0) or FRE(1)
8003 e0 01              CPX #1
8005 90 05              BCC FRE_10          ; -> FRE(0) bank 0
8007 f0 31              BEQ FRE_30          ; -> FRE(1) bank 1
8009 4c 28 7d           JMP Error_Illegal_Quantity
800c 38       FRE_10    SEC                 ; bank 0: MAX_MEM - TEXT_TOP
800d ad 12 12           LDA TEXT_MAX
8010 ed 10 12           SBC TEXT_TOP
8013 a8                 TAY                 ; Y = low
8014 ad 13 12           LDA TEXT_MAX+1
8017 ed 11 12           SBC TEXT_TOP+1      ; A = high
801a b0 2b              BCS FRE_40          ; -> convert to REAL
801c a6 35              LDX FRETOP          ; TEXT_TOP > MAX_MEM triggers EasterEgg
801e e8                 INX
801f c8                 INY
8020 85 70              STA STRPTR
8022 98                 TYA
8023 38                 SEC
8024 e9 05              SBC #5
8026 85 71              STA FROUND
8028 a5 71    FRE_20    LDA FROUND
802a 5d 37 ae           EOR EasterEgg-44,X
802d 45 70              EOR STRPTR
802f f0 44              BEQ VAL_Ret
8031 20 d2 ff           JSR K_BSOUT         ; print easter egg message
8034 e6 71              INC FROUND
8036 e8                 INX
8037 d0 ef              BNE FRE_20
8039 60                 RTS ;Size   58 [FUNC_FRE]
803a 20 ea 92 FRE_30    JSR Garbage_Collection
803d 38                 SEC                 ; bank 1: FRETOP - STREND
803e a5 35              LDA FRETOP
8040 e5 33              SBC STREND
8042 a8                 TAY
8043 a5 36              LDA FRETOP+1
8045 e5 34              SBC STREND+1
8047 4c c9 84 FRE_40    JMP AY_To_FAC1

              ; ****************
804a            FUNC_VAL ; $804a
              ; ****************

804a 20 6e 86           JSR Eval_String_Desc
804d d0 03              BNE VAL_10
804f 4c d6 88           JMP Clear_FAC1      ; -> empty string
8052 18       VAL_10    CLC
8053 65 24              ADC INDEXA
8055 85 72              STA STRNG2
8057 a5 25              LDA INDEXA+1
8059 69 00              ADC #0
805b 85 73              STA STRNG2+1        ; STRNG2 = position after string
805d a0 00              LDY #0
805f a9 72              LDA #STRNG2
8061 20 ab 03           JSR Fetch_1
8064 48                 PHA                 ; save string delimiter
8065 98                 TYA
8066 91 72              STA (STRNG2),Y      ; insert zero as delimiter
8068 20 03 8e           JSR CHRGOT_INDEXA
806b a2 01              LDX #1
806d 20 22 8d           JSR Read_Real_To_FAC1
8070 68                 PLA                 ; restore string delimiter
8071 a0 00              LDY #0
8073 91 72              STA (STRNG2),Y      ; reinsert delimiter
8075 60       VAL_Ret   RTS ;Size   44 [FUNC_VAL]

              ; ****************
8076            FUNC_DEC ; $8076
              ; ****************

8076 20 6e 86           JSR Eval_String_Desc
8079 85 26              STA INDEXB          ; string length
807b a0 00              LDY #0
807d 84 27              STY INDEXB+1        ; digit counter
807f 84 72              STY STRNG2
8081 84 73              STY STRNG2+1
8083 c4 26    DEC_10    CPY INDEXB          ; at end of string ?
8085 f0 34              BEQ DEC_40          ; -> finish
8087 20 b7 03           JSR Get_INDEXA_1    ; load next hex digit
808a c8                 INY
808b c9 20              CMP #' '
808d f0 f4              BEQ DEC_10          ; -> skip blanks
808f e6 27              INC INDEXB+1        ; increment digit counter
8091 a6 27              LDX INDEXB+1        ; X = counter
8093 e0 05              CPX #5              ; max. 4 digits allowed
8095 f0 2b              BEQ DEC_Err         ; -> too many digits
8097 c9 30              CMP #'0'
8099 90 27              BCC DEC_Err
809b c9 3a              CMP #'9'+1
809d 90 0a              BCC DEC_20          ; -> OK (0-9)
809f c9 41              CMP #'A'
80a1 90 1f              BCC DEC_Err
80a3 c9 47              CMP #'F'+1
80a5 b0 1b              BCS DEC_Err
80a7 e9 07              SBC #7              ; convert 'A'-'F' to  A-F
80a9 e9 2f    DEC_20    SBC #'0'-1          ; C = 0
80ab 0a                 ASL A
80ac 0a                 ASL A
80ad 0a                 ASL A
80ae 0a                 ASL A               ; shift to high nibble
80af a2 04              LDX #4
80b1 0a       DEC_30    ASL A               ; rotate into STRNG2
80b2 26 72              ROL STRNG2
80b4 26 73              ROL STRNG2+1
80b6 ca                 DEX
80b7 d0 f8              BNE DEC_30
80b9 f0 c8              BEQ DEC_10          ; -> next digit

80bb a4 72    DEC_40    LDY STRNG2          ; convert value to REAL
80bd a5 73              LDA STRNG2+1
80bf 4c c9 84           JMP AY_To_FAC1
80c2 4c 28 7d DEC_Err   JMP Error_Illegal_Quantity

              ; *****************
80c5            FUNC_PEEK ; $80c5
              ; *****************

80c5 a5 17              LDA LINNUM+1        ; save LINNUM
80c7 48                 PHA
80c8 a5 16              LDA LINNUM
80ca 48                 PHA
80cb 20 da 77           JSR Assert_Numeric
80ce 20 15 88           JSR FAC1_To_LINNUM
80d1 ae d5 03           LDX USER_BANK
80d4 a0 00              LDY #0
80d6 a9 16              LDA #LINNUM
80d8 20 74 ff           JSR K_INDFET
80db a8                 TAY
80dc 68                 PLA
80dd 85 16              STA LINNUM
80df 68                 PLA
80e0 85 17              STA LINNUM+1        ; restore LINNUM
80e2 4c d4 84           JMP Y_To_Real

              ;******************
80e5           BASIC_POKE ; $80e5
              ;******************

80e5 20 03 88           JSR LINNUM_Comma_Byte
80e8 8a                 TXA
80e9 a0 00              LDY #0
80eb a2 16              LDX #LINNUM
80ed 8e b9 02           STX STASH+10
80f0 ae d5 03           LDX USER_BANK
80f3 4c 77 ff           JMP K_INDSTA

              ; ****************
80f6            FUNC_ERR ; $80f6
              ; ****************

80f6 20 f7 87           JSR Eval_Byte
80f9 ca                 DEX
80fa 8a                 TXA
80fb c9 29              CMP #$29            ; error < $ 29 ?
80fd b0 37              BCS FERR_50         ; -> invalid arument
80ff 20 82 4a           JSR Set_Error_Index
8102 a0 ff              LDY #$ff
8104 a2 00              LDX #0
8106 e8       FERR_10   INX
8107 c8       FERR_20   INY
8108 b1 26              LDA (INDEXB),Y
810a 30 06              BMI FERR_30         ; -> last character
810c c9 20              CMP #' '
810e 90 f7              BCC FERR_20         ; skip unprintable character
8110 b0 f4              BCS FERR_10         ; -> always

8112 8a       FERR_30   TXA
8113 20 90 86           JSR Allocate_String_A
8116 a2 00              LDX #0
8118 a0 ff              LDY #$ff
811a 8d 04 ff           STA MMU_LCRD
811d c8       FERR_40   INY
811e b1 26              LDA (INDEXB),Y
8120 c9 20              CMP #' '
8122 90 f9              BCC FERR_40
8124 20 39 81           JSR Swap_XY
8127 48                 PHA
8128 29 7f              AND #$7f
812a 91 64              STA (FAC1_M1),Y
812c 20 39 81           JSR Swap_XY
812f e8                 INX
8130 68                 PLA
8131 10 ea              BPL FERR_40
8133 4c d1 85           JMP Push_Descriptor
8136 4c 28 7d FERR_50   JMP Error_Illegal_Quantity

              ; ***************
8139            Swap_XY ; $8139
              ; ***************

8139 48                 PHA
813a 8a                 TXA
813b 48                 PHA
813c 98                 TYA
813d aa                 TAX
813e 68                 PLA
813f a8                 TAY
8140 68                 PLA
8141 60                 RTS ;Size    9 [Swap_XY]

              ; ****************
8142            FUNC_HEX ; $8142
              ; ****************

8142 20 da 77           JSR Assert_Numeric
8145 a5 16              LDA LINNUM          ; save LINNUM
8147 48                 PHA
8148 a5 17              LDA LINNUM+1
814a 48                 PHA
814b 20 15 88           JSR FAC1_To_LINNUM
814e a9 04              LDA #4              ; create string of length 4
8150 20 90 86           JSR Allocate_String_A
8153 a0 00              LDY #0
8155 a5 17              LDA LINNUM+1
8157 8d 04 ff           STA MMU_LCRD
815a 20 6b 81           JSR Byte_To_Hex
815d a5 16              LDA LINNUM
815f 20 6b 81           JSR Byte_To_Hex
8162 68                 PLA
8163 85 17              STA LINNUM+1
8165 68                 PLA
8166 85 16              STA LINNUM          ; restore LINNUM
8168 4c d1 85           JMP Push_Descriptor

              ; *******************
816b            Byte_To_Hex ; $816b
              ; *******************

816b 48                 PHA
816c 4a                 LSR A
816d 4a                 LSR A
816e 4a                 LSR A
816f 4a                 LSR A
8170 20 74 81           JSR Nibble_To_Hex
8173 68                 PLA

              ; *********************
8174            Nibble_To_Hex ; $8174
              ; *********************

8174 29 0f              AND #%0000 1111 ; $0f
8176 c9 0a              CMP #10
8178 90 02              BCC NTH_10
817a 69 06              ADC #6
817c 69 30    NTH_10    ADC #'0'
817e 91 64              STA (FAC1_M1),Y
8180 c8                 INY
8181 60                 RTS ;Size   14 [Nibble_To_Hex]

              ; ****************
8182            FUNC_RGR ; $8182
              ; ****************

8182 20 da 77           JSR Assert_Numeric
8185 20 8c 81           JSR Get_Graphics_Mode
8188 a8                 TAY
8189 4c d4 84           JMP Y_To_Real

              ; *************************
818c            Get_Graphics_Mode ; $818c
              ; *************************

818c a5 d8              LDA GRAPHM
818e 18                 CLC
818f 2a                 ROL A
8190 2a                 ROL A
8191 2a                 ROL A
8192 69 00              ADC #0
8194 24 d7              BIT MODE_80
8196 10 02              BPL GGM_Ret
8198 69 05              ADC #5
819a 60       GGM_Ret   RTS ;Size   15 [Get_Graphics_Mode]

              ; *****************
819b            FUNC_RCLR ; $819b
              ; *****************

819b 20 f7 87           JSR Eval_Byte
819e 20 45 a8           JSR Map_IO
81a1 ca                 DEX
81a2 30 15              BMI RCLR_10
81a4 ca                 DEX
81a5 30 1a              BMI RCLR_20
81a7 ca                 DEX
81a8 30 1c              BMI RCLR_30
81aa ca                 DEX
81ab 30 1e              BMI RCLR_40
81ad ca                 DEX
81ae 30 20              BMI RCLR_50
81b0 ca                 DEX
81b1 30 23              BMI RCLR_60
81b3 ca                 DEX
81b4 30 28              BMI RCLR_70
81b6 4c 28 7d           JMP Error_Illegal_Quantity
81b9 ad 21 d0 RCLR_10   LDA VIC_BG_COL
81bc 29 7f              AND #%0111 1111 ; $7f
81be 4c ec 81           JMP RCLR_90
81c1 a5 86    RCLR_20   LDA FG_COL
81c3 4c ec 81           JMP RCLR_90
81c6 a5 84    RCLR_30   LDA MULCO1
81c8 4c ec 81           JMP RCLR_90
81cb a5 85    RCLR_40   LDA MULCO2
81cd 4c ec 81           JMP RCLR_90
81d0 ad 20 d0 RCLR_50   LDA Vd020
81d3 4c ec 81           JMP RCLR_90
81d6 a5 f1    RCLR_60   LDA E_Attribute
81d8 24 d7              BIT MODE_80
81da 10 10              BPL RCLR_90
81dc 30 08              BMI RCLR_80
81de a9 1a    RCLR_70   LDA #$1a
81e0 8d 00 d6           STA VDC_Register
81e3 ad 01 d6           LDA VDC_Data
81e6 29 0f    RCLR_80   AND #%0000 1111 ; $0f
81e8 aa                 TAX
81e9 bd f3 81           LDA unadju_8563,X
81ec 29 0f    RCLR_90   AND #%0000 1111 ; $0f
81ee a8                 TAY
81ef c8                 INY
81f0 4c d4 84           JMP Y_To_Real

              ; *******************
81f3            unadju_8563 ; $81f3
              ; *******************

81f3 00 0c 06           .BYTE $00,$0c,$06,$0e,$05,$0d,$0b,$03
81fb 02 0a 08           .BYTE $02,$0a,$08,$04,$09,$07,$0f,$01

              ; ****************
8203            FUNC_JOY ; $8203
              ; ****************

8203 20 f7 87           JSR Eval_Byte
8206 ca                 DEX
8207 e0 02              CPX #2
8209 b0 34              BCS JOY_30
820b 8a                 TXA
820c 49 01              EOR #%0000 0001 ; $01
820e aa                 TAX
820f 08                 PHP
8210 20 45 a8           JSR Map_IO
8213 78                 SEI
8214 ad 00 dc           LDA CIA1
8217 48                 PHA
8218 a0 ff              LDY #$ff
821a 8c 00 dc           STY CIA1
821d bd 00 dc JOY_10    LDA CIA1,X
8220 dd 00 dc           CMP CIA1,X
8223 d0 f8              BNE JOY_10
8225 aa                 TAX
8226 68                 PLA
8227 8d 00 dc           STA CIA1
822a 8a                 TXA
822b 28                 PLP
822c 29 0f              AND #%0000 1111 ; $0f
822e a8                 TAY
822f b9 3d 82           LDA JOYTAB-5,Y
8232 a8                 TAY
8233 8a                 TXA
8234 29 10              AND #%0001 0000 ; $10
8236 d0 04              BNE JOY_20
8238 98                 TYA
8239 09 80              ORA #%1000 0000 ; $80
823b a8                 TAY
823c 4c d4 84 JOY_20    JMP Y_To_Real
823f 4c 28 7d JOY_30    JMP Error_Illegal_Quantity

8242 04 02 03 JOYTAB    .BYTE $04,$02,$03,$00,$06,$08,$07,$00
824a 05 01 00           .BYTE $05,$01,$00

              ; ****************
824d            FUNC_POT ; $824d
              ; ****************

824d 20 56 79           JSR Need_Right_Par
8250 20 f7 87           JSR Eval_Byte
8253 ca                 DEX
8254 e0 04              CPX #4
8256 b0 53              BCS POT_Err
8258 20 45 a8           JSR Map_IO
825b a0 00              LDY #0
825d 8a                 TXA
825e a2 40              LDX #$40
8260 4a                 LSR A
8261 90 01              BCC POT_10
8263 c8                 INY
8264 4a       POT_10    LSR A
8265 90 02              BCC POT_20
8267 a2 80              LDX #$80
8269 8e b1 12 POT_20    STX POT_IEMP_1
826c 08                 PHP
826d 78                 SEI
826e ad 00 dc           LDA CIA1
8271 48                 PHA
8272 8e 00 dc           STX CIA1
8275 a2 00              LDX #0
8277 e8       POT_30    INX                 ; wait 256 * 5 cycles = 1.28 msec
8278 d0 fd              BNE POT_30
827a b9 19 d4 POT_40    LDA SID_POT_X,Y
827d d9 19 d4           CMP SID_POT_X,Y
8280 d0 f8              BNE POT_40
8282 8d b2 12           STA POT_IEMP_2
8285 a2 00              LDX #0
8287 2c b1 12           BIT POT_IEMP_1
828a 30 01              BMI POT_50
828c e8                 INX
828d a9 04    POT_50    LDA #4
828f 88                 DEY
8290 30 01              BMI POT_60
8292 0a                 ASL A
8293 a0 ff    POT_60    LDY #$ff
8295 8c 00 dc           STY CIA1
8298 c8                 INY
8299 3d 00 dc           AND CIA1,X
829c d0 01              BNE POT_70
829e c8                 INY
829f 68       POT_70    PLA
82a0 8d 00 dc           STA CIA1
82a3 98                 TYA
82a4 ac b2 12           LDY POT_IEMP_2
82a7 28                 PLP
82a8 4c c9 84           JMP AY_To_FAC1
82ab 4c 28 7d POT_Err   JMP Error_Illegal_Quantity

              ; ****************
82ae            FUNC_PEN ; $82ae
              ; ****************

82ae 20 56 79           JSR Need_Right_Par
82b1 20 f7 87           JSR Eval_Byte
82b4 e0 05              CPX #5
82b6 b0 f3              BCS POT_Err
82b8 e0 02              CPX #2
82ba b0 1a              BCS PEN_20
82bc bc e9 11           LDY VSH_LPX,X
82bf 8c b1 12           STY POT_IEMP_1
82c2 a9 00              LDA #0
82c4 9d e9 11           STA VSH_LPX,X
82c7 e0 00              CPX #0
82c9 d0 05              BNE PEN_10
82cb 0e b1 12           ASL POT_IEMP_1
82ce 69 00              ADC #0
82d0 ac b1 12 PEN_10    LDY POT_IEMP_1
82d3 4c c9 84           JMP AY_To_FAC1
82d6 20 45 a8 PEN_20    JSR Map_IO
82d9 e0 04              CPX #4
82db f0 10              BEQ PEN_40
82dd a0 11              LDY #$11
82df e0 02              CPX #2
82e1 f0 01              BEQ PEN_30
82e3 88                 DEY
82e4 8c 00 d6 PEN_30    STY VDC_Register
82e7 ac 01 d6           LDY VDC_Data
82ea 4c d4 84           JMP Y_To_Real
82ed ad 00 d6 PEN_40    LDA VDC_Register
82f0 a0 00              LDY #0
82f2 29 40              AND #%0100 0000 ; $40
82f4 f0 01              BEQ PEN_50
82f6 c8                 INY
82f7 4c d4 84 PEN_50    JMP Y_To_Real

              ; ********************
82fa            FUNC_POINTER ; $82fa
              ; ********************

82fa 20 80 03           JSR CHRGET
82fd 20 59 79           JSR Need_Left_Par
8300 20 3c 7b           JSR Is_Alpha
8303 90 16              BCC POIN_Err
8305 20 af 7a FUNC_Call JSR Parse_Name      ; calling address used by Parse_Name
8308 aa                 TAX
8309 98                 TYA
830a 48                 PHA
830b 20 56 79           JSR Need_Right_Par
830e 8a                 TXA
830f a8                 TAY
8310 68                 PLA
8311 c9 03              CMP #>NULL_DESC     ; address of NULL descriptor ?
8313 d0 03              BNE POIN_10
8315 a9 00              LDA #0
8317 a8                 TAY                 ; return NULL
8318 4c c9 84 POIN_10   JMP AY_To_FAC1
831b 4c 6c 79 POIN_Err  JMP SYNTAX_ERROR

              ; ********************
831e            FUNC_RSPRITE ; $831e
              ; ********************

831e 20 f7 87           JSR Eval_Byte
8321 ca                 DEX
8322 e0 08              CPX #8
8324 b0 32              BCS RSPR_Err
8326 8a                 TXA
8327 48                 PHA
8328 20 5c 79           JSR Need_Comma
832b 20 f4 87           JSR Get_Byte_Var
832e 20 56 79           JSR Need_Right_Par
8331 e0 06              CPX #6
8333 b0 23              BCS RSPR_Err
8335 68                 PLA
8336 a8                 TAY
8337 20 45 a8           JSR Map_IO
833a b9 27 d0           LDA Vd027,Y
833d 29 0f              AND #%0000 1111 ; $0f
833f 18                 CLC
8340 69 01              ADC #1
8342 e0 01              CPX #1
8344 f0 0e              BEQ RSPR_10
8346 bd 5b 83           LDA RSPMOD,X
8349 aa                 TAX
834a b9 b3 6c           LDA Bit_Mask,Y
834d 3d 00 d0           AND VIC,X
8350 f0 02              BEQ RSPR_10
8352 a9 01              LDA #1
8354 a8       RSPR_10   TAY
8355 4c d4 84           JMP Y_To_Real
8358 4c 28 7d RSPR_Err  JMP Error_Illegal_Quantity

835b 15 27 1b RSPMOD    .BYTE $15,$27,$1b,$1d,$17,$1c

              ; *********************
8361            FUNC_RSPCOLOR ; $8361
              ; *********************

8361 20 56 79           JSR Need_Right_Par
8364 20 f7 87           JSR Eval_Byte
8367 ca                 DEX
8368 e0 02              CPX #2
836a b0 0d              BCS RSPC_Err
836c 20 45 a8           JSR Map_IO
836f bd 25 d0           LDA Vd025,X
8372 29 0f              AND #%0000 1111 ; $0f
8374 a8                 TAY
8375 c8                 INY
8376 4c d4 84           JMP Y_To_Real
8379 4c 28 7d RSPC_Err  JMP Error_Illegal_Quantity

              ; *****************
837c            FUNC_BUMP ; $837c
              ; *****************

837c 20 56 79           JSR Need_Right_Par
837f 20 f7 87           JSR Eval_Byte
8382 ca                 DEX
8383 e0 02              CPX #2
8385 b0 0d              BCS BUMP_Err
8387 78                 SEI
8388 bc e7 11           LDY VSH_SS_COLL,X
838b a9 00              LDA #0
838d 9d e7 11           STA VSH_SS_COLL,X
8390 58                 CLI
8391 4c d4 84           JMP Y_To_Real
8394 4c 28 7d BUMP_Err  JMP Error_Illegal_Quantity

              ; *******************
8397            FUNC_RSPPOS ; $8397
              ; *******************

8397 20 f7 87           JSR Eval_Byte
839a ca                 DEX
839b e0 08              CPX #8
839d b0 3f              BCS RSPP_Err
839f 8a                 TXA
83a0 48                 PHA
83a1 20 5c 79           JSR Need_Comma
83a4 20 f4 87           JSR Get_Byte_Var
83a7 20 56 79           JSR Need_Right_Par
83aa e0 03              CPX #3
83ac b0 30              BCS RSPP_Err
83ae 68                 PLA
83af a8                 TAY
83b0 e0 02              CPX #2
83b2 d0 09              BNE RSPP_10
83b4 be d9 6d           LDX Sprite_Offset,Y
83b7 bc 7e 11           LDY SPRITE_DATA,X
83ba 4c d4 84           JMP Y_To_Real
83bd 78       RSPP_10   SEI
83be b9 b3 6c           LDA Bit_Mask,Y
83c1 2d e6 11           AND VSH+16
83c4 f0 02              BEQ RSPP_20
83c6 a9 01              LDA #1
83c8 48       RSPP_20   PHA
83c9 98                 TYA
83ca 0a                 ASL A
83cb a8                 TAY
83cc 8a                 TXA
83cd 4a                 LSR A
83ce 90 05              BCC RSPP_30
83d0 c8                 INY
83d1 68                 PLA
83d2 a9 00              LDA #0
83d4 48                 PHA
83d5 b9 d6 11 RSPP_30   LDA VSH,Y
83d8 58                 CLI
83d9 a8                 TAY
83da 68                 PLA
83db 4c c9 84           JMP AY_To_FAC1
83de 4c 28 7d RSPP_Err  JMP Error_Illegal_Quantity

              ; ****************
83e1            FUNC_XOR ; $83e1
              ; ****************

83e1 a5 16              LDA LINNUM          ; save LINNUM
83e3 48                 PHA
83e4 a5 17              LDA LINNUM+1
83e6 48                 PHA
83e7 20 da 77           JSR Assert_Numeric
83ea 20 15 88           JSR FAC1_To_LINNUM
83ed 48                 PHA
83ee 98                 TYA
83ef 48                 PHA
83f0 20 0f 88           JSR Comma_And_LINNUM
83f3 20 56 79           JSR Need_Right_Par
83f6 68                 PLA
83f7 45 16              EOR LINNUM
83f9 a8                 TAY
83fa 68                 PLA
83fb 45 17              EOR LINNUM+1
83fd 20 c9 84           JSR AY_To_FAC1      ; store result
8400 68                 PLA
8401 85 17              STA LINNUM+1
8403 68                 PLA
8404 85 16              STA LINNUM          ; restore LINNUM
8406 60                 RTS ;Size   38 [FUNC_XOR]

              ; ********************
8407            FUNC_RWINDOW ; $8407
              ; ********************

8407 20 56 79           JSR Need_Right_Par
840a 20 f7 87           JSR Eval_Byte
840d e0 02              CPX #2
840f f0 14              BEQ RWIN_20
8411 b0 1e              BCS RWIN_Err
8413 e0 00              CPX #0
8415 d0 07              BNE RWIN_10
8417 a5 e4              LDA Margin_Bottom
8419 38                 SEC
841a e5 e5              SBC Margin_Top
841c b0 0f              BCS RWIN_30
841e a5 e7    RWIN_10   LDA Margin_Right
8420 38                 SEC
8421 e5 e6              SBC Margin_Left
8423 b0 08              BCS RWIN_30
8425 a9 28    RWIN_20   LDA #40
8427 24 d7              BIT MODE_80
8429 10 02              BPL RWIN_30
842b a9 50              LDA #80
842d a8       RWIN_30   TAY
842e 4c d4 84           JMP Y_To_Real
8431 4c 28 7d RWIN_Err  JMP Error_Illegal_Quantity

              ; ****************
8434            FUNC_RND ; $8434
              ; ****************

8434 20 57 8c           JSR Test_FAC1_Sign
8437 30 31    RND_10    BMI RND_30
8439 d0 1a              BNE RND_20
843b 20 45 a8           JSR Map_IO          ; RND(0)
843e ad 06 dc           LDA CIA1_TBLO
8441 85 64              STA FAC1_M1
8443 ad 07 dc           LDA CIA1_TBHI
8446 85 66              STA FAC1_M3
8448 ad 04 dc           LDA CIA1_TALO
844b 85 65              STA FAC1_M2
844d ad 05 dc           LDA CIA1_TAHI
8450 85 67              STA FAC1_M4
8452 4c 7a 84           JMP RND_40
8455 a9 1b    RND_20    LDA #<RNDX          ; RND(+)
8457 a0 12              LDY #>RNDX
8459 20 d4 8b           JSR Load_FAC1_AY
845c a9 90              LDA #<rmulc
845e a0 84              LDY #>rmulc
8460 20 08 8a           JSR Multiply_AY_To_FAC1
8463 a9 95              LDA #<raddc
8465 a0 84              LDY #>raddc
8467 20 12 8a           JSR Add_AY_To_FAC1
846a a6 67    RND_30    LDX FAC1_M4         ; RND(-)
846c a5 64              LDA FAC1_M1
846e 85 67              STA FAC1_M4
8470 86 64              STX FAC1_M1
8472 a6 65              LDX FAC1_M2
8474 a5 66              LDA FAC1_M3
8476 85 65              STA FAC1_M2
8478 86 66              STX FAC1_M3
847a a9 00    RND_40    LDA #0
847c 85 68              STA FAC1_SI
847e a5 63              LDA FAC1_EX
8480 85 71              STA FROUND
8482 a9 80              LDA #$80
8484 85 63              STA FAC1_EX
8486 20 b6 88           JSR Normalise_FAC1
8489 a2 1b              LDX #<RNDX
848b a0 12              LDY #>RNDX
848d 4c 00 8c           JMP FAC1_To_XY

8490 98 35 44 rmulc     .REAL $9835447a00 ; 11879546.00000000000
8495 68 28 b1 raddc     .REAL $6828b14600 ;        0.00000003928
849a 90 80 00 n32768    .REAL $9080000000 ;   -32768.00000000000

              ; **********************
849f            FAC1_To_Int_AY ; $849f
              ; **********************

849f 20 b4 84           JSR Real_To_Integer
84a2 a5 66              LDA FAC1_M3
84a4 a4 67              LDY FAC1_M4
84a6 60                 RTS ;Size    8 [FAC1_To_Int_AY]

              ; ****************************
84a7            Get_Positive_Integer ; $84a7
              ; ****************************

84a7 20 80 03           JSR CHRGET
84aa 20 ef 77           JSR Eval_Expression

              ; *****************************
84ad            Eval_Positive_Integer ; $84ad
              ; *****************************

84ad 20 da 77           JSR Assert_Numeric
84b0 a5 68              LDA FAC1_SI
84b2 30 0d              BMI RIT_10

              ; ***********************
84b4            Real_To_Integer ; $84b4
              ; ***********************

84b4 a5 63              LDA FAC1_EX
84b6 c9 90              CMP #$90            ; check if -32767 >= value >= 32767
84b8 90 0c              BCC RIT_20
84ba a9 9a              LDA #<n32768        ; check if value == -32768
84bc a0 84              LDY #>n32768
84be 20 87 8c           JSR Compare_AY_FAC1
84c1 f0 03    RIT_10    BEQ RIT_20
84c3 4c 28 7d           JMP Error_Illegal_Quantity
84c6 4c c7 8c RIT_20    JMP FAC1_INT

              ; ******************
84c9            AY_To_FAC1 ; $84c9
              ; ******************

84c9 20 e5 84           JSR Integer_To_FAC1
84cc 38                 SEC                 ; AY = positive 16bit number
84cd 4c 75 8c           JMP Word_To_FAC1

              ; ****************
84d0            FUNC_POS ; $84d0
              ; ****************

84d0 38                 SEC
84d1 20 8d 92           JSR B_PLOT

              ; *****************
84d4            Y_To_Real ; $84d4
              ; *****************

84d4 a9 00              LDA #0
84d6 4c 3c 79           JMP Integer_To_Real

              ; *************************
84d9            Assert_Non_Direct ; $84d9
              ; *************************

84d9 24 7f              BIT RUNMOD
84db 30 12              BMI ITF_Ret
84dd a2 15              LDX #$15            ; ILLEGAL DIRECT
84df 2c                 BIT
84e0 a2 1b    UNDEF_Err LDX #$1b            ; UNDEF'D FUNCTION
84e2 4c 3c 4d           JMP Print_Error_X

              ; ***********************
84e5            Integer_To_FAC1 ; $84e5
              ; ***********************

84e5 a2 00              LDX #0
84e7 86 0f              STX VALTYP          ; numeric result
84e9 85 64              STA FAC1_M1         ; high
84eb 84 65              STY FAC1_M2         ; low
84ed a2 90              LDX #$90            ; exponent
84ef 60       ITF_Ret   RTS ;Size   11 [Integer_To_FAC1]

              ; **************************
84f0            Assert_Direct_Mode ; $84f0
              ; **************************

84f0 24 7f              BIT RUNMOD
84f2 30 01              BMI ADM_Err
84f4 60                 RTS ;Size    5 [Assert_Direct_Mode]
84f5 a2 22    ADM_Err   LDX #$22            ; direct mode only
84f7 4c 3c 4d           JMP Print_Error_X

              ; *****************
84fa            BASIC_DEF ; $84fa
              ; *****************

84fa 20 28 85           JSR Get_FN          ; read function name
84fd 20 d9 84           JSR Assert_Non_Direct
8500 20 59 79           JSR Need_Left_Par
8503 a9 80              LDA #$80
8505 85 12              STA SUBFLG          ; no integer function
8507 20 af 7a           JSR Parse_Name
850a 20 da 77           JSR Assert_Numeric  ; only numeric arguments
850d 20 56 79           JSR Need_Right_Par
8510 a9 b2              LDA #$b2            ; '=' token
8512 20 5e 79           JSR Need_A
8515 48                 PHA
8516 a5 4a              LDA VARPNT+1
8518 48                 PHA
8519 a5 49              LDA VARPNT          ; push function argument address
851b 48                 PHA
851c a5 3e              LDA TXTPTR+1
851e 48                 PHA
851f a5 3d              LDA TXTPTR          ; push function address
8521 48                 PHA
8522 20 8f 52           JSR Skip_Statement
8525 4c a0 85           JMP FNX_30           ; pull and store attributes

              ; **************
8528            Get_FN ; $8528
              ; **************

8528 a9 a5              LDA #$a5            ; FN token
852a 20 5e 79           JSR Need_A
852d 09 80              ORA #$80
852f 85 12              STA SUBFLG          ; no integer function
8531 20 b6 7a           JSR Get_FN_Address
8534 85 50              STA GRBPNT
8536 84 51              STY GRBPNT+1
8538 4c da 77           JMP Assert_Numeric

              ; ****************
853b            Eval_FNX ; $853b
              ; ****************

853b 20 28 85           JSR Get_FN          ; address of function descriptor
853e a5 51              LDA GRBPNT+1        ; push function pointer
8540 48                 PHA
8541 a5 50              LDA GRBPNT
8543 48                 PHA
8544 20 50 79           JSR Get_Arg
8547 20 da 77           JSR Assert_Numeric
854a 68                 PLA
854b 85 50              STA GRBPNT
854d 68                 PLA
854e 85 51              STA GRBPNT+1        ; restore function pointer
8550 a0 02              LDY #2
8552 20 ce 42           JSR GRBPNT_from_Bank_1
8555 85 49              STA VARPNT
8557 aa                 TAX
8558 c8                 INY                 ; Y = 3
8559 20 ce 42           JSR GRBPNT_from_Bank_1
855c f0 82              BEQ UNDEF_Err
855e 85 4a              STA VARPNT+1        ; VARPTR = address of argument variable
8560 c8                 INY                 ; Y = 4
8561 a9 49    FNX_10    LDA #VARPNT
8563 20 ab 03           JSR Fetch_1
8566 48                 PHA                 ; push value of variable (5 bytes)
8567 88                 DEY
8568 10 f7              BPL FNX_10
856a a4 4a              LDY VARPNT+1
856c 8d 04 ff           STA MMU_LCRD
856f 20 00 8c           JSR FAC1_To_XY      ; (X/Y) = VARPTR - Y=0 on return
8572 a5 3e              LDA TXTPTR+1
8574 48                 PHA                 ; push TXTPTR
8575 a5 3d              LDA TXTPTR
8577 48                 PHA
8578 20 ce 42           JSR GRBPNT_from_Bank_1
857b 85 3d              STA TXTPTR
857d c8                 INY
857e 20 ce 42           JSR GRBPNT_from_Bank_1
8581 85 3e              STA TXTPTR+1        ; TXTPTR = function body
8583 a5 4a              LDA VARPNT+1
8585 48                 PHA                 ; push VARPTR
8586 a5 49              LDA VARPNT
8588 48                 PHA
8589 20 d7 77           JSR Eval_Numeric    ; execute function body
858c 68                 PLA
858d 85 50              STA GRBPNT          ; GRBPNT = VARPNT
858f 68                 PLA
8590 85 51              STA GRBPNT+1
8592 20 86 03           JSR CHRGOT
8595 f0 03              BEQ FNX_20
8597 4c 6c 79           JMP SYNTAX_ERROR    ; function did not end properly
859a 68       FNX_20    PLA
859b 85 3d              STA TXTPTR
859d 68                 PLA
859e 85 3e              STA TXTPTR+1        ; restore execution pointer
85a0 a0 00    FNX_30    LDY #0
85a2 8d 04 ff           STA MMU_LCRD
85a5 68       FNX_40    PLA
85a6 91 50              STA (GRBPNT),Y      ; restore value of argument variable
85a8 c8                 INY
85a9 c0 05              CPY #5
85ab d0 f8              BNE FNX_40
85ad 60                 RTS ;Size  115 [Eval_FNX]

              ; ****************
85ae            FUNC_STR ; $85ae
              ; ****************

85ae 20 da 77           JSR Assert_Numeric
85b1 a0 00              LDY #0
85b3 20 44 8e           JSR Format_FAC1_Y
85b6 68                 PLA
85b7 68                 PLA

              ; ************************************
85b8            Create_Descriptor_for_FORMAT ; $85b8
              ; ************************************

85b8 a9 ff              LDA #<STACK-1
85ba a0 00              LDY #>STACK-1
85bc 4c 9a 86           JMP Create_String_Descriptor

              ; ****************
85bf            FUNC_CHR ; $85bf
              ; ****************

85bf 20 f7 87           JSR Eval_Byte
85c2 8a                 TXA
85c3 48                 PHA
85c4 a9 01              LDA #1
85c6 20 90 86           JSR Allocate_String_A
85c9 68                 PLA
85ca a0 00              LDY #0
85cc 8d 04 ff           STA MMU_LCRD
85cf 91 64              STA (FAC1_M1),Y

              ; ***********************
85d1            Push_Descriptor ; $85d1
              ; ***********************

85d1 68                 PLA
85d2 68                 PLA
85d3 4c e3 86           JMP Push_String_Descriptor

              ; *****************
85d6            FUNC_LEFT ; $85d6
              ; *****************

85d6 20 4d 86           JSR Pop_DSCPNT      ; get string address and 2nd. argument
85d9 48                 PHA
85da 20 d8 42           JSR Get_DSCPNT_1
85dd 85 79              STA SYNTMP
85df 68                 PLA
85e0 c5 79              CMP SYNTMP          ; compare argument with length
85e2 98                 TYA                 ; A = 0
85e3 90 05    LEFT_10   BCC LEFT_20         ; branch if arg < length
85e5 20 d8 42           JSR Get_DSCPNT_1    ; get total length
85e8 aa                 TAX                 ; string length
85e9 98                 TYA                 ; A = 0
85ea 48       LEFT_20   PHA                 ; push start index (0 for LEFT$)
85eb 8a       LEFT_30   TXA                 ; A  = new length
85ec 48       LEFT_40   PHA                 ; push new length
85ed 20 90 86           JSR Allocate_String_A
85f0 a5 52              LDA DSCPNT
85f2 a4 53              LDY DSCPNT+1
85f4 20 85 87           JSR Free_String_AY  ; free string argument
85f7 68                 PLA
85f8 a8                 TAY                 ; Y = length
85f9 68                 PLA                 ; A = start index
85fa 18                 CLC
85fb 65 24              ADC INDEXA
85fd 85 24              STA INDEXA
85ff 90 02              BCC LEFT_50
8601 e6 25              INC INDEXA+1
8603 98       LEFT_50   TYA
8604 20 63 87           JSR Store_String_INDEXA
8607 4c e3 86           JMP Push_String_Descriptor

              ; ******************
860a            FUNC_RIGHT ; $860a
              ; ******************

860a 20 4d 86           JSR Pop_DSCPNT      ; get string address and 2nd. argument
860d 48                 PHA
860e 20 d8 42           JSR Get_DSCPNT_1
8611 85 79              STA SYNTMP
8613 68                 PLA
8614 18                 CLC
8615 e5 79              SBC SYNTMP          ; length - argument
8617 49 ff              EOR #%1111 1111     ; negate
8619 4c e3 85           JMP LEFT_10

              ; ****************
861c            FUNC_MID ; $861c
              ; ****************

861c a9 ff              LDA #255            ; default value for 3rd. argument
861e 85 67              STA FAC1_M4
8620 20 86 03           JSR CHRGOT
8623 c9 29              CMP #')'
8625 f0 06              BEQ MID_10
8627 20 5c 79           JSR Need_Comma
862a 20 f4 87           JSR Get_Byte_Var    ; 3rd. argument to FAC1M4
862d 20 4d 86 MID_10    JSR Pop_DSCPNT      ; get string address and 2nd. argument
8630 f0 53              BEQ ASC_Err         ; null string -> error
8632 ca                 DEX                 ; start index to offset
8633 8a                 TXA
8634 48                 PHA                 ; push offset
8635 a2 00              LDX #0
8637 48                 PHA
8638 20 d8 42           JSR Get_DSCPNT_1
863b 85 79              STA SYNTMP
863d 68                 PLA
863e 18                 CLC
863f e5 79              SBC SYNTMP          ; offset - length
8641 b0 a8              BCS LEFT_30
8643 49 ff              EOR #$ff            ; length - offset
8645 c5 67              CMP FAC1_M4
8647 90 a3              BCC LEFT_40         ; new length = rest of string
8649 a5 67              LDA FAC1_M4         ; new length
864b b0 9f              BCS LEFT_40         ; branch always

              ; ******************
864d            Pop_DSCPNT ; $864d
              ; ******************

864d 20 56 79           JSR Need_Right_Par
8650 68                 PLA
8651 a8                 TAY                 ; return address low
8652 68                 PLA
8653 85 57              STA JUMPER+1        ; return address high
8655 68                 PLA
8656 68                 PLA
8657 68                 PLA
8658 aa                 TAX                 ; X = length
8659 68                 PLA
865a 85 52              STA DSCPNT
865c 68                 PLA
865d 85 53              STA DSCPNT+1        ; DSCPNT = string address
865f a5 57              LDA JUMPER+1
8661 48                 PHA                 ; return address high
8662 98                 TYA
8663 48                 PHA                 ; return address low
8664 a0 00              LDY #0
8666 8a                 TXA                 ; A = length
8667 60                 RTS ;Size   27 [Pop_DSCPNT]

              ; ****************
8668            FUNC_LEN ; $8668
              ; ****************

8668 20 6e 86           JSR Eval_String_Desc
866b 4c d4 84           JMP Y_To_Real

              ; ************************
866e            Eval_String_Desc ; $866e
              ; ************************

866e 20 7e 87           JSR Eval_And_Free_String
8671 a2 00              LDX #0
8673 86 0f              STX VALTYP
8675 a8                 TAY
8676 60                 RTS ;Size    9 [Eval_String_Desc]

              ; ****************
8677            FUNC_ASC ; $8677
              ; ****************

8677 20 6e 86           JSR Eval_String_Desc
867a f0 06              BEQ ASC_10
867c a0 00              LDY #0
867e 20 b7 03           JSR Get_INDEXA_1
8681 a8                 TAY
8682 4c d4 84 ASC_10    JMP Y_To_Real
8685 4c 28 7d ASC_Err   JMP Error_Illegal_Quantity

              ; ****************************
8688            Allocate_String_FAC1 ; $8688
              ; ****************************

8688 a6 66              LDX FAC1_M3
868a a4 67              LDY FAC1_M4
868c 86 52              STX DSCPNT
868e 84 53              STY DSCPNT+1

              ; *************************
8690            Allocate_String_A ; $8690
              ; *************************

8690 20 99 92           JSR Allocate_String_Space
8693 86 64              STX FAC1_M1         ; addres low
8695 84 65              STY FAC1_M2         ; address high
8697 85 63              STA FAC1_EX         ; length
8699 60                 RTS ;Size   10 [Allocate_String_A]

              ; ********************************
869a            Create_String_Descriptor ; $869a
              ; ********************************

869a a2 22              LDX #QUOTE          ; set delimiter
869c 86 09              STX CHARAC
869e 86 0a              STX ENDCHR

              ; ***********************************
86a0            Create_String_Descriptor_AY ; $86a0
              ; ***********************************

86a0 85 70              STA STRPTR
86a2 84 71              STY STRPTR+1        ; set STRPTR from (A/Y)
86a4 85 64              STA FAC1_M1
86a6 84 65              STY FAC1_M2         ; set FAC1M1/2 from (A/Y)
86a8 a0 ff              LDY #-1             ; pre increment loop
86aa c8       CSD_10    INY
86ab 20 f1 42           JSR Get_STRPTR_0
86ae f0 0c              BEQ CSD_30          ; end of string
86b0 c5 09              CMP CHARAC          ; closing delimiter
86b2 f0 04              BEQ CSD_20
86b4 c5 0a              CMP ENDCHR
86b6 d0 f2              BNE CSD_10          ; loop
86b8 c9 22    CSD_20    CMP #QUOTE
86ba f0 01              BEQ CSD_40
86bc 18       CSD_30    CLC
86bd 84 63    CSD_40    STY FAC1_EX         ; string length
86bf 98                 TYA
86c0 65 70              ADC STRPTR
86c2 85 72              STA STRNG2          ; STRNG2 = STRPTR + length
86c4 a6 71              LDX STRPTR+1
86c6 90 01              BCC CSD_50
86c8 e8                 INX
86c9 86 73    CSD_50    STX STRNG2+1
86cb 98                 TYA

              ; ***************************
86cc            Store_String_Bank_0 ; $86cc
              ; ***************************

86cc 20 88 86           JSR Allocate_String_FAC1
86cf a8                 TAY
86d0 f0 11              BEQ Push_String_Descriptor
86d2 48                 PHA
86d3 88       SSB0      DEY
86d4 20 f1 42           JSR Get_STRPTR_0
86d7 8d 04 ff           STA MMU_LCRD
86da 91 37              STA (FRESPC),Y
86dc 98                 TYA
86dd d0 f4              BNE SSB0
86df 68                 PLA
86e0 20 71 87           JSR Adjust_FRESPC

              ; ******************************
86e3            Push_String_Descriptor ; $86e3
              ; ******************************

86e3 a6 18              LDX TEMPPT          ; Descriptor stack pointer
86e5 e0 24              CPX #TEMPPT+12      ; Descriptor stack limit
86e7 d0 05              BNE PuSD_10
86e9 a2 19              LDX #$19            ; FORMULA TOO COMPLEX
86eb 4c 3c 4d           JMP Print_Error_X
86ee a5 63    PuSD_10   LDA FAC1_EX
86f0 95 00              STA 0,X
86f2 a5 64              LDA FAC1_M1
86f4 95 01              STA 1,X
86f6 a5 65              LDA FAC1_M2
86f8 95 02              STA 2,X
86fa a0 00              LDY #0
86fc 86 66              STX FAC1_M3         ; mark stack position
86fe 84 67              STY FAC1_M4
8700 84 71              STY STRPTR+1
8702 88                 DEY                 ; Y = $ff
8703 84 0f              STY VALTYP          ; type = string
8705 86 19              STX LASTPT          ; remember last used position
8707 e8                 INX                 ; increase descriptor stack pointer
8708 e8                 INX
8709 e8                 INX
870a 86 18              STX TEMPPT
870c 60                 RTS ;Size   42 [Push_String_Descriptor]

              ; *******************
870d            Concatenate ; $870d
              ; *******************

870d a5 67              LDA FAC1_M4         ; push address of left operand
870f 48                 PHA
8710 a5 66              LDA FAC1_M3
8712 48                 PHA
8713 20 d7 78           JSR Vectored_EVAL   ; evaluate right operand
8716 20 dd 77           JSR Need_String
8719 68                 PLA
871a 85 70              STA STRPTR
871c 68                 PLA
871d 85 71              STA STRPTR+1        ; pull address of left operand
871f a0 00              LDY #0
8721 20 f6 42           JSR Get_STRPTR_1
8724 85 79              STA SYNTMP          ; length of left  string
8726 20 e7 42           JSR Get_FAC1_M3_1   ; length of right string
8729 18                 CLC
872a 65 79              ADC SYNTMP          ; sum of lengths
872c 90 03              BCC Conc_10
872e 4c ed a5           JMP String_Too_Long
8731 20 88 86 Conc_10   JSR Allocate_String_FAC1
8734 20 4e 87           JSR Store_String_STRPTR ; store left part
8737 a5 52              LDA DSCPNT
8739 a4 53              LDY DSCPNT+1
873b 20 85 87           JSR Free_String_AY
873e 20 63 87           JSR Store_String_INDEXA ; store right part
8741 a5 70              LDA STRPTR
8743 a4 71              LDY STRPTR+1
8745 20 85 87           JSR Free_String_AY
8748 20 e3 86           JSR Push_String_Descriptor
874b 4c 09 78           JMP EvEx_15

              ; ***************************
874e            Store_String_STRPTR ; $874e
              ; ***************************

874e a0 00              LDY #0
8750 20 f6 42           JSR Get_STRPTR_1    ; A = length
8753 48                 PHA
8754 c8                 INY
8755 20 f6 42           JSR Get_STRPTR_1    ; X = address low
8758 aa                 TAX
8759 c8                 INY
875a 20 f6 42           JSR Get_STRPTR_1    ; Y = address high
875d a8                 TAY
875e 68                 PLA
875f 86 24              STX INDEXA
8761 84 25              STY INDEXA+1

              ; ***************************
8763            Store_String_INDEXA ; $8763
              ; ***************************

8763 a8                 TAY
8764 f0 0b              BEQ Adjust_FRESPC
8766 48                 PHA
8767 88       SSI_10    DEY
8768 20 b7 03           JSR Get_INDEXA_1
876b 91 37              STA (FRESPC),Y
876d 98                 TYA
876e d0 f7              BNE SSI_10
8770 68                 PLA

              ; *********************
8771            Adjust_FRESPC ; $8771
              ; *********************

8771 18                 CLC
8772 65 37              ADC FRESPC
8774 85 37              STA FRESPC
8776 90 02              BCC AdFR_Ret
8778 e6 38              INC FRESPC+1
877a 60       AdFR_Ret  RTS ;Size   10 [Adjust_FRESPC]

              ; *******************
877b            Eval_String ; $877b
              ; *******************

877b 20 ef 77           JSR Eval_Expression

              ; ****************************
877e            Eval_And_Free_String ; $877e
              ; ****************************

877e 20 dd 77           JSR Need_String

              ; ************************
8781            Free_String_FAC1 ; $8781
              ; ************************

8781 a5 66              LDA FAC1_M3
8783 a4 67              LDY FAC1_M4

              ; **********************
8785            Free_String_AY ; $8785
              ; **********************

              ; Input:  (A/Y) = pointer to descriptor
              ; Output: (X/Y) = INDEXA = pointer to string
              ;         A     = length

8785 85 24              STA INDEXA
8787 84 25              STY INDEXA+1        ; INDEXA = pointer to descriptor
8789 20 e0 87           JSR Pop_Descriptor_Stack
878c d0 3c              BNE FSAY_40         ; -> load if not temporary
878e 20 f6 54           JSR Back_Reference_Position
8791 90 37              BCC FSAY_40         ; -> branch if not a dynamic string
8793 88                 DEY
8794 a9 ff              LDA #$ff
8796 8d 04 ff           STA MMU_LCRD
8799 91 24              STA (INDEXA),Y      ; invalidate string (backref 1)
879b 88                 DEY                 ; Y = 0
879c 8a                 TXA
879d 91 24              STA (INDEXA),Y      ; store length (backref 0)
879f 48                 PHA
87a0 49 ff              EOR #%1111 1111 ; $ff
87a2 38                 SEC
87a3 65 24              ADC INDEXA
87a5 a4 25              LDY INDEXA+1
87a7 b0 01              BCS FSAY_10
87a9 88                 DEY
87aa 85 24    FSAY_10   STA INDEXA          ; INDEXA -= length
87ac 84 25              STY INDEXA+1
87ae aa                 TAX
87af 68                 PLA
87b0 c4 36              CPY FRETOP+1
87b2 d0 3c              BNE PDS_Ret         ; return if INDEXA != FRETOP
87b4 e4 35              CPX FRETOP
87b6 d0 38              BNE PDS_Ret
87b8 48                 PHA
87b9 38                 SEC
87ba 65 35              ADC FRETOP
87bc 85 35              STA FRETOP
87be 90 02              BCC FSAY_20
87c0 e6 36              INC FRETOP+1
87c2 e6 35    FSAY_20   INC FRETOP          ; FRETOP += length + 2
87c4 d0 02              BNE FSAY_30
87c6 e6 36              INC FRETOP+1
87c8 68       FSAY_30   PLA
87c9 60                 RTS ;Size   69 [Free_String_AY]
87ca a0 00    FSAY_40   LDY #0
87cc 20 b7 03           JSR Get_INDEXA_1
87cf 48                 PHA
87d0 c8                 INY
87d1 20 b7 03           JSR Get_INDEXA_1
87d4 aa                 TAX
87d5 c8                 INY
87d6 20 b7 03           JSR Get_INDEXA_1
87d9 a8                 TAY
87da 86 24              STX INDEXA
87dc 84 25              STY INDEXA+1
87de 68                 PLA
87df 60                 RTS ;Size   91 [Free_String_AY]

              ; ****************************
87e0            Pop_Descriptor_Stack ; $87e0
              ; ****************************

87e0 c4 1a              CPY LASTPT+1
87e2 d0 0c              BNE PDS_Ret
87e4 c5 19              CMP LASTPT
87e6 d0 08              BNE PDS_Ret
87e8 85 18              STA TEMPPT
87ea e9 03              SBC #3
87ec 85 19              STA LASTPT
87ee a0 00              LDY #0
87f0 60       PDS_Ret   RTS ;Size   17 [Pop_Descriptor_Stack]

              ; *************************
87f1            Get_Next_Byte_Var ; $87f1
              ; *************************

87f1 20 80 03           JSR CHRGET

              ; ********************
87f4            Get_Byte_Var ; $87f4
              ; ********************

87f4 20 d7 77           JSR Eval_Numeric

              ; *****************
87f7            Eval_Byte ; $87f7
              ; *****************

87f7 20 ad 84           JSR Eval_Positive_Integer
87fa a6 66              LDX FAC1_M3
87fc d0 2d              BNE FTLI_Err
87fe a6 67              LDX FAC1_M4
8800 4c 86 03           JMP CHRGOT

              ; *************************
8803            LINNUM_Comma_Byte ; $8803
              ; *************************

8803 20 d7 77           JSR Eval_Numeric
8806 20 15 88           JSR FAC1_To_LINNUM

              ; **********************
8809            Comma_And_Byte ; $8809
              ; **********************

8809 20 5c 79           JSR Need_Comma
880c 4c f4 87           JMP Get_Byte_Var

              ; ************************
880f            Comma_And_LINNUM ; $880f
              ; ************************

880f 20 5c 79           JSR Need_Comma

              ; *******************
8812            Get_Integer ; $8812
              ; *******************

8812 20 d7 77           JSR Eval_Numeric

              ; **********************
8815            FAC1_To_LINNUM ; $8815
              ; **********************

8815 a5 68              LDA FAC1_SI
8817 30 12              BMI FTLI_Err        ; only positive numbers
8819 a5 63    F1TL_10   LDA FAC1_EX
881b c9 91              CMP #$91
881d b0 0c              BCS FTLI_Err        ; -> greater 65536
881f 20 c7 8c           JSR FAC1_INT
8822 a5 66              LDA FAC1_M3
8824 a4 67              LDY FAC1_M4
8826 84 16              STY LINNUM
8828 85 17              STA LINNUM+1
882a 60                 RTS ;Size   22 [FAC1_To_LINNUM]
882b 4c 28 7d FTLI_Err  JMP Error_Illegal_Quantity

              ; *********************
882e            AY_Minus_FAC1 ; $882e
              ; *********************

882e 20 b4 8a           JSR Load_FAC2_From_AY_RAM

              ; ****************
8831            OP_MINUS ; $8831
              ; ****************

8831 a5 68              LDA FAC1_SI
8833 49 ff              EOR #$ff
8835 85 68              STA FAC1_SI
8837 45 6f              EOR FAC2_SI
8839 85 70              STA STRPTR          ; pos = ADD, neg = SUB
883b a5 63              LDA FAC1_EX
883d 4c 48 88           JMP OP_PLUS

8840 20 79 89 AFTF_00   JSR FACX_Bit_Shift
8843 90 3d              BCC AFTF_40

              ; **************************
8845            Add_Var_AY_To_FAC1 ; $8845
              ; **************************

8845 20 b4 8a           JSR Load_FAC2_From_AY_RAM

              ; ***************
8848            OP_PLUS ; $8848
              ; ***************

8848 d0 03              BNE PLUS_10         ; -> branch if FAC1 is not 0
884a 4c 28 8c           JMP FAC2_To_FAC1    ; FAC1 = FAC2
884d a6 71    PLUS_10   LDX FROUND          ; rounding byte
884f 86 58              STX OLDOV           ; copy it
8851 a2 6a              LDX #FAC2_EX        ; X points to FAC2
8853 a5 6a              LDA FAC2_EX

              ; ***************************
8855            AddSub_FAC2_To_FAC1 ; $8855
              ; ***************************

              ; The mantissa of the FAC with the lower exponent is shifted
              ; right until both exponents become equal.

              ; Input:  A = exponent of FAC2
              ;         X = address  of FAC2
              ;         STRPTR ($00:Add, $80:Subtract)

              ; Output: FAC1 = FAC1 + FAC2 (for STRPTR == $00)
              ;         FAC1 = FAC1 - FAC2 (for STRPTR == $80)

8855 a8                 TAY                 ; Y = exp 2
8856 d0 01              BNE AFTF_10
8858 60                 RTS                 ; return if FAC2 is zero ;Size    4 [AddSub_FAC2_To_FAC1]
8859 38       AFTF_10   SEC
885a e5 63              SBC FAC1_EX         ; A = exp 2 - exp 1
885c f0 24              BEQ AFTF_40         ; -> exponents are equal
885e 90 12              BCC AFTF_20         ; -> exp 2 < exp 1
8860 84 63              STY FAC1_EX         ; exp 1 = exp 2
8862 a4 6f              LDY FAC2_SI
8864 84 68              STY FAC1_SI         ; sign 1 = sign 2
8866 49 ff              EOR #$ff
8868 69 00              ADC #0              ; A = exp 1 - exp 2
886a a0 00              LDY #0
886c 84 58              STY OLDOV           ; clear FAC2 rounding byte
886e a2 63              LDX #FAC1_EX        ; X points to FAC1
8870 d0 04              BNE AFTF_30         ; always
8872 a0 00    AFTF_20   LDY #0
8874 84 71              STY FROUND          ; clear FAC1 rounding byte
8876 c9 f9    AFTF_30   CMP #$f9
8878 30 c6              BMI AFTF_00
887a a8                 TAY
887b a5 71              LDA FROUND
887d 56 01              LSR 1,X
887f 20 90 89           JSR Rotate_FACX
8882 24 70    AFTF_40   BIT STRPTR          ; add or subtract ?
8884 10 57              BPL AFTF_65           ; -> add mantissa of FAC2 to FAC1
8886 a0 63              LDY #FAC1_EX
8888 e0 6a              CPX #FAC2_EX        ; if (X == FAC2) Y = FAC1
888a f0 02              BEQ AFTF_50
888c a0 6a              LDY #FAC2_EX        ; else           Y = FAC2
888e 38       AFTF_50   SEC
888f 49 ff              EOR #$ff            ; negate rounding byte
8891 65 58              ADC OLDOV
8893 85 71              STA FROUND
8895 b9 04 00           LDA 4,Y
8898 f5 04              SBC 4,X
889a 85 67              STA FAC1_M4
889c b9 03 00           LDA 3,Y
889f f5 03              SBC 3,X
88a1 85 66              STA FAC1_M3
88a3 b9 02 00           LDA 2,Y
88a6 f5 02              SBC 2,X
88a8 85 65              STA FAC1_M2
88aa b9 01 00           LDA 1,Y
88ad f5 01              SBC 1,X
88af 85 64              STA FAC1_M1
88b1 b0 03    AFTF_60   BCS Normalise_FAC1
88b3 20 26 89           JSR Negate_FAC1

              ; **********************
88b6            Normalise_FAC1 ; $88b6
              ; **********************

88b6 a0 00              LDY #0              ; Y = 0
88b8 98                 TYA                 ; A = 0
88b9 18                 CLC
88ba a6 64    NF1_10    LDX FAC1_M1         ; MSB of mantissa
88bc d0 4a              BNE AFTF_75         ; -> shift bitwise
88be a6 65              LDX FAC1_M2         ; shift bytes
88c0 86 64              STX FAC1_M1
88c2 a6 66              LDX FAC1_M3
88c4 86 65              STX FAC1_M2
88c6 a6 67              LDX FAC1_M4
88c8 86 66              STX FAC1_M3
88ca a6 71              LDX FROUND
88cc 86 67              STX FAC1_M4
88ce 84 71              STY FROUND          ; FROUND = 0
88d0 69 08              ADC #8              ; A = shift count
88d2 c9 20              CMP #32             ; maximum shift = 32 bit
88d4 d0 e4              BNE NF1_10          ; loop

              ; ******************
88d6            Clear_FAC1 ; $88d6
              ; ******************

88d6 a9 00              LDA #0
88d8 85 63    CF1_10    STA FAC1_EX
88da 85 68    CF1_20    STA FAC1_SI
88dc 60                 RTS ;Size    7 [Clear_FAC1]

88dd 65 58    AFTF_65   ADC OLDOV           ; FAC2 rounding byte
88df 85 71              STA FROUND
88e1 a5 67              LDA FAC1_M4         ; add FAC2 mantissa to FAC1
88e3 65 6e              ADC FAC2_M4
88e5 85 67              STA FAC1_M4
88e7 a5 66              LDA FAC1_M3
88e9 65 6d              ADC FAC2_M3
88eb 85 66              STA FAC1_M3
88ed a5 65              LDA FAC1_M2
88ef 65 6c              ADC FAC2_M2
88f1 85 65              STA FAC1_M2
88f3 a5 64              LDA FAC1_M1
88f5 65 6b              ADC FAC2_M1
88f7 85 64              STA FAC1_M1
88f9 4c 15 89           JMP AFTF_80
88fc 69 01    AFTF_70   ADC #1
88fe 06 71              ASL FROUND
8900 26 67              ROL FAC1_M4
8902 26 66              ROL FAC1_M3
8904 26 65              ROL FAC1_M2
8906 26 64              ROL FAC1_M1
8908 10 f2    AFTF_75   BPL AFTF_70
890a 38                 SEC
890b e5 63              SBC FAC1_EX
890d b0 c7              BCS Clear_FAC1
890f 49 ff              EOR #$ff
8911 69 01              ADC #1
8913 85 63              STA FAC1_EX
8915 90 0e    AFTF_80   BCC AFTF_Ret
8917 e6 63    AFTF_85   INC FAC1_EX
8919 f0 42              BEQ Overflow_Error
891b 66 64              ROR FAC1_M1
891d 66 65              ROR FAC1_M2
891f 66 66              ROR FAC1_M3
8921 66 67              ROR FAC1_M4
8923 66 71              ROR FROUND
8925 60       AFTF_Ret  RTS ;Size   80 [Clear_FAC1]

              ; *******************
8926            Negate_FAC1 ; $8926
              ; *******************

8926 a5 68              LDA FAC1_SI
8928 49 ff              EOR #$ff
892a 85 68              STA FAC1_SI

              ; ****************************
892c            Negate_FAC1_Mantissa ; $892c
              ; ****************************

892c a5 64              LDA FAC1_M1
892e 49 ff              EOR #$ff
8930 85 64              STA FAC1_M1
8932 a5 65              LDA FAC1_M2
8934 49 ff              EOR #$ff
8936 85 65              STA FAC1_M2
8938 a5 66              LDA FAC1_M3
893a 49 ff              EOR #$ff
893c 85 66              STA FAC1_M3
893e a5 67              LDA FAC1_M4
8940 49 ff              EOR #$ff
8942 85 67              STA FAC1_M4
8944 a5 71              LDA FROUND
8946 49 ff              EOR #$ff
8948 85 71              STA FROUND
894a e6 71              INC FROUND
894c d0 0e              BNE IFM_Ret

              ; *************************
894e            Inc_FAC1_Mantissa ; $894e
              ; *************************

894e e6 67              INC FAC1_M4
8950 d0 0a              BNE IFM_Ret
8952 e6 66              INC FAC1_M3
8954 d0 06              BNE IFM_Ret
8956 e6 65              INC FAC1_M2
8958 d0 02              BNE IFM_Ret
895a e6 64              INC FAC1_M1
895c 60       IFM_Ret   RTS ;Size   15 [Inc_FAC1_Mantissa]

              ; **********************
895d            Overflow_Error ; $895d
              ; **********************

895d a2 0f              LDX #15
895f 4c 3c 4d           JMP Print_Error_X

              ; ***********************
8962            FACX_Byte_Shift ; $8962
              ; ***********************

8962 a2 27              LDX #FAC3_M1-1
8964 b4 04    FBS_10    LDY 4,X
8966 84 71              STY FROUND
8968 b4 03              LDY 3,X
896a 94 04              STY 4,X
896c b4 02              LDY 2,X
896e 94 03              STY 3,X
8970 b4 01              LDY 1,X
8972 94 02              STY 2,X
8974 ac df 03           LDY BITS
8977 94 01              STY 1,X

              ; **********************
8979            FACX_Bit_Shift ; $8979
              ; **********************

8979 69 08              ADC #8
897b 30 e7              BMI FBS_10
897d f0 e5              BEQ FBS_10
897f e9 08              SBC #8
8981 a8                 TAY
8982 a5 71              LDA FROUND
8984 b0 14              BCS FBS_40
8986 16 01    FBS_20    ASL 1,X
8988 90 02              BCC FBS_30
898a f6 01              INC 1,X
898c 76 01    FBS_30    ROR 1,X
898e 76 01              ROR 1,X

              ; *******************
8990            Rotate_FACX ; $8990
              ; *******************

8990 76 02              ROR 2,X
8992 76 03              ROR 3,X
8994 76 04              ROR 4,X
8996 6a                 ROR A
8997 c8                 INY
8998 d0 ec              BNE FBS_20
899a 18       FBS_40    CLC
899b 60                 RTS ;Size   12 [Rotate_FACX]

899c 81 00 00 Real_1    .REAL $8100000000;    1.00000000000

89a1 03       logcn2    .BYTE $03
89a2 7f 5e 56 cb 79     .REAL $7f5e56cb79;    0.43425594189
89a7 80 13 9b 0b 64     .REAL $80139b0b64;    0.57658454124
89ac 80 76 38 93 16     .REAL $8076389316;    0.96180075919
89b1 82 38 aa 3b 20     .REAL $8238aa3b20;    2.88539007306

89b6 80 35 04 Sqrt2half .REAL $803504f334;    0.70710678119
89bb 81 35 04 Sqrt2     .REAL $813504f334;    1.41421356238
89c0 80 80 00 Minus0_5  .REAL $8080000000;   -0.50000000000
89c5 80 31 72 Ln2       .REAL $80317217f8;    0.69314718060

              ; ****************
89ca            FUNC_LOG ; $89ca
              ; ****************

89ca 20 57 8c           JSR Test_FAC1_Sign
89cd f0 02              BEQ LOG_10
89cf 10 03              BPL LOG_20
89d1 4c 28 7d LOG_10    JMP Error_Illegal_Quantity
89d4 a5 63    LOG_20    LDA FAC1_EX
89d6 e9 7f              SBC #$7f
89d8 48                 PHA
89d9 a9 80              LDA #$80
89db 85 63              STA FAC1_EX
89dd a9 b6              LDA #<Sqrt2half
89df a0 89              LDY #>Sqrt2half
89e1 20 12 8a           JSR Add_AY_To_FAC1
89e4 a9 bb              LDA #<Sqrt2
89e6 a0 89              LDY #>Sqrt2
89e8 20 1e 8a           JSR AY_Div_FAC1
89eb a9 9c              LDA #<Real_1
89ed a0 89              LDY #>Real_1
89ef 20 18 8a           JSR FAC1_Minus_AY
89f2 a9 a1              LDA #<logcn2
89f4 a0 89              LDY #>logcn2
89f6 20 86 90           JSR Series_Evaluation
89f9 a9 c0              LDA #<Minus0_5
89fb a0 89              LDY #>Minus0_5
89fd 20 12 8a           JSR Add_AY_To_FAC1
8a00 68                 PLA
8a01 20 b0 8d           JSR Add_A_To_FAC1
8a04 a9 c5              LDA #<Ln2
8a06 a0 89              LDY #>Ln2

              ; ***************************
8a08            Multiply_AY_To_FAC1 ; $8a08
              ; ***************************

8a08 20 89 8a           JSR Load_FAC2_From_AY_ROM
8a0b 4c 27 8a           JMP OP_MULT

              ; ***********************
8a0e            Add_0_5_To_FAC1 ; $8a0e
              ; ***********************

8a0e a9 76              LDA #<Real_0_5
8a10 a0 8f              LDY #>Real_0_5

              ; **********************
8a12            Add_AY_To_FAC1 ; $8a12
              ; **********************

8a12 20 89 8a           JSR Load_FAC2_From_AY_ROM
8a15 4c 48 88           JMP OP_PLUS

              ; *********************
8a18            FAC1_Minus_AY ; $8a18
              ; *********************

8a18 20 89 8a           JSR Load_FAC2_From_AY_ROM
8a1b 4c 31 88           JMP OP_MINUS

              ; *******************
8a1e            AY_Div_FAC1 ; $8a1e
              ; *******************

8a1e 20 89 8a           JSR Load_FAC2_From_AY_ROM
8a21 4c 4c 8b           JMP OP_DIV

              ; ********************
8a24            AY_Mult_FAC1 ; $8a24
              ; ********************

8a24 20 b4 8a           JSR Load_FAC2_From_AY_RAM

              ; ***************
8a27            OP_MULT ; $8a27
              ; ***************

8a27 d0 03              BNE MULT_10
8a29 4c 88 8a           JMP MULT_Ret
8a2c 20 ec 8a MULT_10   JSR Add_Exponents
8a2f a9 00              LDA #0
8a31 85 28              STA FAC3_M1
8a33 85 29              STA FAC3_M2
8a35 85 2a              STA FAC3_M3
8a37 85 2b              STA FAC3_M4
8a39 a5 71              LDA FROUND
8a3b 20 5b 8a           JSR Mult_SubB
8a3e a5 67              LDA FAC1_M4
8a40 20 55 8a           JSR Mult_SubA
8a43 a5 66              LDA FAC1_M3
8a45 20 55 8a           JSR Mult_SubA
8a48 a5 65              LDA FAC1_M2
8a4a 20 5b 8a           JSR Mult_SubB
8a4d a5 64              LDA FAC1_M1
8a4f 20 5b 8a           JSR Mult_SubB
8a52 4c c1 8b           JMP DIV_80

              ; *****************
8a55            Mult_SubA ; $8a55
              ; *****************

8a55 d0 04              BNE Mult_SubB       ; do bitwise multiply if A is not zero
8a57 ea                 NOP
8a58 4c 62 89           JMP FACX_Byte_Shift ; else shift FAC3 right 8 bits

              ; *****************
8a5b            Mult_SubB ; $8a5b
              ; *****************

8a5b 4a                 LSR A
8a5c 09 80              ORA #$80            ; make sure, that A remains not zero
8a5e a8       MULT_20   TAY                 ; until 8 MoMe_60 are done
8a5f 90 19              BCC MULT_30
8a61 18                 CLC
8a62 a5 2b              LDA FAC3_M4
8a64 65 6e              ADC FAC2_M4
8a66 85 2b              STA FAC3_M4
8a68 a5 2a              LDA FAC3_M3
8a6a 65 6d              ADC FAC2_M3
8a6c 85 2a              STA FAC3_M3
8a6e a5 29              LDA FAC3_M2
8a70 65 6c              ADC FAC2_M2
8a72 85 29              STA FAC3_M2
8a74 a5 28              LDA FAC3_M1
8a76 65 6b              ADC FAC2_M1
8a78 85 28              STA FAC3_M1
8a7a 66 28    MULT_30   ROR FAC3_M1
8a7c 66 29              ROR FAC3_M2
8a7e 66 2a              ROR FAC3_M3
8a80 66 2b              ROR FAC3_M4
8a82 66 71              ROR FROUND
8a84 98                 TYA
8a85 4a                 LSR A
8a86 d0 d6              BNE MULT_20
8a88 60       MULT_Ret  RTS ;Size   46 [Mult_SubB]

              ; *****************************
8a89            Load_FAC2_From_AY_ROM ; $8a89
              ; *****************************

              ; Input:  (A/Y) = address of packed floating point value
              ; Output: FAC2  = read floating point value
              ;         A     = exponent of FAC1
              ;         Y     = 0
              ;         Flags = after loading FAC1 exponent

8a89 85 24              STA INDEXA
8a8b 84 25              STY INDEXA+1
8a8d a0 04              LDY #4
8a8f b1 24              LDA (INDEXA),Y
8a91 85 6e              STA FAC2_M4
8a93 88                 DEY
8a94 b1 24              LDA (INDEXA),Y
8a96 85 6d              STA FAC2_M3
8a98 88                 DEY
8a99 b1 24              LDA (INDEXA),Y
8a9b 85 6c              STA FAC2_M2
8a9d 88                 DEY
8a9e b1 24              LDA (INDEXA),Y      ; bit7 = sign
8aa0 85 6f              STA FAC2_SI         ; transfer sign to FAC2SI bit7
8aa2 45 68              EOR FAC1_SI         ; EOR with sign of FAC1
8aa4 85 70              STA STRPTR          ; flag sign comparison
8aa6 a5 6f              LDA FAC2_SI         ; load sign/byte 1 of mantissa
8aa8 09 80              ORA #$80            ; replace sign with 1 (normalize)
8aaa 85 6b              STA FAC2_M1         ; M1 is now in unpacked mode
8aac 88                 DEY                 ; Y = 0
8aad b1 24              LDA (INDEXA),Y      ; exponent
8aaf 85 6a              STA FAC2_EX
8ab1 a5 63              LDA FAC1_EX
8ab3 60                 RTS ;Size   43 [Load_FAC2_From_AY_ROM]

              ; *****************************
8ab4            Load_FAC2_From_AY_RAM ; $8ab4
              ; *****************************

8ab4 85 24              STA INDEXA
8ab6 84 25              STY INDEXA+1
8ab8 ad 00 ff           LDA MMU_CR
8abb 48                 PHA                 ; save bank
8abc a0 04              LDY #4
8abe 20 b7 03           JSR Get_INDEXA_1
8ac1 85 6e              STA FAC2_M4
8ac3 88                 DEY
8ac4 20 b7 03           JSR Get_INDEXA_1
8ac7 85 6d              STA FAC2_M3
8ac9 88                 DEY
8aca 20 b7 03           JSR Get_INDEXA_1
8acd 85 6c              STA FAC2_M2
8acf 88                 DEY
8ad0 20 b7 03           JSR Get_INDEXA_1    ; bit7 = sign
8ad3 85 6f              STA FAC2_SI         ; transfer sign to FAC2SI bit7
8ad5 45 68              EOR FAC1_SI         ; EOR with sign of FAC1
8ad7 85 70              STA STRPTR          ; flag sign comparison
8ad9 a5 6f              LDA FAC2_SI         ; load sign/byte 1 of mantissa
8adb 09 80              ORA #$80            ; replace sign with 1 (normalize)
8add 85 6b              STA FAC2_M1         ; M1 is now in unpacked mode
8adf 88                 DEY                 ; Y = 0
8ae0 20 b7 03           JSR Get_INDEXA_1    ; exponent
8ae3 85 6a              STA FAC2_EX
8ae5 68                 PLA
8ae6 8d 00 ff           STA MMU_CR          ; restore bank
8ae9 a5 63              LDA FAC1_EX
8aeb 60                 RTS ;Size   56 [Load_FAC2_From_AY_RAM]

              ; *********************
8aec            Add_Exponents ; $8aec
              ; *********************

8aec a5 6a              LDA FAC2_EX
8aee f0 1f    ChFA_10   BEQ ChFA_50         ; -> set result = 0.0
8af0 18                 CLC
8af1 65 63              ADC FAC1_EX         ; (exp 1 + exp 2)
8af3 90 04              BCC ChFA_20         ; -> no overflow
8af5 30 1d              BMI ChFA_Err        ; -> overflow
8af7 18                 CLC
8af8 2c                 BIT
8af9 10 14    ChFA_20   BPL ChFA_50         ; -> underflow
8afb 69 80              ADC #$80            ; adjust bias
8afd 85 63              STA FAC1_EX         ; exp 1 += exp 2
8aff d0 03              BNE ChFA_30
8b01 4c da 88           JMP CF1_20
8b04 a5 70    ChFA_30   LDA STRPTR
8b06 85 68              STA FAC1_SI
8b08 60                 RTS ;Size   29 [Add_Exponents]

8b09 a5 68    ChFA_40   LDA FAC1_SI         ; sign
8b0b 49 ff              EOR #$ff            ; invert
8b0d 30 05              BMI ChFA_Err        ; -> error if sign was positive
8b0f 68       ChFA_50   PLA
8b10 68                 PLA
8b11 4c d6 88           JMP Clear_FAC1      ; FAC1 = 0.0
8b14 4c 5d 89 ChFA_Err  JMP Overflow_Error

              ; ***************************
8b17            Multiply_FAC1_BY_10 ; $8b17
              ; ***************************

8b17 20 38 8c           JSR FAC1_Round_And_Copy_To_FAC2
8b1a aa                 TAX
8b1b f0 10              BEQ AAD_Ret
8b1d 18                 CLC
8b1e 69 02              ADC #2
8b20 b0 f2              BCS ChFA_Err

              ; **********************
8b22            Add_And_Double ; $8b22
              ; **********************

8b22 a2 00              LDX #0
8b24 86 70              STX STRPTR
8b26 20 55 88           JSR AddSub_FAC2_To_FAC1
8b29 e6 63              INC FAC1_EX
8b2b f0 e7              BEQ ChFA_Err
8b2d 60       AAD_Ret   RTS ;Size   12 [Add_And_Double]

8b2e 84 20 00 Real_10   .REAL $8420000000;   10.00000000000

8b33 a2 14    DIV_ZERO  LDX #$14            ; DIVISION BY ZERO
8b35 4c 3c 4d           JMP Print_Error_X

              ; *************************
8b38            Divide_FAC1_By_10 ; $8b38
              ; *************************

8b38 20 38 8c           JSR FAC1_Round_And_Copy_To_FAC2
8b3b a9 2e              LDA #<Real_10
8b3d a0 8b              LDY #>Real_10
8b3f a2 00              LDX #0

              ; *************************
8b41            Divide_FAC2_By_AY ; $8b41
              ; *************************

8b41 86 70              STX STRPTR
8b43 20 d4 8b           JSR Load_FAC1_AY
8b46 4c 4c 8b           JMP OP_DIV

              ; **************************
8b49            AY_Divided_By_FAC1 ; $8b49
              ; **************************

8b49 20 b4 8a           JSR Load_FAC2_From_AY_RAM

              ; **************
8b4c            OP_DIV ; $8b4c
              ; **************

8b4c f0 e5              BEQ DIV_ZERO        ; -> FAC1 was zero
8b4e 20 47 8c           JSR Round_FAC1
8b51 a9 00              LDA #0
8b53 38                 SEC
8b54 e5 63              SBC FAC1_EX
8b56 85 63              STA FAC1_EX
8b58 20 ec 8a           JSR Add_Exponents
8b5b e6 63              INC FAC1_EX
8b5d f0 b5              BEQ ChFA_Err
8b5f a2 fc              LDX #$fc             ; wrap around index
8b61 a9 01              LDA #1
8b63 a4 6b    DIV_10    LDY FAC2_M1
8b65 c4 64              CPY FAC1_M1
8b67 d0 10              BNE DIV_20
8b69 a4 6c              LDY FAC2_M2
8b6b c4 65              CPY FAC1_M2
8b6d d0 0a              BNE DIV_20
8b6f a4 6d              LDY FAC2_M3
8b71 c4 66              CPY FAC1_M3
8b73 d0 04              BNE DIV_20
8b75 a4 6e              LDY FAC2_M4
8b77 c4 67              CPY FAC1_M4
8b79 08       DIV_20    PHP
8b7a 2a                 ROL A
8b7b 90 09              BCC DIV_30
8b7d e8                 INX
8b7e 95 2b              STA FAC3_M4,X
8b80 f0 32              BEQ DIV_60
8b82 10 34              BPL DIV_70
8b84 a9 01              LDA #1
8b86 28       DIV_30    PLP
8b87 b0 0e              BCS DIV_50
8b89 06 6e    DIV_40    ASL FAC2_M4
8b8b 26 6d              ROL FAC2_M3
8b8d 26 6c              ROL FAC2_M2
8b8f 26 6b              ROL FAC2_M1
8b91 b0 e6              BCS DIV_20
8b93 30 ce              BMI DIV_10
8b95 10 e2              BPL DIV_20
8b97 a8       DIV_50    TAY
8b98 a5 6e              LDA FAC2_M4
8b9a e5 67              SBC FAC1_M4
8b9c 85 6e              STA FAC2_M4
8b9e a5 6d              LDA FAC2_M3
8ba0 e5 66              SBC FAC1_M3
8ba2 85 6d              STA FAC2_M3
8ba4 a5 6c              LDA FAC2_M2
8ba6 e5 65              SBC FAC1_M2
8ba8 85 6c              STA FAC2_M2
8baa a5 6b              LDA FAC2_M1
8bac e5 64              SBC FAC1_M1
8bae 85 6b              STA FAC2_M1
8bb0 98                 TYA
8bb1 4c 89 8b           JMP DIV_40
8bb4 a9 40    DIV_60    LDA #$40 ; '@'
8bb6 d0 ce              BNE DIV_30
8bb8 0a       DIV_70    ASL A
8bb9 0a                 ASL A
8bba 0a                 ASL A
8bbb 0a                 ASL A
8bbc 0a                 ASL A
8bbd 0a                 ASL A
8bbe 85 71              STA FROUND
8bc0 28                 PLP
8bc1 a5 28    DIV_80    LDA FAC3_M1
8bc3 85 64              STA FAC1_M1
8bc5 a5 29              LDA FAC3_M2
8bc7 85 65              STA FAC1_M2
8bc9 a5 2a              LDA FAC3_M3
8bcb 85 66              STA FAC1_M3
8bcd a5 2b              LDA FAC3_M4
8bcf 85 67              STA FAC1_M4
8bd1 4c b6 88           JMP Normalise_FAC1

              ; ********************
8bd4            Load_FAC1_AY ; $8bd4
              ; ********************

8bd4 85 24              STA INDEXA
8bd6 84 25              STY INDEXA+1
8bd8 a0 04              LDY #4
8bda b1 24              LDA (INDEXA),Y
8bdc 85 67              STA FAC1_M4
8bde 88                 DEY
8bdf b1 24              LDA (INDEXA),Y
8be1 85 66              STA FAC1_M3
8be3 88                 DEY
8be4 b1 24              LDA (INDEXA),Y
8be6 85 65              STA FAC1_M2
8be8 88                 DEY
8be9 b1 24              LDA (INDEXA),Y
8beb 85 68              STA FAC1_SI
8bed 09 80              ORA #$80
8bef 85 64              STA FAC1_M1
8bf1 88                 DEY                 ; Y = 0
8bf2 b1 24              LDA (INDEXA),Y
8bf4 85 63              STA FAC1_EX
8bf6 84 71              STY FROUND          ; FROUND = 0
8bf8 60                 RTS ;Size   37 [Load_FAC1_AY]

              ; **********************
8bf9            FAC1_To_FACTPB ; $8bf9
              ; **********************

8bf9 a2 5e              LDX #FACTPB
8bfb 2c                 BIT

              ; **********************
8bfc            FAC1_To_FACTPA ; $8bfc
              ; **********************

8bfc a2 59              LDX #FACTPA
8bfe a0 00              LDY #0

              ; ******************
8c00            FAC1_To_XY ; $8c00
              ; ******************

8c00 20 47 8c           JSR Round_FAC1
8c03 86 24              STX INDEXA
8c05 84 25              STY INDEXA+1
8c07 a0 04              LDY #4
8c09 a5 67              LDA FAC1_M4
8c0b 91 24              STA (INDEXA),Y
8c0d 88                 DEY
8c0e a5 66              LDA FAC1_M3
8c10 91 24              STA (INDEXA),Y
8c12 88                 DEY
8c13 a5 65              LDA FAC1_M2
8c15 91 24              STA (INDEXA),Y
8c17 88                 DEY
8c18 a5 68              LDA FAC1_SI
8c1a 09 7f              ORA #$7f
8c1c 25 64              AND FAC1_M1
8c1e 91 24              STA (INDEXA),Y
8c20 88                 DEY
8c21 a5 63              LDA FAC1_EX
8c23 91 24              STA (INDEXA),Y
8c25 84 71              STY FROUND
8c27 60                 RTS ;Size   40 [FAC1_To_XY]

              ; ********************
8c28            FAC2_To_FAC1 ; $8c28
              ; ********************

8c28 a5 6f              LDA FAC2_SI

              ; ************************
8c2a            ASI_FAC2_To_FAC1 ; $8c2a
              ; ************************

8c2a 85 68              STA FAC1_SI
8c2c a2 05              LDX #5
8c2e b5 69    F2F1_10   LDA FAC2_EX-1,X
8c30 95 62              STA FAC1_EX-1,X
8c32 ca                 DEX
8c33 d0 f9              BNE F2F1_10
8c35 86 71              STX FROUND
8c37 60                 RTS ;Size   14 [ASI_FAC2_To_FAC1]

              ; ***********************************
8c38            FAC1_Round_And_Copy_To_FAC2 ; $8c38
              ; ***********************************

8c38 20 47 8c           JSR Round_FAC1

              ; ********************
8c3b            FAC1_To_FAC2 ; $8c3b
              ; ********************

8c3b a2 06              LDX #6
8c3d b5 62    F1F2_10   LDA FAC1_EX-1,X
8c3f 95 69              STA FAC2_EX-1,X
8c41 ca                 DEX
8c42 d0 f9              BNE F1F2_10
8c44 86 71              STX FROUND
8c46 60       F1F2_Ret  RTS ;Size   12 [FAC1_To_FAC2]

              ; ******************
8c47            Round_FAC1 ; $8c47
              ; ******************

8c47 a5 63              LDA FAC1_EX
8c49 f0 fb              BEQ F1F2_Ret
8c4b 06 71              ASL FROUND
8c4d 90 f7              BCC F1F2_Ret

              ; ****************
8c4f            Inc_FAC1 ; $8c4f
              ; ****************

8c4f 20 4e 89           JSR Inc_FAC1_Mantissa
8c52 d0 f2              BNE F1F2_Ret
8c54 4c 17 89           JMP AFTF_85

              ; **********************
8c57            Test_FAC1_Sign ; $8c57
              ; **********************

              ; Output: A =  0 for zero
              ;         A =  1 for positive number
              ;         A = -1 for negative number

8c57 a5 63              LDA FAC1_EX
8c59 f0 09              BEQ TFS_Ret
8c5b a5 68    TFS_10    LDA FAC1_SI
8c5d 2a       TFS_20    ROL A
8c5e a9 ff              LDA #-1
8c60 b0 02              BCS TFS_Ret
8c62 a9 01              LDA #1
8c64 60       TFS_Ret   RTS ;Size   14 [Test_FAC1_Sign]

              ; ****************
8c65            FUNC_SGN ; $8c65
              ; ****************

8c65 20 57 8c           JSR Test_FAC1_Sign

              ; *****************
8c68            A_To_FAC1 ; $8c68
              ; *****************

8c68 85 64              STA FAC1_M1         ; value in M1
8c6a a9 00              LDA #0
8c6c 85 65              STA FAC1_M2         ; clear M2
8c6e a2 88              LDX #$88            ; exponent for integer in M1
8c70 a5 64    AFACX     LDA FAC1_M1
8c72 49 ff              EOR #$ff            ; invert number
8c74 2a                 ROL A               ; set carry for positive numbers

              ; ********************
8c75            Word_To_FAC1 ; $8c75
              ; ********************

8c75 a9 00              LDA #0              ; clear lower half of mantissa
8c77 85 67              STA FAC1_M4
8c79 85 66              STA FAC1_M3
8c7b 86 63    IFACX     STX FAC1_EX         ; X to exponent
8c7d 85 71              STA FROUND          ; clear rounding byte
8c7f 85 68              STA FAC1_SI         ; clear sign (assume 16 bit unsigned word)
8c81 4c b1 88           JMP AFTF_60         ; -> normalize FAC1

              ; ****************
8c84            FUNC_ABS ; $8c84
              ; ****************

8c84 46 68              LSR FAC1_SI         ; clear FAC1 sign
8c86 60                 RTS ;Size    3 [FUNC_ABS]

              ; ***********************
8c87            Compare_AY_FAC1 ; $8c87
              ; ***********************

8c87 85 26              STA INDEXB          ; INDEXB = 1st. = left  operand
8c89 84 27              STY INDEXB+1        ; FAC1   = 2nd. = right operand
8c8b a0 00              LDY #0
8c8d b1 26              LDA (INDEXB),Y      ; exp 1
8c8f c8                 INY                 ; Y = 1
8c90 aa                 TAX                 ; X = exp 1
8c91 f0 c4              BEQ Test_FAC1_Sign  ; -> left = 0 : get sign of right
8c93 b1 26              LDA (INDEXB),Y      ; M1
8c95 45 68              EOR FAC1_SI         ; EOR both sign bits
8c97 30 c2              BMI TFS_10          ; branch on different signs
8c99 e4 63              CPX FAC1_EX         ; compare exponents
8c9b d0 21              BNE CAYF_10         ; branch if not equal
8c9d b1 26              LDA (INDEXB),Y      ; M1
8c9f 09 80              ORA #$80            ; remove sign, set normalize bit
8ca1 c5 64              CMP FAC1_M1         ; compare M1's
8ca3 d0 19              BNE CAYF_10
8ca5 c8                 INY                 ; Y = 2
8ca6 b1 26              LDA (INDEXB),Y
8ca8 c5 65              CMP FAC1_M2         ; compare M2's
8caa d0 12              BNE CAYF_10
8cac c8                 INY                 ; Y = 3
8cad b1 26              LDA (INDEXB),Y
8caf c5 66              CMP FAC1_M3         ; compare M3's
8cb1 d0 0b              BNE CAYF_10
8cb3 c8                 INY                 ; Y = 4
8cb4 a9 7f              LDA #$7f
8cb6 c5 71              CMP FROUND          ; clear carry for rounding bit set
8cb8 b1 26              LDA (INDEXB),Y
8cba e5 67              SBC FAC1_M4         ; compare M4's with borrow
8cbc f0 2a              BEQ FINT_20           ; numbers are equal
8cbe a5 68    CAYF_10   LDA FAC1_SI
8cc0 90 02              BCC CAYF_20
8cc2 49 ff              EOR #$ff
8cc4 4c 5d 8c CAYF_20   JMP TFS_20

              ; ****************
8cc7            FAC1_INT ; $8cc7
              ; ****************

              ; Shift FAC1 right until the exponent is at $a0.
              ; This is the value for which the four mantissa bytes
              ; represent a 32 bit integer value.

8cc7 a5 63              LDA FAC1_EX
8cc9 f0 4d              BEQ INT_0           ; clear all for zero exp
8ccb 38                 SEC
8ccc e9 a0              SBC #$a0
8cce 24 68              BIT FAC1_SI
8cd0 10 0a              BPL FINT_10
8cd2 aa                 TAX                 ; save exp
8cd3 a9 ff              LDA #$ff
8cd5 8d df 03           STA BITS
8cd8 20 2c 89           JSR Negate_FAC1_Mantissa
8cdb 8a                 TXA                 ; restore exp
8cdc a2 63    FINT_10   LDX #FAC1_EX
8cde c9 f9              CMP #$f9
8ce0 10 07              BPL FINT_30
8ce2 20 79 89           JSR FACX_Bit_Shift
8ce5 8c df 03           STY BITS
8ce8 60       FINT_20   RTS ;Size   34 [FAC1_INT]
8ce9 a8       FINT_30   TAY
8cea a5 68              LDA FAC1_SI
8cec 29 80              AND #%1000 0000     ; propagate sign
8cee 46 64              LSR FAC1_M1
8cf0 05 64              ORA FAC1_M1
8cf2 85 64              STA FAC1_M1
8cf4 20 90 89           JSR Rotate_FACX
8cf7 8c df 03           STY BITS
8cfa 60                 RTS ;Size   52 [FAC1_INT]

              ; ****************
8cfb            FUNC_INT ; $8cfb
              ; ****************

              ; The BASIC int function is not restricted to the 16 bit
              ; range of integer variables. Its range is 32 bit.
              ; INT does not round, it looks for the integer lower or
              ; equal to the given value. E.g: int(-1.1) results in -2.

8cfb a5 63              LDA FAC1_EX
8cfd c9 a0              CMP #$a0
8cff b0 20              BCS INT_Ret         ; -> already integer
8d01 20 68 aa           JSR FAC1_Round_INT  ; -> convert to 32 bit integer
8d04 84 71              STY FROUND          ; FROUND = 0
8d06 a5 68              LDA FAC1_SI
8d08 84 68              STY FAC1_SI         ; FAC1_SI = 0
8d0a 49 80              EOR #$80
8d0c 2a                 ROL A
8d0d a9 a0              LDA #$a0            ; exp value for 32 bit integer
8d0f 85 63              STA FAC1_EX
8d11 a5 67              LDA FAC1_M4
8d13 85 09              STA CHARAC
8d15 4c b1 88           JMP AFTF_60
8d18 85 64    INT_0     STA FAC1_M1         ; clear mantissa
8d1a 85 65              STA FAC1_M2
8d1c 85 66              STA FAC1_M3
8d1e 85 67              STA FAC1_M4
8d20 a8                 TAY                 ; Y = 0 on exit
8d21 60       INT_Ret   RTS ;Size   39 [FUNC_INT]

              ; *************************
8d22            Read_Real_To_FAC1 ; $8d22
              ; *************************

              ; This subroutine parses a string via CHRGET_INDEXA and
              ; converts it into a floating point value in FAC1.

              ; Input:  A and flags set from a call to CHRGET

              ;         TMPVAR   = digits after decimal point
              ;         TENEXP   = exponent
              ;         LOWTR    = bit 7 : flag for '.' decimal point
              ;         DEGREE   = bit 7 : flag for '-' sign

8d22 8e da 03           STX STR_BANK        ; bank for string to read
8d25 a0 00              LDY #0
8d27 a2 0a              LDX #10
8d29 94 5f    RRTF_10   STY TMPVAR,X        ; clear LOWTR, FAC1, etc.
8d2b ca                 DEX
8d2c 10 fb              BPL RRTF_10
8d2e 90 0f              BCC RRTF_16         ; -> numeric
8d30 c9 2d              CMP #'-'
8d32 d0 04              BNE RRTF_12
8d34 86 69              STX DEGREE          ; $ff = flag for - sign
8d36 f0 04              BEQ RRTF_14         ; branch always
8d38 c9 2b    RRTF_12   CMP #'+'            ; skip + sign
8d3a d0 05              BNE RRTF_18
8d3c 20 f5 8d RRTF_14   JSR CHRGET_INDEXA   ; get next char
8d3f 90 5b    RRTF_16   BCC RRTF_42         ; -> numeric
8d41 c9 2e    RRTF_18   CMP #'.'            ; decimal point ?
8d43 f0 2e              BEQ RRTF_28         ; -> now the fractional part
8d45 c9 45              CMP #'E'            ; exponent ?
8d47 d0 30              BNE RRTF_30
8d49 20 f5 8d           JSR CHRGET_INDEXA   ; read character of exponent
8d4c 90 17              BCC RRTF_24         ; -> numeric
8d4e c9 ab              CMP #$ab            ; '-' token
8d50 f0 0e              BEQ RRTF_20
8d52 c9 2d              CMP #'-'
8d54 f0 0a              BEQ RRTF_20
8d56 c9 aa              CMP #$aa            ; '+' token
8d58 f0 08              BEQ RRTF_22
8d5a c9 2b              CMP #'+'
8d5c f0 04              BEQ RRTF_22
8d5e d0 07              BNE RRTF_26         ; always

8d60 66 62    RRTF_20   ROR LOWTR+1         ; flag negative sign
8d62 20 f5 8d RRTF_22   JSR CHRGET_INDEXA   ; read character of exponent
8d65 90 5c    RRTF_24   BCC RRTF_50           ; -> numeric
8d67 24 62    RRTF_26   BIT LOWTR+1
8d69 10 0e              BPL RRTF_30         ; -> positive exponent
8d6b a9 00              LDA #0
8d6d 38                 SEC
8d6e e5 60              SBC TENEXP          ; -> negative exponent
8d70 4c 7b 8d           JMP RRTF_32

8d73 66 61    RRTF_28   ROR LOWTR           ; bit 7 = flag for '.'
8d75 24 61              BIT LOWTR
8d77 50 c3              BVC RRTF_14         ; break if 2nd. dot read
8d79 a5 60    RRTF_30   LDA TENEXP          ; exponent read
8d7b 38       RRTF_32   SEC
8d7c e5 5f              SBC TMPVAR          ; minus # of digits after '.'
8d7e 85 60              STA TENEXP          ; effective exponent
8d80 f0 12              BEQ RRTF_38         ; -> zero exponent
8d82 10 09              BPL RRTF_36         ; -> pos. exponent

8d84 20 38 8b RRTF_34   JSR Divide_FAC1_By_10 ; neg. exponent
8d87 e6 60              INC TENEXP
8d89 d0 f9              BNE RRTF_34
8d8b f0 07              BEQ RRTF_38

8d8d 20 17 8b RRTF_36   JSR Multiply_FAC1_BY_10 ; positive exponent
8d90 c6 60              DEC TENEXP
8d92 d0 f9              BNE RRTF_36
8d94 a5 69    RRTF_38   LDA DEGREE          ; load sign
8d96 30 01              BMI RRTF_40         ; -> negate result
8d98 60                 RTS ;Size  119 [Read_Real_To_FAC1]
8d99 4c fa 8f RRTF_40   JMP OP_NEG
8d9c 48       RRTF_42   PHA
8d9d 24 61              BIT LOWTR
8d9f 10 02              BPL RRTF_44
8da1 e6 5f              INC TMPVAR
8da3 20 17 8b RRTF_44   JSR Multiply_FAC1_BY_10
8da6 68                 PLA
8da7 38                 SEC
8da8 e9 30              SBC #'0'
8daa 20 b0 8d           JSR Add_A_To_FAC1
8dad 4c 3c 8d           JMP RRTF_14

              ; *********************
8db0            Add_A_To_FAC1 ; $8db0
              ; *********************

8db0 48                 PHA
8db1 20 38 8c           JSR FAC1_Round_And_Copy_To_FAC2
8db4 68                 PLA
8db5 20 68 8c           JSR A_To_FAC1
8db8 a5 6f              LDA FAC2_SI
8dba 45 68              EOR FAC1_SI
8dbc 85 70              STA STRPTR
8dbe a6 63              LDX FAC1_EX
8dc0 4c 48 88           JMP OP_PLUS

              ; read digits for exponent

8dc3 a5 60    RRTF_50   LDA TENEXP          ; exponent so far
8dc5 c9 0a              CMP #10             ; alreay two digits ?
8dc7 90 09              BCC RRTF_52         ; -> OK if less than 10
8dc9 a9 64              LDA #100            ; exponent = 100
8dcb 24 62              BIT LOWTR+1
8dcd 30 21              BMI RRTF_58         ; -> negative exponent
8dcf 4c 5d 89           JMP Overflow_Error  ; max value = 37
8dd2 0a       RRTF_52   ASL A               ; *  2
8dd3 0a                 ASL A               ; *  4
8dd4 18                 CLC
8dd5 65 60              ADC TENEXP          ; *  5
8dd7 0a                 ASL A               ; * 10
8dd8 18                 CLC
8dd9 a0 00              LDY #0
8ddb 85 79              STA SYNTMP
8ddd ad da 03           LDA STR_BANK
8de0 d0 06              BNE RRTF_54
8de2 20 c9 03           JSR INDTXT
8de5 4c eb 8d           JMP RRTF_56
8de8 20 b7 03 RRTF_54   JSR Get_INDEXA_1
8deb 65 79    RRTF_56   ADC SYNTMP
8ded 38                 SEC
8dee e9 30              SBC #'0'
8df0 85 60    RRTF_58   STA TENEXP          ; new value for exponent
8df2 4c 62 8d           JMP RRTF_22

              ; *********************
8df5            CHRGET_INDEXA ; $8df5
              ; *********************

8df5 ad da 03           LDA STR_BANK
8df8 d0 03              BNE CHXA_10
8dfa 4c 80 03           JMP CHRGET          ; use default for bank 0
8dfd e6 24    CHXA_10   INC INDEXA
8dff d0 02              BNE CHRGOT_INDEXA
8e01 e6 25              INC INDEXA+1

              ; *********************
8e03            CHRGOT_INDEXA ; $8e03
              ; *********************

8e03 a0 00              LDY #0
8e05 20 b7 03           JSR Get_INDEXA_1
8e08 c9 3a              CMP #':'
8e0a b0 0a              BCS CHXA_Ret
8e0c c9 20              CMP #' '
8e0e f0 ed              BEQ CHXA_10
8e10 38                 SEC
8e11 e9 30              SBC #'0'
8e13 38                 SEC
8e14 e9 d0              SBC #$d0
8e16 60       CHXA_Ret  RTS ;Size   20 [CHRGOT_INDEXA]

8e17 9b 3e bc R9E9      .REAL $9b3ebc1ffd; 99999999.90625000000
8e1c 9e 6e 6b R9E10     .REAL $9e6e6b27fd; 999999999.25000000000
8e21 9e 6e 6b R1E10     .REAL $9e6e6b2800; 1000000000.00000000000

              ; ***********************
8e26            Print_IN_CURLIN ; $8e26
              ; ***********************

8e26 20 81 92           JSR B_PRIMM
8e29 20 49 4e           .BYTE " IN ",0

              ; ********************
8e2e            Print_CURLIN ; $8e2e
              ; ********************

8e2e a5 3c              LDA CURLIN+1
8e30 a6 3b              LDX CURLIN

              ; ************************
8e32            Print_Integer_XA ; $8e32
              ; ************************

8e32 85 64              STA FAC1_M1
8e34 86 65              STX FAC1_M2
8e36 a2 90              LDX #$90            ; exponent for 16 bit integer in M1/M2
8e38 38                 SEC
8e39 20 75 8c           JSR Word_To_FAC1
8e3c 20 44 8e           JSR Format_FAC1_Y
8e3f 4c e2 55           JMP Print_String

              ; *******************
8e42            Format_FAC1 ; $8e42
              ; *******************

8e42 a0 01              LDY #1              ; start of string storage

              ; *********************
8e44            Format_FAC1_Y ; $8e44
              ; *********************

              ; Format floating point number in FAC1
              ; The string is stored starting at $ff for Y=0
              ; and extending into the bottom of the stack

8e44 a9 20              LDA #' '            ; default for positive number
8e46 24 68              BIT FAC1_SI
8e48 10 02              BPL FoFa_10
8e4a a9 2d              LDA #'-'            ; sign for negative number
8e4c 99 ff 00 FoFa_10   STA STACK-1,Y        ; store sign character
8e4f 85 68              STA FAC1_SI         ; clear sign bit
8e51 84 72              STY STRNG2          ; save Y
8e53 c8                 INY                 ; next string position
8e54 a9 30              LDA #'0'            ; default for value zero

              ; if the value is zero, store '0' and finish

8e56 a6 63              LDX FAC1_EX
8e58 d0 03              BNE FoFa_12
8e5a 4c 69 8f           JMP FoFa_60

              ; if the value is less than 1.0, scale it with 1.0e+9
              ; and store the scaled 10's exponent (-9) in TMPVAR
              ; this saves 9 iterations

8e5d a9 00    FoFa_12   LDA #0
8e5f e0 80              CPX #$80            ; exponent > 1.0 ?
8e61 f0 02              BEQ FoFa_14
8e63 b0 09              BCS FoFa_16         ; -> OK

8e65 a9 21    FoFa_14   LDA #<R1E10
8e67 a0 8e              LDY #>R1E10
8e69 20 08 8a           JSR Multiply_AY_To_FAC1
8e6c a9 f7              LDA #-9
8e6e 85 5f    FoFa_16   STA TMPVAR          ; current 10's exponent
8e70 a9 1c    FoFa_18   LDA #<R9E10
8e72 a0 8e              LDY #>R9E10
8e74 20 87 8c           JSR Compare_AY_FAC1
8e77 f0 1e              BEQ FoFa_28
8e79 10 12              BPL FoFa_24

              ; scale FAC1 up until the number has more than 8 digits

8e7b a9 17    FoFa_20   LDA #<R9E9
8e7d a0 8e              LDY #>R9E9
8e7f 20 87 8c           JSR Compare_AY_FAC1
8e82 f0 02              BEQ FoFa_22
8e84 10 0e              BPL FoFa_26
8e86 20 17 8b FoFa_22   JSR Multiply_FAC1_BY_10
8e89 c6 5f              DEC TMPVAR
8e8b d0 ee              BNE FoFa_20

              ; scale FAC1 down until the number has less than 10 digits

8e8d 20 38 8b FoFa_24   JSR Divide_FAC1_By_10
8e90 e6 5f              INC TMPVAR          ; increment 10's exponent
8e92 d0 dc              BNE FoFa_18

              ; scaling is done - now convert the digits before the decimal
              ; point into a 32 bit integer

8e94 20 0e 8a FoFa_26   JSR Add_0_5_To_FAC1 ; add 0.5 for rounding
8e97 20 c7 8c FoFa_28   JSR FAC1_INT        ; convert to integer
8e9a a2 01              LDX #1
8e9c a5 5f              LDA TMPVAR          ; current 10's exponent
8e9e 18                 CLC
8e9f 69 0a              ADC #10             ; exp difference
8ea1 30 09              BMI FoFa_30         ; value < 1.0
8ea3 c9 0b              CMP #11
8ea5 b0 06              BCS FoFa_32
8ea7 69 ff              ADC #$ff
8ea9 aa                 TAX                 ; X = exp + 9
8eaa a9 02              LDA #2              ; fixed point
8eac 38       FoFa_30   SEC
8ead e9 02    FoFa_32   SBC #2
8eaf 85 60              STA TENEXP          ; exp print = 0 or exp+8
8eb1 86 5f              STX TMPVAR          ; digits before decimal point
8eb3 8a                 TXA
8eb4 f0 02              BEQ FoFa_34         ; -> if no digits before point
8eb6 10 13              BPL FoFa_38
8eb8 a4 72    FoFa_34   LDY STRNG2
8eba a9 2e              LDA # '.'
8ebc c8                 INY
8ebd 99 ff 00           STA STACK-1,Y        ; insert decimal point
8ec0 8a                 TXA
8ec1 f0 06              BEQ FoFa_36
8ec3 a9 30              LDA #'0'
8ec5 c8                 INY
8ec6 99 ff 00           STA STACK-1,Y        ; insert '0'
8ec9 84 72    FoFa_36   STY STRNG2
8ecb a0 00    FoFa_38   LDY #0

              ; ***************************
8ecd            Format_Clock_String ; $8ecd
              ; ***************************

8ecd a2 80              LDX #$80
8ecf a5 67    FoFa_40   LDA FAC1_M4
8ed1 18                 CLC
8ed2 79 7e 8f           ADC Dec_Print_Tab+3,Y
8ed5 85 67              STA FAC1_M4
8ed7 a5 66              LDA FAC1_M3
8ed9 79 7d 8f           ADC Dec_Print_Tab+2,Y
8edc 85 66              STA FAC1_M3
8ede a5 65              LDA FAC1_M2
8ee0 79 7c 8f           ADC Dec_Print_Tab+1,Y
8ee3 85 65              STA FAC1_M2
8ee5 a5 64              LDA FAC1_M1
8ee7 79 7b 8f           ADC Dec_Print_Tab,Y
8eea 85 64              STA FAC1_M1
8eec e8                 INX
8eed b0 04              BCS FoFa_42
8eef 10 de              BPL FoFa_40
8ef1 30 02              BMI FoFa_44

8ef3 30 da    FoFa_42   BMI FoFa_40
8ef5 8a       FoFa_44   TXA
8ef6 90 04              BCC FoFa_46
8ef8 49 ff              EOR #$ff
8efa 69 0a              ADC #10
8efc 69 2f    FoFa_46   ADC #'0'-1
8efe c8                 INY
8eff c8                 INY
8f00 c8                 INY
8f01 c8                 INY                 ; Y += 4
8f02 84 49              STY VARPNT          ; save index to Dec_Print_Tab
8f04 a4 72              LDY STRNG2          ; get index to string
8f06 c8                 INY
8f07 aa                 TAX
8f08 29 7f              AND #$7f
8f0a 99 ff 00           STA STACK-1,Y        ; store digit
8f0d c6 5f              DEC TMPVAR          ; # of digits
8f0f d0 06              BNE FoFa_48         ; -> if not zero
8f11 a9 2e              LDA #'.'
8f13 c8                 INY
8f14 99 ff 00           STA STACK-1,Y        ; store decimal point
8f17 84 72    FoFa_48   STY STRNG2          ; save string index
8f19 a4 49              LDY VARPNT          ; get table index
8f1b 8a                 TXA
8f1c 49 ff              EOR #$ff
8f1e 29 80              AND #$80
8f20 aa                 TAX
8f21 c0 24              CPY #$24            ; end of decimal table ?
8f23 f0 04              BEQ FoFa_50
8f25 c0 3c              CPY #$3c            ; end of jiffy table ?
8f27 d0 a6              BNE FoFa_40

              ; remove trailing zeroes

8f29 a4 72    FoFa_50   LDY STRNG2
8f2b b9 ff 00 FoFa_52   LDA STACK-1,Y
8f2e 88                 DEY
8f2f c9 30              CMP #'0'
8f31 f0 f8              BEQ FoFa_52
8f33 c9 2e              CMP #'.'
8f35 f0 01              BEQ FoFa_54
8f37 c8                 INY
8f38 a9 2b    FoFa_54   LDA #'+'            ; default sign for exponent
8f3a a6 60              LDX TENEXP
8f3c f0 2e              BEQ FoFa_62
8f3e 10 08              BPL FoFa_56
8f40 a9 00              LDA #0
8f42 38                 SEC
8f43 e5 60              SBC TENEXP
8f45 aa                 TAX
8f46 a9 2d              LDA #'-'            ; negative sign for exponent
8f48 99 01 01 FoFa_56   STA STACK+1,Y
8f4b a9 45              LDA #'E'
8f4d 99 00 01           STA STACK,Y
8f50 8a                 TXA
8f51 a2 2f              LDX #'0'-1
8f53 38                 SEC
8f54 e8       FoFa_58   INX
8f55 e9 0a              SBC #10
8f57 b0 fb              BCS FoFa_58
8f59 69 3a              ADC #'9'+1
8f5b 99 03 01           STA STACK+3,Y
8f5e 8a                 TXA
8f5f 99 02 01           STA STACK+2,Y
8f62 a9 00              LDA #0
8f64 99 04 01           STA STACK+4,Y
8f67 f0 08              BEQ FoFa_64         ; always

8f69 99 ff 00 FoFa_60   STA STACK-1,Y
8f6c a9 00    FoFa_62   LDA #0
8f6e 99 00 01           STA STACK,Y
8f71 a9 00    FoFa_64   LDA #0
8f73 a0 01              LDY #1
8f75 60                 RTS ;Size  169 [Format_Clock_String]

8f76 80 00 00 Real_0_5  .REAL $8000000000;    0.5

              ; *********************
8f7b            Dec_Print_Tab ; $8f7b
              ; *********************

8f7b fa 0a 1f           .QUAD $fa0a1f00  -100000000
8f7f 00 98 96           .QUAD $00989680    10000000
8f83 ff f0 bd           .QUAD $fff0bdc0    -1000000
8f87 00 01 86           .QUAD $000186a0      100000
8f8b ff ff d8           .QUAD $ffffd8f0      -10000
8f8f 00 00 03           .QUAD $000003e8        1000
8f93 ff ff ff           .QUAD $ffffff9c        -100
8f97 00 00 00           .QUAD $0000000a          10
8f9b ff ff ff           .QUAD $ffffffff          -1

              ; **********************
8f9f           Clock_Print_Tab ; $8f9f
              ; **********************

8f9f ff df 0a           .QUAD $ffdf0a80    -2160000
8fa3 00 03 4b           .QUAD $00034bc0      216000
8fa7 ff ff 73           .QUAD $ffff7360      -36000
8fab 00 00 0e           .QUAD $00000e10        3600
8faf ff ff fd           .QUAD $fffffda8        -600
8fb3 00 00 00           .QUAD $0000003c          60

              ; ****************
8fb7            FUNC_SQR ; $8fb7
              ; ****************

8fb7 20 38 8c           JSR FAC1_Round_And_Copy_To_FAC2
8fba a9 76              LDA #<Real_0_5
8fbc a0 8f              LDY #>Real_0_5
8fbe 20 d4 8b POT_XY    JSR Load_FAC1_AY

              ; ****************
8fc1            OP_POWER ; $8fc1
              ; ****************

8fc1 f0 70              BEQ FUNC_EXP        ; -> FAC1 == 0
8fc3 a5 6a              LDA FAC2_EX
8fc5 d0 03              BNE POW_10
8fc7 4c d8 88           JMP CF1_10
8fca a2 50    POW_10    LDX #<GRBPNT
8fcc a0 00              LDY #>GRBPNT
8fce 20 00 8c           JSR FAC1_To_XY
8fd1 a5 6f              LDA FAC2_SI
8fd3 10 0f              BPL POW_20
8fd5 20 fb 8c           JSR FUNC_INT
8fd8 a9 50              LDA #<GRBPNT
8fda a0 00              LDY #>GRBPNT
8fdc 20 87 8c           JSR Compare_AY_FAC1
8fdf d0 03              BNE POW_20
8fe1 98                 TYA
8fe2 a4 09              LDY CHARAC
8fe4 20 2a 8c POW_20    JSR ASI_FAC2_To_FAC1
8fe7 98                 TYA
8fe8 48                 PHA
8fe9 20 ca 89           JSR FUNC_LOG
8fec a9 50              LDA #<GRBPNT
8fee a0 00              LDY #>GRBPNT
8ff0 20 24 8a           JSR AY_Mult_FAC1
8ff3 20 33 90           JSR FUNC_EXP
8ff6 68                 PLA
8ff7 4a                 LSR A
8ff8 90 0a              BCC NEG_Ret

              ; **************
8ffa            OP_NEG ; $8ffa
              ; **************

8ffa a5 63              LDA FAC1_EX
8ffc f0 06              BEQ NEG_Ret
8ffe a5 68              LDA FAC1_SI
9000 49 ff              EOR #$ff
9002 85 68              STA FAC1_SI
9004 60       NEG_Ret   RTS ;Size   11 [OP_NEG]

              ; *********
9005            Rev_Log_2
              ; *********

9005 81 38 aa 3b 29     .REAL $8138aa3b29;    1.44269504072

900a 07       expcon    .BYTE $07
900b 71 34 58 3e 56     .REAL $7134583e56;    0.00002149876
9010 74 16 7e b3 1b     .REAL $74167eb31b;    0.00014352314
9015 77 2f ee e3 85     .REAL $772feee385;    0.00134226348
901a 7a 1d 84 1c 2a     .REAL $7a1d841c2a;    0.00961401701
901f 7c 63 59 58 0a     .REAL $7c6359580a;    0.05550512686
9024 7e 75 fd e7 c6     .REAL $7e75fde7c6;    0.24022638460
9029 80 31 72 18 10     .REAL $8031721810;    0.69314718619
902e 81 00 00 00 00     .REAL $8100000000;    1.00000000000

              ; ****************
9033            FUNC_EXP ; $9033
              ; ****************

9033 a9 05              LDA #<Rev_Log_2
9035 a0 90              LDY #>Rev_Log_2
9037 20 08 8a           JSR Multiply_AY_To_FAC1
903a a5 71              LDA FROUND
903c 69 50              ADC #$50            ; round exponential
903e 90 03              BCC EXP_10
9040 20 4f 8c           JSR Inc_FAC1
9043 85 58    EXP_10    STA OLDOV
9045 20 3b 8c           JSR FAC1_To_FAC2
9048 a5 63              LDA FAC1_EX
904a c9 88              CMP #$88
904c 90 03              BCC EXP_30          ; -> value < 128
904e 20 09 8b EXP_20    JSR ChFA_40         ; FAC1 = 0.0 for tiny values
9051 20 fb 8c EXP_30    JSR FUNC_INT        ; convert to integer
9054 a5 09              LDA CHARAC
9056 18                 CLC
9057 69 81              ADC #$81
9059 f0 f3              BEQ EXP_20
905b 38                 SEC
905c e9 01              SBC #1
905e 48                 PHA
905f a2 05              LDX #5
9061 b5 6a    EXP_40    LDA FAC2_EX,X       ; FAC1 <-> FAC2
9063 b4 63              LDY FAC1_EX,X
9065 95 63              STA FAC1_EX,X
9067 94 6a              STY FAC2_EX,X
9069 ca                 DEX
906a 10 f5              BPL EXP_40
906c a5 58              LDA OLDOV
906e 85 71              STA FROUND
9070 20 31 88           JSR OP_MINUS
9073 20 fa 8f           JSR OP_NEG
9076 a9 0a              LDA #<expcon
9078 a0 90              LDY #>expcon
907a 20 9c 90           JSR Eval_Series_AY
907d a9 00              LDA #0
907f 85 70              STA STRPTR
9081 68                 PLA
9082 20 ee 8a           JSR ChFA_10         ; do not JMP! (may return with PLA PLA)
9085 60                 RTS ;Size   83 [FUNC_EXP]

              ; *************************
9086            Series_Evaluation ; $9086
              ; *************************

9086 85 72              STA STRNG2
9088 84 73              STY STRNG2+1
908a 20 fc 8b           JSR FAC1_To_FACTPA
908d a9 59              LDA #FACTPA
908f 20 24 8a           JSR AY_Mult_FAC1
9092 20 a0 90           JSR Eval_Series
9095 a9 59              LDA #<FACTPA
9097 a0 00              LDY #>FACTPA
9099 4c 24 8a           JMP AY_Mult_FAC1

              ; **********************
909c            Eval_Series_AY ; $909c
              ; **********************

909c 85 72              STA STRNG2
909e 84 73              STY STRNG2+1

              ; *******************
90a0            Eval_Series ; $90a0
              ; *******************

90a0 20 f9 8b           JSR FAC1_To_FACTPB
90a3 b1 72              LDA (STRNG2),Y
90a5 85 69              STA DEGREE
90a7 a4 72              LDY STRNG2
90a9 c8                 INY
90aa 98                 TYA
90ab d0 02              BNE EvSe_10
90ad e6 73              INC STRNG2+1
90af 85 72    EvSe_10   STA STRNG2
90b1 a4 73              LDY STRNG2+1
90b3 20 08 8a EvSe_20   JSR Multiply_AY_To_FAC1
90b6 a5 72              LDA STRNG2
90b8 a4 73              LDY STRNG2+1
90ba 18                 CLC
90bb 69 05              ADC #5              ; advance polynomial pointer
90bd 90 01              BCC EvSe_30
90bf c8                 INY
90c0 85 72    EvSe_30   STA STRNG2
90c2 84 73              STY STRNG2+1
90c4 20 12 8a           JSR Add_AY_To_FAC1
90c7 a9 5e              LDA #<FACTPB
90c9 a0 00              LDY #>FACTPB
90cb c6 69              DEC DEGREE
90cd d0 e4              BNE EvSe_20
90cf 60                 RTS ;Size   48 [Eval_Series]

              ; **********************
90d0            Break_On_Error ; $90d0
              ; **********************

90d0 aa                 TAX
90d1 d0 02              BNE BOE_Err
90d3 a2 1e    Break_Err LDX #$1e            ; BREAK
90d5 4c 3c 4d BOE_Err   JMP Print_Error_X

              ; **************
90d8            B_OPEN ; $90d8
              ; **************

90d8 20 45 a8           JSR Map_IO
90db 20 c0 ff           JSR K_OPEN
90de 60                 RTS ;Size    7 [B_OPEN]

              ; **************
90df            CHROUT ; $90df
              ; **************

90df 20 69 92           JSR B_BSOUT
90e2 b0 ec              BCS Break_On_Error
90e4 60                 RTS ;Size    6 [CHROUT]

              ; *************
90e5            CHRIN ; $90e5
              ; *************

90e5 20 63 92           JSR B_BASIN
90e8 b0 e6              BCS Break_On_Error
90ea 60                 RTS ;Size    6 [CHRIN]

              ; ***************
90eb            B_CKOUT ; $90eb
              ; ***************

90eb 48                 PHA
90ec 20 45 a8           JSR Map_IO
90ef 20 c9 ff           JSR K_CKOUT
90f2 20 43 92           JSR Invalidate_Disk_Status
90f5 aa                 TAX
90f6 68                 PLA
90f7 90 03              BCC BCOUT_Ret
90f9 8a                 TXA
90fa b0 d4              BCS Break_On_Error
90fc 60       BCOUT_Ret RTS ;Size   18 [B_CKOUT]

              ; ***************
90fd            B_CHKIN ; $90fd
              ; ***************

90fd 20 45 a8           JSR Map_IO
9100 20 c6 ff           JSR K_CHKIN
9103 20 43 92           JSR Invalidate_Disk_Status
9106 b0 c8              BCS Break_On_Error
9108 60                 RTS ;Size   12 [B_CHKIN]

              ; ***************
9109            B_GETIN ; $9109
              ; ***************

9109 20 45 a8           JSR Map_IO
910c 20 e4 ff           JSR K_GETIN
910f b0 c2              BCS Break_Err
9111 60                 RTS ;Size    9 [B_GETIN]

              ; ******************
9112            BASIC_SAVE ; $9112
              ; ******************

9112 20 ae 91           JSR Load_Save_Parameter
9115 ae 10 12 SAVE_10   LDX TEXT_TOP
9118 ac 11 12           LDY TEXT_TOP+1
911b a9 2d              LDA #TXTTAB         ; address of start address
911d 20 45 a8 SAVE_20   JSR Map_IO
9120 20 d8 ff           JSR K_SAVESP
9123 20 43 92           JSR Invalidate_Disk_Status
9126 b0 a8              BCS Break_On_Error
9128 60                 RTS ;Size   23 [BASIC_SAVE]

              ; ********************
9129            BASIC_VERIFY ; $9129
              ; ********************

9129 a9 01              LDA #1
912b 2c                 BIT

              ; ******************
912c            BASIC_LOAD ; $912c
              ; ******************

912c a9 00              LDA #0              ; 0 = LOAD mode
912e 85 0c              STA B_VERCK         ; set LOAD or VERIFY flag
9130 20 ae 91           JSR Load_Save_Parameter

              ; **************************
9133            LOAD_Parameter_Set ; $9133
              ; **************************

9133 20 45 a8           JSR Map_IO
9136 a5 0c              LDA B_VERCK         ; LOAD (0) or VERIFY (1)
9138 a6 2d              LDX TXTTAB
913a a4 2e              LDY TXTTAB+1
913c 20 d5 ff           JSR K_LOADSP        ; Kernel load routine
913f 08                 PHP                 ; push status
9140 20 43 92           JSR Invalidate_Disk_Status
9143 28                 PLP                 ; pull status
9144 b0 65              BCS CLOSE_Err           ; -> load error
9146 a5 0c              LDA B_VERCK
9148 f0 16              BEQ LPS_10          ; -> LOAD
914a a2 1c              LDX #$1c            ; VERIFY
914c 20 51 92           JSR B_READST
914f 29 10              AND #%0001 0000     ; and VERIFY bit
9151 d0 16              BNE LPS_20          ; -> verify error
9153 24 7f              BIT RUNMOD
9155 30 08              BMI LPS_Ret         ; -> running
9157 20 81 92           JSR B_PRIMM         ; stopped
915a 0d 4f 4b           .BYTE "\rOK\r",0
915f 60       LPS_Ret   RTS ;Size   45 [LOAD_Parameter_Set]

9160 20 51 92 LPS_10    JSR B_READST
9163 29 bf              AND #%1011 1111     ; test all but EOI (but 6)
9165 f0 05              BEQ LPS_30
9167 a2 1d    LPS_Err   LDX #$1d            ; LOAD
9169 4c 3c 4d LPS_20    JMP Print_Error_X

916c 8e 10 12 LPS_30    STX TEXT_TOP        ; store load end address
916f 8c 11 12           STY TEXT_TOP+1
9172 24 7f              BIT RUNMOD
9174 30 0e              BMI LPS_40          ; -> RUN [line]
9176 70 e7              BVS LPS_Ret         ; -> RUN <filename>
9178 20 2a 4d           JSR Print_Ready
917b 20 4f 4f           JSR Relink
917e 20 f3 51           JSR Reset_BASIC_Execution
9181 4c c3 4d           JMP BAER_70
9184 20 54 52 LPS_40    JSR Reset_TXTPTR
9187 20 4f 4f           JSR Relink
918a 4c 35 52           JMP ClrB_20

              ; ******************
918d            BASIC_OPEN ; $918d
              ; ******************

918d 20 f6 91           JSR Get_Open_Close_Parameter
9190 18                 CLC
9191 20 d8 90           JSR B_OPEN
9194 20 43 92           JSR Invalidate_Disk_Status
9197 b0 12              BCS CLOSE_Err
9199 60                 RTS ;Size   13 [BASIC_OPEN]

              ; *******************
919a            BASIC_CLOSE ; $919a
              ; *******************

919a 20 f6 91           JSR Get_Open_Close_Parameter
919d 20 45 a8           JSR Map_IO
91a0 a5 4b              LDA FORPNT
91a2 18                 CLC
91a3 20 75 92           JSR B_CLOSE
91a6 20 43 92           JSR Invalidate_Disk_Status
91a9 90 b4              BCC LPS_Ret
91ab 4c d0 90 CLOSE_Err JMP Break_On_Error

              ; ***************************
91ae            Load_Save_Parameter ; $91ae
              ; ***************************

91ae a9 00              LDA #0
91b0 20 5d 92           JSR B_SETNAM        ; clear filename
91b3 a2 01              LDX #1              ; default unit = 1 tape
91b5 a0 00              LDY #0              ; default SA = 0
91b7 20 57 92           JSR B_SETLFS        ; LA=0, FA=1, SA=0
91ba 20 87 92           JSR B_SETBNK        ; bank = 0
91bd 20 e3 91           JSR CHRGOT_Or_BREAK ; more parameter ?
91c0 20 39 92           JSR Get_Filename    ; read and store filename
91c3 20 e3 91           JSR CHRGOT_Or_BREAK ; more parameter ?
91c6 20 dd 91           JSR Comma_Byte      ; read unit
91c9 a0 00              LDY #0              ; Y = 0
91cb 86 4b              STX FORPNT          ; store unit
91cd 20 57 92           JSR B_SETLFS        ; FA=X, SA=0
91d0 20 e3 91           JSR CHRGOT_Or_BREAK ; more parameter ?
91d3 20 dd 91           JSR Comma_Byte      ; read EOT parameter
91d6 8a                 TXA                 ; A = EOT
91d7 a8                 TAY                 ; Y = EOT
91d8 a6 4b              LDX FORPNT          ; X = FA
91da 4c 57 92           JMP B_SETLFS        ; LA=A, FA=X, SA=Y

              ; ******************
91dd            Comma_Byte ; $91dd
              ; ******************

91dd 20 eb 91           JSR Need_Comma_And_Byte
91e0 4c f4 87           JMP Get_Byte_Var

              ; ***********************
91e3            CHRGOT_Or_BREAK ; $91e3
              ; ***********************

91e3 20 86 03           JSR CHRGOT
91e6 d0 02              BNE COB_Ret
91e8 68                 PLA
91e9 68                 PLA
91ea 60       COB_Ret   RTS ;Size    8 [CHRGOT_Or_BREAK]

              ; ***************************
91eb            Need_Comma_And_Byte ; $91eb
              ; ***************************

91eb 20 5c 79           JSR Need_Comma

              ; *****************
91ee            Need_Byte ; $91ee
              ; *****************

91ee 20 86 03           JSR CHRGOT
91f1 d0 f7              BNE COB_Ret
91f3 4c 6c 79           JMP SYNTAX_ERROR

              ; ********************************
91f6            Get_Open_Close_Parameter ; $91f6
              ; ********************************

91f6 a9 00              LDA #0
91f8 a2 01              LDX #1
91fa 20 87 92           JSR B_SETBNK        ; bank = 0
91fd 20 5d 92           JSR B_SETNAM        ; clear filename
9200 20 ee 91           JSR Need_Byte       ; assert more
9203 20 f4 87           JSR Get_Byte_Var    ; get logical address
9206 86 4b              STX FORPNT          ; save it
9208 8a                 TXA                 ; A = LA
9209 a2 01              LDX #1              ; X = FA = 1
920b a0 00              LDY #0              ; Y = SA = 0
920d 20 57 92           JSR B_SETLFS        ; set defaults
9210 20 e3 91           JSR CHRGOT_Or_BREAK ; more ?
9213 20 dd 91           JSR Comma_Byte      ; get unit
9216 86 4c              STX FORPNT+1        ; save it
9218 a0 00              LDY #0              ; Y = SA = 0
921a a5 4b              LDA FORPNT          ; A = LA
921c e0 03              CPX #3              ; unit < 3 ?
921e 90 01              BCC GOCP_10         ; -> OK
9220 88                 DEY                 ; SA = 255
9221 20 57 92 GOCP_10   JSR B_SETLFS        ; set parameter
9224 20 e3 91           JSR CHRGOT_Or_BREAK ; more ?
9227 20 dd 91           JSR Comma_Byte      ; get SA
922a 8a                 TXA                 ; A = SA
922b a8                 TAY                 ; Y = SA
922c a6 4c              LDX FORPNT+1        ; X = FA
922e a5 4b              LDA FORPNT          ; A = LA
9230 20 57 92           JSR B_SETLFS        ; set parameter
9233 20 e3 91           JSR CHRGOT_Or_BREAK ; more ?
9236 20 eb 91           JSR Need_Comma_And_Byte

              ; ********************
9239            Get_Filename ; $9239
              ; ********************

9239 20 7b 87           JSR Eval_String     ; read filename
923c a6 24              LDX INDEXA          ; fn address low
923e a4 25              LDY INDEXA+1        ; fn address high
9240 4c 5d 92           JMP B_SETNAM        ; declare filename

              ; ******************************
9243            Invalidate_Disk_Status ; $9243
              ; ******************************

9243 08                 PHP
9244 48                 PHA
9245 a5 ba              LDA FA
9247 c9 04              CMP #4
9249 90 03              BCC IDS_10
924b 20 0d a8           JSR Free_DOS_Status_String
924e 68       IDS_10    PLA
924f 28                 PLP
9250 60                 RTS ;Size   14 [Invalidate_Disk_Status]

              ; ****************
9251            B_READST ; $9251
              ; ****************

9251 20 45 a8           JSR Map_IO          ; not needed
9254 4c b7 ff           JMP K_READST

              ; ****************
9257            B_SETLFS ; $9257
              ; ****************

9257 20 45 a8           JSR Map_IO          ; not needed
925a 4c ba ff           JMP K_SETLFS

              ; ****************
925d            B_SETNAM ; $925d
              ; ****************

925d 20 45 a8           JSR Map_IO          ; not needed
9260 4c bd ff           JMP K_SETNAM

              ; ***************
9263            B_BASIN ; $9263
              ; ***************

9263 20 45 a8           JSR Map_IO
9266 4c cf ff           JMP K_BASIN

              ; ***************
9269            B_BSOUT ; $9269
              ; ***************

9269 20 45 a8           JSR Map_IO
926c 4c d2 ff           JMP K_BSOUT

              ; ***************
926f            B_CLRCH ; $926f
              ; ***************

926f 20 45 a8           JSR Map_IO
9272 4c cc ff           JMP K_CLRCH

              ; ***************
9275            B_CLOSE ; $9275
              ; ***************

9275 20 45 a8           JSR Map_IO
9278 4c c3 ff           JMP K_CLOSE

              ; ***************
927b            B_CLALL ; $927b
              ; ***************

927b 20 45 a8           JSR Map_IO
927e 4c e7 ff           JMP K_CLALL

              ; ***************
9281            B_PRIMM ; $9281
              ; ***************

9281 20 45 a8           JSR Map_IO
9284 4c 7d ff           JMP K_PRIMM

              ; ****************
9287            B_SETBNK ; $9287
              ; ****************

9287 20 45 a8           JSR Map_IO
928a 4c 68 ff           JMP K_SETBNK

              ; **************
928d            B_PLOT ; $928d
              ; **************

928d 8d 03 ff           STA MMU_LCRC
9290 4c f0 ff           JMP K_PLOT

              ; **************
9293            B_STOP ; $9293
              ; **************

9293 20 45 a8           JSR Map_IO
9296 4c e1 ff           JMP K_STOP

              ; *****************************
9299            Allocate_String_Space ; $9299
              ; *****************************

              ; Input:  A = length of string

              ; Input:  A = length of string
              ;         X = address low
              ;         Y = address high

9299 46 11              LSR GARBFL          ; clear bit 7 of GARBFL
929b aa       ASS_10    TAX                 ; string length
929c f0 3b              BEQ ASS_50          ; 0 -> nothing to do
929e 48                 PHA                 ; save length
929f a5 35              LDA FRETOP
92a1 38                 SEC
92a2 e9 02              SBC #2              ; subtract 2 for back reference
92a4 a4 36              LDY FRETOP+1
92a6 b0 01              BCS ASS_20
92a8 88                 DEY
92a9 85 24    ASS_20    STA INDEXA          ; INDEXA = FRETOP - 2
92ab 84 25              STY INDEXA+1
92ad 8a                 TXA
92ae 49 ff              EOR #%1111 1111     ; negate
92b0 38                 SEC
92b1 65 24              ADC INDEXA          ; subtract length
92b3 b0 01              BCS ASS_30
92b5 88                 DEY
92b6 c4 34    ASS_30    CPY STREND+1        ; A/Y = FRETOP - length - 2
92b8 90 20              BCC ASS_60          ; A/Y < STREND -> garbage collection
92ba d0 04              BNE ASS_40
92bc c5 33              CMP STREND
92be 90 1a              BCC ASS_60          ; A/Y < STREND -> garbage collection
92c0 85 37    ASS_40    STA FRESPC
92c2 84 38              STY FRESPC+1        ; FRESPC = FRETOP - length - 2
92c4 a0 01              LDY #1
92c6 a9 ff              LDA #$ff
92c8 8d 04 ff           STA MMU_LCRD
92cb 91 24              STA (INDEXA),Y      ; mark as unassigned
92cd 88                 DEY                 ; Y = 0
92ce 68                 PLA                 ; length
92cf 91 24              STA (INDEXA),Y      ; store length
92d1 a6 37              LDX FRESPC
92d3 a4 38              LDY FRESPC+1
92d5 86 35              STX FRETOP
92d7 84 36              STY FRETOP+1        ; FRETOP = FRESPC
92d9 60       ASS_50    RTS ;Size   65 [Allocate_String_Space]
92da a5 11    ASS_60    LDA GARBFL
92dc 30 09              BMI ASS_Err         ; 2nd. attempt -> OOM
92de 20 ea 92           JSR Garbage_Collection
92e1 38                 SEC
92e2 66 11              ROR GARBFL          ; set flag: collection was done
92e4 68                 PLA                 ; pull length
92e5 d0 b4              BNE ASS_10          ; branch always
92e7 4c 3a 4d ASS_Err   JMP OOM_Error

              ; **************************
92ea            Garbage_Collection ; $92ea
              ; **************************

              ; Input:  FRETOP = old lower boundary of string RAM
              ; Output: FRETOP = new lower boundary of string RAM

              ; Used:   FRESP  = current lower boundary
              ;         GRBPNT = current string old address
              ;         LOWTR  = current string new address
              ;         FACTPB = current trailer
              ;         INDEXA = current descriptor

              ; update back references from string descriptors on stack

92ea a6 18              LDX TEMPPT          ; descriptor stack pointer
92ec e0 1b    GaCo_10   CPX #TEMPST         ; start of stack ?
92ee f0 13              BEQ GaCo_15         ; -> empty stack
92f0 20 f0 93           JSR Trailer_Address
92f3 f0 f7              BEQ GaCo_10         ; zero length -> loop
92f5 8a                 TXA                 ; A = stack pointer
92f6 a0 00              LDY #0
92f8 8d 04 ff           STA MMU_LCRD
92fb 91 5e              STA (FACTPB),Y      ; back reference low
92fd 98                 TYA
92fe c8                 INY                 ; Y = 1
92ff 91 5e              STA (FACTPB),Y      ; back reference high
9301 d0 e9              BNE GaCo_10         ; always

9303 a0 00    GaCo_15   LDY #0
9305 84 5a              STY ARYPNT          ; ARYPNT = 0
9307 a6 39              LDX MEMSIZ
9309 a4 3a              LDY MEMSIZ+1
930b 86 61              STX LOWTR           ; LOWTR  = MEMSIZ
930d 86 50              STX GRBPNT          ; GRBPNT = MEMSIZ
930f 86 37              STX FRESPC          ; FRESPC = MEMSIZ
9311 84 62              STY LOWTR+1
9313 84 51              STY GRBPNT+1
9315 84 38              STY FRESPC+1
9317 8a                 TXA

9318 20 83 93 GaCo_20   JSR Invalid_String  ; breaks out after reaching FRETOP
931b d0 0c              BNE GaCo_30         ; -> string is valid

931d 88       GaCo_25   DEY
931e 20 fb 42           JSR GRBPNT_from_Bank_1_Copy ; A = length
9321 20 d2 93           JSR GRBPNT_Minus_A          ; GRBPNT -= length
9324 38                 SEC
9325 66 5a              ROR ARYPNT          ; set flag
9327 d0 ef              BNE GaCo_20         ; always

9329 24 5a    GaCo_30   BIT ARYPNT
932b 10 42              BPL GaCo_50         ; -> no gap so far
932d a2 00              LDX #0
932f 86 5a              STX ARYPNT          ; reset flag
9331 a9 02              LDA #2              ; obsolete
9333 a0 01    GaCo_35   LDY #1
9335 20 fb 42           JSR GRBPNT_from_Bank_1_Copy
9338 91 61              STA (LOWTR),Y
933a 88                 DEY                 ; Y = 0
933b 20 fb 42           JSR GRBPNT_from_Bank_1_Copy
933e 91 61              STA (LOWTR),Y       ; LOWTR = string address
9340 20 b7 03           JSR Get_INDEXA_1    ; A = length
9343 aa                 TAX                 ; X = length
9344 20 e1 93           JSR LOWTR_Minus_A
9347 85 37              STA FRESPC
9349 84 38              STY FRESPC+1        ; update FRESPC
934b 8a                 TXA                 ; A = length
934c 20 d2 93           JSR GRBPNT_Minus_A  ; GRBPNT -= length
934f 8a                 TXA
9350 a8                 TAY

              ; copy string from old position to new one

9351 88       GaCo_40   DEY
9352 20 fb 42           JSR GRBPNT_from_Bank_1_Copy
9355 91 61              STA (LOWTR),Y
9357 ca                 DEX                 ; decrement string length
9358 d0 f7              BNE GaCo_40

              ; update descriptor

935a a0 02              LDY #2
935c b9 60 00 GaCo_45   LDA TENEXP,Y
935f 91 24              STA (INDEXA),Y
9361 88                 DEY
9362 d0 f8              BNE GaCo_45

9364 a5 50              LDA GRBPNT
9366 a4 51              LDY GRBPNT+1
9368 20 83 93           JSR Invalid_String
936b f0 b0              BEQ GaCo_25
936d d0 c4              BNE GaCo_35

936f a0 00    GaCo_50   LDY #0
9371 20 b7 03           JSR Get_INDEXA_1
9374 aa                 TAX
9375 20 e1 93           JSR LOWTR_Minus_A
9378 85 37              STA FRESPC
937a 84 38              STY FRESPC+1        ; FRESPC = last found valid string
937c 8a                 TXA
937d 20 d2 93           JSR GRBPNT_Minus_A
9380 4c 18 93           JMP GaCo_20

              ; **********************
9383            Invalid_String ; $9383
              ; **********************

9383 c4 36              CPY FRETOP+1
9385 90 2a              BCC InvS_40         ; -> not in string RAM
9387 d0 06              BNE InvS_10
9389 c5 35              CMP FRETOP
938b f0 24              BEQ InvS_40         ; -> not in string RAM
938d 90 22              BCC InvS_40         ; -> not in string RAM

              ; string is located in string RAM

938f 24 5a    InvS_10   BIT ARYPNT
9391 30 05              BMI InvS_20
9393 a9 02              LDA #2
9395 20 e1 93           JSR LOWTR_Minus_A
9398 a9 02    InvS_20   LDA #2
939a 20 d2 93           JSR GRBPNT_Minus_A
939d a0 01              LDY #1
939f 20 fb 42           JSR GRBPNT_from_Bank_1_Copy
93a2 c9 ff              CMP #$ff
93a4 d0 01              BNE InvS_30
93a6 60                 RTS                 ; return with Z=1 ;Size   36 [Invalid_String]
93a7 20 fb 42 InvS_30   JSR GRBPNT_from_Bank_1_Copy
93aa 99 24 00           STA INDEXA,Y
93ad 88                 DEY
93ae 10 f7              BPL InvS_30
93b0 60                 RTS                 ; return with Z=0 ;Size   46 [Invalid_String]

              ; scan strings from string descriptor stack

93b1 a6 18    InvS_40   LDX TEMPPT
93b3 e0 1b    InvS_50   CPX #TEMPST
93b5 f0 10              BEQ InvS_60
93b7 20 f0 93           JSR Trailer_Address
93ba f0 f7              BEQ InvS_50
93bc a0 00              LDY #0
93be 91 5e              STA (FACTPB),Y      ; store length
93c0 c8                 INY                 ; Y = 1
93c1 a9 ff              LDA #$ff
93c3 91 5e              STA (FACTPB),Y      ; mark as invalid
93c5 d0 ec              BNE InvS_50         ; always

93c7 68       InvS_60   PLA
93c8 68                 PLA                 ; remove return address
93c9 a5 37              LDA FRESPC
93cb a4 38              LDY FRESPC+1
93cd 85 35              STA FRETOP          ; FRETOP = FRESPC
93cf 84 36              STY FRETOP+1
93d1 60                 RTS ;Size   79 [Invalid_String]

              ; **********************
93d2            GRBPNT_Minus_A ; $93d2
              ; **********************

93d2 49 ff              EOR #$ff            ; negate
93d4 38                 SEC
93d5 65 50              ADC GRBPNT
93d7 a4 51              LDY GRBPNT+1
93d9 b0 01              BCS GMA_10
93db 88                 DEY
93dc 85 50    GMA_10    STA GRBPNT
93de 84 51              STY GRBPNT+1
93e0 60                 RTS ;Size   15 [GRBPNT_Minus_A]

              ; *********************
93e1            LOWTR_Minus_A ; $93e1
              ; *********************

93e1 49 ff              EOR #$ff            ; negate
93e3 38                 SEC
93e4 65 61              ADC LOWTR
93e6 a4 62              LDY LOWTR+1
93e8 b0 01              BCS LMA_10
93ea 88                 DEY
93eb 85 61    LMA_10    STA LOWTR
93ed 84 62              STY LOWTR+1
93ef 60                 RTS ;Size   15 [LOWTR_Minus_A]

              ; ***********************
93f0            Trailer_Address ; $93f0
              ; ***********************

93f0 ca                 DEX
93f1 b5 00              LDA 0,X             ; string address high
93f3 85 5f              STA FACTPB+1
93f5 ca                 DEX
93f6 b5 00              LDA 0,X             ; string address low
93f8 85 5e              STA FACTPB
93fa ca                 DEX
93fb b5 00              LDA 0,X             ; string length
93fd 48                 PHA                 ; push length
93fe 18                 CLC
93ff 65 5e              ADC FACTPB
9401 85 5e              STA FACTPB
9403 90 02              BCC TrAd_10
9405 e6 5f              INC FACTPB+1        ; FACTPB = string address + length
9407 68       TrAd_10   PLA                 ; pull length (set flags)
9408 60                 RTS ;Size   25 [Trailer_Address]

              ; ****************
9409            FUNC_COS ; $9409
              ; ****************

9409 a9 85              LDA #<PI_Half
940b a0 94              LDY #>PI_Half
940d 20 12 8a           JSR Add_AY_To_FAC1

              ; ****************
9410            FUNC_SIN ; $9410
              ; ****************

9410 20 38 8c           JSR FAC1_Round_And_Copy_To_FAC2
9413 a9 8a              LDA #<Two_PI
9415 a0 94              LDY #>Two_PI
9417 a6 6f              LDX FAC2_SI
9419 20 41 8b           JSR Divide_FAC2_By_AY ; arg / (2 Pi)
941c 20 38 8c           JSR FAC1_Round_And_Copy_To_FAC2
941f 20 fb 8c           JSR FUNC_INT
9422 a9 00              LDA #0
9424 85 70              STA STRPTR
9426 20 31 88           JSR OP_MINUS
9429 a9 8f              LDA #<Real_0_25
942b a0 94              LDY #>Real_0_25
942d 20 18 8a           JSR FAC1_Minus_AY
9430 a5 68              LDA FAC1_SI
9432 48                 PHA
9433 10 0d              BPL SIN_10
9435 20 0e 8a           JSR Add_0_5_To_FAC1
9438 a5 68              LDA FAC1_SI
943a 30 09              BMI SIN_20
943c a5 14              LDA TANSGN
943e 49 ff              EOR #$ff
9440 85 14              STA TANSGN
9442 20 fa 8f SIN_10    JSR OP_NEG
9445 a9 8f    SIN_20    LDA #<Real_0_25
9447 a0 94              LDY #>Real_0_25
9449 20 12 8a           JSR Add_AY_To_FAC1
944c 68                 PLA
944d 10 03              BPL SIN_30
944f 20 fa 8f           JSR OP_NEG
9452 a9 94    SIN_30    LDA #<VAR_SIN
9454 a0 94              LDY #>VAR_SIN
9456 4c 86 90           JMP Series_Evaluation

              ; ****************
9459            FUNC_TAN ; $9459
              ; ****************

9459 20 fc 8b           JSR FAC1_To_FACTPA
945c a9 00              LDA #0
945e 85 14              STA TANSGN
9460 20 10 94           JSR FUNC_SIN
9463 a2 50              LDX #<GRBPNT
9465 a0 00              LDY #>GRBPNT
9467 20 00 8c           JSR FAC1_To_XY
946a a9 59              LDA #<FACTPA
946c a0 00              LDY #>FACTPA
946e 20 d4 8b           JSR Load_FAC1_AY
9471 a9 00              LDA #0
9473 85 68              STA FAC1_SI
9475 a5 14              LDA TANSGN
9477 20 81 94           JSR TAN_10
947a a9 50              LDA #<GRBPNT
947c a0 00              LDY #>GRBPNT
947e 4c 49 8b           JMP AY_Divided_By_FAC1

              ; **************
9481            TAN_10 ; $9481
              ; **************

9481 48                 PHA
9482 4c 42 94           JMP SIN_10

9485 81 49 0f PI_Half   .REAL $81490fdaa2;    1.57079632673
948a 83 49 0f Two_PI    .REAL $83490fdaa2;    6.28318530694
948f 7f 00 00 Real_0_25 .REAL $7f00000000;    0.25000000000

9494 05       VAR_SIN   .BYTE $05
9495 84 e6 1a 2d 1b     .REAL $84e61a2d1b;  -14.38139067218
949a 86 28 07 fb f8     .REAL $862807fbf8;   42.00779712200
949f 87 99 68 89 01     .REAL $8799688901;  -76.70417025685
94a4 87 23 35 df e1     .REAL $872335dfe1;   81.60522368550
94a9 86 a5 5d e7 28     .REAL $86a55de728;  -41.34170210361
94ae 83 49 0f da a2     .REAL $83490fdaa2;    6.28318530694

              ; ****************
94b3            FUNC_ATN ; $94b3
              ; ****************

94b3 a5 68              LDA FAC1_SI
94b5 48                 PHA
94b6 10 03              BPL ATN_10
94b8 20 fa 8f           JSR OP_NEG
94bb a5 63    ATN_10    LDA FAC1_EX
94bd 48                 PHA
94be c9 81              CMP #$81
94c0 90 07              BCC ATN_20
94c2 a9 9c              LDA #<Real_1
94c4 a0 89              LDY #>Real_1
94c6 20 1e 8a           JSR AY_Div_FAC1
94c9 a9 e3    ATN_20    LDA #<VAR_ATN
94cb a0 94              LDY #>VAR_ATN
94cd 20 86 90           JSR Series_Evaluation
94d0 68                 PLA
94d1 c9 81              CMP #$81
94d3 90 07              BCC ATN_30
94d5 a9 85              LDA #<PI_Half
94d7 a0 94              LDY #>PI_Half
94d9 20 18 8a           JSR FAC1_Minus_AY
94dc 68       ATN_30    PLA
94dd 10 03              BPL ATN_Ret
94df 4c fa 8f           JMP OP_NEG
94e2 60       ATN_Ret   RTS ;Size   48 [FUNC_ATN]

              ; ***************
94e3            VAR_ATN ; $94e3
              ; ***************

94e3 0b                 .BYTE $0b
94e4 76 b3 83 bd d3     .REAL $76b383bdd3;   -0.00068479391
94e9 79 1e f4 a6 f5     .REAL $791ef4a6f5;    0.00485094216
94ee 7b 83 fc b0 10     .REAL $7b83fcb010;   -0.01611170184
94f3 7c 0c 1f 67 ca     .REAL $7c0c1f67ca;    0.03420963805
94f8 7c de 53 cb c1     .REAL $7cde53cbc1;   -0.05427913276
94fd 7d 14 64 70 4c     .REAL $7d1464704c;    0.07245719654
9502 7d b7 ea 51 7a     .REAL $7db7ea517a;   -0.08980239538
9507 7d 63 30 88 7e     .REAL $7d6330887e;    0.11093241343
950c 7e 92 44 99 3a     .REAL $7e9244993a;   -0.14283980767
9511 7e 4c cc 91 c7     .REAL $7e4ccc91c7;    0.19999912049
9516 7f aa aa aa 13     .REAL $7faaaaaa13;   -0.33333331568
951b 81 00 00 00 00     .REAL $8100000000;    1.00000000000

              ; *******************
9520            PRINT_USING ; $9520
              ; *******************

9520 a2 ff              LDX #$ff
9522 8e 36 01           STX ENDFD
9525 20 80 03           JSR CHRGET
9528 20 ef 77           JSR Eval_Expression
952b 20 dd 77           JSR Need_String     ; get using string
952e a5 66              LDA FAC1_M3
9530 48                 PHA
9531 a5 67              LDA FAC1_M4
9533 48                 PHA                 ; push using string address
9534 a0 02              LDY #2
9536 20 e7 42 PRUS_10   JSR Get_FAC1_M3_1
9539 88                 DEY
953a 99 3f 00           STA FNDPNT,Y        ; FNDPNT = using descriptor
953d d0 f7              BNE PRUS_10

953f 20 e7 42           JSR Get_FAC1_M3_1
9542 8d 35 01           STA LFOR            ; length of using string
9545 a8                 TAY
9546 f0 0b              BEQ PRUS_20         ; -> error:  empty using string

              ; look for '#' in using string

9548 88       PRUS_15   DEY
9549 20 d3 42           JSR FNDPNT_from_Bank_1
954c c9 23              CMP #'#'            ; digit
954e f0 06              BEQ PRUS_25
9550 98                 TYA
9551 d0 f5              BNE PRUS_15
9553 4c 6c 79 PRUS_20   JMP SYNTAX_ERROR

9556 a9 3b    PRUS_25   LDA #';'
9558 20 5e 79 PRUS_30   JSR Need_A
955b 84 77              STY TEMP_A
955d 8c 23 01           STY BNR
9560 20 ef 77           JSR Eval_Expression
9563 24 0f              BIT VALTYP
9565 10 39              BPL PRUS_65
9567 20 9f 97           JSR Init_Using
956a 20 f2 98           JSR Analyse_Using
956d ae 2b 01           LDX CHSN
9570 f0 15              BEQ PRUS_40
9572 a2 00              LDX #0
9574 38                 SEC
9575 ad 31 01           LDA CFORM
9578 e5 78              SBC KEYSIZ
957a 90 0b              BCC PRUS_40
957c a2 3d              LDX #'='
957e ec 2b 01           CPX CHSN
9581 d0 03              BNE PRUS_35
9583 4a                 LSR A
9584 69 00              ADC #0
9586 aa       PRUS_35   TAX
9587 a0 00    PRUS_40   LDY #0
9589 8a       PRUS_45   TXA
958a f0 05              BEQ PRUS_55
958c ca                 DEX
958d a9 20    PRUS_50   LDA #' '
958f d0 08              BNE PRUS_60         ; always

9591 c4 78    PRUS_55   CPY KEYSIZ
9593 b0 f8              BCS PRUS_50
9595 20 b7 03           JSR Get_INDEXA_1
9598 c8                 INY
9599 20 eb 98 PRUS_60   JSR Chrout_Using
959c d0 eb              BNE PRUS_45
959e f0 27              BEQ PRUS_85

95a0 20 42 8e PRUS_65   JSR Format_FAC1
95a3 a0 ff              LDY #$ff
95a5 c8       PRUS_70   INY
95a6 b9 00 01           LDA STACK,Y
95a9 d0 fa              BNE PRUS_70
95ab 98                 TYA
95ac 20 90 86           JSR Allocate_String_A
95af a0 00              LDY #0
95b1 8d 04 ff           STA MMU_LCRD
95b4 b9 00 01 PRUS_75   LDA STACK,Y
95b7 f0 05              BEQ PRUS_80
95b9 91 64              STA (FAC1_M1),Y
95bb c8                 INY
95bc d0 f6              BNE PRUS_75
95be 20 e3 86 PRUS_80   JSR Push_String_Descriptor
95c1 20 9f 97           JSR Init_Using
95c4 20 e7 95           JSR Print_Formatted
95c7 20 86 03 PRUS_85   JSR CHRGOT
95ca c9 2c              CMP #','
95cc f0 8a              BEQ PRUS_30
95ce 38                 SEC
95cf 66 77              ROR TEMP_A
95d1 20 f2 98           JSR Analyse_Using
95d4 68                 PLA
95d5 a8                 TAY
95d6 68                 PLA
95d7 20 85 87           JSR Free_String_AY
95da 20 86 03           JSR CHRGOT
95dd c9 3b              CMP #';'
95df f0 03              BEQ PRUS_90
95e1 4c 98 55           JMP Print_CR
95e4 4c 80 03 PRUS_90   JMP CHRGET

              ; ***********************
95e7            Print_Formatted ; $95e7
              ; ***********************

              ; STACK   has a number printed in standard format
              ; Y       read  index to STACK - standard number format
              ; X       write index to STACK - formatted number

              ; Input:  A=0 X=0 Y=0

95e7 8d 03 ff           STA MMU_LCRC        ; bank = 14
95ea ad 04 12           LDA PU_FILL
95ed 8d 33 01           STA BLFD
95f0 a9 ff              LDA #$ff
95f2 8d 32 01 PrFo_10   STA SNO             ; handle negative sign
95f5 4c fa 95           JMP PrFo_20

95f8 86 80    PrFo_15   STX DOSFLA          ; clear bit 7: decimal point present

95fa c4 78    PrFo_20   CPY KEYSIZ
95fc f0 33              BEQ PrFo_35
95fe b9 00 01           LDA STACK,Y         ; load next character
9601 c8                 INY                 ; increment index
9602 c9 20              CMP #' '            ; blank ?
9604 f0 f4              BEQ PrFo_20         ; -> skip
9606 c9 2d              CMP #'-'            ; minus sign ?
9608 f0 e8              BEQ PrFo_10         ; -> store it in SNO
960a c9 2e              CMP #'.'            ; decimal point ?
960c f0 ea              BEQ PrFo_15         ; store X in DOSFLA
960e c9 45              CMP #'E'            ; exponent ?
9610 f0 11              BEQ PrFo_25         ; -> look for exponent sign
9612 9d 00 01           STA STACK,X         ; copy to result
9615 8e 24 01           STX ENR             ; save X index
9618 e8                 INX                 ; increment write position
9619 24 80              BIT DOSFLA
961b 10 dd              BPL PrFo_20         ; ->loop
961d ee 2a 01           INC VN
9620 4c fa 95           JMP PrFo_20

9623 b9 00 01 PrFo_25   LDA STACK,Y         ; load char after 'E'
9626 c9 2d              CMP #'-'            ; negative exponent ?
9628 d0 03              BNE PrFo_30         ; -> no
962a 6e 28 01           ROR USGN            ; set bit 7 in flag USGN
962d c8       PrFo_30   INY                 ; position after exponent sign
962e 8c 29 01           STY UEXP            ; store index to exponent value

9631 a5 80    PrFo_35   LDA DOSFLA          ; decimal point there ?
9633 10 02              BPL PrFo_40         ; -> yes
9635 86 80              STX DOSFLA          ; add decimal point to end of number

9637 20 f2 98 PrFo_40   JSR Analyse_Using
963a ad 2c 01           LDA VF
963d c9 ff              CMP #$ff
963f f0 29              BEQ PrFo_50
9641 ad 2f 01           LDA FESP
9644 f0 3f              BEQ PrFo_70
9646 ad 29 01           LDA UEXP
9649 d0 12              BNE PrFo_45
964b ae 24 01           LDX ENR
964e 20 74 97           JSR Print_Using_Exp
9651 de 02 01           DEC STACK+2,X
9654 e8                 INX
9655 8e 29 01           STX UEXP
9658 20 fb 97           JSR Check_Zeroes
965b f0 25              BEQ PrFo_65
965d ac 2e 01 PrFo_45   LDY POSP
9660 d0 17              BNE PrFo_60
9662 ac 32 01           LDY SNO
9665 30 12              BMI PrFo_60
9667 ad 2c 01           LDA VF
966a f0 6a    PrFo_50   BEQ PrFo_82
966c ce 2c 01           DEC VF
966f d0 05              BNE PrFo_55
9671 ad 2d 01           LDA NF
9674 f0 60              BEQ PrFo_82
9676 ee 27 01 PrFo_55   INC SWE
9679 20 ee 96 PrFo_60   JSR Shift_Point
967c 20 b9 97           JSR Using_Round
967f 20 ee 96           JSR Shift_Point
9682 4c 1c 98 PrFo_65   JMP Output_Formatted
9685 ac 29 01 PrFo_70   LDY UEXP
9688 f0 16              BEQ PrFo_74
968a 85 78              STA KEYSIZ
968c 38                 SEC
968d 6e 30 01           ROR ETOF
9690 a4 80              LDY DOSFLA
9692 ad 28 01           LDA USGN
9695 10 06              BPL PrFo_72
9697 20 27 97           JSR ShPo_45
969a 4c a9 96           JMP PrFo_76
969d 20 08 97 PrFo_72   JSR ShPo_20
96a0 a4 80    PrFo_74   LDY DOSFLA
96a2 f0 05              BEQ PrFo_76
96a4 20 ff 97           JSR Leading_Zero
96a7 f0 06              BEQ PrFo_78
96a9 20 b9 97 PrFo_76   JSR Using_Round
96ac 4c b2 96           JMP PrFo_80
96af ce 2a 01 PrFo_78   DEC VN
96b2 38       PrFo_80   SEC
96b3 ad 2c 01           LDA VF
96b6 ed 2a 01           SBC VN
96b9 90 1b              BCC PrFo_82
96bb 8d 27 01           STA SWE
96be ac 2e 01           LDY POSP
96c1 d0 1b              BNE PrFo_86
96c3 ac 32 01           LDY SNO
96c6 30 16              BMI PrFo_86
96c8 a8                 TAY
96c9 f0 0b              BEQ PrFo_82
96cb 88                 DEY
96cc d0 13              BNE PrFo_88
96ce ad 2d 01           LDA NF
96d1 0d 2a 01           ORA VN
96d4 d0 ac              BNE PrFo_65
96d6 a9 2a    PrFo_82   LDA #'*'
96d8 20 eb 98 PrFo_84   JSR Chrout_Using
96db d0 fb              BNE PrFo_84
96dd 60                 RTS ;Size  247 [Print_Formatted]
96de a8       PrFo_86   TAY
96df f0 a1              BEQ PrFo_65
96e1 ad 2a 01 PrFo_88   LDA VN
96e4 d0 9c              BNE PrFo_65
96e6 ce 27 01           DEC SWE
96e9 e6 77              INC TEMP_A
96eb 4c 82 96           JMP PrFo_65

              ; *******************
96ee            Shift_Point ; $96ee
              ; *******************

96ee 38                 SEC
96ef ad 2c 01           LDA VF              ; chars before point
96f2 ed 2a 01           SBC VN              ; minus digits before point
96f5 f0 39              BEQ ShPo_Ret
96f7 a4 80              LDY DOSFLA          ; point position
96f9 90 16              BCC ShPo_25         ; -> more digits than chars
96fb 85 78              STA KEYSIZ          ; chars - digits
96fd cc 24 01 ShPo_10   CPY ENR             ; at end ?
9700 f0 02              BEQ ShPo_15         ; -> yes
9702 b0 01              BCS ShPo_17           ; -> Y is beyond
9704 c8       ShPo_15   INY                 ; Y = after point
9705 ee 2a 01 ShPo_17   INC VN              ; inc digits before point

              ; ***************
9708            ShPo_20 ; $9708
              ; ***************

9708 20 3d 97           JSR Adjust_PU_Exp   ; Format exponent
970b c6 78              DEC KEYSIZ
970d d0 ee              BNE ShPo_10         ; loop
970f f0 1d              BEQ ShPo_50         ; -> finish

9711 49 ff    ShPo_25   EOR #$ff
9713 69 01              ADC #1
9715 85 78              STA KEYSIZ          ; KEYSIZ = -A
9717 cc 23 01 ShPo_30   CPY BNR             ; Y = at begin ?
971a f0 07              BEQ ShPo_35         ; ->
971c 88                 DEY                 ; go backwards
971d ce 2a 01           DEC VN              ; decrement chars after point
9720 4c 25 97           JMP ShPo_40
9723 e6 77    ShPo_35   INC TEMP_A
9725 a9 80    ShPo_40   LDA #$80

              ; ***************
9727            ShPo_45 ; $9727
              ; ***************

9727 20 3f 97           JSR Adjust_PU_Exp_A
972a c6 78              DEC KEYSIZ
972c d0 e9              BNE ShPo_30
972e 84 80    ShPo_50   STY DOSFLA
9730 60       ShPo_Ret  RTS ;Size   10 [ShPo_45]

              ; ******************
9731            Toggle_0_9 ; $9731
              ; ******************

9731 d0 39              BNE APE_30
9733 49 09              EOR #9              ; '0' -> '9' or '9' -> '0'
9735 9d 00 01           STA STACK,X
9738 ca                 DEX
9739 ec 29 01           CPX UEXP
973c 60                 RTS ;Size   12 [Toggle_0_9]

              ; *********************
973d            Adjust_PU_Exp ; $973d
              ; *********************

973d a9 00              LDA #0

              ; ***********************
973f            Adjust_PU_Exp_A ; $973f
              ; ***********************

973f ae 29 01           LDX UEXP
9742 e8                 INX
9743 2c 30 01           BIT ETOF
9746 30 10              BMI APE_20
9748 4d 28 01           EOR USGN
974b f0 0b              BEQ APE_20
974d 20 82 97 APE_10    JSR Inc_Digit_X
9750 20 31 97           JSR Toggle_0_9
9753 b0 f8              BCS APE_10
9755 4c 5d 89           JMP Overflow_Error
9758 bd 00 01 APE_20    LDA STACK,X
975b de 00 01           DEC STACK,X
975e c9 30              CMP #'0'
9760 20 31 97           JSR Toggle_0_9
9763 b0 f3              BCS APE_20
9765 2c 30 01           BIT ETOF
9768 10 05              BPL APE_40
976a 84 80              STY DOSFLA
976c 68       APE_30    PLA
976d 68                 PLA
976e 60                 RTS ;Size   48 [Adjust_PU_Exp_A]
976f ad 28 01 APE_40    LDA USGN
9772 49 80              EOR #$80

              ; ***********************
9774            Print_Using_Exp ; $9774
              ; ***********************

9774 8d 28 01           STA USGN
9777 a9 30              LDA #'0'
9779 9d 01 01           STA STACK+1,X
977c a9 31              LDA #'1'
977e 9d 02 01           STA STACK+2,X
9781 60                 RTS ;Size   14 [Print_Using_Exp]

              ; *******************
9782            Inc_Digit_X ; $9782
              ; *******************

9782 bd 00 01           LDA STACK,X
9785 fe 00 01           INC STACK,X
9788 c9 39              CMP #'9'
978a 60                 RTS ;Size    9 [Inc_Digit_X]

              ; *******************
978b            Inc_Using_Y ; $978b
              ; *******************

978b 18                 CLC
978c c8                 INY
978d f0 05              BEQ IUY_10
978f cc 35 01           CPY LFOR
9792 90 04              BCC IUY_20
9794 a4 77    IUY_10    LDY TEMP_A
9796 d0 d4              BNE APE_30
9798 20 d3 42 IUY_20    JSR FNDPNT_from_Bank_1
979b ee 31 01           INC CFORM
979e 60                 RTS ;Size   20 [Inc_Using_Y]

              ; ******************
979f            Init_Using ; $979f
              ; ******************

              ; Initialize variables for formatted printing

              ; Output: A=0 X=0 Y=0

979f 20 81 87           JSR Free_String_FAC1
97a2 85 78              STA KEYSIZ
97a4 a2 0a              LDX #10
97a6 a9 00              LDA #0
97a8 9d 27 01 InUs_10   STA SWE,X
97ab ca                 DEX
97ac 10 fa              BPL InUs_10
97ae 8e 26 01           STX FLAG            ; = $ff
97b1 86 80              STX DOSFLA          ; = $ff
97b3 8e 25 01           STX DOLR            ; = $ff
97b6 aa                 TAX
97b7 a8                 TAY
97b8 60                 RTS ;Size   26 [Init_Using]

              ; *******************
97b9            Using_Round ; $97b9
              ; *******************

97b9 18                 CLC
97ba a5 80              LDA DOSFLA
97bc 6d 2d 01           ADC NF
97bf b0 39              BCS UsRo_Ret
97c1 38                 SEC
97c2 e5 77              SBC TEMP_A
97c4 90 34              BCC UsRo_Ret
97c6 cd 24 01           CMP ENR
97c9 f0 02              BEQ UsRo_10
97cb b0 2d              BCS UsRo_Ret
97cd cd 23 01 UsRo_10   CMP BNR
97d0 90 28              BCC UsRo_Ret
97d2 aa                 TAX
97d3 bd 00 01           LDA STACK,X         ; char after last printable
97d6 c9 35              CMP #'5'            ; less 5 ?
97d8 90 20              BCC UsRo_Ret        ; -> cut off
97da ec 23 01 UsRo_20   CPX BNR             ; at begin ?
97dd f0 0a              BEQ UsRo_30         ; -> store 1
97df ca                 DEX                 ; X = last printable position
97e0 20 82 97           JSR Inc_Digit_X     ; round up
97e3 8e 24 01           STX ENR
97e6 f0 f2              BEQ UsRo_20
97e8 60                 RTS ;Size   48 [Using_Round]
97e9 a9 31    UsRo_30   LDA #'1'            ; 0.5 - 0.9 -> round to 1
97eb 9d 00 01           STA STACK,X
97ee e8                 INX
97ef 86 80              STX DOSFLA
97f1 c6 77              DEC TEMP_A
97f3 10 05              BPL UsRo_Ret
97f5 e6 77              INC TEMP_A
97f7 ee 2a 01           INC VN
97fa 60       UsRo_Ret  RTS ;Size   66 [Using_Round]

              ; ********************
97fb            Check_Zeroes ; $97fb
              ; ********************

97fb a4 80              LDY DOSFLA          ; write position at start ?
97fd f0 17              BEQ UsZe_20           ; -> remove leading zeroes

              ; ********************
97ff            Leading_Zero ; $97ff
              ; ********************

97ff ac 23 01           LDY BNR             ; Y = begin

              ; ******************
9802            Using_Zero ; $9802
              ; ******************

9802 b9 00 01           LDA STACK,Y
9805 c9 30              CMP #'0'
9807 60                 RTS ;Size    6 [Using_Zero]

9808 e6 80    UsZe_10   INC DOSFLA
980a 20 3d 97           JSR Adjust_PU_Exp
980d ee 23 01           INC BNR
9810 cc 24 01           CPY ENR
9813 f0 e5              BEQ UsRo_Ret
9815 c8                 INY
9816 20 02 98 UsZe_20   JSR Using_Zero
9819 f0 ed              BEQ UsZe_10
981b 60                 RTS ;Size   26 [Using_Zero]

              ; ************************
981c            Output_Formatted ; $981c
              ; ************************

981c ad 25 01           LDA DOLR            ; dollar flag ?
981f 30 02              BMI OuFo_10         ; -> no $
9821 e6 77              INC TEMP_A
9823 ae 23 01 OuFo_10   LDX BNR             ; X = begin index number string
9826 ca                 DEX
9827 ac 34 01           LDY BEGFD           ; Y = begin index format string
982a 20 d3 42 OuFo_12   JSR FNDPNT_from_Bank_1
982d c8                 INY                 ; advance index to number string
982e c9 2c              CMP #','
9830 d0 14              BNE OuFo_16         ; -> not a comma
9832 2c 26 01           BIT FLAG            ; comma flag ?
9835 30 09              BMI OuFo_14         ; -> don't print commas
9837 8d 03 ff           STA MMU_LCRC
983a ad 05 12           LDA PU_COMMA          ; load comma separator symbol
983d 4c ab 98           JMP OuFo_38         ; -> print it

9840 ad 33 01 OuFo_14   LDA BLFD            ; load fill character
9843 4c ab 98           JMP OuFo_38         ; -> print it

9846 c9 2e    OuFo_16   CMP #'.'
9848 d0 09              BNE OuFo_18         ; -> no dot
984a 8d 03 ff           STA MMU_LCRC
984d ad 06 12           LDA PU_DOT
9850 4c ab 98           JMP OuFo_38         ; -> print dot

9853 c9 2b    OuFo_18   CMP #'+'
9855 f0 3b              BEQ OuFo_28         ; -> print + or -
9857 c9 2d              CMP #'-'
9859 f0 32              BEQ OuFo_26         ; -> print blank or -
985b c9 5e              CMP #'^'
985d d0 69              BNE OuFo_44
985f a9 45              LDA #'E'            ; -> print start of exponent
9861 20 eb 98           JSR Chrout_Using
9864 ac 29 01           LDY UEXP
9867 20 02 98           JSR Using_Zero
986a d0 06              BNE OuFo_20
986c c8                 INY
986d 20 02 98           JSR Using_Zero
9870 f0 07              BEQ OuFo_22
9872 a9 2d    OuFo_20   LDA #'-'
9874 2c 28 01           BIT USGN
9877 30 02              BMI OuFo_24
9879 a9 2b    OuFo_22   LDA #'+'
987b 20 eb 98 OuFo_24   JSR Chrout_Using    ; print sign of exponent
987e ae 29 01           LDX UEXP
9881 bd 00 01           LDA STACK,X
9884 20 eb 98           JSR Chrout_Using
9887 ac 36 01           LDY ENDFD
988a 4c a1 98           JMP OuFo_32
988d ad 32 01 OuFo_26   LDA SNO
9890 30 ae              BMI OuFo_14
9892 ad 32 01 OuFo_28   LDA SNO
9895 4c ab 98           JMP OuFo_38         ; -> print sign

9898 a5 77    OuFo_30   LDA TEMP_A
989a d0 18              BNE OuFo_42
989c ec 24 01           CPX ENR
989f f0 05              BEQ OuFo_34
98a1 e8       OuFo_32   INX
98a2 bd 00 01           LDA STACK,X
98a5 2c                 BIT
98a6 a9 30    OuFo_34   LDA #'0'
98a8 4e 26 01 OuFo_36   LSR FLAG
98ab 20 eb 98 OuFo_38   JSR Chrout_Using
98ae f0 03              BEQ OuFo_40
98b0 4c 2a 98           JMP OuFo_12
98b3 60       OuFo_40   RTS ;Size  152 [Output_Formatted]

98b4 c6 77    OuFo_42   DEC TEMP_A
98b6 ad 25 01           LDA DOLR
98b9 30 eb              BMI OuFo_34
98bb 20 6e aa           JSR Output_Comma
98be ea                 NOP
98bf 8d 03 ff           STA MMU_LCRC
98c2 ad 07 12           LDA PU_MONEY          ; currency symbol
98c5 4c a8 98           JMP OuFo_36

98c8 ad 27 01 OuFo_44   LDA SWE
98cb f0 cb              BEQ OuFo_30
98cd ce 27 01           DEC SWE
98d0 f0 03    OuFo_46   BEQ OuFo_48
98d2 4c 40 98           JMP OuFo_14
98d5 ad 2e 01 OuFo_48   LDA POSP
98d8 30 f6              BMI OuFo_46
98da 20 d3 42 OuFo_50   JSR FNDPNT_from_Bank_1
98dd c9 2c              CMP #','
98df d0 ac              BNE OuFo_26
98e1 ad 33 01           LDA BLFD
98e4 20 eb 98           JSR Chrout_Using
98e7 c8                 INY
98e8 4c da 98           JMP OuFo_50

              ; ********************
98eb            Chrout_Using ; $98eb
              ; ********************

98eb 20 0c 56           JSR Print_Char
98ee ce 31 01           DEC CFORM
98f1 60                 RTS ;Size    7 [Chrout_Using]

              ; *********************
98f2            Analyse_Using ; $98f2
              ; *********************

98f2 ac 36 01           LDY ENDFD
98f5 20 8b 97 AnUs_10   JSR Inc_Using_Y
98f8 20 a7 99           JSR Is_Format_Control_Char
98fb d0 14              BNE AnUs_25
98fd 8c 34 01           STY BEGFD           ; index to start of format
9900 90 1a              BCC AnUs_35         ; -> char is '#'
9902 aa                 TAX                 ; save char
9903 20 8b 97 AnUs_15   JSR Inc_Using_Y
9906 b0 05              BCS AnUs_20         ; -> end of format
9908 20 af 99           JSR Is_Dot_Align
990b f0 0a              BEQ AnUs_30
990d ac 34 01 AnUs_20   LDY BEGFD
9910 8a                 TXA                 ; restore char
9911 20 0c 56 AnUs_25   JSR Print_Char      ; print char from format string
9914 4c f5 98           JMP AnUs_10         ; -> loop

9917 b0 ea    AnUs_30   BCS AnUs_15
9919 ac 34 01           LDY BEGFD
991c a6 77    AnUs_35   LDX TEMP_A
991e d0 7a              BNE IFS_20
9920 8e 31 01           STX CFORM
9923 88                 DEY
9924 ce 31 01 AnUs_40   DEC CFORM
9927 20 8b 97 AnUs_45   JSR Inc_Using_Y
992a b0 74              BCS IFS_40
992c c9 2c              CMP #','
992e f0 f7              BEQ AnUs_45
9930 20 7e 99           JSR Is_Format_Sign
9933 90 ef              BCC AnUs_40
9935 c9 2e              CMP #'.'
9937 d0 08              BNE AnUs_55
9939 e8                 INX
993a e0 02              CPX #2
993c 90 e9              BCC AnUs_45
993e 4c 6c 79 AnUs_50   JMP SYNTAX_ERROR
9941 20 b3 99 AnUs_55   JSR Is_Align
9944 d0 0b              BNE AnUs_65
9946 90 03              BCC AnUs_60
9948 8d 2b 01           STA CHSN
994b fe 2c 01 AnUs_60   INC VF,X
994e 4c 27 99           JMP AnUs_45
9951 c9 24    AnUs_65   CMP #'$'
9953 d0 0f              BNE AnUs_70
9955 2c 25 01           BIT DOLR
9958 10 f1              BPL AnUs_60
995a 18                 CLC
995b 6e 25 01           ROR DOLR
995e ce 2c 01           DEC VF
9961 4c 4b 99           JMP AnUs_60
9964 c9 5e    AnUs_70   CMP #'^'
9966 d0 16              BNE Is_Format_Sign
9968 a2 02              LDX #2
996a 20 8b 97 AnUs_75   JSR Inc_Using_Y
996d b0 cf              BCS AnUs_50
996f c9 5e              CMP #'^'
9971 d0 cb              BNE AnUs_50
9973 ca                 DEX
9974 10 f4              BPL AnUs_75
9976 ee 2f 01           INC FESP
9979 20 8b 97           JSR Inc_Using_Y
997c b0 22              BCS IFS_40

              ; **********************
997e            Is_Format_Sign ; $997e
              ; **********************

997e c9 2b              CMP #'+'
9980 d0 19              BNE IFS_30
9982 ad 32 01           LDA SNO
9985 10 05              BPL IFS_10
9987 a9 2b              LDA #'+'
9989 8d 32 01           STA SNO
998c ad 2e 01 IFS_10    LDA POSP
998f d0 ad              BNE AnUs_50
9991 6e 2e 01           ROR POSP
9994 8c 36 01           STY ENDFD
9997 ee 31 01           INC CFORM
999a 60       IFS_20    RTS ;Size   29 [Is_Format_Sign]
999b c9 2d    IFS_30    CMP #'-'
999d f0 ed              BEQ IFS_10
999f 38                 SEC
99a0 8c 36 01 IFS_40    STY ENDFD
99a3 ce 36 01           DEC ENDFD
99a6 60                 RTS ;Size   41 [Is_Format_Sign]

              ; ******************************
99a7            Is_Format_Control_Char ; $99a7
              ; ******************************

99a7 c9 2b              CMP #'+'
99a9 f0 15              BEQ Alig_Ret
99ab c9 2d              CMP #'-'
99ad f0 11              BEQ Alig_Ret

              ; ********************
99af            Is_Dot_Align ; $99af
              ; ********************

99af c9 2e              CMP #'.'
99b1 f0 0d              BEQ Alig_Ret

              ; ****************
99b3            Is_Align ; $99b3
              ; ****************

99b3 c9 3d              CMP #'='            ; align left
99b5 f0 09              BEQ Alig_Ret
99b7 c9 3e              CMP #'>'            ; align right
99b9 f0 05              BEQ Alig_Ret
99bb c9 23              CMP #'#'            ; digit
99bd d0 01              BNE Alig_Ret
99bf 18                 CLC
99c0 60       Alig_Ret  RTS ;Size   14 [Is_Align]

              ; ******************
99c1            FUNC_INSTR ; $99c1
              ; ******************

99c1 a5 66              LDA FAC1_M3
99c3 8d d6 03           STA TMPDES
99c6 a5 67              LDA FAC1_M4
99c8 8d d7 03           STA TMPDES+1        ; TMPDES = address of descriptor
99cb 20 ef 77           JSR Eval_Expression
99ce 20 dd 77           JSR Need_String
99d1 a5 66              LDA FAC1_M3
99d3 8d d8 03           STA TMPDES+2
99d6 a5 67              LDA FAC1_M4
99d8 8d d9 03           STA TMPDES+3        ; TMPDES+2 = address of search descriptor
99db a2 01              LDX #1
99dd 86 67              STX FAC1_M4         ; default start index
99df 20 86 03           JSR CHRGOT
99e2 c9 29              CMP #')'
99e4 f0 03              BEQ FUIN_10         ; -> end of arguments
99e6 20 09 88           JSR Comma_And_Byte
99e9 20 56 79 FUIN_10   JSR Need_Right_Par
99ec a6 67              LDX FAC1_M4         ; start index (1-255)
99ee d0 03              BNE FUIN_20         ; must not be zero
99f0 4c 28 7d           JMP Error_Illegal_Quantity
99f3 ca       FUIN_20   DEX
99f4 86 63              STX FAC1_EX         ; start index (0-254)
99f6 a2 03              LDX #3
99f8 bd d6 03 FUIN_30   LDA TMPDES,X        ; copy string addresses
99fb 95 59              STA FACTPA,X        ; FACTPA = TMPDES
99fd ca                 DEX
99fe 10 f8              BPL FUIN_30

              ; load descriptors

9a00 a0 02              LDY #2
9a02 a9 59    FUIN_40   LDA #FACTPA
9a04 20 ab 03           JSR Fetch_1         ; next byte descriptor
9a07 99 5d 00           STA DESCA,Y         ; 3 bytes
9a0a a9 5b              LDA #FACTPA+2
9a0c 20 ab 03           JSR Fetch_1         ; next byte of search descriptor
9a0f 99 60 00           STA TENEXP,Y        ; 3 bytes
9a12 88                 DEY
9a13 10 ed              BPL FUIN_40

9a15 a5 60              LDA TENEXP          ; length of search string
9a17 f0 3b              BEQ FUIN_90         ; -> empty search string: not found
9a19 a9 00    FUIN_50   LDA #0              ; reset search index
9a1b 85 64              STA FAC1_M1
9a1d 18                 CLC
9a1e a5 60              LDA TENEXP          ; A = length of search string
9a20 65 63              ADC FAC1_EX         ; A += start index
9a22 b0 30              BCS FUIN_90         ; -> index overflow
9a24 c5 5d              CMP DESCA           ; compare with length of string
9a26 90 02              BCC FUIN_60         ; -> continue
9a28 d0 2a              BNE FUIN_90         ; -> beyond end of string
9a2a a4 64    FUIN_60   LDY FAC1_M1         ; search index
9a2c c4 60              CPY TENEXP          ; compare with search length
9a2e f0 1f              BEQ FUIN_80         ; -> found!
9a30 98                 TYA
9a31 18                 CLC
9a32 65 63              ADC FAC1_EX         ; position = search index + search start
9a34 a8                 TAY
9a35 a9 5e              LDA #DESCA+1        ; load next char string
9a37 20 ab 03           JSR Fetch_1
9a3a 85 79              STA SYNTMP          ; save it
9a3c a4 64              LDY FAC1_M1
9a3e a9 61              LDA #TENEXP+1       ; load next char of search string
9a40 20 ab 03           JSR Fetch_1
9a43 c5 79              CMP SYNTMP          ; compare string char with search char
9a45 f0 04              BEQ FUIN_70         ; -> continue if equal
9a47 e6 63              INC FAC1_EX         ; increment search index
9a49 d0 ce              BNE FUIN_50         ; always

9a4b e6 64    FUIN_70   INC FAC1_M1         ; increment search index
9a4d d0 db              BNE FUIN_60         ; branch always

9a4f e6 63    FUIN_80   INC FAC1_EX         ; add 1 for range correction
9a51 a5 63              LDA FAC1_EX         ; load it as result
9a53 2c                 BIT
9a54 a9 00    FUIN_90   LDA #0
9a56 8d 03 ff           STA MMU_LCRC
9a59 48                 PHA                 ; push result
9a5a ad d8 03           LDA TMPDES+2
9a5d ac d9 03           LDY TMPDES+3
9a60 20 85 87           JSR Free_String_AY  ; free search pattern
9a63 8d 03 ff           STA MMU_LCRC
9a66 ad d6 03           LDA TMPDES
9a69 ac d7 03           LDY TMPDES+1
9a6c 20 85 87           JSR Free_String_AY  ; free string
9a6f 68                 PLA                 ; pop result
9a70 a8                 TAY
9a71 4c d4 84           JMP Y_To_Real

              ; *******************
9a74            Sin_Cos_Ang ; $9a74
              ; *******************

              ; Compute sine and cosine values via lookup table and interpolation
              ; The argument unit is [degree]
              ; The result unit is scaled [$000 - $ffff] for [0.0 - 1.0]

              ; Input : XPOS,Y   low  byte
              ;         XPOS+1,Y high byte

              ; Output: SINVAL   SIN low  byte
              ;         SINVAL+1 SIN high byte
              ;         SINVAL+2 COS low  byte
              ;         SINVAL+3 COS high byte

9a74 20 8f 9d           JSR LAY_XPOS_Y      ; A/Y = XPOS,Y

              ; ******************
9a77            Sin_Cos_AY ; $9a77
              ; ******************

9a77 a2 00              LDX #0
9a79 e8       SCAY_10   INX                 ; X = 1 + (A/Y) / 90
9a7a 38                 SEC
9a7b e9 5a              SBC #90
9a7d b0 fa              BCS SCAY_10
9a7f 88                 DEY
9a80 10 f7              BPL SCAY_10
9a82 8e 49 11           STX ANGSGN          ; 1 + (A/Y) / 90
9a85 48                 PHA                 ; push A
9a86 69 5a              ADC #90
9a88 20 94 9a           JSR SCAY_20         ; COS(val)
9a8b 68                 PLA                 ; pull A
9a8c 18                 CLC
9a8d 49 ff              EOR #$ff
9a8f 69 01              ADC #1              ; negate A
9a91 ce 49 11           DEC ANGSGN          ; quadrant = (A/Y) / 90

              ; *******
9a94            SCAY_20
              ; *******

9a94 a2 ff              LDX #$ff            ; start loop with X=0
9a96 e8       SCAY_30   INX
9a97 38                 SEC
9a98 e9 0a              SBC #10
9a9a b0 fa              BCS SCAY_30
9a9c 69 0a              ADC #10
9a9e 85 8e              STA VTEMPA          ; A = angle % 10
9aa0 8a                 TXA                 ; X = angle / 10
9aa1 0a                 ASL A               ; X *= 2
9aa2 aa                 TAX
9aa3 bd 2a 9f           LDA angval+1,X
9aa6 bc 29 9f           LDY angval,X        ; A/Y = SIN(X)  X unit = [10 deg]
9aa9 18       SCAY_40   CLC
9aaa c6 8e              DEC VTEMPA
9aac 30 0c              BMI SCAY_50
9aae 7d 3e 9f           ADC incval+1,X      ; linear interpolation
9ab1 48                 PHA
9ab2 98                 TYA
9ab3 7d 3d 9f           ADC incval,X
9ab6 a8                 TAY
9ab7 68                 PLA
9ab8 90 ef              BCC SCAY_40         ; always

9aba 48       SCAY_50   PHA
9abb a2 00              LDX #0
9abd ad 49 11           LDA ANGSGN          ; quadrant
9ac0 4a                 LSR A
9ac1 b0 02              BCS SCAY_60         ; -> odd quadrant
9ac3 a2 02              LDX #2
9ac5 68       SCAY_60   PLA
9ac6 9d 4a 11           STA SINVAL,X        ; result low
9ac9 98                 TYA
9aca 9d 4b 11           STA SINVAL+1,X      ; result high
9acd 60                 RTS ;Size   58 [SCAY_20]

              ; *****************
9ace            LAY_SIN_X ; $9ace
              ; *****************

9ace a0 19              LDY #SINVAL-XPOS    ; $19
9ad0 90 02              BCC LSIN_10
9ad2 a0 1b              LDY #COSVAL-XPOS    ; $1b
9ad4 ad 49 11 LSIN_10   LDA ANGSGN          ; quadrant
9ad7 69 02              ADC #2
9ad9 4a                 LSR A
9ada 4a                 LSR A
9adb 08                 PHP
9adc 20 8f 9d           JSR LAY_XPOS_Y      ; load SIN or COS to AY/
9adf c0 ff              CPY #$ff
9ae1 90 07              BCC LSIN_20
9ae3 8a                 TXA
9ae4 a8                 TAY
9ae5 20 8f 9d           JSR LAY_XPOS_Y      ; load angle to A/Y
9ae8 b0 03              BCS LSIN_30         ; always

9aea 20 ae 9d LSIN_20   JSR LAY_MUL_X       ; scale
9aed 28       LSIN_30   PLP
9aee b0 1b              BCS ANDI_Ret
9af0 4c 9e 9d           JMP LABS_10

              ; ****************
9af3            ANG_DIST ; $9af3
              ; ****************

9af3 8d 4e 11           STA ANGCNT
9af6 a2 23              LDX #XRADIUS-XPOS   ; $23
9af8 0e 4e 11 ANDI_10   ASL ANGCNT
9afb 20 ce 9a           JSR LAY_SIN_X
9afe 9d 31 11           STA XPOS,X
9b01 98                 TYA
9b02 9d 32 11           STA XPOS+1,X
9b05 e8                 INX
9b06 e8                 INX
9b07 e0 2b              CPX #ANGBEG-XPOS    ; $2b
9b09 90 ed              BCC ANDI_10
9b0b 60       ANDI_Ret  RTS ;Size   25 [ANG_DIST]

              ; *****************
9b0c            FUNC_RDOT ; $9b0c
              ; *****************

9b0c 20 f7 87           JSR Eval_Byte
9b0f e0 02              CPX #2
9b11 90 10              BCC RDOT_30
9b13 f0 03              BEQ RDOT_10
9b15 4c 28 7d           JMP Error_Illegal_Quantity
9b18 20 49 9c RDOT_10   JSR Get_Pixel
9b1b a8                 TAY
9b1c 90 02              BCC RDOT_20
9b1e a0 00              LDY #0
9b20 4c d4 84 RDOT_20   JMP Y_To_Real
9b23 8a       RDOT_30   TXA
9b24 0a                 ASL A
9b25 aa                 TAX
9b26 bd 31 11           LDA XPOS,X
9b29 a8                 TAY
9b2a bd 32 11           LDA XPOS+1,X
9b2d 4c 3c 79           JMP Integer_To_Real

              ; *****************
9b30            Draw_Line ; $9b30
              ; *****************

9b30 a2 02              LDX #2
9b32 a0 06              LDY #6
9b34 a9 00    DrLi_10   LDA #0
9b36 9d 3d 11           STA XSGN,X
9b39 9d 3e 11           STA XSGN+1,X
9b3c 20 99 9d           JSR LAY_ABS_DIFF
9b3f 10 08              BPL DrLi_20
9b41 de 3d 11           DEC XSGN,X
9b44 de 3e 11           DEC XSGN+1,X
9b47 d0 0b              BNE DrLi_40
9b49 c9 00    DrLi_20   CMP #0
9b4b d0 04              BNE DrLi_30
9b4d c0 00              CPY #0
9b4f f0 03              BEQ DrLi_40
9b51 fe 3d 11 DrLi_30   INC XSGN,X
9b54 9d 39 11 DrLi_40   STA XABS,X
9b57 0a                 ASL A
9b58 9d 41 11           STA FCT,X
9b5b 98                 TYA
9b5c 9d 3a 11           STA XABS+1,X
9b5f 2a                 ROL A
9b60 9d 42 11           STA FCT+1,X
9b63 ca                 DEX
9b64 ca                 DEX
9b65 a0 04              LDY #4
9b67 e0 00              CPX #0
9b69 f0 c9              BEQ DrLi_10
9b6b a2 0a              LDX #10
9b6d a0 08              LDY #8
9b6f 20 7c 9d           JSR LAY_Y_SUB_X
9b72 a9 00              LDA #0
9b74 2a                 ROL A
9b75 2a                 ROL A
9b76 8d 47 11           STA LESSER
9b79 49 02              EOR #%0000 0010 ; $02
9b7b 8d 48 11           STA GREATR
9b7e 18                 CLC
9b7f a9 10              LDA #16
9b81 6d 47 11           ADC LESSER
9b84 a8                 TAY
9b85 48                 PHA
9b86 49 02              EOR #%0000 0010 ; $02
9b88 aa                 TAX
9b89 20 7c 9d           JSR LAY_Y_SUB_X
9b8c 9d 31 11           STA XPOS,X
9b8f 98                 TYA
9b90 9d 32 11           STA XPOS+1,X
9b93 68                 PLA
9b94 a8                 TAY
9b95 18                 CLC
9b96 a9 08              LDA #8
9b98 6d 48 11           ADC GREATR
9b9b aa                 TAX
9b9c 20 7c 9d           JSR LAY_Y_SUB_X
9b9f 8d 45 11           STA ERRVAL
9ba2 8c 46 11           STY ERRVAL+1
9ba5 20 fb 9b DrLi_50   JSR Double_Pixel
9ba8 ac 48 11           LDY GREATR
9bab 38                 SEC
9bac b9 39 11           LDA XABS,Y
9baf e9 01              SBC #1
9bb1 99 39 11           STA XABS,Y
9bb4 b0 0b              BCS DrLi_60
9bb6 b9 3a 11           LDA XABS+1,Y
9bb9 e9 00              SBC #0
9bbb 99 3a 11           STA XABS+1,Y
9bbe b0 01              BCS DrLi_60
9bc0 60                 RTS ;Size  145 [Draw_Line]
9bc1 ae 47 11 DrLi_60   LDX LESSER
9bc4 ad 46 11           LDA ERRVAL+1
9bc7 30 06              BMI DrLi_70
9bc9 20 ea 9b           JSR Add_Increment
9bcc ae 48 11           LDX GREATR
9bcf 18       DrLi_70   CLC
9bd0 ad 45 11           LDA ERRVAL
9bd3 7d 41 11           ADC FCT,X
9bd6 8d 45 11           STA ERRVAL
9bd9 ad 46 11           LDA ERRVAL+1
9bdc 7d 42 11           ADC FCT+1,X
9bdf 8d 46 11           STA ERRVAL+1
9be2 ae 48 11           LDX GREATR
9be5 20 ea 9b           JSR Add_Increment
9be8 f0 bb              BEQ DrLi_50

              ; *********************
9bea            Add_Increment ; $9bea
              ; *********************

9bea a0 02              LDY #2
9bec 18                 CLC
9bed bd 31 11 AdIn_10   LDA XPOS,X
9bf0 7d 3d 11           ADC XSGN,X
9bf3 9d 31 11           STA XPOS,X
9bf6 e8                 INX
9bf7 88                 DEY
9bf8 d0 f3              BNE AdIn_10
9bfa 60                 RTS ;Size   17 [Add_Increment]

              ; ********************
9bfb            Double_Pixel ; $9bfb
              ; ********************

9bfb ad 6c 11           LDA FILFLG
9bfe 0d 6b 11           ORA WIDTH
9c01 f0 16              BEQ Set_Pixel
9c03 ee 31 11           INC XPOS            ; ++XPOS
9c06 d0 03              BNE DoPi_10
9c08 ee 32 11           INC XPOS+1
9c0b 20 19 9c DoPi_10   JSR Set_Pixel       ; set neighbour pixel
9c0e ae 31 11           LDX XPOS
9c11 d0 03              BNE DoPi_20
9c13 ce 32 11           DEC XPOS+1          ; --XPOS
9c16 ce 31 11 DoPi_20   DEC XPOS

              ; *****************
9c19            Set_Pixel ; $9c19
              ; *****************

9c19 20 24 9d           JSR LXY_ROW_COL
9c1c b0 24              BCS SePi_30
9c1e 20 70 9c           JSR Color_Character
9c21 20 e8 9c           JSR getpos_10
9c24 8d 6d 11           STA BITMSK
9c27 b1 8c              LDA (GRAPNT),Y
9c29 0d 6d 11           ORA BITMSK
9c2c 24 d8              BIT GRAPHM
9c2e 10 13              BPL SePi_40
9c30 48                 PHA
9c31 a6 83              LDX COLSEL
9c33 ad 6d 11           LDA BITMSK
9c36 3d 25 9f           AND colval,X
9c39 8d 6d 11           STA BITMSK
9c3c 68                 PLA
9c3d 4d 6d 11 SePi_10   EOR BITMSK
9c40 91 8c    SePi_20   STA (GRAPNT),Y
9c42 60       SePi_30   RTS ;Size   42 [Set_Pixel]
9c43 a6 83    SePi_40   LDX COLSEL
9c45 d0 f9              BNE SePi_20
9c47 f0 f4              BEQ SePi_10

              ; *****************
9c49            Get_Pixel ; $9c49
              ; *****************

9c49 20 e3 9c           JSR getpos
9c4c b0 21              BCS GePi_Ret
9c4e 8d 6d 11           STA BITMSK
9c51 b1 8c              LDA (GRAPNT),Y
9c53 2d 6d 11           AND BITMSK
9c56 2a       GePi_10   ROL A
9c57 ca                 DEX
9c58 10 fc              BPL GePi_10
9c5a 2a                 ROL A
9c5b 24 8b              BIT STOPNB
9c5d 30 06              BMI GePi_20
9c5f 29 03              AND #%0000 0011 ; $03
9c61 c5 83              CMP COLSEL
9c63 18                 CLC
9c64 60                 RTS ;Size   28 [Get_Pixel]
9c65 18       GePi_20   CLC
9c66 29 03              AND #%0000 0011 ; $03
9c68 f0 03              BEQ GePi_30
9c6a a2 00              LDX #0
9c6c 60                 RTS ;Size   36 [Get_Pixel]
9c6d a2 ff    GePi_30   LDX #$ff
9c6f 60       GePi_Ret  RTS ;Size   39 [Get_Pixel]

              ; ***********************
9c70            Color_Character ; $9c70
              ; ***********************

9c70 bd 33 c0           LDA E_40_Line_Lo,X ; same values for color RAM
9c73 85 8c              STA GRAPNT
9c75 bd ca 9c           LDA ColRAM_Line_Hi,X
9c78 85 8d              STA GRAPNT+1
9c7a a5 83              LDA COLSEL
9c7c d0 08              BNE CCha_10
9c7e ad e2 03           LDA FG_BG
9c81 24 d8              BIT GRAPHM
9c83 10 08              BPL CCha_20
9c85 60                 RTS ;Size   22 [Color_Character]
9c86 c9 02    CCha_10   CMP #2
9c88 d0 10              BNE CCha_30
9c8a ad e3 03           LDA FG_MC1
9c8d 29 0f    CCha_20   AND #%0000 1111 ; $0f
9c8f 85 77              STA TEMP_A
9c91 b1 8c              LDA (GRAPNT),Y
9c93 29 f0              AND #%1111 0000 ; $f0
9c95 05 77              ORA TEMP_A
9c97 91 8c              STA (GRAPNT),Y
9c99 60                 RTS ;Size   42 [Color_Character]
9c9a b0 10    CCha_30   BCS CCha_40
9c9c ad e2 03           LDA FG_BG
9c9f 29 f0              AND #%1111 0000 ; $f0
9ca1 85 77              STA TEMP_A
9ca3 b1 8c              LDA (GRAPNT),Y
9ca5 29 0f              AND #%0000 1111 ; $0f
9ca7 05 77              ORA TEMP_A
9ca9 91 8c              STA (GRAPNT),Y
9cab 60                 RTS ;Size   60 [Color_Character]
9cac a5 8d    CCha_40   LDA GRAPNT+1
9cae 29 03              AND #%0000 0011 ; $03
9cb0 09 d8              ORA #%1101 1000 ; $d8
9cb2 85 8d              STA GRAPNT+1
9cb4 a9 00              LDA #0
9cb6 8d 00 ff           STA MMU_CR
9cb9 78                 SEI
9cba a5 01              LDA R8502
9cbc 48                 PHA
9cbd 29 fe              AND #%1111 1110 ; $fe
9cbf 85 01              STA R8502
9cc1 a5 85              LDA MULCO2
9cc3 91 8c              STA (GRAPNT),Y
9cc5 68                 PLA
9cc6 85 01              STA R8502
9cc8 58                 CLI
9cc9 60                 RTS ;Size   90 [Color_Character]

              ; **********************
9cca            ColRAM_Line_Hi ; $9cca
              ; **********************

9cca 1c 1c 1c           .BYTE $1c,$1c,$1c,$1c,$1c ; line  0 -  4
9ccf 1c 1c 1d           .BYTE $1c,$1c,$1d,$1d,$1d ; line  5 -  9
9cd4 1d 1d 1d           .BYTE $1d,$1d,$1d,$1e,$1e ; line 10 - 14
9cd9 1e 1e 1e           .BYTE $1e,$1e,$1e,$1e,$1e ; line 15 - 19
9cde 1f 1f 1f           .BYTE $1f,$1f,$1f,$1f,$1f ; line 20 - 24

              ; **************
9ce3            getpos ; $9ce3
              ; **************

9ce3 20 24 9d           JSR LXY_ROW_COL
9ce6 b0 33              BCS getpos_30

              ; *****************
9ce8            getpos_10 ; $9ce8
              ; *****************

9ce8 98                 TYA
9ce9 18                 CLC
9cea 7d 33 c0           ADC E_40_Line_Lo,X
9ced 85 8c              STA GRAPNT
9cef bd 4c c0           LDA E_40_Line_Hi,X
9cf2 69 00              ADC #0
9cf4 06 8c              ASL GRAPNT
9cf6 2a                 ROL A
9cf7 06 8c              ASL GRAPNT
9cf9 2a                 ROL A
9cfa 06 8c              ASL GRAPNT
9cfc 2a                 ROL A
9cfd 85 8d              STA GRAPNT+1
9cff ad 33 11           LDA YPOS
9d02 29 07              AND #%0000 0111 ; $07
9d04 a8                 TAY
9d05 ad 31 11           LDA XPOS
9d08 24 d8              BIT GRAPHM
9d0a 08                 PHP
9d0b 10 01              BPL getpos_20
9d0d 0a                 ASL A
9d0e 29 07    getpos_20 AND #%0000 0111 ; $07
9d10 aa                 TAX
9d11 bd 1c 9d           LDA rbits,X
9d14 28                 PLP
9d15 10 04              BPL getpos_30
9d17 e8                 INX
9d18 1d 1c 9d           ORA rbits,X
9d1b 60       getpos_30 RTS ;Size   52 [getpos_10]

9d1c 80 40 20 rbits     .BYTE $80,$40,$20,$10,$08,$04,$02,$01

              ; *******************
9d24            LXY_ROW_COL ; $9d24
              ; *******************

9d24 ad 32 11           LDA XPOS+1
9d27 4a                 LSR A
9d28 d0 1e              BNE LXYRC_20
9d2a ad 31 11           LDA XPOS
9d2d 6a                 ROR A
9d2e 4a                 LSR A
9d2f 24 d8              BIT GRAPHM
9d31 30 01              BMI LXYRC_10
9d33 4a                 LSR A
9d34 a8       LXYRC_10  TAY
9d35 c0 28              CPY #40             ; max columns
9d37 b0 0f              BCS LXYRC_20
9d39 ad 34 11           LDA YPOS+1
9d3c d0 0a              BNE LXYRC_20
9d3e ad 33 11           LDA YPOS
9d41 4a                 LSR A
9d42 4a                 LSR A
9d43 4a                 LSR A
9d44 aa                 TAX
9d45 c9 19              CMP #25             ; max rows
9d47 60                 RTS ;Size   36 [LXY_ROW_COL]
9d48 38       LXYRC_20  SEC
9d49 60                 RTS ;Size   38 [LXY_ROW_COL]

              ; ****************
9d4a            Scale_XY ; $9d4a
              ; ****************

9d4a ad 6a 11           LDA SCALEM
9d4d f0 17              BEQ ScXY_Ret
9d4f a5 87              LDA SCALE_X
9d51 a4 88              LDY SCALE_X+1
9d53 20 5a 9d           JSR ScXY_10
9d56 a5 89              LDA SCALE_Y
9d58 a4 8a              LDY SCALE_Y+1

              ; ***************
9d5a            ScXY_10 ; $9d5a
              ; ***************

9d5a 20 ae 9d           JSR LAY_MUL_X
9d5d 9d 31 11           STA XPOS,X
9d60 98                 TYA
9d61 e8                 INX
9d62 9d 31 11           STA XPOS,X
9d65 e8                 INX
9d66 60       ScXY_Ret  RTS ;Size   13 [ScXY_10]

              ; *******************
9d67            LAY_ADD_SUB ; $9d67
              ; *******************

9d67 90 07              BCC LAY_ADD_X
9d69 b0 14              BCS LYSX_10

              ; *******************
9d6b            LAY_SUB_ADD ; $9d6b
              ; *******************

9d6b b0 0f              BCS LAY_Y_SUB_X

              ; *******************
9d6d            LAY_Y_ADD_X ; $9d6d
              ; *******************

9d6d 20 8f 9d           JSR LAY_XPOS_Y

              ; *****************
9d70            LAY_ADD_X ; $9d70
              ; *****************

9d70 18                 CLC
9d71 7d 31 11           ADC XPOS,X
9d74 48                 PHA
9d75 98                 TYA
9d76 7d 32 11           ADC XPOS+1,X
9d79 a8                 TAY
9d7a 68                 PLA
9d7b 60                 RTS ;Size   12 [LAY_ADD_X]

              ; *******************
9d7c            LAY_Y_SUB_X ; $9d7c
              ; *******************

9d7c 20 8f 9d           JSR LAY_XPOS_Y
9d7f 38       LYSX_10   SEC
9d80 fd 31 11           SBC XPOS,X
9d83 85 59              STA FACTPA
9d85 98                 TYA
9d86 fd 32 11           SBC XPOS+1,X
9d89 a8                 TAY
9d8a 08                 PHP
9d8b a5 59              LDA FACTPA
9d8d 28                 PLP
9d8e 60                 RTS ;Size   19 [LAY_Y_SUB_X]

              ; ******************
9d8f            LAY_XPOS_Y ; $9d8f
              ; ******************

9d8f b9 31 11           LDA XPOS,Y
9d92 48                 PHA
9d93 b9 32 11           LDA XPOS+1,Y
9d96 a8                 TAY
9d97 68                 PLA
9d98 60                 RTS ;Size   10 [LAY_XPOS_Y]

              ; ********************
9d99            LAY_ABS_DIFF ; $9d99
              ; ********************

9d99 20 7c 9d           JSR LAY_Y_SUB_X

              ; ***************
9d9c            LAY_ABS ; $9d9c
              ; ***************

9d9c 10 0f              BPL LABS_Ret
9d9e 08       LABS_10   PHP
9d9f 18                 CLC
9da0 49 ff              EOR #$ff
9da2 69 01              ADC #1
9da4 48                 PHA
9da5 98                 TYA
9da6 49 ff              EOR #$ff
9da8 69 00              ADC #0
9daa a8                 TAY
9dab 68                 PLA
9dac 28                 PLP
9dad 60       LABS_Ret  RTS ;Size   18 [LAY_ABS]

              ; *****************
9dae            LAY_MUL_X ; $9dae
              ; *****************

9dae 84 8e              STY VTEMPA
9db0 85 8f              STA VTEMPA+1
9db2 bd 31 11           LDA XPOS,X
9db5 bc 32 11           LDY XPOS+1,X
9db8 08                 PHP
9db9 20 9c 9d           JSR LAY_ABS
9dbc 9d 31 11           STA XPOS,X
9dbf 98                 TYA
9dc0 9d 32 11           STA XPOS+1,X
9dc3 a9 00              LDA #0
9dc5 8d 77 11           STA VTEMP3
9dc8 a0 10              LDY #16
9dca 46 8e    LAYMX_10  LSR VTEMPA
9dcc 66 8f              ROR VTEMPA+1
9dce 90 0f              BCC LAYMX_20
9dd0 18                 CLC
9dd1 7d 31 11           ADC XPOS,X
9dd4 48                 PHA
9dd5 ad 77 11           LDA VTEMP3
9dd8 7d 32 11           ADC XPOS+1,X
9ddb 8d 77 11           STA VTEMP3
9dde 68                 PLA
9ddf 4e 77 11 LAYMX_20  LSR VTEMP3
9de2 6a                 ROR A
9de3 88                 DEY
9de4 d0 e4              BNE LAYMX_10
9de6 69 00              ADC #0
9de8 ac 77 11           LDY VTEMP3
9deb 90 01              BCC LAYMX_30
9ded c8                 INY
9dee 28       LAYMX_30  PLP
9def 4c 9c 9d           JMP LAY_ABS

              ; **********************
9df2            XY_DEST_To_POS ; $9df2
              ; **********************

9df2 a0 00              LDY #0
9df4 20 f9 9d           JSR DEST_To_POS
9df7 a0 02              LDY #2

              ; *******************
9df9            DEST_To_POS ; $9df9
              ; *******************

9df9 b9 35 11           LDA XDEST,Y
9dfc 99 31 11           STA XPOS,Y
9dff b9 36 11           LDA XDEST+1,Y
9e02 99 32 11           STA XPOS+1,Y
9e05 60                 RTS ;Size   13 [DEST_To_POS]

              ; *****************************
9e06            Get_Comma_And_Integer ; $9e06
              ; *****************************

9e06 20 86 03           JSR CHRGOT
9e09 f0 0c              BEQ GCAI_10
9e0b 20 5c 79           JSR Need_Comma
9e0e c9 2c              CMP #','
9e10 f0 05              BEQ GCAI_10
9e12 20 12 88           JSR Get_Integer
9e15 38                 SEC
9e16 60                 RTS ;Size   17 [Get_Comma_And_Integer]
9e17 a9 00    GCAI_10   LDA #0
9e19 a8                 TAY
9e1a 18       GCAI_CRet CLC
9e1b 60                 RTS ;Size   22 [Get_Comma_And_Integer]

              ; ************************
9e1c            Get_Byte_Or_Zero ; $9e1c
              ; ************************

9e1c a2 00              LDX #0

              ; ************************
9e1e            Get_Byte_Or_Void ; $9e1e
              ; ************************

9e1e 20 86 03           JSR CHRGOT
9e21 f0 f7              BEQ GCAI_CRet
9e23 20 5c 79           JSR Need_Comma
9e26 c9 2c              CMP #','
9e28 f0 f0              BEQ GCAI_CRet
9e2a 20 f4 87           JSR Get_Byte_Var
9e2d 38                 SEC
9e2e 60                 RTS ;Size   17 [Get_Byte_Or_Void]

              ; ***************************
9e2f            Assert_Color_Source ; $9e2f
              ; ***************************

9e2f 20 74 a0           JSR Assert_Graphics_Mem

              ; ************************
9e32            Get_Color_Source ; $9e32
              ; ************************

9e32 a2 01              LDX #1              ; default color = foreground
9e34 20 86 03           JSR CHRGOT
9e37 f0 13              BEQ GCS_10
9e39 c9 2c              CMP #','
9e3b f0 0f              BEQ GCS_10
9e3d 20 f4 87           JSR Get_Byte_Var
9e40 e0 04              CPX #4
9e42 b0 0b              BCS GCS_Err
9e44 e0 02              CPX #2
9e46 24 d8              BIT GRAPHM
9e48 30 02              BMI GCS_10
9e4a b0 03              BCS GCS_Err
9e4c 86 83    GCS_10    STX COLSEL
9e4e 60                 RTS ;Size   29 [Get_Color_Source]
9e4f 4c 28 7d GCS_Err   JMP Error_Illegal_Quantity

              ; ***********************
9e52            Get_Graphics_XY ; $9e52
              ; ***********************

9e52 20 86 03           JSR CHRGOT
9e55 f0 07              BEQ GGXY_10
9e57 20 5c 79           JSR Need_Comma
9e5a c9 2c              CMP #','
9e5c d0 12              BNE Get_Coordinates
9e5e a0 00    GGXY_10   LDY #0
9e60 b9 31 11 GGXY_20   LDA XPOS,Y
9e63 9d 31 11           STA XPOS,X
9e66 e8                 INX
9e67 c8                 INY
9e68 c0 04              CPY #4
9e6a d0 f4              BNE GGXY_20
9e6c 60                 RTS ;Size   27 [Get_Graphics_XY]

              ; *********************************
9e6d            Get_Comma_And_Coordinates ; $9e6d
              ; *********************************

9e6d 20 5c 79           JSR Need_Comma

              ; ***********************
9e70            Get_Coordinates ; $9e70
              ; ***********************

9e70 8e 78 11           STX VTEMP4
9e73 20 08 9f           JSR Get_Coordinate_Value
9e76 20 86 03           JSR CHRGOT
9e79 c9 2c              CMP #','
9e7b f0 56              BEQ GeCo_40
9e7d c9 3b              CMP #';'
9e7f f0 03              BEQ GeCo_10
9e81 4c 6c 79           JMP SYNTAX_ERROR
9e84 20 80 03 GeCo_10   JSR CHRGET
9e87 20 12 88           JSR Get_Integer
9e8a 85 77              STA TEMP_A
9e8c 98                 TYA
9e8d a4 77              LDY TEMP_A
9e8f 20 77 9a           JSR Sin_Cos_AY
9e92 ae 78 11           LDX VTEMP4
9e95 bd 31 11           LDA XPOS,X
9e98 9d 33 11           STA YPOS,X
9e9b bd 32 11           LDA XPOS+1,X
9e9e 9d 34 11           STA YPOS+1,X
9ea1 20 4a 9d           JSR Scale_XY
9ea4 a9 0e              LDA #14
9ea6 8d 79 11           STA Rel_Abs_Flag
9ea9 18                 CLC
9eaa ae 78 11           LDX VTEMP4
9ead 20 ce 9a GeCo_20   JSR LAY_SIN_X
9eb0 9d 31 11           STA XPOS,X
9eb3 98                 TYA
9eb4 9d 32 11           STA XPOS+1,X
9eb7 a0 00              LDY #0
9eb9 4e 79 11           LSR Rel_Abs_Flag
9ebc 90 02              BCC GeCo_30
9ebe a0 02              LDY #2
9ec0 20 6b 9d GeCo_30   JSR LAY_SUB_ADD
9ec3 9d 31 11           STA XPOS,X
9ec6 98                 TYA
9ec7 9d 32 11           STA XPOS+1,X
9eca e8                 INX
9ecb e8                 INX
9ecc 4e 79 11           LSR Rel_Abs_Flag
9ecf d0 dc              BNE GeCo_20
9ed1 18                 CLC
9ed2 60                 RTS ;Size   99 [Get_Coordinates]
9ed3 20 80 03 GeCo_40   JSR CHRGET
9ed6 ee 78 11           INC VTEMP4
9ed9 ee 78 11           INC VTEMP4
9edc 20 08 9f           JSR Get_Coordinate_Value
9edf ae 78 11           LDX VTEMP4
9ee2 ca                 DEX
9ee3 ca                 DEX
9ee4 20 4a 9d           JSR Scale_XY
9ee7 a0 02              LDY #2
9ee9 ae 78 11           LDX VTEMP4
9eec e8                 INX
9eed e8                 INX
9eee ca       GeCo_50   DEX
9eef ca                 DEX
9ef0 4e 79 11           LSR Rel_Abs_Flag
9ef3 90 0a              BCC GeCo_60
9ef5 20 6d 9d           JSR LAY_Y_ADD_X
9ef8 9d 31 11           STA XPOS,X
9efb 98                 TYA
9efc 9d 32 11           STA XPOS+1,X
9eff a0 00    GeCo_60   LDY #0
9f01 ec 78 11           CPX VTEMP4
9f04 f0 e8              BEQ GeCo_50
9f06 18                 CLC
9f07 60                 RTS ;Size  152 [Get_Coordinates]

              ; ****************************
9f08            Get_Coordinate_Value ; $9f08
              ; ****************************

9f08 20 86 03           JSR CHRGOT
9f0b c9 aa              CMP #$aa            ; + token
9f0d f0 05              BEQ GCV_10
9f0f c9 ab              CMP #$ab            ; - token
9f11 f0 01              BEQ GCV_10
9f13 18                 CLC
9f14 2e 79 11 GCV_10    ROL Rel_Abs_Flag    ; set bit 7 if + or -
9f17 20 c0 6d           JSR GSC_40          ; evaluate numeric
9f1a ae 78 11           LDX VTEMP4          ; storage pointer
9f1d 9d 32 11           STA XPOS+1,X        ; value high
9f20 98                 TYA
9f21 9d 31 11           STA XPOS,X          ; value low
9f24 60                 RTS ;Size   29 [Get_Coordinate_Value]

9f25 ff aa 55 colval    .BYTE $ff,$aa,$55,$00

              ; lookup table for SIN/COS

9f29 00 00    angval    .WORD $0000 ; 0000 [00]  0.000
9f2b 2c 71              .WORD $712c ; 2c71 [10]  0.174
9f2d 57 8d              .WORD $8d57 ; 578d [20]  0.342
9f2f 80 00              .WORD $0080 ; 8000 [30]  0.500
9f31 a4 8f              .WORD $8fa4 ; a48f [40]  0.643
9f33 c4 19              .WORD $19c4 ; c419 [50]  0.766
9f35 dd b2              .WORD $b2dd ; ddb2 [60]  0.866
9f37 f0 90              .WORD $90f0 ; f090 [70]  0.940
9f39 fc 1c              .WORD $1cfc ; fc1c [80]  0.985
9f3b ff ff              .WORD $ffff ; ffff [90]  1.000

9f3d 04 72    incval    .WORD $7204 ;  472
9f3f 04 50              .WORD $5004 ;  450
9f41 04 0b              .WORD $0b04 ;  40b
9f43 03 a8              .WORD $a803 ;  3a8
9f45 03 28              .WORD $2803 ;  328
9f47 02 90              .WORD $9002 ;  290
9f49 01 e3              .WORD $e301 ;  1e3
9f4b 01 28              .WORD $2801 ;  128
9f4d 00 63              .WORD $6300 ;   63

              ; *****************************
9f4f            Allocate_Graphics_RAM ; $9f4f
              ; *****************************

9f4f a5 76              LDA MVDFLG          ; graphics RAM reseved ?
9f51 f0 01              BEQ AGR_10          ; -> no
9f53 60                 RTS                 ; nothing to do ;Size    5 [Allocate_Graphics_RAM]
9f54 ad 11 12 AGR_10    LDA TEXT_TOP+1
9f57 18                 CLC
9f58 69 24              ADC #$24            ; 9 Kbyte free ?
9f5a b0 0e              BCS AGR_15
9f5c 85 62              STA LOWTR+1         ; new value for TEXT_TOP+1
9f5e cd 13 12           CMP TEXT_MAX+1      ; compare with maximum ($ff)
9f61 90 0a              BCC AGR_20          ; -> OK below
9f63 d0 05              BNE AGR_15          ; -> OOM
9f65 cc 12 12           CPY TEXT_MAX        ; *** ERROR *** Y is undefined
9f68 90 03              BCC AGR_20
9f6a 4c 3a 4d AGR_15    JMP OOM_Error       ; Out Of Memory
9f6d c6 76    AGR_20    DEC MVDFLG          ; MVDFLG = $ff
9f6f ad 10 12           LDA TEXT_TOP
9f72 85 24              STA INDEXA
9f74 a5 62              LDA LOWTR+1
9f76 85 25              STA INDEXA+1        ; INDEXA = TEXT_TOP + $2400
9f78 ae 10 12           LDX TEXT_TOP
9f7b 86 26              STX INDEXB
9f7d ad 11 12           LDA TEXT_TOP+1
9f80 85 27              STA INDEXB+1        ; INDEXB = TEXT_TOP
9f82 38                 SEC
9f83 e9 1c              SBC #$1c
9f85 a8                 TAY
9f86 8a                 TXA
9f87 49 ff              EOR #$ff
9f89 85 50              STA GRBPNT
9f8b 98                 TYA
9f8c 49 ff              EOR #$ff
9f8e 85 51              STA GRBPNT+1        ; GRBPNT = $1c00 - TEXT_TOP
9f90 a0 00              LDY #0
9f92 e6 50    AGR_25    INC GRBPNT          ; ++GRBPNT (bytes to move)
9f94 d0 04              BNE AGR_30
9f96 e6 51              INC GRBPNT+1
9f98 f0 18              BEQ AGR_45          ; -> exit loop
9f9a a5 24    AGR_30    LDA INDEXA          ; --INDEXA (target pointer)
9f9c d0 02              BNE AGR_35
9f9e c6 25              DEC INDEXA+1
9fa0 c6 24    AGR_35    DEC INDEXA
9fa2 a5 26              LDA INDEXB          ; --INDEXB (source pointer)
9fa4 d0 02              BNE AGR_40
9fa6 c6 27              DEC INDEXB+1
9fa8 c6 26    AGR_40    DEC INDEXB
9faa 20 c0 03           JSR Get_INDEXB_0    ; load  source
9fad 91 24              STA (INDEXA),Y      ; store target
9faf 4c 92 9f           JMP AGR_25          ; -> loop

9fb2 18       AGR_45    CLC
9fb3 ad 11 12           LDA TEXT_TOP+1      ; obsolete, is set below after Relink
9fb6 69 24              ADC #$24
9fb8 8d 11 12           STA TEXT_TOP+1      ; TEXT_TOP += $2400
9fbb a5 2e              LDA TXTTAB+1
9fbd 69 24              ADC #$24
9fbf 85 2e              STA TXTTAB+1        ; TXTTAB   += $2400
9fc1 a5 44              LDA DATPTR+1
9fc3 69 24              ADC #$24
9fc5 85 44              STA DATPTR+1        ; DATPTR   += $2400
9fc7 20 4f 4f AGR_50    JSR Relink
9fca 20 82 4f           JSR Set_TEXT_TOP
9fcd 24 7f              BIT RUNMOD
9fcf 10 2d              BPL AGR_65
9fd1 a2 24              LDX #$24            ; add $2400
9fd3 24 76              BIT MVDFLG
9fd5 30 02              BMI AGR_55
9fd7 a2 dc              LDX #$dc            ; subtract $2400
9fd9 8a       AGR_55    TXA
9fda 18                 CLC
9fdb 65 3e              ADC TXTPTR+1
9fdd 85 3e              STA TXTPTR+1        ; adjust TXTPTR
9fdf 8a                 TXA
9fe0 18                 CLC
9fe1 6d 03 12           ADC OLDTXT+1
9fe4 8d 03 12           STA OLDTXT+1        ; adjust OLDTXT
9fe7 8a                 TXA
9fe8 18                 CLC
9fe9 6d 0f 12           ADC ERRTXT+1
9fec 8d 0f 12           STA ERRTXT+1        ; adjust ERRTXT
9fef 20 47 50           JSR Init_FNDPNT
9ff2 a5 3f    AGR_60    LDA FNDPNT
9ff4 c9 ff              CMP #$ff
9ff6 d0 07              BNE AGR_70
9ff8 a5 40              LDA FNDPNT+1
9ffa c9 09              CMP #9
9ffc d0 01              BNE AGR_70
9ffe 60       AGR_65    RTS ;Size  176 [Allocate_Graphics_RAM]
9fff a0 00    AGR_70    LDY #0              ; adjust structures on stack
a001 b1 3f              LDA (FNDPNT),Y
a003 c9 81              CMP #$81
a005 d0 09              BNE AGR_75
a007 a0 10              LDY #16
a009 20 62 a0           JSR Shift_Stack_Value
a00c a9 12              LDA #$12
a00e d0 07              BNE AGR_80
a010 a0 04    AGR_75    LDY #4
a012 20 62 a0           JSR Shift_Stack_Value
a015 a9 05              LDA #5
a017 18       AGR_80    CLC
a018 65 3f              ADC FNDPNT
a01a 85 3f              STA FNDPNT
a01c 90 d4              BCC AGR_60
a01e e6 40              INC FNDPNT+1
a020 d0 d0              BNE AGR_60

              ; *************************
a022            Free_Graphics_RAM ; $a022
              ; *************************

a022 a5 76              LDA MVDFLG          ; Graphics RAM allocated ?
a024 d0 01              BNE FGR_10          ; -> yes : unallocate
a026 60                 RTS ;Size    5 [Free_Graphics_RAM]
a027 a0 00    FGR_10    LDY #0
a029 84 76              STY MVDFLG
a02b 84 24              STY INDEXA
a02d 84 26              STY INDEXB
a02f a9 1c              LDA #$1c
a031 85 25              STA INDEXA+1        ; INDEXA = $1c00
a033 a9 40              LDA #$40 ; '@'
a035 85 27              STA INDEXB+1        ; INDEXB = $4000
a037 20 c0 03 FGR_20    JSR Get_INDEXB_0    ; Load  source
a03a 91 24              STA (INDEXA),Y      ; Store target
a03c c8                 INY
a03d d0 f8              BNE FGR_20
a03f e6 25              INC INDEXA+1        ; next page target
a041 e6 27              INC INDEXB+1        ; next page source
a043 ad 11 12           LDA TEXT_TOP+1
a046 c5 27              CMP INDEXB+1
a048 b0 ed              BCS FGR_20          ; loop until TEXT_TOP
a04a 38                 SEC
a04b a5 2e              LDA TXTTAB+1
a04d e9 24              SBC #$24
a04f 85 2e              STA TXTTAB+1        ; TXTTAB -= $2400
a051 ad 11 12           LDA TEXT_TOP+1
a054 e9 24              SBC #$24
a056 8d 11 12           STA TEXT_TOP+1      ; TEXT_TOP -= $2400
a059 a5 44              LDA DATPTR+1
a05b e9 24              SBC #$24
a05d 85 44              STA DATPTR+1        ; DATPTR -= $2400
a05f 4c c7 9f           JMP AGR_50

              ; *************************
a062            Shift_Stack_Value ; $a062
              ; *************************

a062 b1 3f              LDA (FNDPNT),Y
a064 24 76              BIT MVDFLG
a066 d0 06              BNE SSV_10
a068 38                 SEC
a069 e9 24              SBC #$24
a06b 91 3f              STA (FNDPNT),Y
a06d 60                 RTS ;Size   12 [Shift_Stack_Value]
a06e 18       SSV_10    CLC
a06f 69 24              ADC #$24
a071 91 3f              STA (FNDPNT),Y
a073 60                 RTS ;Size   18 [Shift_Stack_Value]

              ; ***************************
a074            Assert_Graphics_Mem ; $a074
              ; ***************************

a074 a5 76              LDA MVDFLG
a076 f0 01              BEQ NGA_Err
a078 60                 RTS ;Size    5 [Assert_Graphics_Mem]
a079 a2 23    NGA_Err   LDX #$23            ; NO GRAPHICS AREA
a07b 4c 3c 4d           JMP Print_Error_X

              ; ********************
a07e            BASIC_DIRCAT ; $a07e
              ; ********************

a07e 20 bf a3           JSR DOS_Parser
a081 a5 80              LDA DOSFLA
a083 29 e6              AND #%1110 0110     ; $e6: @,W,TD,LA,TFN
a085 f0 03              BEQ DIR_10
a087 4c 6c 79           JMP SYNTAX_ERROR
a08a a0 01    DIR_10    LDY #1              ; start of command string
a08c a2 01              LDX #1              ; length of command string '$'
a08e a5 80              LDA DOSFLA
a090 29 11              AND #%0001 0001     ; $11: drive, filename
a092 f0 06              BEQ DIR_20          ; -> no drive or pattern
a094 4a                 LSR A               ; fn flag -> carry
a095 90 02              BCC DIR_15          ; -> no pattern
a097 e8                 INX
a098 e8                 INX                 ; "$0:"
a099 e8       DIR_15    INX                 ; "$0:pattern"
a09a 8a       DIR_20    TXA                 ; length of command string
a09b 20 67 a6           JSR Build_DOS_Command
a09e a9 00              LDA #0
a0a0 aa                 TAX
a0a1 20 87 92           JSR B_SETBNK        ; bank 0
a0a4 a0 60              LDY #$60            ; SA
a0a6 ae 1c 01           LDX DOS_FA          ; FA
a0a9 a9 00              LDA #0              ; LA
a0ab 20 57 92           JSR B_SETLFS
a0ae 38                 SEC
a0af 20 d8 90           JSR B_OPEN          ; OPEN LA,FA,SA,"$0:pattern"
a0b2 90 09              BCC DIR_25          ; -> OK
a0b4 48                 PHA                 ; push error #
a0b5 20 14 a1           JSR DIR_55          ; close channel 0
a0b8 68                 PLA                 ; pull error #
a0b9 aa                 TAX                 ; X  = error #
a0ba 4c 3c 4d           JMP Print_Error_X   ; error exit

a0bd a2 00    DIR_25    LDX #0              ; select channel 0
a0bf 20 45 a8           JSR Map_IO
a0c2 20 c6 ff           JSR K_CHKIN
a0c5 a0 03              LDY #3              ; read load address, link & number
a0c7 8c 74 11 DIR_30    STY T3              ; words to read
a0ca 20 63 92 DIR_35    JSR B_BASIN
a0cd 8d 75 11           STA T4              ; word low
a0d0 20 51 92           JSR B_READST        ; check status
a0d3 d0 3f              BNE DIR_55
a0d5 20 63 92           JSR B_BASIN
a0d8 8d 76 11           STA T5              ; word high
a0db 20 51 92           JSR B_READST        ; check status
a0de d0 34              BNE DIR_55
a0e0 ce 74 11           DEC T3              ; word count
a0e3 d0 e5              BNE DIR_35          ; -> ignore this word and loop
a0e5 ae 75 11           LDX T4              ; blocks low
a0e8 ad 76 11           LDA T5              ; blocks high
a0eb 20 32 8e           JSR Print_Integer_XA; print blocks
a0ee a9 20              LDA #' '            ; print blank
a0f0 20 69 92           JSR B_BSOUT
a0f3 20 63 92 DIR_40    JSR B_BASIN         ; next char of directory
a0f6 48                 PHA                 ; push received byte
a0f7 20 51 92           JSR B_READST        ; status OK ?
a0fa d0 17              BNE DIR_50          ; no -> finish
a0fc 68                 PLA                 ; restore received byte
a0fd f0 06              BEQ DIR_45          ; -> end of line
a0ff 20 69 92           JSR B_BSOUT         ; print char
a102 4c f3 a0           JMP DIR_40          ; loop

a105 a9 0d    DIR_45    LDA #13             ; print return
a107 20 69 92           JSR B_BSOUT
a10a 20 93 92           JSR B_STOP          ; check STOP key
a10d f0 05              BEQ DIR_55          ; -> exit on STOP
a10f a0 02              LDY #2              ; Y = words to read (link & number)
a111 d0 b4              BNE DIR_30          ; branch always

a113 68       DIR_50    PLA
a114 20 6f 92 DIR_55    JSR B_CLRCH         ; clear channel
a117 a9 00              LDA #0
a119 18                 CLC
a11a 4c 75 92           JMP B_CLOSE         ; close directory file

              ; ********************
a11d            BASIC_DOPEN ; $a11d
              ; *******************

a11d a9 22              LDA #%0010 0010     ; inhibit second drive and filename
a11f 20 c1 a3           JSR DOS_Parser_A
a122 20 6f a7           JSR Require_LA_Filename
a125 20 57 a1           JSR Find_Free_SA
a128 a0 05              LDY #Pat_DOPEN - Pat_DCLEAR - 1 ; start of command
a12a a2 04              LDX #4              ; length of OPEN command
a12c 24 80              BIT DOSFLA          ; test DOS flags
a12e 50 13              BVC APPE_10         ; -> No WRITE or REL flag
a130 a2 08              LDX #8              ; length of OPEN command
a132 d0 0f              BNE APPE_10         ; always

              ; ********************
a134            BASIC_APPEND ; $a134
              ; ********************

              ;               @WDD ULFF
a134 a9 e2              LDA #%1110 0010     ; accept LA,Drive,Unit,File
a136 20 c1 a3           JSR DOS_Parser_A
a139 20 6f a7           JSR Require_LA_Filename
a13c 20 57 a1           JSR Find_Free_SA
a13f a0 16              LDY #Pat_APPEND - Pat_DCLEAR - 1
a141 a2 05              LDX #?Pat_APPEND
a143 8a       APPE_10   TXA
a144 20 67 a6           JSR Build_DOS_Command
a147 20 6f 92           JSR B_CLRCH
a14a a9 00              LDA #0
a14c aa                 TAX
a14d 20 87 92           JSR B_SETBNK
a150 20 d8 90           JSR B_OPEN
a153 ea                 NOP
a154 4c b2 a3           JMP PDC_20

              ; ********************
a157            Find_Free_SA ; $a157
              ; ********************

a157 a0 61              LDY #$61            ; try SA from $62 to $6e
a159 c8       FFSA_10   INY                 ; address 2 - 14
a15a c0 6f              CPY #$6f
a15c f0 0c              BEQ FFSA_Err
a15e 20 45 a8           JSR Map_IO
a161 20 5c ff           JSR K_LKUPSA        ; look up SA
a164 90 f3              BCC FFSA_10         ; -> already in use
a166 8c 1d 01           STY DOS_SA          ; use this one
a169 60                 RTS ;Size   19 [Find_Free_SA]
a16a a2 01    FFSA_Err  LDX #1              ; TOO MANY FILES
a16c 4c 3c 4d           JMP Print_Error_X

              ; ********************
a16f            BASIC_DCLOSE ; $a16f
              ; ********************

a16f a9 f3              LDA #%1111 0011     ; allow only LA and Unit
a171 20 c1 a3           JSR DOS_Parser_A
a174 20 0d a8           JSR Free_DOS_Status_String
a177 a5 80              LDA DOSFLA
a179 29 04              AND #%0000 0100     ; test LA bit
a17b f0 06              BEQ B_CLOALL          ; -> no LA: close all
a17d ad 1b 01           LDA DOS_LA
a180 4c 75 92           JMP B_CLOSE

              ; ****************
a183            B_CLOALL ; $a183
              ; ****************

a183 ad 1c 01           LDA DOS_FA
a186 20 45 a8           JSR Map_IO
a189 4c 4a ff           JMP K_CLOALL

              ; *******************
a18c            BASIC_DSAVE ; $a18c
              ; *******************

a18c a9 66              LDA #$66
a18e 20 c1 a3           JSR DOS_Parser_A
a191 20 50 a7           JSR Assert_Filename
a194 a0 05              LDY #Pat_DOPEN - Pat_DCLEAR  - 1
a196 a9 04              LDA #4              ; command length
a198 20 67 a6           JSR Build_DOS_Command
a19b a9 00              LDA #0
a19d aa                 TAX
a19e 20 87 92           JSR B_SETBNK        ; bank 0 is default
a1a1 4c 15 91           JMP SAVE_10

              ; *********************
a1a4            BASIC_DVERIFY ; $a1a4
              ; *********************

a1a4 a9 01              LDA #1              ; set verify flag
a1a6 2c                 BIT                 ; skip next statement

              ; *******************
a1a7            BASIC_DLOAD ; $a1a7
              ; *******************

a1a7 a9 00              LDA #0
a1a9 85 0c              STA B_VERCK
a1ab a9 e6              LDA #$e6
a1ad 20 c1 a3           JSR DOS_Parser_A
a1b0 20 50 a7           JSR Assert_Filename
a1b3 a9 00              LDA #0
a1b5 8d 1d 01           STA DOS_SA
a1b8 a0 05              LDY #Pat_DOPEN - Pat_DCLEAR  - 1
a1ba a9 04              LDA #4              ; command length
a1bc 20 67 a6           JSR Build_DOS_Command
a1bf a9 00              LDA #0              ; bank for loading
a1c1 aa                 TAX                 ; bank for filename
a1c2 20 87 92           JSR B_SETBNK
a1c5 4c 33 91           JMP LOAD_Parameter_Set

              ; *******************
a1c8            BASIC_BSAVE ; $a1c8
              ; *******************

a1c8 a9 66              LDA #$66
a1ca a2 f8              LDX #$f8
a1cc 20 c3 a3           JSR DOS_Parser_AX
a1cf 20 50 a7           JSR Assert_Filename
a1d2 a5 81              LDA DOSFLB
a1d4 29 06              AND #6
a1d6 c9 06              CMP #6
a1d8 f0 03              BEQ BSAV_10         ; -> all parameter set
a1da 4c 6c 79           JMP SYNTAX_ERROR
a1dd ad 1a 01 BSAV_10   LDA DOS_END+1
a1e0 cd 18 01           CMP DOS_BEG+1
a1e3 90 30              BCC BSAV_Err
a1e5 d0 0a              BNE BSAV_20
a1e7 ad 19 01           LDA DOS_END
a1ea cd 17 01           CMP DOS_BEG
a1ed 90 26              BCC BSAV_Err
a1ef f0 24              BEQ BSAV_Err
a1f1 a0 05    BSAV_20   LDY #5
a1f3 a9 04              LDA #4
a1f5 20 67 a6           JSR Build_DOS_Command
a1f8 ad 1f 01           LDA DOS_BANK
a1fb a2 00              LDX #0
a1fd 20 87 92           JSR B_SETBNK
a200 ae 17 01           LDX DOS_BEG
a203 ac 18 01           LDY DOS_BEG+1
a206 a9 5a              LDA #ARYPNT         ; address of save address
a208 86 5a              STX ARYPNT
a20a 84 5b              STY ARYPNT+1
a20c ae 19 01           LDX DOS_END
a20f ac 1a 01           LDY DOS_END+1
a212 4c 1d 91           JMP SAVE_20
a215 4c 28 7d BSAV_Err  JMP Error_Illegal_Quantity

a218                    .FILL $a218-* (0) ; 0 bytes

              ; *******************
a218            BASIC_BLOAD ; $a218
              ; *******************

a218 a9 e6              LDA #$e6            ; DOS flags
a21a a2 fc              LDX #$fc            ; DOS flags
a21c 20 c3 a3           JSR DOS_Parser_AX

              ; *************
a21f            BLOAD ; $a21f
              ; *************

a21f 20 50 a7           JSR Assert_Filename
a222 ae 17 01           LDX DOS_BEG
a225 ac 18 01           LDY DOS_BEG+1
a228 a9 00              LDA #0
a22a e0 ff              CPX #$ff
a22c d0 06              BNE BLOAD_10
a22e c0 ff              CPY #$ff
a230 d0 02              BNE BLOAD_10
a232 a9 ff              LDA #$ff
a234 8d 1d 01 BLOAD_10  STA DOS_SA
a237 a0 05              LDY #Pat_DOPEN - Pat_DCLEAR  - 1
a239 a9 04              LDA #4              ; command length
a23b 20 67 a6           JSR Build_DOS_Command
a23e ad 1f 01           LDA DOS_BANK        ; bank for loading
a241 a2 00              LDX #0              ; bank for filename
a243 20 87 92           JSR B_SETBNK
a246 a9 00              LDA #0
a248 ae 17 01           LDX DOS_BEG
a24b ac 18 01           LDY DOS_BEG+1
a24e 20 d5 ff           JSR K_LOADSP
a251 08                 PHP
a252 20 43 92           JSR Invalidate_Disk_Status
a255 28                 PLP
a256 90 03              BCC BLOAD_20
a258 4c d0 90           JMP Break_On_Error
a25b 20 51 92 BLOAD_20  JSR B_READST
a25e 29 bf              AND #%1011 1111 ; $bf
a260 f0 03              BEQ BLOAD_30
a262 4c 67 91           JMP LPS_Err
a265 18       BLOAD_30  CLC
a266 60                 RTS ;Size   72 [BLOAD]

              ; ********************
a267            BASIC_HEADER ; $a267
              ; ********************

a267 20 bf a3           JSR DOS_Parser
a26a 20 49 a7           JSR Need_Name
a26d 29 01              AND #1
a26f c9 01              CMP #1
a271 d0 61              BNE SCRA_40
a273 20 7b 92           JSR B_CLALL
a276 20 e1 a7           JSR ARE_YOU_SURE
a279 d0 25              BNE HEAD_Ret
a27b a0 1b              LDY #Pat_HEADER - Pat_DCLEAR - 1
a27d a9 04              LDA #?Pat_HEADER - 2 ; no ID
a27f ae 20 01           LDX DOS_ID
a282 f0 02              BEQ HEAD_10
a284 a9 06              LDA #?Pat_HEADER
a286 20 97 a3 HEAD_10   JSR Put_DOS_Command
a289 20 78 a7           JSR Update_DS
a28c 24 7f              BIT RUNMOD
a28e 30 10              BMI HEAD_Ret
a290 a0 00              LDY #0
a292 a9 7b              LDA #DS_ADR
a294 20 ab 03           JSR Fetch_1
a297 c9 32              CMP #'2'
a299 90 05              BCC HEAD_Ret
a29b a2 24              LDX #$24            ; BAD DISK
a29d 4c 3c 4d           JMP Print_Error_X
a2a0 60       HEAD_Ret  RTS ;Size   58 [BASIC_HEADER]

              ; *********************
a2a1            BASIC_SCRATCH ; $a2a1
              ; *********************

a2a1 20 bf a3           JSR DOS_Parser
a2a4 20 49 a7           JSR Need_Name
a2a7 20 e1 a7           JSR ARE_YOU_SURE
a2aa d0 27              BNE SCRA_30
a2ac a0 37              LDY #Pat_SCRATCH - Pat_DCLEAR - 1
a2ae a9 04              LDA #?Pat_SCRATCH
a2b0 20 97 a3           JSR Put_DOS_Command
a2b3 20 78 a7           JSR Update_DS
a2b6 24 7f              BIT RUNMOD
a2b8 30 19              BMI SCRA_30
a2ba a9 0d              LDA #13
a2bc 20 69 92           JSR B_BSOUT
a2bf a0 00              LDY #0
a2c1 a9 7b    SCRA_10   LDA #DS_ADR         ; print disk status
a2c3 20 ab 03           JSR Fetch_1
a2c6 f0 06              BEQ SCRA_20
a2c8 20 69 92           JSR B_BSOUT
a2cb c8                 INY
a2cc d0 f3              BNE SCRA_10
a2ce a9 0d    SCRA_20   LDA #13
a2d0 20 df 90           JSR CHROUT
a2d3 60       SCRA_30   RTS ;Size   51 [BASIC_SCRATCH]
a2d4 4c 6c 79 SCRA_40   JMP SYNTAX_ERROR

              ; ********************
a2d7            BASIC_RECORD ; $a2d7
              ; ********************

a2d7 a9 23              LDA #'#'
a2d9 20 5e 79           JSR Need_A
a2dc 20 f4 87           JSR Get_Byte_Var
a2df e0 00              CPX #0
a2e1 f0 37              BEQ REC1_Err        ; LA # must be > 0
a2e3 8e 1b 01           STX DOS_LA
a2e6 20 0f 88           JSR Comma_And_LINNUM; get record #
a2e9 a2 01              LDX #1              ; default  position in record
a2eb 20 1e 9e           JSR Get_Byte_Or_Void; optional position in record
a2ee e0 00              CPX #0
a2f0 f0 28              BEQ REC1_Err        ; position must be > 0
a2f2 e0 ff              CPX #$ff
a2f4 f0 24              BEQ REC1_Err        ; position must be < 255
a2f6 8e 1e 01           STX DOS_RL          ; position
a2f9 ad 1b 01           LDA DOS_LA
a2fc 20 45 a8           JSR Map_IO
a2ff 20 59 ff           JSR K_LKUPLA        ; lookup FA,SA
a302 b0 19              BCS REC4_Err
a304 8c ed 11           STY REC_SA
a307 8e 1c 01           STX DOS_FA
a30a a9 00              LDA #0              ; setup command channel
a30c 8d 1b 01           STA DOS_LA
a30f a9 6f              LDA #$6f
a311 8d 1d 01           STA DOS_SA
a314 a0 3b              LDY #Pat_RECORD - Pat_DCLEAR - 1
a316 a9 04              LDA #?Pat_RECORD
a318 d0 7d              BNE Put_DOS_Command
a31a 4c 28 7d REC1_Err  JMP Error_Illegal_Quantity
a31d a2 04    REC4_Err  LDX #4              ; FILE NOT FOUND
a31f 4c 3c 4d           JMP Print_Error_X

              ; ********************
a322            BASIC_DCLEAR ; $a322
              ; ********************

a322 20 bf a3           JSR DOS_Parser
a325 a0 ff              LDY #$ff
a327 a9 02              LDA #2
a329 20 97 a3           JSR Put_DOS_Command
a32c 4c 83 a1           JMP B_CLOALL

              ; *********************
a32f            BASIC_COLLECT ; $a32f
              ; *********************

a32f 20 bf a3           JSR DOS_Parser
a332 20 5b a7           JSR Unit_And_Drive_Only
a335 20 7b 92           JSR B_CLALL
a338 a0 21              LDY #Pat_COLLECT - Pat_DCLEAR - 1
a33a a2 01              LDX #1              ; collect with no drive
a33c a5 80              LDA DOSFLA
a33e 29 10              AND #%0001 0000     ; drive ?
a340 f0 01              BEQ COLLE_10        ; -> no
a342 e8                 INX                 ; collect with drive
a343 8a       COLLE_10  TXA
a344 d0 51              BNE Put_DOS_Command ; always

              ; ******************
a346            BASIC_COPY ; $a346
              ; ******************

a346 20 bf a3           JSR DOS_Parser
a349 29 30              AND #%0011 0000   ; source & target drive
a34b c9 30              CMP #%0011 0000
a34d d0 06              BNE COPY_10
a34f a5 80              LDA DOSFLA        ; source and target drive set
a351 29 c7              AND #%1100 0111   ; @ W LA FN1 FN2
a353 f0 07              BEQ COPY_20       ; -> copy *
a355 a5 80    COPY_10   LDA DOSFLA
a357 20 60 a7           JSR Deny_AT_W_LA
a35a a5 80              LDA DOSFLA        ; obsolete
a35c a0 27    COPY_20   LDY #Pat_COPY - Pat_DCLEAR - 1
a35e a9 08              LDA #?Pat_COPY    ; command length
a360 d0 35              BNE Put_DOS_Command

              ; ********************
a362            BASIC_CONCAT ; $a362
              ; ********************

a362 20 bf a3           JSR DOS_Parser
a365 20 60 a7           JSR Deny_AT_W_LA
a368 a0 0d              LDY #Pat_CONCAT - Pat_DCLEAR - 1
a36a a9 0c              LDA #12             ; overlap with APPEND
a36c d0 29              BNE Put_DOS_Command

              ; ********************
a36e            BASIC_RENAME ; $a36e
              ; ********************

a36e a9 e4              LDA #$e4
a370 20 c1 a3           JSR DOS_Parser_A
a373 20 66 a7           JSR Require_Two_Filenames
a376 a0 2f              LDY #Pat_RENAME - Pat_DCLEAR  - 1
a378 a9 08              LDA #?Pat_RENAME
a37a d0 1b              BNE Put_DOS_Command

              ; ********************
a37c            BASIC_BACKUP ; $a37c
              ; ********************

a37c a9 c7              LDA #$c7
a37e 20 c1 a3           JSR DOS_Parser_A
a381 29 30              AND #%0011 0000     ; source & target drive
a383 c9 30              CMP #%0011 0000
a385 f0 03              BEQ BACK_10
a387 4c 6c 79           JMP SYNTAX_ERROR
a38a 20 e1 a7 BACK_10   JSR ARE_YOU_SURE
a38d f0 01              BEQ BACK_20
a38f 60                 RTS ;Size   20 [BASIC_BACKUP]
a390 20 83 a1 BACK_20   JSR B_CLOALL
a393 a0 23              LDY #$23 ; '#'
a395 a9 04              LDA #4

              ; ***********************
a397            Put_DOS_Command ; $a397
              ; ***********************

a397 20 67 a6           JSR Build_DOS_Command
a39a 20 6f 92 PDC_10    JSR B_CLRCH
a39d a9 00              LDA #0
a39f aa                 TAX
a3a0 20 87 92           JSR B_SETBNK
a3a3 38                 SEC
a3a4 20 d8 90           JSR B_OPEN
a3a7 08                 PHP
a3a8 48                 PHA
a3a9 ad 1b 01           LDA DOS_LA
a3ac 38                 SEC
a3ad 20 75 92           JSR B_CLOSE
a3b0 68                 PLA
a3b1 28                 PLP
a3b2 b0 01    PDC_20    BCS PDC_Err
a3b4 60                 RTS ;Size   30 [Put_DOS_Command]
a3b5 4c d0 90 PDC_Err   JMP Break_On_Error


a3b8 ff       dostbl     .BYTE $ff
a3b9 ff                  .BYTE $ff
a3ba ff                  .BYTE $ff
a3bb ff                  .BYTE $ff
a3bc 00                  .BYTE $00          ; default LA
a3bd 08                  .BYTE $08          ; default FA
a3be 6f                  .BYTE $6f          ; default SA

              ; This is the universal DOS parser
              ; It is called by all BASIC 4 DOS commands and scans and stores

              ; DOS_LA          = logical address
              ; DOS_BANK        = bank for loading or saving
              ; DOS_FA          = primary address (UNIT)
              ; DOS_DRIVE_1     = source drive
              ; DOS_DRIVE_2     = target drive
              ; FNADR           = filename address of source file
              ; DOS_FNADR_2     = filename address of target file
              ; FNLEN           = filename length  of source file
              ; DOS_FNLEN_2     = filename length  of target file
              ; DOS_ID          = disk id for formatting
              ; DOS_RL          = record length
              ; DOS_BEG     = start address
              ; DOS_END       = end address

              ; DOSFLA flags for parsing BASIC 4 DOS commands

              ; bit 0: $01 = source Filename given
              ; bit 1: $02 = target Filename given
              ; bit 2: $04 = logical address set in LA
              ; bit 3: $08 = primary address set in FA
              ; bit 4: $10 = source drive set
              ; bit 5: $20 = target drive set
              ; bit 6: $40 = W (Write) or L (Relative file) given
              ; bit 7: $80 = Save and replace flag '@'

              ; The routine returns with the flags stored in DOSFLA and DOSFLB


              ; ******************
a3bf            DOS_Parser ; $a3bf
              ; ******************

a3bf a9 00               LDA #0             ; disabled flags

              ; ********************
a3c1            DOS_Parser_A ; $a3c1
              ; ********************

a3c1 a2 ff               LDX #$ff           ; enabled flags

              ; *********************
a3c3            DOS_Parser_AX ; $a3c3
              ; *********************

a3c3 48                  PHA
a3c4 8a                  TXA
a3c5 48                  PHA
a3c6 a9 00               LDA #0
a3c8 85 80               STA DOSFLA
a3ca 85 81               STA DOSFLB
a3cc a2 22               LDX #$22
a3ce 9d 00 01 DOSP_10    STA STACK,X        ; clear $0101 to $0122
a3d1 ca                  DEX
a3d2 d0 fa               BNE DOSP_10
a3d4 a2 06               LDX #6
a3d6 bd b8 a3 DOSP_12    LDA dostbl,X
a3d9 9d 17 01            STA DOS_BEG,X  ; set default values
a3dc ca                  DEX
a3dd 10 f7               BPL DOSP_12
a3df ae d5 03            LDX USER_BANK
a3e2 8e 1f 01            STX DOS_BANK       ; set bank
a3e5 20 86 03            JSR CHRGOT
a3e8 d0 0e    DOSP_13    BNE DOSP_16
a3ea 68       DOSP_14    PLA                ; exit sequence
a3eb 25 81               AND DOSFLB         ; check forbidden parameter
a3ed d0 6b               BNE DOSP_Syn
a3ef 68                  PLA
a3f0 20 1d a6            JSR Assert_DOSFLA  ; check required parameter
a3f3 a5 80               LDA DOSFLA
a3f5 a6 81               LDX DOSFLB
a3f7 60                  RTS ;Size   53 [DOS_Parser_AX]

a3f8 c9 23    DOSP_16    CMP #'#'           ; logical address ?
a3fa f0 4b               BEQ DOSP_32
a3fc c9 57               CMP #'W'           ; write mode ?
a3fe f0 5d               BEQ DOSP_36
a400 c9 4c               CMP #'L'           ; relative file ?
a402 f0 59               BEQ DOSP_36
a404 c9 52               CMP #'R'           ; read mode ?
a406 f0 29               BEQ DOSP_22
a408 c9 44               CMP #'D'           ; Drive ?
a40a f0 73               BEQ DOSP_42
a40c c9 91               CMP #$91           ; ON token
a40e f0 27               BEQ DOSP_24
a410 c9 42               CMP #'B'           ; Bank
a412 f0 2e               BEQ DOSP_30
a414 c9 55               CMP #'U'           ; Unit ?
a416 f0 25               BEQ DOSP_28
a418 c9 50               CMP #'P'           ; Position ?
a41a d0 03               BNE DOSP_18
a41c 4c b4 a4            JMP DOSP_50
a41f c9 49    DOSP_18    CMP #'I'           ; ID parameter on HEADER ?
a421 f0 75               BEQ DOSP_48
a423 c9 22               CMP #QUOTE
a425 f0 07               BEQ DOSP_20        ; -> start reading filename 1
a427 c9 28               CMP #'('
a429 f0 03               BEQ DOSP_20
a42b 4c 6c 79            JMP SYNTAX_ERROR
a42e 4c dc a4 DOSP_20    JMP DOSP_56

              ; READ mode (default) 'R'

a431 20 80 03 DOSP_22    JSR CHRGET
a434 4c fb a4            JMP DOSP_62

              ; read bank or unit after ON keyword

a437 20 82 a5 DOSP_24    JSR Get_Bank_Or_Unit
a43a 4c f7 a4 DOSP_26    JMP DOSP_60

              ; read unit 'U'

a43d 20 8d a5 DOSP_28    JSR Get_Unit
a440 d0 f8               BNE DOSP_26        ; branch always

              ; read bank 'B'

a442 20 9e a5 DOSP_30    JSR Get_Bank
a445 f0 f3               BEQ DOSP_26

              ; read logical address after '#'

a447 a9 04    DOSP_32    LDA #4             ; bit 2 = LA set
a449 20 1d a6            JSR Assert_DOSFLA  ; inhibit multiple settings
a44c 20 f2 a5            JSR Get_DOS_Parameter_Byte
a44f e0 00               CPX #0
a451 f0 42               BEQ DOSP_Ill       ; ILLEGAL QUANTITY
a453 8e 1b 01            STX DOS_LA         ; set LA
a456 a9 04               LDA #4             ; flag for LA defined
a458 d0 e0               BNE DOSP_26        ; branch always

a45a 4c 6c 79 DOSP_Syn   JMP SYNTAX_ERROR

              ; set WRITE 'W' or REL 'L' flag

a45d aa       DOSP_36    TAX
a45e a9 40               LDA #$40           ; bit 6 = WRITE flag
a460 20 1d a6            JSR Assert_DOSFLA
a463 e0 57               CPX #'W'
a465 d0 06               BNE DOSP_38        ; continue with L parameter
a467 20 80 03            JSR CHRGET
a46a 4c 7b a4            JMP DOSP_40

              ; set record length after 'L'

a46d 20 f2 a5 DOSP_38    JSR Get_DOS_Parameter_Byte
a470 e0 00               CPX #0
a472 f0 21               BEQ DOSP_Ill       ; record length must be > 0
a474 e0 ff               CPX #$ff
a476 f0 1d               BEQ DOSP_Ill       ; record length must be < 255
a478 8e 1e 01            STX DOS_RL         ; set record length
a47b a9 40    DOSP_40    LDA #$40           ; WRITE or REL flag
a47d d0 14               BNE DOSP_44        ; branch always

              ;set DRIVE

a47f a9 10    DOSP_42    LDA #16            ; bit 4 = DRIVE 1 set
a481 20 1d a6            JSR Assert_DOSFLA
a484 20 f2 a5            JSR Get_DOS_Parameter_Byte
a487 e0 02               CPX #2             ; DRIVE must be 0 or 1 only
a489 b0 0a               BCS DOSP_Ill
a48b 8e 12 01            STX DOS_DRIVE_1    ; source drive
a48e 8e 14 01            STX DOS_DRIVE_2    ; target drive
a491 a9 10               LDA #16            ; DRIVE flag
a493 d0 62    DOSP_44    BNE DOSP_60        ; branch always

a495 4c 28 7d DOSP_Ill   JMP Error_Illegal_Quantity

              ; read ID 'I'

a498 ad 22 01 DOSP_48    LDA DOS_UNIT
a49b d0 bd               BNE DOSP_Syn
a49d 20 80 03            JSR CHRGET
a4a0 8d 20 01            STA DOS_ID
a4a3 20 80 03            JSR CHRGET
a4a6 8d 21 01            STA DOS_ID+1
a4a9 a9 ff               LDA #$ff
a4ab 8d 22 01            STA DOS_UNIT
a4ae 20 80 03            JSR CHRGET
a4b1 4c fb a4            JMP DOSP_62

              ; read position 'P'

a4b4 a9 02    DOSP_50    LDA #2             ; bit 1 = binary load start
a4b6 20 22 a6            JSR Assert_DOSFLB
a4b9 20 05 a6            JSR Get_DOS_Parameter_Word
a4bc 8c 17 01            STY DOS_BEG
a4bf 8d 18 01            STA DOS_BEG+1
a4c2 a9 02               LDA #2
a4c4 05 81    DOSP_52    ORA DOSFLB
a4c6 85 81               STA DOSFLB
a4c8 d0 31               BNE DOSP_62
a4ca a9 04    DOSP_54    LDA #4             ; bit 2 = binary load end
a4cc 20 22 a6            JSR Assert_DOSFLB
a4cf 20 05 a6            JSR Get_DOS_Parameter_Word
a4d2 8c 19 01            STY DOS_END
a4d5 8d 1a 01            STA DOS_END+1
a4d8 a9 04               LDA #4
a4da d0 e8               BNE DOSP_52        ; branch always

              ; read 1st. filename

a4dc a9 01    DOSP_56    LDA #1             ; read 1st. filename
a4de 20 b9 a5            JSR Get_DOS_Filename
a4e1 8d 11 01            STA DOS_FNLEN_1
a4e4 a0 00               LDY #0
a4e6 20 b7 03 DOSP_58    JSR Get_INDEXA_1   ; copy filename to DOS buffer
a4e9 8d 03 ff            STA MMU_LCRC
a4ec 99 b7 12            STA SAVRAM,Y
a4ef c8                  INY
a4f0 cc 11 01            CPY DOS_FNLEN_1
a4f3 90 f1               BCC DOSP_58
a4f5 a9 01               LDA #1             ; set flag: filename 1
a4f7 05 80    DOSP_60    ORA DOSFLA
a4f9 85 80               STA DOSFLA
a4fb 20 86 03 DOSP_62    JSR CHRGOT         ; next char
a4fe d0 19               BNE DOSP_72
a500 4c ea a3 DOSP_64    JMP DOSP_14        ; -> check & exit

              ; parse destination filename and parameters

a503 c9 91    DOSP_66    CMP #$91           ; ON token
a505 d0 03               BNE DOSP_68
a507 4c 37 a4            JMP DOSP_24        ; Get bank or unit

a50a c9 a4    DOSP_68    CMP #$a4           ; TO token
a50c f0 02               BEQ DOSP_70        ; <- obsolete
a50e d0 6d               BNE DOSP_88          ; branch always

a510 20 80 03 DOSP_70    JSR CHRGET
a513 c9 50               CMP #'P'
a515 d0 0f               BNE DOSP_76
a517 f0 b1               BEQ DOSP_54        ; -> load start/end address

a519 c9 2c    DOSP_72    CMP #','
a51b d0 e6               BNE DOSP_66
a51d 20 80 03            JSR CHRGET
a520 4c f8 a3            JMP DOSP_16

a523 20 80 03 DOSP_74    JSR CHRGET
a526 c9 44    DOSP_76    CMP #'D'           ; idestination drive
a528 f0 10               BEQ DOSP_78
a52a c9 91               CMP #$91           ; ON token
a52c f0 1f               BEQ DOSP_80
a52e c9 55               CMP #'U'           ; destination unit
a530 f0 21               BEQ DOSP_82
a532 c9 22               CMP #QUOTE
a534 f0 22               BEQ DOSP_84
a536 c9 28               CMP #'('
a538 f0 1e               BEQ DOSP_84

              ; parse destination drive

a53a a9 20    DOSP_78    LDA #$20           ; drive 2 flag
a53c 20 1d a6            JSR Assert_DOSFLA
a53f 20 f2 a5            JSR Get_DOS_Parameter_Byte
a542 e0 02               CPX #2
a544 b0 39               BCS DOSP_90
a546 8e 14 01            STX DOS_DRIVE_2
a549 a9 20               LDA #$20           ; drive 2 flag
a54b d0 1b               BNE DOSP_86        ; branch always

              ; parse destination unit after ON

a54d 20 82 a5 DOSP_80    JSR Get_Bank_Or_Unit
a550 4c 68 a5            JMP DOSP_86

              ; parse destination unit

a553 20 8d a5 DOSP_82    JSR Get_Unit
a556 d0 10               BNE DOSP_86

              ; parse destination filename

a558 a9 02    DOSP_84    LDA #2             ; read 2nd. filename
a55a 20 b9 a5            JSR Get_DOS_Filename
a55d 8d 13 01            STA DOS_FNLEN_2
a560 8e 15 01            STX DOS_FNADR_2
a563 8c 16 01            STY DOS_FNADR_2+1
a566 a9 02               LDA #2             ; flag 2nd. filename
a568 05 80    DOSP_86    ORA DOSFLA
a56a 85 80               STA DOSFLA
a56c 20 86 03            JSR CHRGOT
a56f f0 8f               BEQ DOSP_64
a571 c9 2c               CMP #','
a573 f0 ae               BEQ DOSP_74
a575 c9 91               CMP #$91           ; ON token
a577 f0 d4               BEQ DOSP_80
a579 c9 55               CMP #'U'
a57b f0 d6               BEQ DOSP_82
a57d d0 37    DOSP_88    BNE GeBa_Err          ; SYNTAX ERROR
a57f 4c 28 7d DOSP_90    JMP Error_Illegal_Quantity

              ; ************************
a582            Get_Bank_Or_Unit ; $a582
              ; ************************

a582 20 80 03            JSR CHRGET

              ; ********************
a585            Bank_Or_Unit ; $a585
              ; ********************

a585 c9 42               CMP #'B'
a587 f0 15               BEQ Get_Bank
a589 c9 55               CMP #'U'
a58b d0 29               BNE GeBa_Err

              ; ****************
a58d            Get_Unit ; $a58d
              ; ****************

a58d 20 f2 a5            JSR Get_DOS_Parameter_Byte
a590 e0 1f               CPX #$1f
a592 b0 56               BCS GDF_30
a594 e0 04               CPX #4
a596 90 52               BCC GDF_30
a598 8e 1c 01            STX DOS_FA
a59b a9 08               LDA #8
a59d 60                  RTS ;Size   17 [Get_Unit]

              ; ****************
a59e            Get_Bank ; $a59e
              ; ****************

a59e a9 01               LDA #1
a5a0 20 22 a6            JSR Assert_DOSFLB
a5a3 20 f2 a5            JSR Get_DOS_Parameter_Byte
a5a6 e0 10               CPX #16
a5a8 b0 d5               BCS DOSP_90
a5aa 8e 1f 01            STX DOS_BANK
a5ad a9 01               LDA #1
a5af 05 81               ORA DOSFLB
a5b1 85 81               STA DOSFLB
a5b3 a9 00               LDA #0
a5b5 60                  RTS ;Size   24 [Get_Bank]

a5b6 4c 6c 79 GeBa_Err   JMP SYNTAX_ERROR

              ; ************************
a5b9            Get_DOS_Filename ; $a5b9
              ; ************************

a5b9 20 1d a6            JSR Assert_DOSFLA  ; filename set already ?
a5bc 20 7b 87            JSR Eval_String
a5bf aa                  TAX
a5c0 f0 25               BEQ GDF_20
a5c2 a0 00               LDY #0
a5c4 20 b7 03            JSR Get_INDEXA_1
a5c7 c9 40               CMP #'@'           ; replace symbol
a5c9 d0 12               BNE GDF_10
a5cb a9 80               LDA #$80
a5cd 20 1d a6            JSR Assert_DOSFLA  ; check replace flag
a5d0 a5 80               LDA DOSFLA
a5d2 09 80               ORA #%1000 0000    ; set replace flag
a5d4 85 80               STA DOSFLA
a5d6 ca                  DEX
a5d7 e6 24               INC INDEXA         ; skip repplace char
a5d9 d0 02               BNE GDF_10
a5db e6 25               INC INDEXA+1
a5dd 8a       GDF_10     TXA
a5de c9 11               CMP #$11
a5e0 b0 0b               BCS String_Too_Long
a5e2 a6 24               LDX INDEXA
a5e4 a4 25               LDY INDEXA+1
a5e6 60                  RTS ;Size   46 [Get_DOS_Filename]
a5e7 a2 08    GDF_20     LDX #8             ; MISSING FILE NAME
a5e9 2c                  BIT
a5ea a2 09    GDF_30     LDX #9             ; ILLEGAL DEVICE NUMBER
a5ec 2c                  BIT

              ; ***************
a5ed            String_Too_Long
              ; ***************

a5ed a2 17               LDX #$17
a5ef 4c 3c 4d            JMP Print_Error_X

              ; ******************************
a5f2            Get_DOS_Parameter_Byte ; $a5f2
              ; ******************************

a5f2 20 80 03            JSR CHRGET
a5f5 f0 bf               BEQ GeBa_Err
a5f7 90 09               BCC GDPB_10
a5f9 20 59 79            JSR Need_Left_Par
a5fc 20 f4 87            JSR Get_Byte_Var
a5ff 4c 56 79            JMP Need_Right_Par
a602 4c f4 87 GDPB_10    JMP Get_Byte_Var

              ; ******************************
a605            Get_DOS_Parameter_Word ; $a605
              ; ******************************

a605 20 80 03            JSR CHRGET
a608 f0 ac               BEQ GeBa_Err
a60a 90 0e               BCC GDPW_10
a60c 20 59 79            JSR Need_Left_Par
a60f 20 12 88            JSR Get_Integer
a612 20 56 79            JSR Need_Right_Par
a615 a4 16               LDY LINNUM
a617 a5 17               LDA LINNUM+1
a619 60                  RTS ;Size   21 [Get_DOS_Parameter_Word]
a61a 4c 12 88 GDPW_10    JMP Get_Integer

              ; *********************
a61d            Assert_DOSFLA ; $a61d
              ; *********************

a61d 25 80               AND DOSFLA
a61f d0 95               BNE GeBa_Err
a621 60                  RTS ;Size    5 [Assert_DOSFLA]

              ; *********************
a622            Assert_DOSFLB ; $a622
              ; *********************

a622 25 81               AND DOSFLB
a624 d0 90               BNE GeBa_Err
a626 60                  RTS ;Size    5 [Assert_DOSFLB]


              ; Format strings for building DOS commands

              ; Values >= $80 are special codes:

              ; $c2 : SA secondary address
              ; $d0 : ID for formatting in HEADER
              ; $d1 : drive 1
              ; $d2 : drive 2
              ; $e0 : RL (record length) or 'W'
              ; $e1 : 'L' or 'S'
              ; $f0 : @ (save and replace) <- DO NOT USE (some drives are buggy)
              ; $f1 : filename 1
              ; $f2 : filename 2

              ; ******************
a627            Pat_DCLEAR ; $a627
              ; ******************

a627 49 d1              .BYTE 'I',$d1       ; INITIALIZE drive

              ; *********************
a629            Pat_DIRECTORY ; $a629
              ; *********************

a629 24 d1 3a           .BYTE '$',$d1,':',$f1 ; $ drive : filename

              ; *****************
a62d            Pat_DOPEN ; $a62d
              ; *****************

a62d f0 d1 3a           .BYTE $f0,$d1,':',$f1,',',$e1,',',$e0

              ; ******************
a635            Pat_CONCAT ; $a635
              ; ******************

a635 43 d2 3a           .BYTE 'C',$d2,':',$f2,'=',$d2,':',$f2,','

              ; ******************
a63e            Pat_APPEND ; $a63e
              ; ******************

a63e d1 3a f1           .BYTE $d1,':',$f1,",A"

              ; ******************
a643            Pat_HEADER ; $a643
              ; ******************

a643 4e d1 3a           .BYTE 'N',$d1,':',$f1,',',$d0

              ; *******************
a649            Pat_COLLECT ; $a649
              ; *******************

a649 56 d1              .BYTE 'V',$d1

              ; ******************
a64b            Pat_BACKUP ; $a64b
              ; ******************

a64b 44 d2 3d           .BYTE 'D',$d2,'=',$d1

              ; ****************
a64f            Pat_COPY ; $a64f
              ; ****************

a64f 43 d2 3a           .BYTE 'C',$d2,':',$f2,'=',$d1,':',$f1

              ; ******************
a657            Pat_RENAME ; $a657
              ; ******************

a657 52 d1 3a           .BYTE 'R',$d1,':',$f2,'=',$d1,':',$f1

              ; *******************
a65f            Pat_SCRATCH ; $a65f
              ; *******************

a65f 53 d1 3a           .BYTE 'S',$d1,':',$f1

              ; ******************
a663            Pat_RECORD ; $a663
              ; ******************

a663 50 c2 e2           .BYTE 'P',$c2,$e2,$e0

              ; *************************
a667            Build_DOS_Command ; $a667
              ; *************************

a667 8d 10 01           STA DOS_COUNT       ; length of format string
a66a 98                 TYA                 ; index to start of format string
a66b 48                 PHA                 ; save index
a66c 20 0d a8           JSR Free_DOS_Status_String
a66f a2 00              LDX #0
a671 68       BDC_10    PLA                 ; restore format index
a672 ce 10 01           DEC DOS_COUNT       ; remaining format bytes
a675 30 48              BMI BDC_22          ; -> done
a677 a8                 TAY
a678 c8                 INY                 ; increment index
a679 98                 TYA
a67a 48                 PHA                 ; save index
a67b b9 27 a6           LDA Pat_DCLEAR,Y    ; next byte
a67e 10 37              BPL BDC_18          ; -> store as is
a680 c9 c2              CMP #$c2            ; SA secondary address
a682 f0 52              BEQ BDC_24
a684 c9 d0              CMP #$d0            ; ID (formatting)
a686 f0 5d              BEQ BDC_30
a688 c9 e2              CMP #$e2            ; word (record number)
a68a f0 77              BEQ BDC_36
a68c c9 e1              CMP #$e1            ; L or S
a68e f0 61              BEQ BDC_32
a690 c9 f0              CMP #$f0            ; @
a692 f0 47              BEQ BDC_26
a694 c9 f1              CMP #$f1            ; filename 1
a696 f0 75              BEQ BDC_38
a698 c9 f2              CMP #$f2            ; filename 2
a69a f0 21              BEQ BDC_20
a69c c9 e0              CMP #$e0            ; record length or 'W'
a69e d0 05              BNE BDC_12
a6a0 ad 1e 01           LDA DOS_RL
a6a3 d0 12              BNE BDC_18
a6a5 c9 d1    BDC_12    CMP #$d1            ; drive 1
a6a7 d0 05              BNE BDC_14
a6a9 ad 12 01           LDA DOS_DRIVE_1
a6ac 10 07              BPL BDC_16
a6ae c9 d2    BDC_14    CMP #$d2            ; drive 2
a6b0 d0 bf              BNE BDC_10
a6b2 ad 14 01           LDA DOS_DRIVE_2
a6b5 09 30    BDC_16    ORA #'0'            ; bin to ASCII
a6b7 9d 00 11 BDC_18    STA DOSSTR,X
a6ba e8                 INX
a6bb d0 b4              BNE BDC_10          ; always
a6bd f0 64    BDC_20    BEQ BDC_42          ; always

a6bf 8a       BDC_22    TXA
a6c0 48                 PHA
a6c1 a2 00              LDX #<DOSSTR
a6c3 a0 11              LDY #>DOSSTR
a6c5 20 5d 92           JSR B_SETNAM
a6c8 ad 1b 01           LDA DOS_LA
a6cb ae 1c 01           LDX DOS_FA
a6ce ac 1d 01           LDY DOS_SA
a6d1 20 57 92           JSR B_SETLFS
a6d4 68                 PLA
a6d5 60                 RTS ;Size  111 [Build_DOS_Command]

a6d6 ad ed 11 BDC_24    LDA REC_SA          ; insert SA
a6d9 d0 dc              BNE BDC_18

a6db 24 80    BDC_26    BIT DOSFLA          ; insert
a6dd 30 02              BMI BDC_28
a6df 10 90              BPL BDC_10

a6e1 a9 40    BDC_28    LDA #$40 ; '@'      ; insert @
a6e3 d0 d2              BNE BDC_18

a6e5 ad 20 01 BDC_30    LDA DOS_ID          ; insert ID
a6e8 9d 00 11           STA DOSSTR,X
a6eb e8                 INX
a6ec ad 21 01           LDA DOS_ID+1
a6ef d0 c6              BNE BDC_18

a6f1 ad 1e 01 BDC_32    LDA DOS_RL          ; insert 'L'
a6f4 f0 04              BEQ BDC_34
a6f6 a9 4c              LDA #'L'
a6f8 d0 bd              BNE BDC_18

a6fa a9 53    BDC_34    LDA #'S'            ; insert "S,W"
a6fc 8d 1e 01           STA DOS_RL
a6ff a9 57              LDA #'W'
a701 d0 b4              BNE BDC_18

a703 a5 16    BDC_36    LDA LINNUM          ; insert binary word
a705 9d 00 11           STA DOSSTR,X
a708 a5 17              LDA LINNUM+1
a70a e8                 INX
a70b d0 aa              BNE BDC_18

a70d ac 11 01 BDC_38    LDY DOS_FNLEN_1     ; insert filename 1
a710 f0 33              BEQ BDC_46
a712 a0 00              LDY #0
a714 b9 b7 12 BDC_40    LDA SAVRAM,Y
a717 9d 00 11           STA DOSSTR,X
a71a e8                 INX
a71b c8                 INY
a71c cc 11 01           CPY DOS_FNLEN_1
a71f d0 f3              BNE BDC_40
a721 f0 23              BEQ BDC_48

a723 ad 15 01 BDC_42    LDA DOS_FNADR_2     ; insert filename 2
a726 85 24              STA INDEXA
a728 ad 16 01           LDA DOS_FNADR_2+1
a72b 85 25              STA INDEXA+1
a72d ac 13 01           LDY DOS_FNLEN_2
a730 f0 13              BEQ BDC_46
a732 a0 00              LDY #0
a734 20 b7 03 BDC_44    JSR Get_INDEXA_1
a737 8d 03 ff           STA MMU_LCRC
a73a 9d 00 11           STA DOSSTR,X
a73d e8                 INX
a73e c8                 INY
a73f cc 13 01           CPY DOS_FNLEN_2
a742 d0 f0              BNE BDC_44
a744 24                 .BYTE $24
a745 ca       BDC_46    DEX
a746 4c 71 a6 BDC_48    JMP BDC_10

              ; *****************
a749            Need_Name ; $a749
              ; *****************

a749 29 e6              AND #%1110 0110 ; $e6
a74b f0 03              BEQ Assert_Filename
a74d 4c 6c 79 NeNa_Err  JMP SYNTAX_ERROR

              ; ***********************
a750            Assert_Filename ; $a750
              ; ***********************

a750 a5 80              LDA DOSFLA
a752 29 01              AND #1
a754 c9 01              CMP #1
a756 d0 f5              BNE NeNa_Err
a758 a5 80              LDA DOSFLA
a75a 60                 RTS ;Size   11 [Assert_Filename]

              ; ***************************
a75b            Unit_And_Drive_Only ; $a75b
              ; ***************************

              ;                  D U
a75b 29 e7              AND #%1110 0111 ; $e7
a75d d0 ee              BNE NeNa_Err
a75f 60                 RTS ;Size    5 [Unit_And_Drive_Only]

              ; ********************
a760            Deny_AT_W_LA ; $a760
              ; ********************

a760 29 c4              AND #%1100 0100 ; $c4
a762 d0 e9              BNE NeNa_Err
a764 a5 80              LDA DOSFLA

              ; *****************************
a766            Require_Two_Filenames ; $a766
              ; *****************************

a766 29 03              AND #3
a768 c9 03              CMP #3
a76a d0 e1              BNE NeNa_Err
a76c a5 80              LDA DOSFLA
a76e 60                 RTS ;Size    9 [Require_Two_Filenames]

              ; ***************************
a76f            Require_LA_Filename ; $a76f
              ; ***************************

a76f 29 05              AND #5
a771 c9 05              CMP #5
a773 d0 d8              BNE NeNa_Err
a775 a5 80              LDA DOSFLA
a777 60                 RTS ;Size    9 [Require_LA_Filename]

              ; *****************
a778            Update_DS ; $a778
              ; *****************

a778 a5 7a              LDA DS_LEN          ; Allocated ?
a77a d0 19              BNE UpDS_10         ; -> yes
a77c a9 28              LDA #40             ; fixed length
a77e 85 7a              STA DS_LEN
a780 20 99 92           JSR Allocate_String_Space
a783 86 7b              STX DS_ADR
a785 84 7c              STY DS_ADR+1
a787 a0 28              LDY #40             ; fixed length
a789 8d 04 ff           STA MMU_LCRD
a78c a9 7a              LDA #<DS_LEN        ; address of descriptor low
a78e 91 7b              STA (DS_ADR),Y      ; back reference low
a790 c8                 INY
a791 a9 00              LDA #>DS_LEN        ; address of descriptor high
a793 91 7b              STA (DS_ADR),Y      ; back reference high
a795 ae 1c 01 UpDS_10   LDX DOS_FA          ; unit
a798 d0 05              BNE UpDS_20         ; use defined unit
a79a a2 08              LDX #8              ; set default
a79c 8e 1c 01           STX DOS_FA          ; FA
a79f a9 00    UpDS_20   LDA #0              ; LA
a7a1 a0 6f              LDY #$6f            ; SA (command channel 15)
a7a3 20 57 92           JSR B_SETLFS
a7a6 a9 00              LDA #0
a7a8 20 5d 92           JSR B_SETNAM        ; no name
a7ab 20 d8 90           JSR B_OPEN          ; open command channel
a7ae a2 00              LDX #0
a7b0 20 c6 ff           JSR K_CHKIN         ; select for input
a7b3 b0 20              BCS UpDS_50
a7b5 a0 ff              LDY #$ff            ; pre increment loop
a7b7 c8       UpDS_30   INY
a7b8 20 63 92           JSR B_BASIN         ; read from command channel
a7bb 8d 04 ff           STA MMU_LCRD
a7be c9 0d              CMP #CR             ; stop reading at CR
a7c0 f0 06              BEQ UpDS_40
a7c2 91 7b              STA (DS_ADR),Y      ; store message
a7c4 c0 28              CPY #40             ; maximum length
a7c6 90 ef              BCC UpDS_30         ; loop

              ; *******
a7c8            UpDS_40
              ; *******

a7c8 a9 00              LDA #0              ; use zero instead of CR
a7ca 91 7b              STA (DS_ADR),Y      ; insert string limiter
a7cc 20 6f 92           JSR B_CLRCH         ; reset input channel
a7cf a9 00              LDA #0
a7d1 38                 SEC
a7d2 4c 75 92           JMP B_CLOSE         ; close channel and return

a7d5 48       UpDS_50   PHA                 ; push error code
a7d6 20 c8 a7           JSR UpDS_40         ; close channel
a7d9 20 0d a8           JSR Free_DOS_Status_String
a7dc 68                 PLA                 ; pull error code
a7dd aa                 TAX
a7de 4c 3c 4d           JMP Print_Error_X   ; print error and exit

              ; ********************
a7e1            ARE_YOU_SURE ; $a7e1
              ; ********************

a7e1 24 7f              BIT RUNMOD
a7e3 30 25              BMI AYS_30          ; reply positive while running
a7e5 20 81 92           JSR B_PRIMM
a7e8 41 52 45           .BYTE "ARE YOU SURE?",0
a7f6 20 6f 92           JSR B_CLRCH
a7f9 20 63 92           JSR B_BASIN
a7fc 48                 PHA                 ; push first read char
a7fd c9 0d    AYS_10    CMP #CR
a7ff f0 05              BEQ AYS_20
a801 20 63 92           JSR B_BASIN
a804 d0 f7              BNE AYS_10          ; loop until CR
a806 68       AYS_20    PLA                 ; pull first char
a807 c9 59              CMP #'Y'            ; was it 'Y' ?
a809 60                 RTS ;Size   41 [ARE_YOU_SURE]
a80a a9 00    AYS_30    LDA #0
a80c 60                 RTS ;Size   44 [ARE_YOU_SURE]

              ; ******************************
a80d            Free_DOS_Status_String ; $a80d
              ; ******************************

a80d 98                 TYA                 ; save Y
a80e 48                 PHA
a80f a5 7a              LDA DS_LEN
a811 f0 0d              BEQ EDS_10          ; -> DS$ not allocated
a813 a0 28              LDY #40             ; fixed length
a815 98                 TYA
a816 8d 04 ff           STA MMU_LCRD
a819 91 7b              STA (DS_ADR),Y      ; back reference low
a81b c8                 INY
a81c a9 ff              LDA #$ff
a81e 91 7b              STA (DS_ADR),Y      ; back reference high
a820 a9 00    EDS_10    LDA #0
a822 8d 03 ff           STA MMU_LCRC
a825 85 7a              STA DS_LEN          ; mark as free
a827 68                 PLA
a828 a8                 TAY                 ; restore Y
a829 60       EDS_Ret   RTS ;Size   29 [Free_DOS_Status_String]

              ; **************
a82a            KEYREV ; $a82a
              ; **************

a82a 2c 30 20           .BYTE ",0 YEK"

              ; ********************
a830            Print_Byte_A ; $a830
              ; ********************

a830 aa                 TAX                 ; X = low byte
a831 98                 TYA
a832 48                 PHA                 ; save Y
a833 a9 00              LDA #0              ; A = high byte
a835 20 32 8e           JSR Print_Integer_XA
a838 68                 PLA
a839 a8                 TAY                 ; restore Y
a83a 60                 RTS ;Size   11 [Print_Byte_A]

              ; **********************
a83b            To_Direct_Mode ; $a83b
              ; **********************

a83b 85 3c              STA CURLIN+1        ; store current line high
a83d 88                 DEY                 ; decrement stack index
a83e aa                 TAX                 ; X = current line high
a83f e8                 INX                 ; ++X
a840 d0 02              BNE TDM_Ret         ; -> branch if CURLIN+1 was not $ff
a842 86 7f              STX RUNMOD          ; RUNMOD = 0 -> direct mode
a844 60       TDM_Ret   RTS ;Size   10 [To_Direct_Mode]

              ; **************
a845            Map_IO ; $a845
              ; **************

a845 48                 PHA
a846 a9 00              LDA #0
a848 8d 00 ff           STA MMU_CR          ; Map in I/O and ROM
a84b 68                 PLA
a84c 60                 RTS ;Size    8 [Map_IO]

              ; *****************
a84d            BASIC_IRQ ; $a84d
              ; *****************

a84d ad fd 12           LDA IRQ_ACTIVE_FLAG ; already executing IRQ ?
a850 f0 01              BEQ BIRQ_10         ; -> no  : continue
a852 60                 RTS                 ; -> yes : return ;Size    6 [BASIC_IRQ]
a853 ee fd 12 BIRQ_10   INC IRQ_ACTIVE_FLAG ; flag IRQ as active

              ; Copy all sprite coordinates to VIC

a856 a2 10              LDX #16
a858 bd d6 11 BIRQ_12   LDA VSH,X
a85b 9d 00 d0           STA VIC,X
a85e ca                 DEX
a85f 10 f7              BPL BIRQ_12

              ; Perform sprite movement

a861 a0 07              LDY #7              ; sprite index
a863 ad 15 d0 BIRQ_14   LDA VIC_SPR_ENA
a866 39 b3 6c           AND Bit_Mask,Y
a869 f0 38              BEQ BIRQ_20         ; -> sprite disabled
a86b be d9 6d           LDX Sprite_Offset,Y ; X = index to sprite parameter
a86e bd 7e 11           LDA SPRITE_DATA,X   ; A = speed
a871 f0 30              BEQ BIRQ_20         ; -> sprite doesn't move
a873 9d 7f 11           STA SPRITE_DATA+1,X ; set movement increment
a876 98       BIRQ_16   TYA                 ; sprite index
a877 0a                 ASL A               ; * 2
a878 a8                 TAY
a879 bd 80 11           LDA SPRITE_DATA+2,X ; quadrant
a87c 38                 SEC
a87d e9 01              SBC #1              ; quadrant - 1
a87f e8                 INX
a880 e8                 INX                 ; sprite y position
a881 c8                 INY
a882 20 f4 a9           JSR Move_Sprite     ; update y position
a885 ca                 DEX
a886 ca                 DEX                 ; sprite x position
a887 88                 DEY
a888 bd 80 11           LDA SPRITE_DATA+2,X
a88b 20 f4 a9           JSR Move_Sprite     ; update x position
a88e 08                 PHP
a88f 98                 TYA
a890 4a                 LSR A
a891 a8                 TAY                 ; sprite index
a892 28                 PLP
a893 90 09              BCC BIRQ_18
a895 ad e6 11           LDA VSH+16     ; MSB sprite postion
a898 59 b3 6c           EOR Bit_Mask,Y
a89b 8d e6 11           STA VSH+16     ; MSB sprite postion
a89e de 7f 11 BIRQ_18   DEC SPRITE_DATA+1,X
a8a1 d0 d3              BNE BIRQ_16
a8a3 88       BIRQ_20   DEY
a8a4 10 bd              BPL BIRQ_14          ; -> loop next sprite

              ; handle light pen, sprite-background and sprite-sprite collision

              ; 7....... interrupt flag
              ; .654.... unused
              ; ....3... light pen
              ; .....2.. sprite/sprite collision
              ; ......1. sprite/background collision
              ; .......0 raster interrupt

a8a6 ad 19 d0           LDA VIC_IRQ_REG     ; load IRQ mask
a8a9 8d 19 d0           STA VIC_IRQ_REG     ; reset all IRQ's
a8ac 29 0e              AND #%0000 1110     ; light-pen, sprite collision
a8ae f0 44              BEQ BIRQ_30         ; -> no collision
a8b0 4a                 LSR A               ; shift out raster IRQ

a8b1 a0 01              LDY #1              ; Y=1 sprite/background, Y=0 sprite/sprite
a8b3 4a       BIRQ_22   LSR A               ; C = collision
a8b4 90 20              BCC BIRQ_28         ; -> none
a8b6 48                 PHA                 ; save IRQ flags1
a8b7 b9 1e d0           LDA VIC_SS_COLL,Y
a8ba 19 e7 11           ORA VSH_SS_COLL,Y
a8bd 99 e7 11           STA VSH_SS_COLL,Y   ; update collision shadow register
a8c0 a9 00              LDA #0
a8c2 99 1e d0           STA VIC_SS_COLL,Y   ; clear collision register

              ; 7....... working on collision
              ; .6543... unused
              ; .....2.. light pen
              ; ......1. sprite/background
              ; .......0 sprite/sprite

a8c5 ad 7f 12           LDA INT_VAL         ; flag for collision treatment
a8c8 c0 00              CPY #0
a8ca f0 01              BEQ BIRQ_24         ; -> Y=0 : sprite/sprite coll
a8cc 4a                 LSR A
a8cd 4a       BIRQ_24   LSR A
a8ce 90 05              BCC BIRQ_26
a8d0 a9 ff              LDA #$ff
a8d2 99 76 12           STA INT_TRIP_FLAG,Y
a8d5 68       BIRQ_26   PLA
a8d6 88       BIRQ_28   DEY                 ; Y=1 sprite/background, Y=0 sprite/sprite
a8d7 10 da              BPL BIRQ_22

              ; handle light pen

a8d9 4a                 LSR A               ; C = light pen flag
a8da 90 18              BCC BIRQ_30         ; -> none
a8dc ad 13 d0           LDA VIC_LPX         ; copy positions from VIC to shadow
a8df 8d e9 11           STA VSH_LPX
a8e2 ad 14 d0           LDA VIC_LPY
a8e5 8d ea 11           STA VSH_LPY
a8e8 ad 7f 12           LDA INT_VAL
a8eb 29 04              AND #%0000 0100     ; $04
a8ed f0 05              BEQ BIRQ_30         ; -> no light pen IRQ
a8ef a9 ff              LDA #$ff
a8f1 8d 78 12           STA Light_Pen_Flag  ; set flag

              ; play music

a8f4 a2 00    BIRQ_30   LDX #0              ; X=0,2,4 : voice = 1,2,3
a8f6 bd 24 12 BIRQ_32   LDA Snd_Duration+1,X      ; duration high
a8f9 30 27              BMI BIRQ_34         ; -> inactive
a8fb bd 23 12           LDA Snd_Duration,X        ; duration low
a8fe 38                 SEC                 ; duration -= Snd_Tempo
a8ff ed 22 12           SBC Snd_Tempo
a902 9d 23 12           STA Snd_Duration,X
a905 b0 1b              BCS BIRQ_34
a907 bd 24 12           LDA Snd_Duration+1,X
a90a e9 00              SBC #0
a90c 9d 24 12           STA Snd_Duration+1,X
a90f b0 11              BCS BIRQ_34         ; -> greater 0 : continue
a911 8a                 TXA
a912 4a                 LSR A
a913 a8                 TAY                 ; voice #
a914 b9 30 12           LDA WAVE0,Y         ; envelope
a917 29 fe              AND #%1111 1110     ; $fe
a919 48                 PHA
a91a b9 39 70           LDA offtab,Y        ; SID offset
a91d a8                 TAY
a91e 68                 PLA
a91f 99 04 d4           STA SID_Control_1,Y ; set new envelope
a922 e8       BIRQ_34   INX
a923 e8                 INX                 ; next voice
a924 e0 06              CPX #6
a926 d0 ce              BNE BIRQ_32         ; -> loop next voice

a928 a0 02              LDY #2              ; loop for voices 2,1,0
a92a b9 85 12 BIRQ_36   LDA Sound_Duration_1_Hi,Y
a92d 10 06              BPL BIRQ_40         ; -> voice is active
a92f 88       BIRQ_38   DEY
a930 10 f8              BPL BIRQ_36
a932 4c f0 a9           JMP Exit_BASIC_IRQ

a935 18       BIRQ_40   CLC
a936 b9 9d 12           LDA SOUND_FREQ_LO,Y
a939 79 97 12           ADC SOUND_STEP_LO,Y
a93c 99 9d 12           STA SOUND_FREQ_LO,Y
a93f b9 a0 12           LDA SOUND_FREQ_HI,Y
a942 79 9a 12           ADC SOUND_STEP_HI,Y
a945 99 a0 12           STA SOUND_FREQ_HI,Y
a948 b9 94 12           LDA SOUND_DIR,Y
a94b aa                 TAX
a94c 29 01              AND #1
a94e f0 2e              BEQ BIRQ_46
a950 90 0f              BCC BIRQ_42
a952 38                 SEC
a953 b9 9d 12           LDA SOUND_FREQ_LO,Y
a956 f9 8e 12           SBC SOUND_MIN_LO,Y
a959 b9 a0 12           LDA SOUND_FREQ_HI,Y
a95c f9 91 12           SBC SOUND_MIN_HI,Y
a95f b0 4d              BCS BIRQ_54
a961 e0 02    BIRQ_42   CPX #2
a963 90 0a              BCC BIRQ_44
a965 20 da a9           JSR Negate_Sound_Step
a968 a9 02              LDA #2
a96a 99 94 12           STA SOUND_DIR,Y
a96d d0 33              BNE BIRQ_50
a96f b9 88 12 BIRQ_44   LDA SOUND_MAX_LO,Y
a972 99 9d 12           STA SOUND_FREQ_LO,Y
a975 b9 8b 12           LDA SOUND_MAX_HI,Y
a978 99 a0 12           STA SOUND_FREQ_HI,Y
a97b 4c ae a9           JMP BIRQ_54
a97e b0 14    BIRQ_46   BCS BIRQ_48
a980 b9 a0 12           LDA SOUND_FREQ_HI,Y
a983 d9 8b 12           CMP SOUND_MAX_HI,Y
a986 90 26              BCC BIRQ_54
a988 d0 0a              BNE BIRQ_48
a98a b9 9d 12           LDA SOUND_FREQ_LO,Y
a98d d9 88 12           CMP SOUND_MAX_LO,Y
a990 90 1c              BCC BIRQ_54
a992 f0 1a              BEQ BIRQ_54
a994 e0 02    BIRQ_48   CPX #2
a996 90 0a              BCC BIRQ_50
a998 20 da a9           JSR Negate_Sound_Step
a99b a9 03              LDA #3
a99d 99 94 12           STA SOUND_DIR,Y
a9a0 d0 cd              BNE BIRQ_44
a9a2 b9 8e 12 BIRQ_50   LDA SOUND_MIN_LO,Y
a9a5 99 9d 12           STA SOUND_FREQ_LO,Y
a9a8 b9 91 12           LDA SOUND_MIN_HI,Y
a9ab 99 a0 12           STA SOUND_FREQ_HI,Y
a9ae be 39 70 BIRQ_54   LDX offtab,Y
a9b1 b9 9d 12           LDA SOUND_FREQ_LO,Y
a9b4 9d 00 d4           STA SID_Freq_1,X
a9b7 b9 a0 12           LDA SOUND_FREQ_HI,Y
a9ba 9d 01 d4           STA SID_Freq_1+1,X
a9bd 98                 TYA
a9be aa                 TAX
a9bf bd 82 12           LDA Sound_Duration_1_Lo,X
a9c2 d0 03              BNE BIRQ_56
a9c4 de 85 12           DEC Sound_Duration_1_Hi,X
a9c7 de 82 12 BIRQ_56   DEC Sound_Duration_1_Lo,X
a9ca bd 85 12           LDA Sound_Duration_1_Hi,X
a9cd 10 08              BPL BIRQ_58
a9cf a9 08              LDA #8
a9d1 be 39 70           LDX offtab,Y
a9d4 9d 04 d4           STA SID_Control_1,X
a9d7 4c 2f a9 BIRQ_58   JMP BIRQ_38


              ; *************************
a9da            Negate_Sound_Step ; $a9da
              ; *************************

a9da b9 97 12           LDA SOUND_STEP_LO,Y
a9dd 49 ff              EOR #$ff
a9df 18                 CLC
a9e0 69 01              ADC #1
a9e2 99 97 12           STA SOUND_STEP_LO,Y
a9e5 b9 9a 12           LDA SOUND_STEP_HI,Y
a9e8 49 ff              EOR #$ff
a9ea 69 00              ADC #0
a9ec 99 9a 12           STA SOUND_STEP_HI,Y
a9ef 60                 RTS ;Size   22 [Negate_Sound_Step]


              ; **********************
a9f0            Exit_BASIC_IRQ ; $a9f0
              ; **********************

a9f0 ce fd 12           DEC IRQ_ACTIVE_FLAG
a9f3 60                 RTS ;Size    4 [Exit_BASIC_IRQ]

              ; *******************
a9f4            Move_Sprite ; $a9f4
              ; *******************

a9f4 48                 PHA                 ; save quadrant
a9f5 18                 CLC
a9f6 bd 81 11           LDA SPRITE_DATA+3,X ; movement
a9f9 7d 85 11           ADC SPRITE_DATA+7,X ; old position
a9fc 9d 85 11           STA SPRITE_DATA+7,X ; new position
a9ff bd 82 11           LDA SPRITE_DATA+4,X
aa02 7d 86 11           ADC SPRITE_DATA+8,X
aa05 9d 86 11           STA SPRITE_DATA+8,X
aa08 68                 PLA                 ; restore quadrant
aa09 90 13              BCC MoSp_Ret
aa0b 4a                 LSR A
aa0c 4a                 LSR A               ; C = bit2
aa0d b9 d6 11           LDA VSH,Y
aa10 b0 05              BCS MoSp_10
aa12 69 01              ADC #1
aa14 4c 1b aa           JMP MoSp_20
aa17 e9 01    MoSp_10   SBC #1
aa19 c9 ff              CMP #$ff
aa1b 99 d6 11 MoSp_20   STA VSH,Y
aa1e 60       MoSp_Ret  RTS ;Size   43 [Move_Sprite]

              ; *******************
aa1f            BASIC_STASH ; $aa1f
              ; *******************

aa1f a9 84              LDA #$84            ; STASH marker
aa21 4c 2b aa           JMP SWAP_10

              ; *******************
aa24            BASIC_FETCH ; $aa24
              ; *******************

aa24 a9 85              LDA #$85            ; FETCH marker
aa26 4c 2b aa           JMP SWAP_10

              ; ******************
aa29            BASIC_SWAP ; $aa29
              ; ******************

aa29 a9 86              LDA #$86            ; SWAP marker
aa2b 48       SWAP_10   PHA                 ; save marker
aa2c 20 12 88           JSR Get_Integer     ; get byte count
aa2f 20 45 a8           JSR Map_IO
aa32 8c 07 df           STY DMA_CNT_LO
aa35 8d 08 df           STA DMA_CNT_HI
aa38 20 0f 88           JSR Comma_And_LINNUM ; get internal address
aa3b 20 45 a8           JSR Map_IO
aa3e 8c 02 df           STY DMA_CBM_LO
aa41 8d 03 df           STA DMA_CBM_HI
aa44 20 0f 88           JSR Comma_And_LINNUM ; get external address
aa47 20 45 a8           JSR Map_IO
aa4a 8c 04 df           STY DMA_REU_LO
aa4d 8d 05 df           STA DMA_REU_HI
aa50 20 09 88           JSR Comma_And_Byte   ; get external bank
aa53 e0 10              CPX #16              ; limit to 1 Mbyte
aa55 b0 0e              BCS SWAP_Err
aa57 20 45 a8           JSR Map_IO
aa5a 8e 06 df           STX DMA_REU_BA
aa5d 68                 PLA                  ; restore marker
aa5e a8                 TAY                  ; Y = marker
aa5f ae d5 03           LDX USER_BANK        ; user bank
aa62 4c 50 ff           JMP K_DMA            ; do it
aa65 4c 28 7d SWAP_Err  JMP Error_Illegal_Quantity

              ; **********************
aa68            FAC1_Round_INT ; $aa68
              ; **********************

aa68 20 47 8c           JSR Round_FAC1
aa6b 4c c7 8c           JMP FAC1_INT

              ; ********************
aa6e            Output_Comma ; $aa6e
              ; ********************

aa6e 20 d3 42           JSR FNDPNT_from_Bank_1
aa71 c9 2c              CMP #','
aa73 d0 07              BNE OuCo_10
aa75 ad 33 01           LDA BLFD            ; fill character
aa78 20 eb 98           JSR Chrout_Using
aa7b c8                 INY
aa7c 38       OuCo_10   SEC
aa7d 6e 25 01           ROR DOLR            ; flag dollar used
aa80 60                 RTS ;Size   19 [Output_Comma]


aa81 ff ff ff           .FILL $ae63-* ($ff) ; 994 bytes

              ; *****************
ae63            EasterEgg ; $ae63
              ; *****************

ae63 7b e9 77           .BYTE $7b,$e9,$77,$6a,$5f,$5e,$5d,$be
ae6b 21 3d 24           .BYTE $21,$3d,$24,$37,$3f,$22,$55,$20
ae73 24 4a 30           .BYTE $24,$4a,$30,$27,$3a,$4e,$2f,$35
ae7b 4d 4c 4f           .BYTE $4d,$4c,$4f,$40,$47,$46,$68,$69
ae83 88 15 1f           .BYTE $88,$15,$1f,$0c,$08,$1f,$0f,$19
ae8b 69 5f 71           .BYTE $69,$5f,$71,$96,$05,$13,$11,$74
ae93 89 05 1e           .BYTE $89,$05,$1e,$0d,$01,$43,$6d,$98
ae9b 06 10 13           .BYTE $06,$10,$13,$19,$67,$94,$1c,$05
aea3 75 37 19           .BYTE $75,$37,$19,$ee,$70,$70,$1d,$f9
aeab 61 66 66           .BYTE $61,$66,$66,$79,$79,$73,$38,$39
aeb3 e3 6f 7b           .BYTE $e3,$6f,$7b,$6c,$78,$6f,$7f,$69
aebb 19 2f 01           .BYTE $19,$2f,$01,$e2,$6e,$6a,$05,$ec
aec3 5e 48 5d           .BYTE $5e,$48,$5d,$15,$3f,$da,$5c,$4a
aecb 56 32 d9           .BYTE $56,$32,$d9,$51,$4e,$58,$5c,$51
aed3 06 2a cf           .BYTE $06,$2a,$cf,$5a,$4e,$40,$46,$2c
aedb d3 43 4d           .BYTE $d3,$43,$4d,$41,$4e,$47,$08,$09
aee3 e9 36 b0           .BYTE $e9,$36,$b0,$b6,$b4,$de,$bc,$ae
aeeb be a1 dd           .BYTE $be,$a1,$dd,$b4,$b8,$b8,$d2,$a0
aef3 cb a7 a8           .BYTE $cb,$a7,$a8,$a3,$aa,$ce,$b9,$a4
aefb a6 af cf           .BYTE $a6,$af,$cf,$ed,$e7

af00                    .FILL $af00-* (0) ; 0 bytes

              ; ************************
af00            BASIC_Jump_Table ; $af00
              ; ************************

af00 4c b4 84           JMP Real_To_Integer
af03 4c 3c 79           JMP Integer_To_Real
af06 4c 42 8e           JMP Format_FAC1
af09 4c 52 80           JMP VAL_10
af0c 4c 15 88           JMP FAC1_To_LINNUM
af0f 4c 75 8c           JMP Word_To_FAC1
af12 4c 2e 88           JMP AY_Minus_FAC1
af15 4c 31 88           JMP OP_MINUS
af18 4c 45 88           JMP Add_Var_AY_To_FAC1
af1b 4c 48 88           JMP OP_PLUS
af1e 4c 24 8a           JMP AY_Mult_FAC1
af21 4c 27 8a           JMP OP_MULT
af24 4c 49 8b           JMP AY_Divided_By_FAC1
af27 4c 4c 8b           JMP OP_DIV
af2a 4c ca 89           JMP FUNC_LOG
af2d 4c fb 8c           JMP FUNC_INT
af30 4c b7 8f           JMP FUNC_SQR
af33 4c fa 8f           JMP OP_NEG
af36 4c be 8f           JMP POT_XY
af39 4c c1 8f           JMP OP_POWER
af3c 4c 33 90           JMP FUNC_EXP
af3f 4c 09 94           JMP FUNC_COS
af42 4c 10 94           JMP FUNC_SIN
af45 4c 59 94           JMP FUNC_TAN
af48 4c b3 94           JMP FUNC_ATN
af4b 4c 47 8c           JMP Round_FAC1
af4e 4c 84 8c           JMP FUNC_ABS
af51 4c 57 8c           JMP Test_FAC1_Sign
af54 4c 87 8c           JMP Compare_AY_FAC1
af57 4c 37 84           JMP RND_10
af5a 4c b4 8a           JMP Load_FAC2_From_AY_RAM
af5d 4c 89 8a           JMP Load_FAC2_From_AY_ROM
af60 4c 85 7a           JMP LoVa_70
af63 4c d4 8b           JMP Load_FAC1_AY
af66 4c 00 8c           JMP FAC1_To_XY
af69 4c 28 8c           JMP FAC2_To_FAC1
af6c 4c 38 8c           JMP FAC1_Round_And_Copy_To_FAC2
af6f 4c 28 48           JMP BASIC_Operator
af72 4c 30 9b           JMP Draw_Line
af75 4c fb 9b           JMP Double_Pixel
af78 4c 50 67           JMP CIRC_SUB
af7b 4c 9b 5a           JMP BASIC_RUN
af7e 4c f3 51           JMP Reset_BASIC_Execution
af81 4c f8 51           JMP BASIC_CLR
af84 4c d6 51           JMP BASIC_NEW
af87 4c 4f 4f           JMP Relink
af8a 4c 0a 43           JMP CRUNCH
af8d 4c 64 50           JMP Search_BASIC_Line
af90 4c f6 4a           JMP Next_Statement
af93 4c d7 78           JMP Vectored_EVAL
af96 4c ef 77           JMP Eval_Expression
af99 4c a6 5a           JMP LINK_RUN
af9c 4c 81 5a           JMP Set_Run_Mode
af9f 4c a0 50           JMP Scan_Linenumber
afa2 4c ea 92           JMP Garbage_Collection
afa5 4c cd 4d           JMP MAIN_02

afa8 ff ff ff           .FILL $b000-* ($ff) ;   88 bytes ; 88 bytes

              ; *********************
b000            BASIC_MONITOR ; $b000
              ; *********************

b000 4c 21 b0           JMP Mon_Entry_By_Call

              ; *****************
b003            Mon_Break ; $b003
              ; *****************

b003 4c 09 b0           JMP Mon_Entry_By_Break

              ; *******************
b006            Mon_Command ; $b006
              ; *******************

b006 4c b2 b0           JMP Mon_Command_Switch

              ; ******************
b009            Mon_Entry_By_Break
              ; ******************

b009 20 7d ff           JSR K_PRIMM
b00c 0d 42 52           .BYTE "\rBREAK",7,0
b014 68                 PLA                 ; bank of interrupted program
b015 85 02              STA BANK
b017 a2 05              LDX #5
b019 68       MEBB_10   PLA
b01a 95 03              STA PC_HI,X         ; save CPU registers and flags
b01c ca                 DEX
b01d 10 fa              BPL MEBB_10
b01f 30 25              BMI Mon_Start       ; always

              ; *************************
b021            Mon_Entry_By_Call ; $b021
              ; *************************

b021 a9 00              LDA #0
b023 8d 00 ff           STA MMU_CR          ; system bank
b026 85 06              STA A_REG           ; clear register saves
b028 85 07              STA X_REG
b02a 85 08              STA Y_REG
b02c 85 05              STA S_REG
b02e a9 00              LDA #<BASIC_MONITOR ; default for PC save
b030 a0 b0              LDY #>BASIC_MONITOR
b032 85 04              STA PC_LO
b034 84 03              STY PC_HI
b036 a9 0f              LDA #15
b038 85 02              STA BANK            ; bank configuration for monitor
b03a 20 7d ff           JSR K_PRIMM
b03d 0d 4d 4f           .BYTE "\rMONITOR",0

              ; *****************
b046            Mon_Start ; $b046
              ; *****************

b046 d8                 CLD                 ; clear decimal mode
b047 ba                 TSX
b048 86 09              STX CHARAC          ; save stack pointer
b04a a9 c0              LDA #$c0            ; activate kernal and I/O messages
b04c 20 90 ff           JSR K_SETMSG        ; set message flag
b04f 58                 CLI                 ; enable interrupts

              ; ****************
b050            Mon_Print_Header
              ; ****************

b050 20 7d ff           JSR K_PRIMM         ; print register header
b053 0d 20 20           .BYTE "\r    PC  SR AC XR YR SP\r; "
b06d 1b 51 00           .BYTE $1b,$51,$00
b070 a5 02              LDA BANK
b072 20 d2 b8           JSR Mon_Bin_To_Hex
b075 8a                 TXA                 ; hex value of lower nibble
b076 20 d2 ff           JSR K_BSOUT         ; prinz bank as single hex
b079 a5 03              LDA PC_HI
b07b 20 c2 b8           JSR Mon_Hex
b07e a0 02              LDY #2
b080 b9 02 00 MPH_10    LDA BANK,Y          ; print all register values
b083 20 a5 b8           JSR Mon_Hex_Blank
b086 c8                 INY
b087 c0 08              CPY #8
b089 90 f5              BCC MPH_10

              ; ****************
b08b            Mon_Main ; $b08b
              ; ****************

b08b 20 b4 b8           JSR Mon_CR
b08e a2 00              LDX #0
b090 86 7a              STX DS_LEN
b092 20 cf ff MoMa_10   JSR K_BASIN
b095 9d 00 02           STA BUF,X
b098 e8                 INX
b099 e0 a1              CPX #161            ; max. buffer size
b09b b0 1f              BCS Mon_Error
b09d c9 0d              CMP #CR             ; end of input
b09f d0 f1              BNE MoMa_10
b0a1 a9 00              LDA #0
b0a3 9d ff 01           STA BUF-1,X         ; zero terminate buffer
b0a6 20 e9 b8 MoMa_20   JSR Mon_Get_Char
b0a9 f0 e0              BEQ Mon_Main
b0ab c9 20              CMP #' '
b0ad f0 f7              BEQ MoMa_20
b0af 6c 2e 03           JMP (EXMON)         ; JMP Mon_Command -> Switch

              ; **************************
b0b2            Mon_Command_Switch ; $b0b2
              ; **************************

b0b2 a2 15              LDX #21             ; # of commands
b0b4 dd e6 b0 MoCS_10   CMP cmdchr,X
b0b7 f0 0c              BEQ MoMa_30
b0b9 ca                 DEX
b0ba 10 f8              BPL MoCS_10

              ; *****************
b0bc            Mon_Error ; $b0bc
              ; *****************

b0bc 20 7d ff           JSR K_PRIMM
b0bf 1d 3f 00           .BYTE $1d,$3f,$00   ; cursor right, ?, 0
b0c2 4c 8b b0           JMP Mon_Main

              ; ***************
b0c5            MoMa_30 ; $b0c5
              ; ***************

b0c5 e0 13              CPX #19
b0c7 b0 12              BCS MoMa_40         ; -> Load, Save or Verify
b0c9 e0 0f              CPX #15
b0cb b0 13              BCS MoMa_50         ; -> numeric conversion
b0cd 8a                 TXA
b0ce 0a                 ASL A
b0cf aa                 TAX
b0d0 bd fd b0           LDA cmdtbl+1,X
b0d3 48                 PHA
b0d4 bd fc b0           LDA cmdtbl,X
b0d7 48                 PHA
b0d8 4c a7 b7           JMP Mon_Got_Aval    ; parse arguments, then execute function
b0db 85 93    MoMa_40   STA K_VERCK         ; store 'L', or 'S' or 'V'
b0dd 4c 37 b3           JMP Mon_Load_Save   ; load, save or verify
b0e0 4c b1 b9 MoMa_50   JMP Mon_Convert

              ; ****************
b0e3            Mon_Exit ; $b0e3
              ; ****************

b0e3 6c 00 0a           JMP (RESET_VECTOR)

b0e6 41 43 44 cmdchr    .BYTE "ACDFGHJMRTX@.>;"
b0f5 24 2b 26 cmdnum    .BYTE "$+&%"
b0f9 4c 53 56           .BYTE "LSV"
b0fc 05 b4    cmdtbl    .WORD Mon_Assemble     - 1  ; A
b0fe 30 b2              .WORD Mon_Compare -      1  ; C
b100 98 b5              .WORD Mon_Disassemble  - 1  ; D
b102 da b3              .WORD Mon_Fill         - 1  ; F
b104 d5 b1              .WORD Mon_Go           - 1  ; G
b106 cd b2              .WORD Mon_Hunt         - 1  ; H
b108 de b1              .WORD Mon_Gosub        - 1  ; J
b10a 51 b1              .WORD Mon_Memory       - 1  ; M
b10c 4f b0              .WORD Mon_Print_Header - 1  ; R
b10e 33 b2              .WORD Mon_Transfer     - 1  ; T
b110 e2 b0              .WORD Mon_Exit         - 1  ; X
b112 8f ba              .WORD Mon_Disk         - 1  ; @
b114 05 b4              .WORD Mon_Assemble     - 1  ; .
b116 aa b1              .WORD Mon_Set_Memory   - 1  ; >
b118 93 b1              .WORD Mon_Set_Register - 1  ; ;

              ; *****************
b11a            Mon_Fetch ; $b11a
              ; *****************

b11a 8e b2 0a           STX M_Save_X
b11d a6 68              LDX M_Cval+2
b11f a9 66              LDA #M_Cval
b121 78                 SEI
b122 20 74 ff           JSR K_INDFET
b125 58                 CLI
b126 ae b2 0a           LDX M_Save_X
b129 60                 RTS ;Size   16 [Mon_Fetch]

              ; *****************
b12a            Mon_Stash ; $b12a
              ; *****************

b12a 8e b2 0a           STX M_Save_X
b12d a2 66              LDX #M_Cval
b12f 8e b9 02           STX STASH+10
b132 a6 68              LDX M_Cval+2
b134 78                 SEI
b135 20 77 ff           JSR K_INDSTA
b138 58                 CLI
b139 ae b2 0a           LDX M_Save_X
b13c 60                 RTS ;Size   19 [Mon_Stash]

              ; *****************
b13d            Mon_Compa ; $b13d
              ; *****************

b13d 8e b2 0a           STX M_Save_X
b140 a2 66              LDX #M_Cval
b142 8e c8 02           STX CMPARE+10
b145 a6 68              LDX M_Cval+2
b147 78                 SEI
b148 20 7a ff           JSR K_INDCMP
b14b 58                 CLI
b14c 08                 PHP
b14d ae b2 0a           LDX M_Save_X
b150 28                 PLP
b151 60                 RTS ;Size   21 [Mon_Compa]

              ; ******************
b152            Mon_Memory ; $b152
              ; ******************

b152 b0 08              BCS MoMe_10         ; -> no end address
b154 20 01 b9           JSR Mon_Aval_To_Cval
b157 20 a7 b7           JSR Mon_Got_Aval
b15a 90 06              BCC MoMe_20
b15c a9 0b    MoMe_10   LDA #11             ; display 12 lines
b15e 85 60              STA M_Aval
b160 d0 15              BNE MoMe_40
b162 20 0e b9 MoMe_20   JSR Mon_Aval_Minus_Cval
b165 90 2a              BCC MoMe_Err
b167 a2 03              LDX #3              ; X = 3
b169 24 d7              BIT MODE_80
b16b 10 01              BPL MoMe_30         ; -> 40 column screen
b16d e8                 INX                 ; X = 4
b16e 46 62    MoMe_30   LSR M_Aval+2      ; Aval /= (bytes per line)
b170 66 61              ROR M_Aval+1
b172 66 60              ROR M_Aval
b174 ca                 DEX
b175 d0 f7              BNE MoMe_30
b177 20 e1 ff MoMe_40   JSR K_STOP          ; test for STOP key
b17a f0 12              BEQ MoMe_60         ; -> STOP
b17c 20 e8 b1           JSR Mon_Dump_Row
b17f a9 08              LDA #8              ; display  8 bytes on 40 column screen
b181 24 d7              BIT MODE_80
b183 10 01              BPL MoMe_50
b185 0a                 ASL A               ; display 16 bytes on 80 column screen
b186 20 52 b9 MoMe_50   JSR Mon_Add_Cval
b189 20 22 b9           JSR Mon_Dec_Aval
b18c b0 e9              BCS MoMe_40
b18e 4c 8b b0 MoMe_60   JMP Mon_Main
b191 4c bc b0 MoMe_Err  JMP Mon_Error

              ; ************************
b194            Mon_Set_Register ; $b194
              ; ************************

b194 20 74 b9           JSR Mon_Aval_To_PCB          ; set PC
b197 a0 00              LDY #0
b199 20 a7 b7 MoSr_10   JSR Mon_Got_Aval
b19c b0 0a              BCS MoSr_20
b19e a5 60              LDA M_Aval
b1a0 99 05 00           STA S_REG,Y         ; SR AC XR YR SP
b1a3 c8                 INY
b1a4 c0 05              CPY #5
b1a6 90 f1              BCC MoSr_10
b1a8 4c 8b b0 MoSr_20   JMP Mon_Main

              ; **********************
b1ab            Mon_Set_Memory ; $b1ab
              ; **********************

b1ab b0 1c              BCS MoSM_30
b1ad 20 01 b9           JSR Mon_Aval_To_Cval
b1b0 a0 00              LDY #0
b1b2 20 a7 b7 MoSM_10   JSR Mon_Got_Aval
b1b5 b0 12              BCS MoSM_30
b1b7 a5 60              LDA M_Aval
b1b9 20 2a b1           JSR Mon_Stash
b1bc c8                 INY
b1bd 24 d7              BIT MODE_80
b1bf 10 04              BPL MoSM_20         ; -> 40 columns
b1c1 c0 10              CPY #16
b1c3 90 ed              BCC MoSM_10
b1c5 c0 08    MoSM_20   CPY #8
b1c7 90 e9              BCC MoSM_10
b1c9 20 7d ff MoSM_30   JSR K_PRIMM
b1cc 1b 4f 91           .BYTE ESC,'O',$91,0 ; clear attributes
b1d0 20 e8 b1           JSR Mon_Dump_Row
b1d3 4c 8b b0           JMP Mon_Main

              ; **************
b1d6            Mon_Go ; $b1d6
              ; **************

b1d6 20 74 b9           JSR Mon_Aval_To_PCB
b1d9 a6 09              LDX CHARAC
b1db 9a                 TXS
b1dc 4c 71 ff           JMP K_JMPFAR

              ; *****************
b1df            Mon_Gosub ; $b1df
              ; *****************

b1df 20 74 b9           JSR Mon_Aval_To_PCB
b1e2 20 6e ff           JSR K_JSRFAR
b1e5 4c 8b b0           JMP Mon_Main

              ; ********************
b1e8            Mon_Dump_Row ; $b1e8
              ; ********************

b1e8 20 b4 b8           JSR Mon_CR
b1eb a9 3e              LDA #'>'
b1ed 20 d2 ff           JSR K_BSOUT
b1f0 20 92 b8           JSR Mon_Hex_Cval        ; address
b1f3 a0 00              LDY #0
b1f5 f0 03              BEQ MoDR_20         ; always

b1f7 20 a8 b8 MoDR_10   JSR Mon_Blank
b1fa 20 1a b1 MoDR_20   JSR Mon_Fetch
b1fd 20 c2 b8           JSR Mon_Hex          ; memory byte
b200 c8                 INY
b201 c0 08              CPY #8              ; 40 columns
b203 24 d7              BIT MODE_80
b205 10 02              BPL MoDR_30         ; -> 40 column screen
b207 c0 10              CPY #16             ; 80 columns
b209 90 ec    MoDR_30   BCC MoDR_10         ; -> loop
b20b 20 7d ff           JSR K_PRIMM
b20e 3a 12 00           .BYTE ':',$12,0     ; separator to text dump

b211 a0 00              LDY #0              ; fall through to text dump
b213 20 1a b1 MoDR_40   JSR Mon_Fetch
b216 48                 PHA
b217 29 7f              AND #$7f            ; remove reverse bit
b219 c9 20              CMP #' '            ; printable ?
b21b 68                 PLA
b21c b0 02              BCS MoDR_50
b21e a9 2e              LDA #'.'            ; use dot for unprintable chars
b220 20 d2 ff MoDR_50   JSR K_BSOUT
b223 c8                 INY
b224 24 d7              BIT MODE_80
b226 10 04              BPL MoDR_60
b228 c0 10              CPY #16             ; 80 columns
b22a 90 e7              BCC MoDR_40
b22c c0 08    MoDR_60   CPY #8              ; 40 columns
b22e 90 e3              BCC MoDR_40
b230 60                 RTS ;Size   73 [Mon_Dump_Row]

              ; *******************
b231            Mon_Compare ; $b231
              ; *******************

b231 a9 00              LDA #0
b233 2c                 BIT

              ; ********************
b234            Mon_Transfer ; $b234
              ; ********************

b234 a9 80              LDA #$80
b236 85 93              STA K_VERCK         ; $80 = Transfer, $00 = Compare
b238 a9 00              LDA #0
b23a 8d b3 0a           STA M_Dir
b23d 20 83 b9           JSR Mon_Range       ; Cval, TEMPS (Bval = range)
b240 b0 05              BCS MoTr_10
b242 20 a7 b7           JSR Mon_Got_Aval    ; Aval = target address
b245 90 03              BCC MoTr_15
b247 4c bc b0 MoTr_10   JMP Mon_Error

b24a 24 93    MoTr_15   BIT K_VERCK
b24c 10 2c              BPL MoTr_25         ; -> Compare is indepent of direction
b24e 38                 SEC
b24f a5 66              LDA M_Cval
b251 e5 60              SBC M_Aval
b253 a5 67              LDA M_Cval+1
b255 e5 61              SBC M_Aval+1      ; source (Cval) >= target (Aval) ?
b257 b0 21              BCS MoTr_25         ; -> yes, do a forward copy
b259 a5 63              LDA M_Bval        ; otherwise we need a backward copy
b25b 65 60              ADC M_Aval
b25d 85 60              STA M_Aval
b25f a5 64              LDA M_Bval+1
b261 65 61              ADC M_Aval+1
b263 85 61              STA M_Aval+1
b265 a5 65              LDA M_Bval+2
b267 65 62              ADC M_Aval+2
b269 85 62              STA M_Aval+2
b26b a2 02              LDX #2
b26d bd b7 0a MoTr_20   LDA M_Temp,X         ; Cval = TEMPS
b270 95 66              STA M_Cval,X
b272 ca                 DEX
b273 10 f8              BPL MoTr_20
b275 a9 80              LDA #$80
b277 8d b3 0a           STA M_Dir       ; do a backward transfer

b27a 20 b4 b8 MoTr_25   JSR Mon_CR
b27d a0 00              LDY #0
b27f 20 e1 ff MoTr_30   JSR K_STOP
b282 f0 47              BEQ MoTr_65
b284 20 1a b1           JSR Mon_Fetch       ; load byte (Cval)
b287 a2 60              LDX #M_Aval
b289 8e b9 02           STX STASH+10
b28c 8e c8 02           STX CMPARE+10
b28f a6 62    MoTr_35   LDX M_Aval+2      ; bank config
b291 78                 SEI
b292 24 93              BIT K_VERCK
b294 10 03              BPL MoTr_40         ; -> compare
b296 20 77 ff           JSR K_INDSTA        ; transfer
b299 a6 62    MoTr_40   LDX M_Aval+2      ; bank config
b29b 20 7a ff           JSR K_INDCMP        ; compare
b29e 58                 CLI
b29f f0 09              BEQ MoTr_45         ; -> equal
b2a1 20 92 b8           JSR Mon_Hex_Cval
b2a4 20 a8 b8           JSR Mon_Blank
b2a7 20 a8 b8           JSR Mon_Blank
b2aa 2c b3 0a MoTr_45   BIT M_Dir
b2ad 30 0b              BMI MoTr_50         ; -> backward: count down
b2af e6 60              INC M_Aval        ; count up
b2b1 d0 10              BNE MoTr_55
b2b3 e6 61              INC M_Aval+1
b2b5 d0 0c              BNE MoTr_55
b2b7 4c bc b0           JMP Mon_Error
b2ba 20 22 b9 MoTr_50   JSR Mon_Dec_Aval
b2bd 20 60 b9           JSR Mon_Dec_Cval
b2c0 4c c6 b2           JMP MoTr_60
b2c3 20 50 b9 MoTr_55   JSR Mon_Inc_Cval
b2c6 20 3c b9 MoTr_60   JSR Mon_Dec_Bval
b2c9 b0 b4              BCS MoTr_30         ; loop
b2cb 4c 8b b0 MoTr_65   JMP Mon_Main

              ; ****************
b2ce            Mon_Hunt ; $b2ce
              ; ****************

b2ce 20 83 b9           JSR Mon_Range
b2d1 b0 61              BCS MoHu_Err
b2d3 a0 00              LDY #0
b2d5 20 e9 b8           JSR Mon_Get_Char
b2d8 c9 27              CMP #APOSTR
b2da d0 16              BNE MoHu_20         ; -> read numeric value
b2dc 20 e9 b8           JSR Mon_Get_Char    ; read search string
b2df c9 00              CMP #0
b2e1 f0 51              BEQ MoHu_Err
b2e3 99 80 0a MoHu_10   STA M_Data,Y
b2e6 c8                 INY
b2e7 20 e9 b8           JSR Mon_Get_Char
b2ea f0 1b              BEQ MoHu_40
b2ec c0 20              CPY #32             ; maximum length of search pattern
b2ee d0 f3              BNE MoHu_10
b2f0 f0 15              BEQ MoHu_40         ; always

b2f2 8c 00 01 MoHu_20   STY STACK
b2f5 20 a5 b7           JSR Mon_Get_Aval    ; get numeric value
b2f8 a5 60    MoHu_30   LDA M_Aval
b2fa 99 80 0a           STA M_Data,Y
b2fd c8                 INY
b2fe 20 a7 b7           JSR Mon_Got_Aval
b301 b0 04              BCS MoHu_40         ; -> end of arguments
b303 c0 20              CPY #32             ; maximum length of search pattern
b305 d0 f1              BNE MoHu_30

b307 84 93    MoHu_40   STY K_VERCK         ; length of hunt string
b309 20 b4 b8           JSR Mon_CR
b30c a0 00    MoHu_50   LDY #0              ; start comparison
b30e 20 1a b1 MoHu_60   JSR Mon_Fetch
b311 d9 80 0a           CMP M_Data,Y
b314 d0 0e              BNE MoHu_70         ; -> no match
b316 c8                 INY
b317 c4 93              CPY K_VERCK
b319 d0 f3              BNE MoHu_60         ; -> more to compare
b31b 20 92 b8           JSR Mon_Hex_Cval        ; print matching address
b31e 20 a8 b8           JSR Mon_Blank
b321 20 a8 b8           JSR Mon_Blank
b324 20 e1 ff MoHu_70   JSR K_STOP          ; check for stop key
b327 f0 08              BEQ MoHu_80         ; -> user stop
b329 20 50 b9           JSR Mon_Inc_Cval    ; increment comparison address
b32c 20 3c b9           JSR Mon_Dec_Bval    ; decrement comparison counter
b32f b0 db              BCS MoHu_50         ; -> loop
b331 4c 8b b0 MoHu_80   JMP Mon_Main
b334 4c bc b0 MoHu_Err  JMP Mon_Error

              ; *********************
b337            Mon_Load_Save ; $b337
              ; *********************

b337 a0 01              LDY #1              ; Y = 1
b339 84 ba              STY FA              ; default device = 1 (tape)
b33b 84 b9              STY SA              ; default secondary address = 1
b33d 88                 DEY                 ; Y = 0
b33e 84 c6              STY BA              ; default bank = 0
b340 84 b7              STY FNLEN           ; no filename
b342 84 c7              STY FNBANK          ; default filename bank = 0
b344 84 90              STY STATUS          ; Clear STATUS
b346 a9 0a              LDA #>M_Data          ; put filename into M_Data
b348 85 bc              STA FNADR+1
b34a a9 80              LDA #<M_Data
b34c 85 bb              STA FNADR
b34e 20 e9 b8 MLS_10    JSR Mon_Get_Char
b351 f0 58              BEQ MLS_60          ; -> finished
b353 c9 20              CMP #' '
b355 f0 f7              BEQ MLS_10          ; -> skip blanks
b357 c9 22              CMP #QUOTE
b359 d0 15              BNE MLS_30          ; -> error: no quote
b35b a6 7a              LDX DS_LEN          ; X = buffer pointer
b35d bd 00 02 MLS_20    LDA BUF,X
b360 f0 49              BEQ MLS_60          ; -> end of buffer
b362 e8                 INX
b363 c9 22              CMP #QUOTE
b365 f0 0c              BEQ MLS_40          ; -> end of string
b367 91 bb              STA (FNADR),Y       ; store filename character
b369 e6 b7              INC FNLEN           ; update length
b36b c8                 INY                 ; increase length
b36c c0 11              CPY #17             ; length < 17 ?
b36e 90 ed              BCC MLS_20          ; -> OK loop

b370 4c bc b0 MLS_30    JMP Mon_Error
b373 86 7a    MLS_40    STX DS_LEN          ; save buffer pointer
b375 20 e9 b8           JSR Mon_Get_Char    ; more parameter ?
b378 f0 31              BEQ MLS_60          ; -> no
b37a 20 a7 b7           JSR Mon_Got_Aval    ; read numeric value
b37d b0 2c              BCS MLS_60          ; -> none
b37f a5 60              LDA M_Aval
b381 85 ba              STA FA              ; store value as device address
b383 20 a7 b7           JSR Mon_Got_Aval    ; read next value
b386 b0 23              BCS MLS_60          ; -> none
b388 20 01 b9           JSR Mon_Aval_To_Cval    ; Cval = start address and bank
b38b 85 c6              STA BA              ; store bank from Aval+2
b38d 20 a7 b7           JSR Mon_Got_Aval    ; read next value
b390 b0 3f              BCS MLS_80          ; -> none
b392 20 b4 b8           JSR Mon_CR
b395 a6 60              LDX M_Aval          ; (X/Y) = end address
b397 a4 61              LDY M_Aval+1
b399 a5 93              LDA K_VERCK         ; 'L', 'S' or 'V'
b39b c9 53              CMP #'S'            ; SAVE ?
b39d d0 d1              BNE MLS_30          ; -> error: end address only with SAVE
b39f a9 00              LDA #0
b3a1 85 b9              STA SA
b3a3 a9 66              LDA #M_Cval         ; address of start address
b3a5 20 d8 ff           JSR K_SAVESP        ; perform SAVE
b3a8 4c 8b b0 MLS_50    JMP Mon_Main

              ; LOAD or VERIFY

b3ab a5 93    MLS_60    LDA K_VERCK         ; mode
b3ad c9 56              CMP #'V'            ; VERIFY ?
b3af f0 06              BEQ MLS_70
b3b1 c9 4c              CMP #'L'            ; LOAD ?
b3b3 d0 bb              BNE MLS_30          ; -> error: neither VERIFY nor LOAD
b3b5 a9 00              LDA #0              ; 0 = LOAD
b3b7 20 d5 ff MLS_70    JSR K_LOADSP        ; perform LOAD or VERIFY
b3ba a5 90              LDA STATUS
b3bc 29 10              AND #%0001 0000     ; $10 check verify error flag
b3be f0 e8              BEQ MLS_50          ; -> OK
b3c0 a5 93              LDA K_VERCK
b3c2 f0 ac              BEQ MLS_30          ; was loading -> OK
b3c4 20 7d ff           JSR K_PRIMM         ; start verify error message
b3c7 20 45 52           .BYTE " ERROR",0
b3ce 4c 8b b0           JMP Mon_Main

              ; only start address was given

b3d1 a6 66    MLS_80    LDX M_Cval
b3d3 a4 67              LDY M_Cval+1
b3d5 a9 00              LDA #0
b3d7 85 b9              STA SA
b3d9 f0 d0              BEQ MLS_60

              ; ****************
b3db            Mon_Fill ; $b3db
              ; ****************

b3db 20 83 b9           JSR Mon_Range       ; get fill range
b3de b0 23              BCS MoFi_Err        ; -> error
b3e0 a5 68              LDA M_Cval+2
b3e2 cd b9 0a           CMP M_Temp+2        ; compare bank in range
b3e5 d0 1c              BNE MoFi_Err
b3e7 20 a7 b7           JSR Mon_Got_Aval    ; iAval = fill byte
b3ea b0 17              BCS MoFi_Err
b3ec a0 00              LDY #0
b3ee a5 60    MoFi_10   LDA M_Aval          ; fill byte
b3f0 20 2a b1           JSR Mon_Stash       ; store it
b3f3 20 e1 ff           JSR K_STOP
b3f6 f0 08              BEQ MoFi_20
b3f8 20 50 b9           JSR Mon_Inc_Cval    ; increment fill address
b3fb 20 3c b9           JSR Mon_Dec_Bval    ; decrement fill count
b3fe b0 ee              BCS MoFi_10         ; -> loop
b400 4c 8b b0 MoFi_20   JMP Mon_Main
b403 4c bc b0 MoFi_Err  JMP Mon_Error

              ; ********************
b406            Mon_Assemble ; $b406
              ; ********************

              ; Strategy: convert operand to disassembler format
              ; Loop opcode from 0 to 255 and call disassembler
              ; until mnemonic and operand match.

b406 b0 3a              BCS MoAs_20         ; -> error: missing PC address
b408 20 01 b9           JSR Mon_Aval_To_Cval    ; Cval := PC
b40b a2 00    MoAs_10   LDX #0
b40d 8e a1 0a           STX M_Operand+1
b410 8e b4 0a           STX M_Count
b413 20 e9 b8 MoAs_12   JSR Mon_Get_Char
b416 d0 07              BNE MoAs_14         ; -> continue
b418 e0 00              CPX #0
b41a d0 03              BNE MoAs_14
b41c 4c 8b b0           JMP Mon_Main        ; -> no input after address
b41f c9 20    MoAs_14   CMP #' '
b421 f0 e8              BEQ MoAs_10         ; -> skip blank
b423 9d ac 0a           STA M_Mne,X         ; store mnemonic character
b426 e8                 INX
b427 e0 03              CPX #3              ; length of a mnemonic
b429 d0 e8              BNE MoAs_12         ; -> loop for more
b42b ca       MoAs_16   DEX                 ; x = mnemonix index
b42c 30 17              BMI MoAs_22         ; -> loop finished
b42e bd ac 0a           LDA M_Mne,X         ; A = mnemonic charcater
b431 38                 SEC
b432 e9 3f              SBC #$3f            ; convert to 5-bit value
b434 a0 05              LDY #5
b436 4a       MoAs_18   LSR A               ; rotate 5-bit value into (M_Operand)
b437 6e a1 0a           ROR M_Operand+1
b43a 6e a0 0a           ROR M_Operand
b43d 88                 DEY
b43e d0 f6              BNE MoAs_18         ; -> loop bits of 5-bit character
b440 f0 e9              BEQ MoAs_16         ; -> loop mnemonic charcters

b442 4c bc b0 MoAs_20   JMP Mon_Error       ; -> error exit

b445 a2 02    MoAs_22   LDX #2              ; store operand after compressed mnemonic
b447 ad b4 0a MoAs_24   LDA M_Count         ; unread bytes in buffer
b44a d0 30              BNE MoAs_34         ; -> more to read
b44c 20 ce b7           JSR Mon_Eval        ; evaluate operand
b44f f0 29              BEQ MoAs_32         ; -> no characters evaluated
b451 b0 ef              BCS MoAs_20         ; -> error during evaluation
b453 a9 24              LDA #'$'
b455 9d a0 0a           STA M_Operand,X     ; start operand with '$'
b458 e8                 INX
b459 a5 62              LDA M_Aval+2        ; check bank byte of operand
b45b d0 e5              BNE MoAs_20         ; -> error: not allowed
b45d a0 04              LDY #4              ; default length of address
b45f ad b6 0a           LDA M_Shift         ; base (16,10,8,2)
b462 c9 08              CMP #8
b464 90 05              BCC MoAs_26         ; -> base = 2
b466 cc b4 0a           CPY M_Count
b469 f0 06              BEQ MoAs_28         ; -> no fillup necessary
b46b a5 61    MoAs_26   LDA M_Aval+1        ; high byte
b46d d0 02              BNE MoAs_28         ; -> not zero
b46f a0 02              LDY #2              ; insert '00' for high byte
b471 a9 30    MoAs_28   LDA #'0'            ; insert leading zero
b473 9d a0 0a MoAs_30   STA M_Operand,X
b476 e8                 INX
b477 88                 DEY
b478 d0 f9              BNE MoAs_30         ; loop for leading 0
b47a c6 7a    MoAs_32   DEC DS_LEN
b47c 20 e9 b8 MoAs_34   JSR Mon_Get_Char
b47f f0 0e              BEQ MoAs_36         ; -> end of operand
b481 c9 20              CMP #' '
b483 f0 c2              BEQ MoAs_24         ; skip blank
b485 9d a0 0a           STA M_Operand,X          ; store operand byte
b488 e8                 INX
b489 e0 0a              CPX #10             ; maximum operand length
b48b 90 ba              BCC MoAs_24         ; loop
b48d b0 b3              BCS MoAs_20         ; -> error: operand too long

b48f 86 63    MoAs_36   STX M_Bval          ; save X
b491 a2 00              LDX #0
b493 8e b1 0a           STX M_Opcode

b496 a2 00    MoAs_38   LDX #0              ; loop body for next opcode
b498 86 9f              STX PTR_HI            ; reset operand index
b49a ad b1 0a           LDA M_Opcode
b49d 20 59 b6           JSR Mon_Analyze_Opcode
b4a0 ae aa 0a           LDX M_Format
b4a3 86 64              STX M_Bval+1        ; save operand format
b4a5 aa                 TAX
b4a6 bd 61 b7           LDA Mon_Mne_Right,X     ; compressed left  half of mnemonic
b4a9 20 7f b5           JSR Mon_Match_Operand
b4ac bd 21 b7           LDA Mon_Mne_Left,X      ; compressed right half of mnemonic
b4af 20 7f b5           JSR Mon_Match_Operand   ;  6  5  4  3  2  1
b4b2 a2 06              LDX #6              ;  $  (  #  ,  )  ,
                                            ;     $  $  X     Y

b4b4 e0 03    MoAs_40   CPX #3              ; ",X" mode
b4b6 d0 14              BNE MoAs_44
b4b8 ac ab 0a           LDY M_Op_Size
b4bb f0 0f              BEQ MoAs_44         ; -> no operand
b4bd ad aa 0a MoAs_42   LDA M_Format
b4c0 c9 e8              CMP #$e8            ; 11101 << 3 (2 byte instructions)
b4c2 a9 30              LDA #'0'            ; high byte
b4c4 b0 1e              BCS MoAs_48         ; -> not a ZP mode
b4c6 20 7c b5           JSR Mon_Match_Double    ; match "00"
b4c9 88                 DEY
b4ca d0 f1              BNE MoAs_42
b4cc 0e aa 0a MoAs_44   ASL M_Format        ; next address mode bit
b4cf 90 0e              BCC MoAs_46         ; -> not set
b4d1 bd 14 b7           LDA Mon_Char1-1,X
b4d4 20 7f b5           JSR Mon_Match_Operand   ; match 1st. character
b4d7 bd 1a b7           LDA Mon_Char2-1,X
b4da f0 03              BEQ MoAs_46
b4dc 20 7f b5           JSR Mon_Match_Operand   ; match 2nd. character
b4df ca       MoAs_46   DEX
b4e0 d0 d2              BNE MoAs_40         ; -> loop next M_Format bit
b4e2 f0 06              BEQ MoAs_50         ; -> always

b4e4 20 7c b5 MoAs_48   JSR Mon_Match_Double    ; match "00"
b4e7 20 7c b5           JSR Mon_Match_Double    ; match "00"
b4ea a5 63    MoAs_50   LDA M_Bval
b4ec c5 9f              CMP PTR_HI            ; operand index
b4ee f0 03              BEQ MoAs_52
b4f0 4c 8b b5           JMP MaOp_10
b4f3 ac ab 0a MoAs_52   LDY M_Op_Size
b4f6 f0 32              BEQ MoAs_62         ; -> implicit mode
b4f8 a5 64              LDA M_Bval+1        ; copy of M_Format
b4fa c9 9d              CMP #$9d            ; relative (branches)
b4fc d0 23              BNE MoAs_58         ; -> no
b4fe a5 60              LDA M_Aval          ; handle branch instruction
b500 e5 66              SBC M_Cval
b502 aa                 TAX                 ; X = low byte of distance
b503 a5 61              LDA M_Aval+1
b505 e5 67              SBC M_Cval+1
b507 90 08              BCC MoAs_54
b509 d0 6e              BNE MoAs_Err        ; error: branch out of range
b50b e0 82              CPX #$82
b50d b0 6a              BCS MoAs_Err        ; error: branch out of range
b50f 90 08              BCC MoAs_56         ; always

b511 a8       MoAs_54   TAY
b512 c8                 INY
b513 d0 64              BNE MoAs_Err
b515 e0 82              CPX #$82
b517 90 60              BCC MoAs_Err
b519 ca       MoAs_56   DEX                 ; adjust distance by subtracting 2
b51a ca                 DEX
b51b 8a                 TXA
b51c ac ab 0a           LDY M_Op_Size
b51f d0 03              BNE MoAs_60         ; -> implicit mode

b521 b9 5f 00 MoAs_58   LDA FACTPB+1,Y      ; store operand bytes
b524 20 2a b1 MoAs_60   JSR Mon_Stash
b527 88                 DEY
b528 d0 f7              BNE MoAs_58
b52a ad b1 0a MoAs_62   LDA M_Opcode
b52d 20 2a b1           JSR Mon_Stash       ; store opcode
b530 20 ad b8           JSR Mon_BOL         ; Beginnig Of Line
b533 20 7d ff           JSR K_PRIMM
b536 41 20 1b           .BYTE "A ",ESC,"Q",0
b53b 20 dc b5           JSR Mon_Print_Code  ; print disassembled instruction
b53e ee ab 0a           INC M_Op_Size
b541 ad ab 0a           LDA M_Op_Size
b544 20 52 b9           JSR Mon_Add_Cval
b547 a9 41              LDA #'A'            ; A bxxxx " into keyboard buffer
b549 8d 4a 03           STA KEYD
b54c a9 20              LDA #' '
b54e 8d 4b 03           STA KEYD+1
b551 8d 51 03           STA KEYD+7
b554 a5 68              LDA M_Cval+2
b556 20 d2 b8           JSR Mon_Bin_To_Hex
b559 8e 4c 03           STX KEYD+2          ; bank
b55c a5 67              LDA M_Cval+1
b55e 20 d2 b8           JSR Mon_Bin_To_Hex
b561 8d 4d 03           STA KEYD+3          ; high byte
b564 8e 4e 03           STX KEYD+4
b567 a5 66              LDA M_Cval
b569 20 d2 b8           JSR Mon_Bin_To_Hex
b56c 8d 4f 03           STA KEYD+5          ; low byte
b56f 8e 50 03           STX KEYD+6
b572 a9 08              LDA #8              ; force length of keyboard buffer
b574 85 d0              STA NDX
b576 4c 8b b0           JMP Mon_Main
b579 4c bc b0 MoAs_Err  JMP Mon_Error

              ; ************************
b57c            Mon_Match_Double ; $b57c
              ; ************************

b57c 20 7f b5           JSR Mon_Match_Operand

              ; *************************
b57f            Mon_Match_Operand ; $b57f
              ; *************************

b57f 8e af 0a           STX M_Save_XR       ; save X
b582 a6 9f              LDX PTR_HI            ; operand index
b584 dd a0 0a           CMP M_Operand,X          ; compare A with operand byte
b587 f0 0a              BEQ MaOp_20         ; -> match
b589 68                 PLA
b58a 68                 PLA                 ; remove return address
b58b ee b1 0a MaOp_10   INC M_Opcode          ; next opcode
b58e f0 e9              BEQ MoAs_Err        ; -> error: no matching code found
b590 4c 96 b4           JMP MoAs_38         ; -> try next opcode
b593 e6 9f    MaOp_20   INC PTR_HI            ; increase operand index
b595 ae af 0a           LDX M_Save_XR       ; restore X
b598 60                 RTS ;Size   26 [Mon_Match_Operand]

              ; ***********************
b599            Mon_Disassemble ; $b599
              ; ***********************

b599 b0 08              BCS MoDi_10         ; -> no range: disassemble 20 lines
b59b 20 01 b9           JSR Mon_Aval_To_Cval    ; Cval := start of disassembly
b59e 20 a7 b7           JSR Mon_Got_Aval    ; Aval := end   of disassembly
b5a1 90 06              BCC MoDi_12
b5a3 a9 14    MoDi_10   LDA #20
b5a5 85 60              STA M_Aval
b5a7 d0 05              BNE MoDi_14         ; always

b5a9 20 0e b9 MoDi_12   JSR Mon_Aval_Minus_Cval ; Aval := range
b5ac 90 23              BCC MoDi_Err
b5ae 20 7d ff MoDi_14   JSR K_PRIMM
b5b1 0d 1b 51           .BYTE CR,ESC,"Q",0  ; CR, delete to end of line
b5b5 20 e1 ff           JSR K_STOP
b5b8 f0 14              BEQ MoDi_End
b5ba 20 d4 b5           JSR Mon_Dis_Code    ; Disassembler instruction
b5bd ee ab 0a           INC M_Op_Size      ; add opcode to operand length
b5c0 ad ab 0a           LDA M_Op_Size      ; total length of instruction
b5c3 20 52 b9           JSR Mon_Add_Cval    ; advance Cval
b5c6 ad ab 0a           LDA M_Op_Size
b5c9 20 24 b9           JSR Mon_Sub_Aval    ; subtract length from range
b5cc b0 e0              BCS MoDi_14         ; -> loop
b5ce 4c 8b b0 MoDi_End  JMP Mon_Main
b5d1 4c bc b0 MoDi_Err  JMP Mon_Error

              ; ********************
b5d4            Mon_Dis_Code ; $b5d4
              ; ********************

b5d4 a9 2e              LDA #'.'
b5d6 20 d2 ff           JSR K_BSOUT
b5d9 20 a8 b8           JSR Mon_Blank

              ; **********************
b5dc            Mon_Print_Code ; $b5dc
              ; **********************

b5dc 20 92 b8           JSR Mon_Hex_Cval        ; format address
b5df 20 a8 b8           JSR Mon_Blank
b5e2 a0 00              LDY #0
b5e4 20 1a b1           JSR Mon_Fetch
b5e7 20 59 b6           JSR Mon_Analyze_Opcode
b5ea 48                 PHA                 ; push opcode
b5eb ae ab 0a           LDX M_Op_Size      ; operand length
b5ee e8                 INX                 ; plus opcode
b5ef ca       MoPC_10   DEX
b5f0 10 0a              BPL MoPC_15         ; -> opcode present
b5f2 20 7d ff           JSR K_PRIMM
b5f5 20 20 20           .BYTE "   ",0       ; no opcode, print blanks
b5f9 4c 02 b6           JMP MoPC_20
b5fc 20 1a b1 MoPC_15   JSR Mon_Fetch       ; get instruction byte
b5ff 20 a5 b8           JSR Mon_Hex_Blank   ; print it
b602 c8       MoPC_20   INY
b603 c0 03              CPY #3              ; up to three bytes
b605 90 e8              BCC MoPC_10         ; -> loop
b607 68                 PLA                 ; pull opcode
b608 a2 03              LDX #3              ; print 3 character
b60a 20 a1 b6           JSR Mon_Mnemonic
b60d a2 06              LDX #6              ; process 6 format bits
b60f e0 03    MoPC_25   CPX #3              ; ,X mode
b611 d0 17              BNE MoPC_35
b613 ac ab 0a           LDY M_Op_Size      ; operand length
b616 f0 12              BEQ MoPC_35         ; -> no operand
b618 ad aa 0a MoPC_30   LDA M_Format
b61b c9 e8              CMP #$e8            ; 11101 << 3 (2 byte instructions)
b61d 08                 PHP
b61e 20 1a b1           JSR Mon_Fetch       ; get operand byte
b621 28                 PLP
b622 b0 1d              BCS MoPC_50         ; -> not a ZP mode
b624 20 c2 b8           JSR Mon_Hex
b627 88                 DEY
b628 d0 ee              BNE MoPC_30
b62a 0e aa 0a MoPC_35   ASL M_Format
b62d 90 0e              BCC MoPC_40
b62f bd 14 b7           LDA Mon_Char1-1,X   ; 1st. char of address mode
b632 20 d2 ff           JSR K_BSOUT
b635 bd 1a b7           LDA Mon_Char2-1,X   ; 2nd. char of address mode
b638 f0 03              BEQ MoPC_40
b63a 20 d2 ff           JSR K_BSOUT
b63d ca       MoPC_40   DEX
b63e d0 cf              BNE MoPC_25         ; loop operand format
b640 60                 RTS ;Size  101 [Mon_Print_Code]
b641 20 4d b6 MoPC_50   JSR MoPC_60
b644 18                 CLC
b645 69 01              ADC #1
b647 d0 01              BNE MoPC_55
b649 e8                 INX
b64a 4c 9f b8 MoPC_55   JMP Mon_Hex_Word    ; print word operand
b64d a6 67    MoPC_60   LDX M_Cval+1      ; add signed (A) to Cval
b64f a8                 TAY
b650 10 01              BPL MoPC_65
b652 ca                 DEX
b653 65 66    MoPC_65   ADC M_Cval
b655 90 01              BCC MoPC_Ret
b657 e8                 INX
b658 60       MoPC_Ret  RTS ;Size  125 [Mon_Print_Code]

              ; **************************
b659            Mon_Analyze_Opcode ; $b659
              ; **************************

              ; instruction pattern: aaa bbb cc
              ; aaa = instruction
              ; bbb = addressing mode
              ; cc  = group

              ; 1. analyze group cc
              ; ------------------------------------------
              ; cc = 00  one byte instructions, branches
              ; cc = 01  ORA,AND,EOR,ADC,STA,LDA,CMP,SBC
              ; cc = 10  ASL,ROL,LSR,ROR,STX,LDX,DEC,INC
              ; cc = 11  illegal opcodes

b659 a8                 TAY                 ; save opcode
b65a 4a                 LSR A               ; bit 0 -> carry
b65b 90 0b              BCC AnOp_10
b65d 4a                 LSR A               ; bit 1 -> carry
b65e b0 17              BCS AnOp_30         ; 11 -> no valid opcode
b660 c9 22              CMP #$22            ; invalid opcode $89 ?
b662 f0 13              BEQ AnOp_30
b664 29 07              AND #7              ; mask addressing mode bbb
b666 09 80              ORA #$80            ; set bit 7
b668 4a       AnOp_10   LSR A               ; A,X = aaa bbb (cc = x0)
b669 aa                 TAX                 ; A,X = aaa bb  (cc = 10)
b66a bd c3 b6           LDA Mon_Mode,X      ; get addressing mode index
b66d b0 04              BCS AnOp_20         ; branch on cc = 10
b66f 4a                 LSR A               ; move nibble for cc = 00
b670 4a                 LSR A
b671 4a                 LSR A
b672 4a                 LSR A
b673 29 0f    AnOp_20   AND #15             ; mask addressing mode index
b675 d0 04              BNE AnOp_40         ; branch for valid mode
b677 a0 80    AnOp_30   LDY #$80            ; set invalid opcode
b679 a9 00              LDA #0
b67b aa       AnOp_40   TAX                 ; X = addressing mode index
b67c bd 07 b7           LDA Mon_Address,X   ; A = addressing mode format
b67f 8d aa 0a           STA M_Format        ; format
b682 29 03              AND #3
b684 8d ab 0a           STA M_Op_Size
b687 98                 TYA                 ; restore opcode
b688 29 8f              AND #$8f            ; mask
b68a aa                 TAX
b68b 98                 TYA                 ; restore opcode
b68c a0 03              LDY #3
b68e e0 8a              CPX #$8a            ; TXS,TAX,TSX,DEX,NOP
b690 f0 0b              BEQ AnOp_70
b692 4a       AnOp_50   LSR A
b693 90 08              BCC AnOp_70
b695 4a                 LSR A
b696 4a       AnOp_60   LSR A
b697 09 20              ORA #$20
b699 88                 DEY
b69a d0 fa              BNE AnOp_60
b69c c8                 INY
b69d 88       AnOp_70   DEY
b69e d0 f2              BNE AnOp_50
b6a0 60                 RTS ;Size   72 [Mon_Analyze_Opcode]

              ; ********************
b6a1            Mon_Mnemonic ; $b6a1
              ; ********************

b6a1 a8                 TAY
b6a2 b9 21 b7           LDA Mon_Mne_Left,Y
b6a5 85 63              STA M_Bval
b6a7 b9 61 b7           LDA Mon_Mne_Right,Y
b6aa 85 64              STA M_Bval+1
b6ac a9 00    MoMn_10   LDA #0
b6ae a0 05              LDY #5              ; 5 bit encoding
b6b0 06 64    MoMn_20   ASL M_Bval+1
b6b2 26 63              ROL M_Bval
b6b4 2a                 ROL A
b6b5 88                 DEY
b6b6 d0 f8              BNE MoMn_20
b6b8 69 3f              ADC #$3f            ; add offset
b6ba 20 d2 ff           JSR K_BSOUT
b6bd ca                 DEX
b6be d0 ec              BNE MoMn_10
b6c0 4c a8 b8           JMP Mon_Blank

              ; ****************
b6c3            Mon_Mode ; $b6c3
              ; ****************

b6c3 40                 .BYTE $40           ; $4 BRK        $0 ---
b6c4 02                 .BYTE $02           ; $0 ---        $2 ASL zz
b6c5 45                 .BYTE $45           ; $4 PHP        $5 ASL A
b6c6 03                 .BYTE $03           ; $0 ---        $3 ASL nnnn

b6c7 d0                 .BYTE $d0           ; $d BPL oo     $0 ---
b6c8 08                 .BYTE $08           ; $0 ---        $8 ASL zz,X
b6c9 40                 .BYTE $40           ; $4 CLC        $0 ---
b6ca 09                 .BYTE $09           ; $0 ---        $9 ASL nnnn,X

b6cb 30                 .BYTE $30           ; $3 JSR nnnn   $0 --
b6cc 22                 .BYTE $22           ; $2 BIT zz     $2 ROL zz
b6cd 45                 .BYTE $45           ; $4 PLP        $5 ROL A
b6ce 33                 .BYTE $33           ; $3 BIT nnnn   $3 ROL nnnn

b6cf d0                 .BYTE $d0           ; $d BMI oo     $0 ---
b6d0 08                 .BYTE $08           ; $0 ---        $8 ROL zz,X
b6d1 40                 .BYTE $40           ; $4 SEC        $0 ---
b6d2 09                 .BYTE $09           ; $0 ---        $9 ROL nnnn,X

b6d3 40                 .BYTE $40           ; $4 RTI        $0 ---
b6d4 02                 .BYTE $02           ; $0 ---        $2 LSR zz
b6d5 45                 .BYTE $45           ; $4 PHA        $5 LSR A
b6d6 33                 .BYTE $33           ; $3 JMP nnnn   $3 LSR nnnn

b6d7 d0                 .BYTE $d0           ; $d BVC oo     $0 ---
b6d8 08                 .BYTE $08           ; $0 ---        $8 LSR zz,X
b6d9 40                 .BYTE $40           ; $4 CLI        $0 ---
b6da 09                 .BYTE $09           ; $0 ---        $9 LSR nnnn,X

b6db 40                 .BYTE $40           ; $4 RTS        $0 ---
b6dc 02                 .BYTE $02           ; $0 ---        $2 ROR zz
b6dd 45                 .BYTE $45           ; $4 PLA        $5 ROR A
b6de b3                 .BYTE $b3           ; $b JMP (nnnn) $3 ROR nnnn

b6df d0                 .BYTE $d0           ; $d BVS oo     $0 ---
b6e0 08                 .BYTE $08           ; $0 ---        $8 ROR zz,X
b6e1 40                 .BYTE $40           ; $4 SEI        $0 ---
b6e2 09                 .BYTE $09           ; $0 ---        $9 ROR nnnn,X

b6e3 00                 .BYTE $00           ; $0 ---        $0 ---
b6e4 22                 .BYTE $22           ; $2 STY zz     $2 STX zz
b6e5 44                 .BYTE $44           ; $4 DEY        $4 TXA
b6e6 33                 .BYTE $33           ; $3 STY nnnn   $3 STX nnnn

b6e7 d0                 .BYTE $d0           ; $d BCC oo     $0 ---
b6e8 8c                 .BYTE $8c           ; $8 STY zz,X   $c STX zz,Y
b6e9 44                 .BYTE $44           ; $4 TYA        $4 TXS
b6ea 00                 .BYTE $00           ; $0 ---        $0 ---

b6eb 11                 .BYTE $11           ; $1 LDY #      $1 LDX #
b6ec 22                 .BYTE $22           ; $2 LDY zz     $2 LDX zz
b6ed 44                 .BYTE $44           ; $4 TAY        $4 TAX
b6ee 33                 .BYTE $33           ; $3 LDY nnnn   $3 LDX nnnn

b6ef d0                 .BYTE $d0           ; $d BCS oo     $0 ---
b6f0 8c                 .BYTE $8c           ; $8 LDY zz,X   $c LDX zz,Y
b6f1 44                 .BYTE $44           ; $4 CLV        $4 TSX
b6f2 9a                 .BYTE $9a           ; $9 LDY nnnn,X $a LDX nnnn,Y

b6f3 10                 .BYTE $10           ; $1 CPY #      $0 ---
b6f4 22                 .BYTE $22           ; $2 CPY zz     $2 DEC zz
b6f5 44                 .BYTE $44           ; $4 INY        $4 DEX
b6f6 33                 .BYTE $33           ; $3 CPY nnnn   $3 DEC nnnn

b6f7 d0                 .BYTE $d0           ; $d BNE oo     $0 ---
b6f8 08                 .BYTE $08           ; $0 ---        $8 DEC zz,X
b6f9 40                 .BYTE $40           ; $4 CLD        $0 ---
b6fa 09                 .BYTE $09           ; $0 ---        $9 DEC nnnn,X

b6fb 10                 .BYTE $10           ; $1 CPX #      $0 ---
b6fc 22                 .BYTE $22           ; $2 CPX zz     $2 INC zz
b6fd 44                 .BYTE $44           ; $4 INX        $4 NOP
b6fe 33                 .BYTE $33           ; $3 CPX nnnn   $3 INC nnnn

b6ff d0                 .BYTE $d0           ; $d BEQ oo     $0 ---
b700 08                 .BYTE $08           ; $0 ---        $8 INC zz,X
b701 40                 .BYTE $40           ; $4 SED        $0 ---
b702 09                 .BYTE $09           ; $0 ---        $9 INC nnnn,X

b703 62                 .BYTE $62           ; $6 (zz,X)     $2 zz
b704 13                 .BYTE $13           ; $1 #          $3 nnnn
b705 78                 .BYTE $78           ; $7 (zz),Y     $8 zz,X
b706 a9                 .BYTE $a9           ; $a nnnn,Y     $9 nnnn,X

              ; *******************
b707            Mon_Address ; $b707
              ; *******************

              ;                 76543210
              ;                 --------
              ;                 x         $
              ;                  x        ($
              ;                   x       #$
              ;                    x      ,X
              ;                     x     )
              ;                      x    ,Y
              ;                       xx  length - 1

b707 00                  .BYTE %00000000  ; 0         implicit
b708 21                  .BYTE %00100001  ; 1  $#     immediate
b709 81                  .BYTE %10000001  ; 2  $zz    zeropage
b70a 82                  .BYTE %10000010  ; 3  $nnnn  absolute
b70b 00                  .BYTE %00000000  ; 4         implicit
b70c 00                  .BYTE %00000000  ; 5         implicit
b70d 59                  .BYTE %01011001  ; 6 ($zz,X) indexed indirect
b70e 4d                  .BYTE %01001101  ; 7 ($zz),Y indirect indexed
b70f 91                  .BYTE %10010001  ; 8 $zz,X   zeropage,X
b710 92                  .BYTE %10010010  ; 9 $nnnn,X absolute,X
b711 86                  .BYTE %10000110  ; a $nnnn,Y absolute,Y
b712 4a                  .BYTE %01001010  ; b ($nnnn) indirect
b713 85                  .BYTE %10000101  ; c $zz,Y   zeropage,Y
b714 9d                  .BYTE %10011101  ; d $nnnn   relative

              ;                 1    2    3    4    5    6
b715 2c 29 2c Mon_Char1  .BYTE ",", ")", ",", "#", "(", "$"
b71b 59 00 58 Mon_Char2  .BYTE "Y",  0 , "X", "$", "$",  0

              ; ********************
b721            Mon_Mne_Left ; $b721
              ; ********************

b721 1c                 .BYTE >"BRK"
b722 8a                 .BYTE >"PHP"
b723 1c                 .BYTE >"BPL"
b724 23                 .BYTE >"CLC"
b725 5d                 .BYTE >"JSR"
b726 8b                 .BYTE >"PLP"
b727 1b                 .BYTE >"BMI"
b728 a1                 .BYTE >"SEC"
b729 9d                 .BYTE >"RTI"
b72a 8a                 .BYTE >"PHA"
b72b 1d                 .BYTE >"BVC"
b72c 23                 .BYTE >"CLI"
b72d 9d                 .BYTE >"RTS"
b72e 8b                 .BYTE >"PLA"
b72f 1d                 .BYTE >"BVS"
b730 a1                 .BYTE >"SEI"
b731 00                 .BYTE >"???"
b732 29                 .BYTE >"DEY"
b733 19                 .BYTE >"BCC"
b734 ae                 .BYTE >"TYA"
b735 69                 .BYTE >"LDY"
b736 a8                 .BYTE >"TAY"
b737 19                 .BYTE >"BCS"
b738 23                 .BYTE >"CLV"
b739 24                 .BYTE >"CPY"
b73a 53                 .BYTE >"INY"
b73b 1b                 .BYTE >"BNE"
b73c 23                 .BYTE >"CLD"
b73d 24                 .BYTE >"CPX"
b73e 53                 .BYTE >"INX"
b73f 19                 .BYTE >"BEQ"
b740 a1                 .BYTE >"SED"
b741 00                 .BYTE >"???"
b742 1a                 .BYTE >"BIT"
b743 5b                 .BYTE >"JMP"
b744 5b                 .BYTE >"JMP"
b745 a5                 .BYTE >"STY"
b746 69                 .BYTE >"LDY"
b747 24                 .BYTE >"CPY"
b748 24                 .BYTE >"CPX"
b749 ae                 .BYTE >"TXA"
b74a ae                 .BYTE >"TXS"
b74b a8                 .BYTE >"TAX"
b74c ad                 .BYTE >"TSX"
b74d 29                 .BYTE >"DEX"
b74e 00                 .BYTE >"???"
b74f 7c                 .BYTE >"NOP"
b750 00                 .BYTE >"???"
b751 15                 .BYTE >"ASL"
b752 9c                 .BYTE >"ROL"
b753 6d                 .BYTE >"LSR"
b754 9c                 .BYTE >"ROR"
b755 a5                 .BYTE >"STX"
b756 69                 .BYTE >"LDX"
b757 29                 .BYTE >"DEC"
b758 53                 .BYTE >"INC"
b759 84                 .BYTE >"ORA"
b75a 13                 .BYTE >"AND"
b75b 34                 .BYTE >"EOR"
b75c 11                 .BYTE >"ADC"
b75d a5                 .BYTE >"STA"
b75e 69                 .BYTE >"LDA"
b75f 23                 .BYTE >"CMP"
b760 a0                 .BYTE >"SBC"

              ; *********************
b761            Mon_Mne_Right ; $b761
              ; *********************

b761 d8                 .BYTE <"BRK"
b762 62                 .BYTE <"PHP"
b763 5a                 .BYTE <"BPL"
b764 48                 .BYTE <"CLC"
b765 26                 .BYTE <"JSR"
b766 62                 .BYTE <"PLP"
b767 94                 .BYTE <"BMI"
b768 88                 .BYTE <"SEC"
b769 54                 .BYTE <"RTI"
b76a 44                 .BYTE <"PHA"
b76b c8                 .BYTE <"BVC"
b76c 54                 .BYTE <"CLI"
b76d 68                 .BYTE <"RTS"
b76e 44                 .BYTE <"PLA"
b76f e8                 .BYTE <"BVS"
b770 94                 .BYTE <"SEI"
b771 00                 .BYTE <"???"
b772 b4                 .BYTE <"DEY"
b773 08                 .BYTE <"BCC"
b774 84                 .BYTE <"TYA"
b775 74                 .BYTE <"LDY"
b776 b4                 .BYTE <"TAY"
b777 28                 .BYTE <"BCS"
b778 6e                 .BYTE <"CLV"
b779 74                 .BYTE <"CPY"
b77a f4                 .BYTE <"INY"
b77b cc                 .BYTE <"BNE"
b77c 4a                 .BYTE <"CLD"
b77d 72                 .BYTE <"CPX"
b77e f2                 .BYTE <"INX"
b77f a4                 .BYTE <"BEQ"
b780 8a                 .BYTE <"SED"
b781 00                 .BYTE <"???"
b782 aa                 .BYTE <"BIT"
b783 a2                 .BYTE <"JMP"
b784 a2                 .BYTE <"JMP"
b785 74                 .BYTE <"STY"
b786 74                 .BYTE <"LDY"
b787 74                 .BYTE <"CPY"
b788 72                 .BYTE <"CPX"
b789 44                 .BYTE <"TXA"
b78a 68                 .BYTE <"TXS"
b78b b2                 .BYTE <"TAX"
b78c 32                 .BYTE <"TSX"
b78d b2                 .BYTE <"DEX"
b78e 00                 .BYTE <"???"
b78f 22                 .BYTE <"NOP"
b790 00                 .BYTE <"???"
b791 1a                 .BYTE <"ASL"
b792 1a                 .BYTE <"ROL"
b793 26                 .BYTE <"LSR"
b794 26                 .BYTE <"ROR"
b795 72                 .BYTE <"STX"
b796 72                 .BYTE <"LDX"
b797 88                 .BYTE <"DEC"
b798 c8                 .BYTE <"INC"
b799 c4                 .BYTE <"ORA"
b79a ca                 .BYTE <"AND"
b79b 26                 .BYTE <"EOR"
b79c 48                 .BYTE <"ADC"
b79d 44                 .BYTE <"STA"
b79e 44                 .BYTE <"LDA"
b79f a2                 .BYTE <"CMP"
b7a0 c8                 .BYTE <"SBC"

b7a1 0d 20 20           .BYTE "\r   "       ; unused

              ; ********************
b7a5            Mon_Get_Aval ; $b7a5
              ; ********************

b7a5 c6 7a              DEC DS_LEN

              ; ********************
b7a7            Mon_Got_Aval ; $b7a7
              ; ********************

b7a7 20 ce b7           JSR Mon_Eval
b7aa b0 16              BCS MoGA_20
b7ac 20 e7 b8           JSR Mon_Got_Char
b7af d0 09              BNE MoGA_10         ; -> not at end
b7b1 c6 7a              DEC DS_LEN          ; buffer index
b7b3 ad b4 0a           LDA M_Count         ; bytes read
b7b6 d0 11              BNE MoGA_40         ; -> return with carry clear (OK)
b7b8 f0 0d              BEQ MoGA_30         ; -> return with carry set

b7ba c9 20    MoGA_10   CMP #' '
b7bc f0 0b              BEQ MoGA_40         ; delimiter blank
b7be c9 2c              CMP #','
b7c0 f0 07              BEQ MoGA_40         ; delimiter comma
b7c2 68       MoGA_20   PLA
b7c3 68                 PLA                 ; remove return address
b7c4 4c bc b0           JMP Mon_Error

b7c7 38       MoGA_30   SEC
b7c8 24                 .BYTE $24           ; skip CLC
b7c9 18       MoGA_40   CLC
b7ca ad b4 0a           LDA M_Count
b7cd 60                 RTS ;Size   39 [Mon_Got_Aval]

              ; ****************
b7ce            Mon_Eval ; $b7ce
              ; ****************

b7ce a9 00              LDA #0              ; clear result
b7d0 85 60              STA M_Aval
b7d2 85 61              STA M_Aval+1
b7d4 85 62              STA M_Aval+2
b7d6 8d b4 0a           STA M_Count         ; # of chars
b7d9 8a                 TXA                 ; save X
b7da 48                 PHA
b7db 98                 TYA                 ; save Y
b7dc 48                 PHA
b7dd 20 e9 b8 MoEv_10   JSR Mon_Get_Char
b7e0 d0 03              BNE MoEv_15
b7e2 4c 7e b8           JMP MoEv_65         ; -> finish

b7e5 c9 20    MoEv_15   CMP #' '
b7e7 f0 f4              BEQ MoEv_10         ; -> skip blanks

b7e9 a2 03              LDX #3
b7eb dd f5 b0 MoEv_20   CMP cmdnum,X        ; $ + & %
b7ee f0 06              BEQ MoEv_25
b7f0 ca                 DEX
b7f1 10 f8              BPL MoEv_20
b7f3 e8                 INX
b7f4 c6 7a              DEC DS_LEN          ; buffer index
b7f6 bc 8a b8 MoEv_25   LDY Mon_Base,X      ; 16 ($), 10 (+), 8 (&), 2 (%)
b7f9 bd 8e b8           LDA Mon_Shift,X     ;  4       3      3      1
b7fc 8d b6 0a           STA M_Shift
b7ff 20 e9 b8 MoEv_30   JSR Mon_Get_Char
b802 f0 7a              BEQ MoEv_65
b804 38                 SEC
b805 e9 30              SBC #'0'
b807 90 75              BCC MoEv_65         ; -> below '0' not alphanumeric
b809 c9 0a              CMP #10
b80b 90 06              BCC MoEv_35         ; -> inside (0 - 9)
b80d e9 07              SBC #7
b80f c9 10              CMP #16             ; hex ?
b811 b0 6b              BCS MoEv_65         ; -> invalid

b813 8d b5 0a MoEv_35   STA M_Number          ; store digit
b816 cc b5 0a           CPY M_Number          ; compare with base
b819 90 61              BCC MoEv_60         ; -> out of range
b81b f0 5f              BEQ MoEv_60         ; -> out of range
b81d ee b4 0a           INC M_Count         ; # of chars
b820 c0 0a              CPY #10             ; base 10 ?
b822 d0 0a              BNE MoEv_45         ; -> no

b824 a2 02              LDX #2
b826 b5 60    MoEv_40   LDA M_Aval,X      ; TEMPS = TENEXP
b828 9d b7 0a           STA M_Temp,X
b82b ca                 DEX
b82c 10 f8              BPL MoEv_40

b82e ae b6 0a MoEv_45   LDX M_Shift           ; shifts for base 16, 8 or 2
b831 06 60    MoEv_50   ASL M_Aval
b833 26 61              ROL M_Aval+1
b835 26 62              ROL M_Aval+2
b837 b0 43              BCS MoEv_60
b839 ca                 DEX
b83a d0 f5              BNE MoEv_50

b83c c0 0a              CPY #10             ; base 10 ?
b83e d0 22              BNE MoEv_55         ; -> no
b840 0e b7 0a           ASL M_Temp           ; M_Aval = TENEXP << 3 + TENEXP + TENEXP
b843 2e b8 0a           ROL M_Temp+1
b846 2e b9 0a           ROL M_Temp+2
b849 b0 31              BCS MoEv_60
b84b ad b7 0a           LDA M_Temp
b84e 65 60              ADC M_Aval
b850 85 60              STA M_Aval
b852 ad b8 0a           LDA M_Temp+1
b855 65 61              ADC M_Aval+1
b857 85 61              STA M_Aval+1
b859 ad b9 0a           LDA M_Temp+2
b85c 65 62              ADC M_Aval+2
b85e 85 62              STA M_Aval+2
b860 b0 1a              BCS MoEv_60         ; -> overflow

b862 18       MoEv_55   CLC
b863 ad b5 0a           LDA M_Number
b866 65 60              ADC M_Aval
b868 85 60              STA M_Aval
b86a 8a                 TXA
b86b 65 61              ADC M_Aval+1
b86d 85 61              STA M_Aval+1
b86f 8a                 TXA
b870 65 62              ADC M_Aval+2
b872 85 62              STA M_Aval+2
b874 b0 06              BCS MoEv_60         ; -> overflow
b876 29 f0              AND #%1111 0000     ; check bank value
b878 d0 02              BNE MoEv_60         ; -> overflow
b87a f0 83              BEQ MoEv_30         ; -> OK
b87c 38       MoEv_60   SEC
b87d 24                 .BYTE $24
b87e 18       MoEv_65   CLC
b87f 8c b6 0a           STY M_Shift
b882 68                 PLA
b883 a8                 TAY                 ; restore Y
b884 68                 PLA
b885 aa                 TAX                 ; restore X
b886 ad b4 0a           LDA M_Count         ; # of chars
b889 60                 RTS ;Size  188 [Mon_Eval]

b88a 10 0a 08 Mon_Base  .BYTE 16,10, 8, 2   ; supported bases for input
b88e 04 03 03 Mon_Shift .BYTE  4, 3, 3, 1   ; shifts for digit multiplying

              ; ********************
b892            Mon_Hex_Cval ; $b892
              ; ********************

b892 a5 68              LDA M_Cval+2
b894 20 d2 b8           JSR Mon_Bin_To_Hex
b897 8a                 TXA
b898 20 d2 ff           JSR K_BSOUT
b89b a5 66              LDA M_Cval
b89d a6 67              LDX M_Cval+1

              ; ********************
b89f            Mon_Hex_Word ; $b89f
              ; ********************

b89f 48                 PHA
b8a0 8a                 TXA
b8a1 20 c2 b8           JSR Mon_Hex
b8a4 68                 PLA

              ; *********************
b8a5            Mon_Hex_Blank ; $b8a5
              ; *********************

b8a5 20 c2 b8           JSR Mon_Hex

              ; *****************
b8a8            Mon_Blank ; $b8a8
              ; *****************

b8a8 a9 20              LDA #' '
b8aa 4c d2 ff           JMP K_BSOUT

              ; ***************
b8ad            Mon_BOL ; $b8ad
              ; ***************

b8ad 20 7d ff           JSR K_PRIMM
b8b0 0d 91 00           .BYTE CR,UP,0
b8b3 60                 RTS ;Size    7 [Mon_BOL]

              ; **************
b8b4            Mon_CR ; $b8b4
              ; **************

b8b4 a9 0d              LDA #CR
b8b6 4c d2 ff           JMP K_BSOUT

              ; **********************
b8b9            Mon_Blank_Line ; $b8b9
              ; **********************

b8b9 20 7d ff           JSR K_PRIMM
b8bc 0d 1b 51           .BYTE CR,ESC,"Q ",0
b8c1 60                 RTS ;Size    9 [Mon_Blank_Line]

              ; ***************
b8c2            Mon_Hex ; $b8c2
              ; ***************

b8c2 8e af 0a           STX M_Save_XR
b8c5 20 d2 b8           JSR Mon_Bin_To_Hex
b8c8 20 d2 ff           JSR K_BSOUT
b8cb 8a                 TXA
b8cc ae af 0a           LDX M_Save_XR
b8cf 4c d2 ff           JMP K_BSOUT

              ; **********************
b8d2            Mon_Bin_To_Hex ; $b8d2
              ; **********************

b8d2 48                 PHA
b8d3 20 dc b8           JSR Mon_Nib_Hex
b8d6 aa                 TAX
b8d7 68                 PLA
b8d8 4a                 LSR A
b8d9 4a                 LSR A
b8da 4a                 LSR A
b8db 4a                 LSR A

              ; *******************
b8dc            Mon_Nib_Hex ; $b8dc
              ; *******************

b8dc 29 0f              AND #15
b8de c9 0a              CMP #10
b8e0 90 02              BCC MoNH_10
b8e2 69 06              ADC #6
b8e4 69 30    MoNH_10   ADC #'0'
b8e6 60                 RTS ;Size   11 [Mon_Nib_Hex]

              ; ********************
b8e7            Mon_Got_Char ; $b8e7
              ; ********************

b8e7 c6 7a              DEC DS_LEN

              ; ********************
b8e9            Mon_Get_Char ; $b8e9
              ; ********************

b8e9 8e af 0a           STX M_Save_XR       ; save X
b8ec a6 7a              LDX DS_LEN          ; buffer index
b8ee bd 00 02           LDA BUF,X
b8f1 f0 06              BEQ MGNC_10         ; zero -> exit
b8f3 c9 3a              CMP #':'
b8f5 f0 02              BEQ MGNC_10         ; set Z flag for ':'
b8f7 c9 3f              CMP #'?'            ; set Z flag for '?'
b8f9 08       MGNC_10   PHP                 ; push flags
b8fa e6 7a              INC DS_LEN          ; buffer index
b8fc ae af 0a           LDX M_Save_XR       ; restore X
b8ff 28                 PLP                 ; pull flags
b900 60                 RTS ;Size   24 [Mon_Get_Char]

              ; ************************
b901            Mon_Aval_To_Cval ; $b901
              ; ************************

              ; Copy Aval (3 bytes at M_Aval) to Bval (3 bytes at M_Cval)

b901 a5 60              LDA M_Aval
b903 85 66              STA M_Cval
b905 a5 61              LDA M_Aval+1
b907 85 67              STA M_Cval+1
b909 a5 62              LDA M_Aval+2
b90b 85 68              STA M_Cval+2
b90d 60                 RTS ;Size   13 [Mon_Aval_To_Cval]

              ; ***************************
b90e            Mon_Aval_Minus_Cval ; $b90e
              ; ***************************

b90e 38                 SEC
b90f a5 60              LDA M_Aval
b911 e5 66              SBC M_Cval
b913 85 60              STA M_Aval
b915 a5 61              LDA M_Aval+1
b917 e5 67              SBC M_Cval+1
b919 85 61              STA M_Aval+1
b91b a5 62              LDA M_Aval+2
b91d e5 68              SBC M_Cval+2
b91f 85 62              STA M_Aval+2
b921 60                 RTS ;Size   20 [Mon_Aval_Minus_Cval]

              ; ********************
b922            Mon_Dec_Aval ; $b922
              ; ********************

b922 a9 01              LDA #1

              ; ********************
b924            Mon_Sub_Aval ; $b924
              ; ********************

b924 8d af 0a           STA M_Save_XR
b927 38                 SEC
b928 a5 60              LDA M_Aval
b92a ed af 0a           SBC M_Save_XR
b92d 85 60              STA M_Aval
b92f a5 61              LDA M_Aval+1
b931 e9 00              SBC #0
b933 85 61              STA M_Aval+1
b935 a5 62              LDA M_Aval+2
b937 e9 00              SBC #0
b939 85 62              STA M_Aval+2
b93b 60                 RTS ;Size   24 [Mon_Sub_Aval]

              ; ********************
b93c            Mon_Dec_Bval ; $b93c
              ; ********************

b93c 38                 SEC
b93d a5 63              LDA M_Bval
b93f e9 01              SBC #1
b941 85 63              STA M_Bval
b943 a5 64              LDA M_Bval+1
b945 e9 00              SBC #0
b947 85 64              STA M_Bval+1
b949 a5 65              LDA M_Bval+2
b94b e9 00              SBC #0
b94d 85 65              STA M_Bval+2
b94f 60                 RTS ;Size   20 [Mon_Dec_Bval]

              ; ********************
b950            Mon_Inc_Cval ; $b950
              ; ********************

b950 a9 01              LDA #1

              ; ********************
b952            Mon_Add_Cval ; $b952
              ; ********************

b952 18                 CLC
b953 65 66              ADC M_Cval
b955 85 66              STA M_Cval
b957 90 06              BCC MoAC_Ret
b959 e6 67              INC M_Cval+1
b95b d0 02              BNE MoAC_Ret
b95d e6 68              INC M_Cval+2
b95f 60       MoAC_Ret  RTS ;Size   14 [Mon_Add_Cval]

              ; ********************
b960            Mon_Dec_Cval ; $b960
              ; ********************

b960 38                 SEC
b961 a5 66              LDA M_Cval
b963 e9 01              SBC #1
b965 85 66              STA M_Cval
b967 a5 67              LDA M_Cval+1
b969 e9 00              SBC #0
b96b 85 67              STA M_Cval+1
b96d a5 68              LDA M_Cval+2
b96f e9 00              SBC #0
b971 85 68              STA M_Cval+2
b973 60                 RTS ;Size   20 [Mon_Dec_Cval]

              ; ***********************
b974            Mon_Aval_To_PCB ; $b974
              ; ***********************

b974 b0 0c              BCS MPCB_Ret
b976 a5 60              LDA M_Aval
b978 a4 61              LDY M_Aval+1
b97a a6 62              LDX M_Aval+2
b97c 85 04              STA PC_LO
b97e 84 03              STY PC_HI
b980 86 02              STX BANK
b982 60       MPCB_Ret  RTS ;Size   15 [Mon_Aval_To_PCB]

              ; *****************
b983            Mon_Range ; $b983
              ; *****************

              ; Parse a range of 20 bit values (16 bit address and 4 bit bank)

              ; Output: Bval  = range
              ;         Cval  = 1st. address
              ;         M_Temp = 2nd. address
              ;         C = 0 : OK,  C = 1 : Error

b983 b0 2a              BCS MoRa_Err
b985 20 01 b9           JSR Mon_Aval_To_Cval ; Cval  = 1st. address
b988 20 a7 b7           JSR Mon_Got_Aval     ; Aval  = 2nd. address
b98b b0 22              BCS MoRa_Err
b98d a5 60              LDA M_Aval           ; M_Temp = 2nd. address
b98f 8d b7 0a           STA M_Temp
b992 a5 61              LDA M_Aval+1
b994 8d b8 0a           STA M_Temp+1
b997 a5 62              LDA M_Aval+2
b999 8d b9 0a           STA M_Temp+2
b99c 20 0e b9           JSR Mon_Aval_Minus_Cval ; Aval = range
b99f a5 60              LDA M_Aval              ; Bval = range
b9a1 85 63              STA M_Bval
b9a3 a5 61              LDA M_Aval+1
b9a5 85 64              STA M_Bval+1
b9a7 a5 62              LDA M_Aval+2
b9a9 85 65              STA M_Bval+2
b9ab 90 02              BCC MoRa_Err
b9ad 18                 CLC
b9ae 24                 .BYTE $24
b9af 38       MoRa_Err  SEC
b9b0 60                 RTS ;Size   46 [Mon_Range]

              ; *******************
b9b1            Mon_Convert ; $b9b1
              ; *******************

b9b1 20 a5 b7           JSR Mon_Get_Aval    ; read value
b9b4 20 b9 b8           JSR Mon_Blank_Line
b9b7 a9 24              LDA #'$'            ; hex number
b9b9 20 d2 ff           JSR K_BSOUT
b9bc a5 62              LDA M_Aval+2
b9be f0 07              BEQ MoCo_10         ; bank value ?
b9c0 20 d2 b8           JSR Mon_Bin_To_Hex
b9c3 8a                 TXA
b9c4 20 d2 ff           JSR K_BSOUT
b9c7 a5 60    MoCo_10   LDA M_Aval
b9c9 a6 61              LDX M_Aval+1
b9cb 20 9f b8           JSR Mon_Hex_Word
b9ce 20 b9 b8           JSR Mon_Blank_Line
b9d1 a9 2b              LDA # '+'           ; decimal number
b9d3 20 d2 ff           JSR K_BSOUT
b9d6 20 07 ba           JSR Mon_Bin_BCD
b9d9 a9 00              LDA #0              ; suppress leading zeroes
b9db a2 08              LDX #8              ; # of digits
b9dd a0 03              LDY #3              ; bits per digit - 1
b9df 20 5d ba           JSR Mon_Print_Number
b9e2 20 b9 b8           JSR Mon_Blank_Line
b9e5 a9 26              LDA #'&'            ; octal number
b9e7 20 d2 ff           JSR K_BSOUT
b9ea a9 00              LDA #0              ; suppress leading zeroes
b9ec a2 08              LDX #8              ; # of digits
b9ee a0 02              LDY #2              ; bits per digit - 1
b9f0 20 47 ba           JSR Mon_Print_Aval
b9f3 20 b9 b8           JSR Mon_Blank_Line
b9f6 a9 25              LDA #'%'            ; dual number
b9f8 20 d2 ff           JSR K_BSOUT
b9fb a9 00              LDA #0              ; suppress leading zeroes
b9fd a2 18              LDX #24             ; # of digits
b9ff a0 00              LDY #0              ; bits per digit - 1
ba01 20 47 ba           JSR Mon_Print_Aval
ba04 4c 8b b0           JMP Mon_Main

              ; *******************
ba07            Mon_Bin_BCD ; $ba07
              ; *******************

              ; Input : Aval = 24 bit binary integer
              ; Output: M_Operand =  8 digit BCD  integer

ba07 20 01 b9           JSR Mon_Aval_To_Cval
ba0a a9 00              LDA #0
ba0c a2 07              LDX #7
ba0e 9d a0 0a MoBD_10   STA M_Operand,X
ba11 ca                 DEX
ba12 10 fa              BPL MoBD_10
ba14 ee a7 0a           INC M_Operand+7
ba17 a0 17              LDY #23             ; 24 bits for 3 bytes
ba19 08                 PHP
ba1a 78                 SEI                 ; disable interrupt
ba1b f8                 SED                 ; set decimal mode
ba1c 46 68    MoBD_20   LSR M_Cval+2
ba1e 66 67              ROR M_Cval+1
ba20 66 66              ROR M_Cval
ba22 90 0f              BCC MoBD_40         ; -> skip adding
ba24 18                 CLC
ba25 a2 03              LDX #3
ba27 bd a4 0a MoBD_30   LDA M_Operand+4,X
ba2a 7d a0 0a           ADC M_Operand,X
ba2d 9d a0 0a           STA M_Operand,X
ba30 ca                 DEX
ba31 10 f4              BPL MoBD_30
ba33 18       MoBD_40   CLC
ba34 a2 03              LDX #3
ba36 bd a4 0a MoBD_50   LDA M_Operand+4,X
ba39 7d a4 0a           ADC M_Operand+4,X
ba3c 9d a4 0a           STA M_Operand+4,X
ba3f ca                 DEX
ba40 10 f4              BPL MoBD_50         ; double M_Operand+4
ba42 88                 DEY
ba43 10 d7              BPL MoBD_20         ; loop for next bit
ba45 28                 PLP                 ; clear decimal and IRQ mode
ba46 60                 RTS ;Size   64 [Mon_Bin_BCD]

              ; **********************
ba47            Mon_Print_Aval ; $ba47
              ; **********************

ba47 48                 PHA
ba48 a5 60              LDA M_Aval
ba4a 8d a2 0a           STA M_Operand+2
ba4d a5 61              LDA M_Aval+1
ba4f 8d a1 0a           STA M_Operand+1
ba52 a5 62              LDA M_Aval+2
ba54 8d a0 0a           STA M_Operand
ba57 a9 00              LDA #0
ba59 8d a3 0a           STA M_Operand+3
ba5c 68                 PLA

              ; ************************
ba5d            Mon_Print_Number ; $ba5d
              ; ************************

              ; Input : A = 0 suppress printing of leading zeroes
              ;         X = # of digits to print
              ;         Y = # of shifts formatting
              ;         (M_Operand) := four byte binary number

ba5d 8d b4 0a           STA M_Count       ; suppress leading zeroes ?
ba60 8c b6 0a           STY M_Shift
ba63 ac b6 0a MoPN_10   LDY M_Shift
ba66 a9 00              LDA #0
ba68 0e a3 0a MoPN_20   ASL M_Operand+3
ba6b 2e a2 0a           ROL M_Operand+2
ba6e 2e a1 0a           ROL M_Operand+1
ba71 2e a0 0a           ROL M_Operand
ba74 2a                 ROL A
ba75 88                 DEY                 ; rotate SHIFT bytes into A
ba76 10 f0              BPL MoPN_20
ba78 a8                 TAY
ba79 d0 09              BNE MoPN_30         ; -> print digit if not 0
ba7b e0 01              CPX #1
ba7d f0 05              BEQ MoPN_30         ; -> print digit if last
ba7f ac b4 0a           LDY M_Count
ba82 f0 08              BEQ MoPN_40         ; -> skip leading zeroes
ba84 ee b4 0a MoPN_30   INC M_Count       ; -> switch off zero suppression
ba87 09 30              ORA #'0'            ; convert digit to ASCII
ba89 20 d2 ff           JSR K_BSOUT         ; print it
ba8c ca       MoPN_40   DEX                 ; # of digits
ba8d d0 d4              BNE MoPN_10
ba8f 60                 RTS ;Size   51 [Mon_Print_Number]

              ; ****************
ba90            Mon_Disk ; $ba90
              ; ****************

ba90 d0 03              BNE MonD_10
ba92 a2 08              LDX #8              ; default device
ba94 2c                 BIT
ba95 a6 60    MonD_10   LDX M_Aval
ba97 e0 04              CPX #4
ba99 90 65              BCC MonD_Err        ; -> error: device <  4
ba9b e0 1f              CPX #31
ba9d b0 61              BCS MonD_Err        ; -> error: device > 31
ba9f 86 60              STX M_Aval
baa1 a9 00              LDA #0
baa3 85 62              STA M_Aval+2
baa5 85 b7              STA FNLEN
baa7 aa                 TAX
baa8 20 68 ff           JSR K_SETBNK        ; bank 0
baab 20 e9 b8           JSR Mon_Get_Char
baae c6 7a              DEC DS_LEN
bab0 c9 24              CMP #'$'            ; loading directory ?
bab2 f0 4f              BEQ Mon_Dir         ; -> yes
bab4 a9 00              LDA #0              ; LA
bab6 a6 60              LDX M_Aval        ; FA
bab8 a0 0f              LDY #15             ; SA
baba 20 ba ff           JSR K_SETLFS
babd 20 c0 ff           JSR K_OPEN          ; OPEN 0,FA,15
bac0 b0 32              BCS MonD_50         ; -> error
bac2 a2 00              LDX #0
bac4 20 c9 ff           JSR K_CKOUT         ; select output channel
bac7 b0 2b              BCS MonD_50         ; -> error
bac9 a6 7a    MonD_20   LDX DS_LEN          ; buffer pointer
bacb e6 7a              INC DS_LEN
bacd bd 00 02           LDA BUF,X           ; load command character
bad0 f0 05              BEQ MonD_30         ; -> finish
bad2 20 d2 ff           JSR K_BSOUT         ; send to device
bad5 90 f2              BCC MonD_20         ; -> loop
bad7 20 cc ff MonD_30   JSR K_CLRCH         ; command has been sent
bada 20 b4 b8           JSR Mon_CR
badd a2 00              LDX #0
badf 20 c6 ff           JSR K_CHKIN         ; select input channel
bae2 b0 10              BCS MonD_50         ; -> error
bae4 20 cf ff MonD_40   JSR K_BASIN
bae7 20 d2 ff           JSR K_BSOUT         ; get char and print
baea c9 0d              CMP #CR             ; until CR
baec f0 06              BEQ MonD_50
baee a5 90              LDA STATUS
baf0 29 bf              AND #%1011 1111     ; check EOI flag
baf2 f0 f0              BEQ MonD_40         ; loop

baf4 20 cc ff MonD_50   JSR K_CLRCH         ; clear channel
baf7 a9 00              LDA #0
baf9 38                 SEC
bafa 20 c3 ff           JSR K_CLOSE         ; close command channel
bafd 4c 8b b0           JMP Mon_Main
bb00 4c bc b0 MonD_Err  JMP Mon_Error

              ; ***************
bb03            Mon_Dir ; $bb03
              ; ***************

bb03 a0 ff              LDY #$ff
bb05 a6 7a              LDX DS_LEN          ; buffer pointer
bb07 ca                 DEX
bb08 c8       MDir_10   INY                 ; count length of pattern
bb09 e8                 INX
bb0a bd 00 02           LDA BUF,X           ; pattern character
bb0d d0 f9              BNE MDir_10         ; loop if not at end
bb0f 98                 TYA                 ; A = length
bb10 a6 7a              LDX DS_LEN          ; start of pattern low
bb12 a0 02              LDY #>BUF           ; start of pattern high
bb14 20 bd ff           JSR K_SETNAM
bb17 a9 00              LDA #0
bb19 a6 60              LDX M_Aval
bb1b a0 60              LDY #$60
bb1d 20 ba ff           JSR K_SETLFS        ; OPEN 0,FA,$60 (LOAD)
bb20 20 c0 ff           JSR K_OPEN
bb23 b0 cf              BCS MonD_50         ; -> error
bb25 a2 00              LDX #0
bb27 20 c6 ff           JSR K_CHKIN
bb2a 20 b4 b8           JSR Mon_CR
bb2d a0 03              LDY #3              ; load adr, link, blocks
bb2f 84 63    MDir_20   STY M_Bval
bb31 20 cf ff MDir_30   JSR K_BASIN
bb34 85 60              STA M_Aval        ; low byte
bb36 a5 90              LDA STATUS
bb38 d0 ba              BNE MonD_50         ; -> finish
bb3a 20 cf ff           JSR K_BASIN
bb3d 85 61              STA M_Aval+1      ; high byte
bb3f a5 90              LDA STATUS
bb41 d0 b1              BNE MonD_50         ; -> finish
bb43 c6 63              DEC M_Bval
bb45 d0 ea              BNE MDir_30         ; loop read word
bb47 20 07 ba           JSR Mon_Bin_BCD
bb4a a9 00              LDA #0
bb4c a2 08              LDX #8
bb4e a0 03              LDY #3
bb50 20 5d ba           JSR Mon_Print_Number ; blocks
bb53 a9 20              LDA #' '
bb55 20 d2 ff           JSR K_BSOUT
bb58 20 cf ff MDir_40   JSR K_BASIN         ; print header / dir entry / free blcoks
bb5b f0 09              BEQ MDir_50
bb5d a6 90              LDX STATUS
bb5f d0 93              BNE MonD_50
bb61 20 d2 ff           JSR K_BSOUT
bb64 90 f2              BCC MDir_40
bb66 20 b4 b8 MDir_50   JSR Mon_CR
bb69 20 e1 ff           JSR K_STOP
bb6c f0 86              BEQ MonD_50
bb6e a0 02              LDY #2              ; link, blocks
bb70 d0 bd              BNE MDir_20

bb72 ff ff ff           .FILL $bfc0-* ($ff) ; 1102 bytes ; 1102 bytes

bfc0 28 43 29           .BYTE "(C)1986 COMMODORE ELECTRONICS"
bfdd 2c 20 4c           .BYTE ", LTD. ALL RIGHTS RESERVED."
bff8 ff ff ff           .BYTE $ff,$ff,$ff,$ff,$c8,$cd
bffe 01 c5              .WORD $c501 ; 15103

              ; **************************
              ; EDITOR ROM ; $c000 - $cfff
              ; **************************

c000 4c 7b c0 E_CINT    JMP Edit_Initialize
c003 4c 34 cc E_DISPLAY JMP Edit_Display
c006 4c 34 c2 E_GETKEY  JMP Edit_Get_Key
c009 4c 9b c2 E_GETSCR  JMP Edit_Get_Screen
c00c 4c 2d c7 E_PRINT   JMP Edit_Print
c00f 4c 5b cc E_SCRORG  JMP Edit_Get_Window
0001 FALSE    #if KEYBOARD == 255
SKIP          E_KEY     JMP Scan_Keyboard
              #else
c012 4c 87 fc E_KEY     JMP K_Scan_Keyboard
              #endif
c015 4c 51 c6 E_REPEAT  JMP Edit_Repeat
c018 4c 6a cc E_PLOT    JMP Edit_Plot
c01b 4c 57 cd E_CURSOR  JMP Edit_Cursor
c01e 4c c1 c9 E_ESCAPE  JMP Edit_Escape_Switch
c021 4c a2 cc E_PFKEY   JMP Edit_Set_FKey
c024 4c 94 c1 E_RASTER  JMP Edit_Raster
c027 4c 0c ce E_DLCHR   JMP Edit_Load_Chargen
c02a 4c 2e cd E_SWAPPER JMP Edit_Screen_Swapper
c02d 4c 1b ca E_WINDOW  JMP Edit_Window_Corner

c030 ff ff ff           .BYTE $ff,$ff,$ff

              ; ********************
c033            E_40_Line_Lo ; $c033
              ; ********************

c033 00                 .BYTE <[VIC_TEXT +  0 * 40]
c034 28                 .BYTE <[VIC_TEXT +  1 * 40]
c035 50                 .BYTE <[VIC_TEXT +  2 * 40]
c036 78                 .BYTE <[VIC_TEXT +  3 * 40]
c037 a0                 .BYTE <[VIC_TEXT +  4 * 40]
c038 c8                 .BYTE <[VIC_TEXT +  5 * 40]
c039 f0                 .BYTE <[VIC_TEXT +  6 * 40]
c03a 18                 .BYTE <[VIC_TEXT +  7 * 40]
c03b 40                 .BYTE <[VIC_TEXT +  8 * 40]
c03c 68                 .BYTE <[VIC_TEXT +  9 * 40]
c03d 90                 .BYTE <[VIC_TEXT + 10 * 40]
c03e b8                 .BYTE <[VIC_TEXT + 11 * 40]
c03f e0                 .BYTE <[VIC_TEXT + 12 * 40]
c040 08                 .BYTE <[VIC_TEXT + 13 * 40]
c041 30                 .BYTE <[VIC_TEXT + 14 * 40]
c042 58                 .BYTE <[VIC_TEXT + 15 * 40]
c043 80                 .BYTE <[VIC_TEXT + 16 * 40]
c044 a8                 .BYTE <[VIC_TEXT + 17 * 40]
c045 d0                 .BYTE <[VIC_TEXT + 18 * 40]
c046 f8                 .BYTE <[VIC_TEXT + 19 * 40]
c047 20                 .BYTE <[VIC_TEXT + 20 * 40]
c048 48                 .BYTE <[VIC_TEXT + 21 * 40]
c049 70                 .BYTE <[VIC_TEXT + 22 * 40]
c04a 98                 .BYTE <[VIC_TEXT + 23 * 40]
c04b c0                 .BYTE <[VIC_TEXT + 24 * 40]

              ; ********************
c04c            E_40_Line_Hi ; $c04c
              ; ********************

c04c 04                 .BYTE >[VIC_TEXT +  0 * 40]
c04d 04                 .BYTE >[VIC_TEXT +  1 * 40]
c04e 04                 .BYTE >[VIC_TEXT +  2 * 40]
c04f 04                 .BYTE >[VIC_TEXT +  3 * 40]
c050 04                 .BYTE >[VIC_TEXT +  4 * 40]
c051 04                 .BYTE >[VIC_TEXT +  5 * 40]
c052 04                 .BYTE >[VIC_TEXT +  6 * 40]
c053 05                 .BYTE >[VIC_TEXT +  7 * 40]
c054 05                 .BYTE >[VIC_TEXT +  8 * 40]
c055 05                 .BYTE >[VIC_TEXT +  9 * 40]
c056 05                 .BYTE >[VIC_TEXT + 10 * 40]
c057 05                 .BYTE >[VIC_TEXT + 11 * 40]
c058 05                 .BYTE >[VIC_TEXT + 12 * 40]
c059 06                 .BYTE >[VIC_TEXT + 13 * 40]
c05a 06                 .BYTE >[VIC_TEXT + 14 * 40]
c05b 06                 .BYTE >[VIC_TEXT + 15 * 40]
c05c 06                 .BYTE >[VIC_TEXT + 16 * 40]
c05d 06                 .BYTE >[VIC_TEXT + 17 * 40]
c05e 06                 .BYTE >[VIC_TEXT + 18 * 40]
c05f 06                 .BYTE >[VIC_TEXT + 19 * 40]
c060 07                 .BYTE >[VIC_TEXT + 20 * 40]
c061 07                 .BYTE >[VIC_TEXT + 21 * 40]
c062 07                 .BYTE >[VIC_TEXT + 22 * 40]
c063 07                 .BYTE >[VIC_TEXT + 23 * 40]
c064 07                 .BYTE >[VIC_TEXT + 24 * 40]


              ; ********************
c065            Edit_Vectors ; $c065
              ; ********************

c065 b9 c7              .WORD Edit_Use_Ctrl
c067 05 c8              .WORD Edit_Print_Shifted
c069 c1 c9              .WORD Edit_Escape_Switch
c06b e1 c5              .WORD Edit_Use_Scancode
c06d ad c6              .WORD Edit_Use_Function_Key

              ; ************************
c06f            ASCII_Key_Tables ; $c06f
              ; ************************

c06f 80 fa              .WORD Keytab_Normal
c071 d9 fa              .WORD Keytab_Shifted
c073 32 fb              .WORD Keytab_CBM
c075 8b fb              .WORD Keytab_Control
c077 80 fa              .WORD Keytab_Normal
c079 e4 fb              .WORD Keytab_Capslock

              ; ***********************
c07b            Edit_Initialize ; $c07b
              ; ***********************

c07b a9 03              LDA #3              ; set Video Address VA14 and VA15
c07d 0d 00 dd           ORA CIA2_PRA
c080 8d 00 dd           STA CIA2_PRA        ; store it
c083 a9 fb              LDA #%1111 1011     ; $fb
c085 25 01              AND R8502           ; switch $D000 to character ROM
c087 09 02              ORA #%0000 0010     ; $02
c089 85 01              STA R8502           ; switch $E000-$FFF to ROM
c08b 20 cc ff           JSR K_CLRCH         ; reset I/O channels
c08e a9 00              LDA #0
0001 FALSE    #if KEYBOARD == 255
SKIP                    STA SID_Volume
              #else
c090 20 80 fc           JSR Edit_Patch_DIN  ; Zero DINFLG and SID_Volume
              #endif
c093 85 d8              STA GRAPHM
c095 85 d7              STA MODE_80
c097 85 d0              STA NDX
c099 85 d1              STA KYNDX
c09b 85 d6              STA CRSW
c09d 8d 21 0a           STA PAUSE
c0a0 8d 26 0a           STA BLNON
c0a3 85 d9              STA CHAREN
c0a5 8d 2e 0a           STA VDC_RAM_PAGE    ; VDC base address = $0000
c0a8 a9 14              LDA #$14
c0aa 8d 2c 0a           STA VSH_TEXT        ; VIC text
c0ad a9 78              LDA #$78
c0af 8d 2d 0a           STA VSH_BITMAP      ; VIC bitmap
c0b2 a9 08              LDA #8
c0b4 8d 2f 0a           STA VDC_ATT_PAGE    ; VDC attribute RAM = $0800
c0b7 ad 4c c0           LDA E_40_Line_Hi
c0ba 8d 3b 0a           STA VIC_RAM_PAGE    ; VIC text RAM
c0bd a9 0a              LDA #10
c0bf 8d 20 0a           STA XMAX            ; max lenth of keyboad queue
c0c2 8d 28 0a           STA BLNCT           ;
c0c5 8d 27 0a           STA BLNSW           ; Not zero: blinking off
c0c8 8d 24 0a           STA DELAY
c0cb a9 04              LDA #4
c0cd 8d 23 0a           STA KOUNT
c0d0 20 83 c9           JSR Set_Default_Tabstops
c0d3 8d 22 0a           STA RPTFLG          ; $80 = all keys repeat
c0d6 0d 05 d5           ORA MMU_MODE
c0d9 8d 05 d5           STA MMU_MODE
c0dc a9 60              LDA #$60
c0de 8d 2b 0a           STA CURMOD          ; normal blinking
c0e1 a9 d0              LDA #$d0
c0e3 8d 34 0a           STA VSH_SPLIT

c0e6 a2 1a              LDX #$1a
c0e8 bd 74 ce CINT_10   LDA ZP_40_COL,X     ; store default ZP values
c0eb 95 e0              STA PNT,X           ; for 40 column screen in zero page
c0ed bd 8e ce           LDA ZP_80_COL,X     ; store default ZP values
c0f0 9d 40 0a           STA ZP_SW_COL,X     ; for 80 column screen in swap area
c0f3 ca                 DEX
c0f4 10 f2              BPL CINT_10

c0f6 a2 09              LDX #9
c0f8 bd 65 c0 CINT_20   LDA Edit_Vectors,X
c0fb 9d 34 03           STA CTLVEC,X
c0fe ca                 DEX
c0ff 10 f7              BPL CINT_20
c101 2c 04 0a           BIT INIT_STATUS
c104 70 1e              BVS CINT_40
0001 FALSE    #if KEYBOARD == 255
SKIP                    LDX #$0B
SKIP          CINTUS_10 LDA ASCII_Key_Tables,X
SKIP                    STA DECODE,X
SKIP                    DEX
SKIP                    BPL CINTUS_10
              #else
c106 20 81 fe           JSR DIN_or_ASCII
c109 a9 00              LDA #0
c10b 8d 3f 03           STA DECODE+1
c10e 20 87 fc           JSR K_Scan_Keyboard
              #endif
c111 a2 4c              LDX #$4c
c113 bd a8 ce CINT_30   LDA Edit_Default_FK,X
c116 9d 00 10           STA PKYBUF,X
c119 ca                 DEX
c11a 10 f7              BPL CINT_30
c11c a9 40              LDA #$40 ; '@'
c11e 0d 04 0a           ORA INIT_STATUS
c121 8d 04 0a           STA INIT_STATUS
c124 20 2e cd CINT_40   JSR Edit_Screen_Swapper
c127 20 83 c9           JSR Set_Default_Tabstops
c12a 20 24 ca           JSR Set_Fullscreen
c12d 20 42 c1           JSR Clear_Window
c130 20 2e cd           JSR Edit_Screen_Swapper
c133 20 24 ca           JSR Set_Fullscreen
c136 20 42 c1           JSR Clear_Window
c139 2c 05 d5           BIT MMU_MODE
c13c 30 03              BMI CINT_Ret
c13e 20 2e cd           JSR Edit_Screen_Swapper
c141 60       CINT_Ret  RTS ;Size  199 [Edit_Initialize]

              ; ********************
c142            Clear_Window ; $c142
              ; ********************

c142 20 50 c1           JSR Cursor_To_Window_Home
c145 20 5e c1 ClWi_10   JSR Set_Screen_Pointer_X
c148 20 a5 c4           JSR Clear_Window_Row_X
c14b e4 e4              CPX Margin_Bottom
c14d e8                 INX
c14e 90 f5              BCC ClWi_10

              ; *****************************
c150            Cursor_To_Window_Home ; $c150
              ; *****************************

c150 a6 e5              LDX Margin_Top
c152 86 eb              STX Cursor_Row
c154 86 e8              STX CurLst_Row

              ; *****************************
c156            Cursor_To_Left_Margin ; $c156
              ; *****************************

c156 a4 e6              LDY Margin_Left
c158 84 ec              STY Cursor_Col
c15a 84 e9              STY CurLst_Col

              ; **************************
c15c            Set_Screen_Pointer ; $c15c
              ; **************************

c15c a6 eb              LDX Cursor_Row

              ; ****************************
c15e            Set_Screen_Pointer_X ; $c15e
              ; ****************************

c15e bd 33 c0           LDA E_40_Line_Lo,X
c161 24 d7              BIT MODE_80
c163 10 01              BPL SSPX_10         ; -> 40 columns
c165 0a                 ASL A
c166 85 e0    SSPX_10   STA PNT             ; address low
c168 bd 4c c0           LDA E_40_Line_Hi,X
c16b 29 03              AND #%0000 0011     ; use lowest bits
c16d 24 d7              BIT MODE_80
c16f 10 06              BPL SSPX_20         ; -> 40 columns
c171 2a                 ROL A               ; double value + carry, clear carry
c172 0d 2e 0a           ORA VDC_RAM_PAGE    ; 80 column address high
c175 90 03              BCC SSPX_30         ; always
c177 0d 3b 0a SSPX_20   ORA VIC_RAM_PAGE    ; 40 column address high
c17a 85 e1    SSPX_30   STA PNT+1           ; PNT = pointer to start of row X

              ; *****************************
c17c            Set_Attribute_Pointer ; $c17c
              ; *****************************

c17c a5 e0              LDA PNT
c17e 85 e2              STA USER
c180 a5 e1              LDA PNT+1
c182 24 d7              BIT MODE_80
c184 10 07              BPL SAP_10          ; -> 40 columns
c186 29 07              AND #%0000 0111     ; $07
c188 0d 2f 0a           ORA VDC_ATT_PAGE
c18b d0 04              BNE SAP_20          ; always
c18d 29 03    SAP_10    AND #%0000 0011     ; $03
c18f 09 d8              ORA #%1101 1000     ; $d8
c191 85 e3    SAP_20    STA USER+1
c193 60                 RTS ;Size   24 [Set_Attribute_Pointer]

              ; *******************
c194            Edit_Raster ; $c194
              ; *******************

c194 38                 SEC
c195 ad 19 d0           LDA VIC_IRQ_REG
c198 29 01              AND #%0000 0001     ; raster interrupt ?
c19a f0 07              BEQ RAST_10         ; -> no
c19c 8d 19 d0           STA VIC_IRQ_REG     ; reset raster interrupt
c19f a5 d8              LDA GRAPHM          ; load graphics mode
c1a1 c9 ff              CMP #$ff            ; text/graphic/split ?
c1a3 f0 6f    RAST_10   BEQ RAST_80         ;
c1a5 2c 11 d0           BIT VIC_Ctrl_1
c1a8 30 04              BMI RAST_20         ; -> branch on RST8 set
c1aa 29 40              AND #%0100 0000     ; test split screen
c1ac d0 31              BNE RAST_50         ; -> branch on split screen
c1ae 38       RAST_20   SEC
c1af a5 d8              LDA GRAPHM
c1b1 f0 2c              BEQ RAST_50
c1b3 24 d8              BIT GRAPHM
c1b5 50 06              BVC RAST_30         ; -> no split screen
c1b7 ad 34 0a           LDA VSH_SPLIT       ; VIC split shadow register
c1ba 8d 12 d0           STA VIC_RASTER
c1bd a5 01    RAST_30   LDA R8502
c1bf 29 fd              AND #%1111 1101     ; $E000-$EFFF : RAM
c1c1 09 04              ORA #%0000 0100     ; $D000-$Dfff : I/O
c1c3 48                 PHA                 ; save mask
c1c4 ad 2d 0a           LDA VSH_BITMAP      ; save bitmap pointer
c1c7 48                 PHA
c1c8 ad 11 d0           LDA VIC_Ctrl_1
c1cb 29 7f              AND #%0111 1111     ; reset bit8 of raster register
c1cd 09 20              ORA #%0010 0000     ; enable bitmap mode
c1cf a8                 TAY                 ; save mask in Y
c1d0 ad 16 d0           LDA VIC_Ctrl_2
c1d3 24 d8              BIT GRAPHM
c1d5 30 03              BMI RAST_40         ; -> multi color mode
c1d7 29 ef              AND #%1110 1111     ; Disable multi color mode
c1d9 2c                 BIT                 ; skip next statement
c1da 09 10    RAST_40   ORA #%0001 0000     ; Enable multi color mode
c1dc aa                 TAX                 ; save mask in X
c1dd d0 28              BNE RAST_70         ; branch always
c1df a9 ff    RAST_50   LDA #$ff
c1e1 8d 12 d0           STA VIC_RASTER
c1e4 a5 01              LDA R8502
c1e6 09 02              ORA #%0000 0010     ; $E000-$FFFF : Kernal  ROM
c1e8 29 fb              AND #%1111 1011     ; $D000-$DFFF : Chargen ROM
c1ea 05 d9              ORA CHAREN
c1ec 48                 PHA                 ; save mask
c1ed ad 2c 0a           LDA VSH_TEXT
c1f0 48                 PHA
c1f1 ad 11 d0           LDA VIC_Ctrl_1
c1f4 29 5f              AND #%0101 1111     ; switch off bitmap mode
c1f6 a8                 TAY                 ; save mask in Y
c1f7 ad 16 d0           LDA VIC_Ctrl_2
c1fa 29 ef              AND #%1110 1111     ; switch off multi color mode
c1fc aa                 TAX                 ; save mask in X
c1fd b0 08              BCS RAST_70

c1ff a2 07              LDX #7              ; wait 0.03 ms
c201 ca       RAST_60   DEX
c202 d0 fd              BNE RAST_60
c204 ea                 NOP
c205 ea                 NOP
c206 aa                 TAX

c207 68       RAST_70   PLA
c208 8d 18 d0           STA VIC_Memory
c20b 68                 PLA
c20c 85 01              STA R8502
c20e 8c 11 d0           STY VIC_Ctrl_1
c211 8e 16 d0           STX VIC_Ctrl_2
c214 b0 13    RAST_80   BCS RAST_90
c216 ad 30 d0           LDA VIC_SPEED
c219 29 01              AND #%0000 0001     ; mask CUP speed
c21b f0 0c              BEQ RAST_90         ; -> branch on 1 MHz
c21d a5 d8              LDA GRAPHM
c21f 29 40              AND #%0100 0000     ; test split screen
c221 f0 06              BEQ RAST_90         ; -> branch if not
c223 ad 11 d0           LDA VIC_Ctrl_1
c226 10 01              BPL RAST_90         ; -> RST8 clear
c228 38                 SEC
c229 58       RAST_90   CLI                 ; enable interrupts
c22a 90 07              BCC RAST_Ret        ; -> skip key and cursor routines
0001 FALSE    #if KEYBOARD == 255
SKIP                    JSR Scan_Keyboard
              #else
c22c 20 87 fc           JSR K_Scan_Keyboard             ; scan keyboard
              #endif
c22f 20 e7 c6           JSR Blink_Cursor    ; blink cursor
c232 38                 SEC
c233 60       RAST_Ret  RTS ;Size  160 [Edit_Raster]

              ; ********************
c234            Edit_Get_Key ; $c234
              ; ********************

              ; look first for characters from function keys

c234 a6 d1              LDX KYNDX           ; chars in function key buffer
c236 f0 0c              BEQ GETK_10         ; -> none
c238 a4 d2              LDY KEYIDX          ; get text index
c23a b9 0a 10           LDA PKYDEF,Y        ; get next char
c23d c6 d1              DEC KYNDX           ; decrement remaining chars
c23f e6 d2              INC KEYIDX          ; increment index
c241 58                 CLI                 ; enable interrupts
c242 18                 CLC                 ; C=0 got new char
c243 60                 RTS                 ; and return ;Size   16 [Edit_Get_Key]

              ; now look into the keyboard buffer

c244 ac 4a 03 GETK_10   LDY KEYD            ; load next char into Y
c247 bd 4b 03 GETK_20   LDA KEYD+1,X        ; scroll keyboard buffer
c24a 9d 4a 03           STA KEYD,X
c24d e8                 INX
c24e e4 d0              CPX NDX
c250 d0 f5              BNE GETK_20         ; loop
c252 c6 d0              DEC NDX             ; decrement chars in buffer
c254 98                 TYA                 ; A = char to return
c255 58                 CLI                 ; enable interrupts
c256 18                 CLC                 ; C=0 got new char
c257 60                 RTS                 ; and return ;Size   36 [Edit_Get_Key]

c258 20 2d c7 GETK_30   JSR Edit_Print           ; display char
c25b 20 6f cd GETK_40   JSR Edit_Cursor_On
c25e a5 d0    GETK_50   LDA NDX             ; chars in buffer
c260 05 d1              ORA KYNDX           ; chars from function key
c262 f0 fa              BEQ GETK_50         ; -> waitloop if none

c264 20 9f cd           JSR Edit_Cursor_Off
c267 20 34 c2           JSR Edit_Get_Key    ; get next char
c26a c9 0d              CMP #CR
c26c d0 ea              BNE GETK_30         ; -> loop if not CR
c26e 85 d6              STA CRSW            ; not zero: screen input
c270 a9 00              LDA #0
c272 85 f4              STA QTSW            ; clear quote switch
c274 20 c3 cb           JSR Edit_Cursor_Last
c277 8e 30 0a           STX LINTMP
c27a 20 b5 cb           JSR Start_Of_Line
c27d a4 e6              LDY Margin_Left
c27f a5 e8              LDA CurLst_Row
c281 30 13              BMI GETK_80         ; -> coupled row
c283 c5 eb              CMP Cursor_Row
c285 90 0f              BCC GETK_80         ; -> input row != cursor row
c287 a4 e9              LDY CurLst_Col
c289 cd 30 0a           CMP LINTMP          ; input column == last input column ?
c28c d0 04              BNE GETK_60         ; -> no
c28e c4 ea              CPY Cursor_End
c290 f0 02              BEQ GETK_70         ; -> yes
c292 b0 11    GETK_60   BCS GETS_10
c294 85 eb    GETK_70   STA Cursor_Row
c296 84 ec    GETK_80   STY Cursor_Col
c298 4c bc c2           JMP GETS_25

              ; ***********************
c29b            Edit_Get_Screen ; $c29b
              ; ***********************

c29b 98                 TYA
c29c 48                 PHA                 ; save Y
c29d 8a                 TXA
c29e 48                 PHA                 ; save X
c29f a5 d6              LDA CRSW            ; Cursor Wait ?
c2a1 f0 b8              BEQ GETK_40         ; -> get key
c2a3 10 17              BPL GETS_25         ; -> get char from screen RAM

c2a5 a9 00    GETS_10   LDA #0
c2a7 85 d6              STA CRSW
c2a9 a9 0d              LDA #CR
c2ab a2 03              LDX #3
c2ad e4 99              CPX DFLTN
c2af f0 04              BEQ GETS_15         ; -> input from screen
c2b1 e4 9a              CPX DFLTO
c2b3 f0 03              BEQ GETS_20         ; -> output to screen
c2b5 20 2d c7 GETS_15   JSR Edit_Print
c2b8 a9 0d    GETS_20   LDA #CR
c2ba d0 39              BNE GETS_55         ; -> exit with CR

c2bc 20 5c c1 GETS_25   JSR Set_Screen_Pointer
c2bf 20 58 cb           JSR Edit_Get_Char
c2c2 85 ef              STA DATAX           ; display code
c2c4 29 3f              AND #%0011 1111
c2c6 06 ef              ASL DATAX
c2c8 24 ef              BIT DATAX
c2ca 10 02              BPL GETS_30
c2cc 09 80              ORA #%1000 0000
c2ce 90 04    GETS_30   BCC GETS_35
c2d0 a6 f4              LDX QTSW
c2d2 d0 04              BNE GETS_40
c2d4 70 02    GETS_35   BVS GETS_40
c2d6 09 40              ORA #%0100 0000
c2d8 20 ff c2 GETS_40   JSR Edit_Toggle_Quote
c2db a4 eb              LDY Cursor_Row
c2dd cc 30 0a           CPY LINTMP
c2e0 90 0a              BCC GETS_45
c2e2 a4 ec              LDY Cursor_Col
c2e4 c4 ea              CPY Cursor_End
c2e6 90 04              BCC GETS_45
c2e8 66 d6              ROR CRSW            ; set bit 7 of CRSW
c2ea 30 03              BMI GETS_50         ; always

c2ec 20 ed cb GETS_45   JSR Edit_Cursor_Right
c2ef c9 de    GETS_50   CMP #$de            ; Pi in display code
c2f1 d0 02              BNE GETS_55
c2f3 a9 ff              LDA #$ff            ; Pi PETSCII
c2f5 85 ef    GETS_55   STA DATAX
c2f7 68                 PLA
c2f8 aa                 TAX
c2f9 68                 PLA
c2fa a8                 TAY
c2fb a5 ef              LDA DATAX
c2fd 18                 CLC
c2fe 60                 RTS ;Size  100 [Edit_Get_Screen]

              ; *************************
c2ff            Edit_Toggle_Quote ; $c2ff
              ; *************************

c2ff c9 22              CMP #QUOTE
c301 d0 08              BNE EdTQ_Ret
c303 a5 f4              LDA QTSW
c305 49 01              EOR #1
c307 85 f4              STA QTSW
c309 a9 22              LDA #QUOTE
c30b 60       EdTQ_Ret  RTS ;Size   13 [Edit_Toggle_Quote]

              ; ***********************
c30c            Edit_Print_Exit ; $c30c
              ; ***********************

c30c a5 ef              LDA DATAX           ; printed character
c30e 85 f0              STA LSTCHR          ; remember it
c310 20 57 cd           JSR Edit_Cursor          ; update cursor
c313 a5 f5              LDA INSRT           ; outstanding inserts ?
c315 f0 02              BEQ EdPE_10         ; -> no
c317 46 f4              LSR QTSW            ; clear quote mode
c319 68       EdPE_10   PLA
c31a a8                 TAY                 ; pull Y
c31b 68                 PLA
c31c aa                 TAX                 ; pull X
c31d 68                 PLA                 ; pull A
c31e 18                 CLC                 ; status OK
c31f 60                 RTS ;Size   20 [Edit_Print_Exit]

              ; ***********************
c320            Print_To_Screen ; $c320
              ; ***********************

c320 09 40              ORA #$40
c322 a6 f3    PTS_10    LDX E_Reverse
c324 f0 02              BEQ PTS_30
c326 09 80    PTS_20    ORA #$80            ; set reverse bit
c328 a6 f5    PTS_30    LDX INSRT           ; insert mode ?
c32a f0 02              BEQ PTS_40
c32c c6 f5              DEC INSRT           ; # of inserts pending
c32e 24 f6    PTS_40    BIT INSFLG
c330 10 09              BPL PTS_50
c332 48                 PHA
c333 20 e3 c8           JSR Edit_Shift_Text
c336 a2 00              LDX #0
c338 86 f5              STX INSRT           ; clear insert mode
c33a 68                 PLA
c33b 20 2f cc PTS_50    JSR Edit_Put_Char_Att

              ; ************************
c33e            Edit_Cursor_Next ; $c33e
              ; ************************

c33e c4 e7              CPY Margin_Right
c340 90 0a              BCC EdAC_10
c342 a6 eb              LDX Cursor_Row
c344 e4 e4              CPX Margin_Bottom
c346 90 04              BCC EdAC_10
c348 24 f8              BIT Scroll_Locked
c34a 30 16              BMI EdAC_Ret        ; -> scroll locked
c34c 20 5c c1 EdAC_10   JSR Set_Screen_Pointer
c34f 20 ed cb           JSR Edit_Cursor_Right
c352 90 0e              BCC EdAC_Ret        ; -> OK
c354 20 74 cb           JSR Is_Coupled_Row
c357 b0 08              BCS EdAC_20
c359 38                 SEC
c35a 24 f8              BIT Scroll_Locked
c35c 70 04              BVS EdAC_Ret
c35e 20 7c c3           JSR Edit_Scroll_Down
c361 18       EdAC_20   CLC
c362 60       EdAC_Ret  RTS ;Size   37 [Edit_Cursor_Next]

              ; ************************
c363            Edit_Cursor_Down ; $c363
              ; ************************

c363 a6 eb              LDX Cursor_Row
c365 e4 e4              CPX Margin_Bottom
c367 90 0e              BCC EdCD_20         ; -> not at last row
c369 24 f8              BIT Scroll_Locked
c36b 10 06              BPL EdCD_10         ; -> scroll window
c36d a5 e5              LDA Margin_Top
c36f 85 eb              STA Cursor_Row      ; set cursor to upper margin
c371 b0 06              BCS EdCD_30         ; branch always
c373 20 a6 c3 EdCD_10   JSR Edit_Scroll_Up
c376 18                 CLC
c377 e6 eb    EdCD_20   INC Cursor_Row
c379 4c 5c c1 EdCD_30   JMP Set_Screen_Pointer

              ; ************************
c37c            Edit_Scroll_Down ; $c37c
              ; ************************

c37c a6 e8              LDX CurLst_Row
c37e 30 06              BMI EdSD_10         ; -> cont row
c380 e4 eb              CPX Cursor_Row
c382 90 02              BCC EdSD_10
c384 e6 e8              INC CurLst_Row
c386 a6 e4    EdSD_10   LDX Margin_Bottom
c388 20 5e c1 EdSD_20   JSR Set_Screen_Pointer_X
c38b a4 e6              LDY Margin_Left     ; copy row from left to right margin
c38d e4 eb              CPX Cursor_Row
c38f f0 0f              BEQ EdSD_30         ; -> finish at cursor row
c391 ca                 DEX
c392 20 76 cb           JSR Is_Coupled_Row_X
c395 e8                 INX
c396 20 83 cb           JSR Toggle_Cont_Flag_X
c399 ca                 DEX
c39a 20 0d c4           JSR Scroll_Row      ; X = source row
c39d 4c 88 c3           JMP EdSD_20
c3a0 20 a5 c4 EdSD_30   JSR Clear_Window_Row_X
c3a3 4c 93 cb           JMP Set_Cont_Flag

              ; **********************
c3a6            Edit_Scroll_Up ; $c3a6
              ; **********************

c3a6 a6 e5              LDX Margin_Top
c3a8 e8       ScUp_10   INX
c3a9 20 76 cb           JSR Is_Coupled_Row_X
c3ac 90 0a              BCC ScUp_20         ; -> single row
c3ae e4 e4              CPX Margin_Bottom
c3b0 90 f6              BCC ScUp_10
c3b2 a6 e5              LDX Margin_Top
c3b4 e8                 INX
c3b5 20 85 cb           JSR Clear_Cont_Flag
c3b8 c6 eb    ScUp_20   DEC Cursor_Row
c3ba 24 e8              BIT CurLst_Row
c3bc 30 02              BMI ScUp_30         ; -> continuation row
c3be c6 e8              DEC CurLst_Row
c3c0 a6 e5    ScUp_30   LDX Margin_Top
c3c2 e4 df              CPX E_Row
c3c4 b0 02              BCS ScUp_40
c3c6 c6 df              DEC E_Row
c3c8 20 dc c3 ScUp_40   JSR Scroll_Window
c3cb a6 e5              LDX Margin_Top
c3cd 20 76 cb           JSR Is_Coupled_Row_X
c3d0 08                 PHP
c3d1 20 85 cb           JSR Clear_Cont_Flag
c3d4 28                 PLP
c3d5 90 04              BCC ScUp_Ret
c3d7 24 f8              BIT Scroll_Locked
c3d9 30 cb              BMI Edit_Scroll_Up
c3db 60       ScUp_Ret  RTS ;Size   54 [Edit_Scroll_Up]

              ; *********************
c3dc            Scroll_Window ; $c3dc
              ; *********************

c3dc 20 5e c1           JSR Set_Screen_Pointer_X
c3df a4 e6              LDY Margin_Left
c3e1 e4 e4              CPX Margin_Bottom
c3e3 b0 0f              BCS ScWi_10
c3e5 e8                 INX
c3e6 20 76 cb           JSR Is_Coupled_Row_X
c3e9 ca                 DEX
c3ea 20 83 cb           JSR Toggle_Cont_Flag_X
c3ed e8                 INX
c3ee 20 0d c4           JSR Scroll_Row
c3f1 4c dc c3           JMP Scroll_Window

c3f4 20 a5 c4 ScWi_10   JSR Clear_Window_Row_X
c3f7 a9 7f              LDA #$7f            ; test col 7
c3f9 8d 00 dc           STA CIA1_KBD_COL
c3fc ad 01 dc           LDA CIA1_KBD_ROW
c3ff c9 df              CMP #%1101 1111    ; Commodore key ?
c401 d0 09              BNE ScWi_Ret

              ; delay loop if Commodore key is held down

c403 a0 00              LDY #0
c405 ea       ScWi_20   NOP
c406 ca                 DEX
c407 d0 fc              BNE ScWi_20
c409 88                 DEY
c40a d0 f9              BNE ScWi_20
c40c 60       ScWi_Ret  RTS ;Size   49 [Scroll_Window]

              ; ******************
c40d            Scroll_Row ; $c40d
              ; ******************

c40d 24 d7              BIT MODE_80
c40f 30 25              BMI ScRo_20         ; -> 80 column screen
c411 bd 33 c0           LDA E_40_Line_Lo,X
c414 85 dc              STA E_End           ; character low
c416 85 da              STA E_Beg           ; colour    low
c418 bd 4c c0           LDA E_40_Line_Hi,X
c41b 29 03              AND #%0000 0011
c41d 0d 3b 0a           ORA VIC_RAM_PAGE
c420 85 db              STA E_Beg+1         ; character high
c422 29 03              AND #%0000 0011     ; $03
c424 09 d8              ORA #%1101 1000     ; $d8
c426 85 dd              STA E_End+1         ; colour    high
c428 b1 da    ScRo_10   LDA (E_Beg),Y
c42a 91 e0              STA (PNT),Y         ; copy character
c42c b1 dc              LDA (E_End),Y
c42e 91 e2              STA (USER),Y        ; copy colour
c430 c4 e7              CPY Margin_Right
c432 c8                 INY
c433 90 f3              BCC ScRo_10
c435 60                 RTS ;Size   41 [Scroll_Row]

              ; scroll row in 80 column mode

c436 8e 31 0a ScRo_20   STX VDC_ROW      ; save row
c439 8c 32 0a           STY VDC_COL      ; save col
c43c a2 18              LDX #$18            ; VDC reg $18
c43e 20 da cd           JSR VDC_Read_Register_X
c441 09 80              ORA #%1000 0000     ; $80
c443 20 cc cd           JSR VDC_Write_Register_X
c446 20 e6 cd           JSR VDC_Set_Char_Address
c449 ae 31 0a           LDX VDC_ROW
c44c bd 33 c0           LDA E_40_Line_Lo,X
c44f 0a                 ASL A
c450 85 da              STA E_Beg
c452 bd 4c c0           LDA E_40_Line_Hi,X
c455 29 03              AND #%0000 0011 ; $03
c457 2a                 ROL A
c458 0d 2e 0a           ORA VDC_RAM_PAGE
c45b 85 db              STA E_Beg+1
c45d a2 20              LDX #$20            ; VDC reg $20
c45f 18                 CLC
c460 98                 TYA
c461 65 da              ADC E_Beg
c463 85 da              STA E_Beg
c465 a9 00              LDA #0
c467 65 db              ADC E_Beg+1
c469 85 db              STA E_Beg+1
c46b 20 cc cd           JSR VDC_Write_Register_X
c46e e8                 INX
c46f a5 da              LDA E_Beg
c471 20 cc cd           JSR VDC_Write_Register_X
c474 38                 SEC
c475 a6 e7              LDX Margin_Right
c477 e8                 INX
c478 8a                 TXA
c479 ed 32 0a           SBC VDC_COL
c47c 8d 32 0a           STA VDC_COL
c47f a2 1e              LDX #$1e
c481 20 cc cd           JSR VDC_Write_Register_X
c484 a2 20              LDX #$20
c486 a5 db              LDA E_Beg+1
c488 29 07              AND #%0000 0111 ; $07
c48a 0d 2f 0a           ORA VDC_ATT_PAGE
c48d 20 cc cd           JSR VDC_Write_Register_X
c490 e8                 INX
c491 a5 da              LDA E_Beg
c493 20 cc cd           JSR VDC_Write_Register_X
c496 20 f9 cd           JSR VDC_Set_Attr_Address
c499 ad 32 0a           LDA VDC_COL
c49c a2 1e              LDX #$1e
c49e 20 cc cd           JSR VDC_Write_Register_X
c4a1 ae 31 0a           LDX VDC_ROW
c4a4 60                 RTS ;Size  152 [Scroll_Row]

              ; **************************
c4a5            Clear_Window_Row_X ; $c4a5
              ; **************************

c4a5 a4 e6              LDY Margin_Left            ; start at left margin
c4a7 20 85 cb           JSR Clear_Cont_Flag ; make this line single

              ; ************************
c4aa            Clear_Row_To_EOR ; $c4aa
              ; ************************

c4aa 20 5e c1           JSR Set_Screen_Pointer_X
c4ad 24 d7              BIT MODE_80
c4af 30 0f              BMI CRTE_20         ; -> 80 columns
c4b1 88                 DEY                 ; pre increment loop
c4b2 c8       CRTE_10   INY
c4b3 a9 20              LDA #' '
c4b5 91 e0              STA (PNT),Y         ; store blank
c4b7 a5 f1              LDA E_Attribute
c4b9 91 e2              STA (USER),Y        ; store color
c4bb c4 e7              CPY Margin_Right
c4bd d0 f3              BNE CRTE_10         ; -> loop
c4bf 60                 RTS ;Size   22 [Clear_Row_To_EOR]

              ; clear row in VDC 80 column

c4c0 8e 31 0a CRTE_20   STX VDC_ROW
c4c3 8c 32 0a           STY VDC_COL
c4c6 a2 18              LDX #$18            ; COPY / vertical scrolling
c4c8 20 da cd           JSR VDC_Read_Register_X
c4cb 29 7f              AND #%0111 1111     ; Clear COPY bit
c4cd 20 cc cd           JSR VDC_Write_Register_X
c4d0 a2 12              LDX #$12            ; Update address high
c4d2 18                 CLC
c4d3 98                 TYA                 ; column
c4d4 65 e0              ADC PNT             ; + row address low
c4d6 48                 PHA                 ; push
c4d7 8d 3c 0a           STA VDC_UPDATE_LO
c4da a9 00              LDA #0
c4dc 65 e1              ADC PNT+1
c4de 8d 3d 0a           STA VDC_UPDATE_HI   ; VDC_UPDATE = PNT + Y
c4e1 20 cc cd           JSR VDC_Write_Register_X
c4e4 e8                 INX
c4e5 68                 PLA
c4e6 20 cc cd           JSR VDC_Write_Register_X
c4e9 a9 20              LDA #' '
c4eb 20 ca cd           JSR VDC_Write_Data
c4ee 38                 SEC
c4ef a5 e7              LDA Margin_Right
c4f1 ed 32 0a           SBC VDC_COL         ; minus column
c4f4 48                 PHA
c4f5 f0 14              BEQ CRTE_30         ; -> at right margin
c4f7 aa                 TAX                 ; bytes to write
c4f8 38                 SEC
c4f9 6d 3c 0a           ADC VDC_UPDATE_LO
c4fc 8d 3c 0a           STA VDC_UPDATE_LO
c4ff a9 00              LDA #0
c501 6d 3d 0a           ADC VDC_UPDATE_HI
c504 8d 3d 0a           STA VDC_UPDATE_HI   ; VDC_UPDATE = address of right margin
c507 8a                 TXA                 ; count
c508 20 3e c5           JSR VDC_Fill_Char_A ; fill row with blanks

c50b a2 12    CRTE_30   LDX #$12            ; Update address high
c50d 18                 CLC
c50e 98                 TYA
c50f 65 e2              ADC USER
c511 48                 PHA
c512 a9 00              LDA #0
c514 65 e3              ADC USER+1          ; write attribute address
c516 20 cc cd           JSR VDC_Write_Register_X
c519 e8                 INX
c51a 68                 PLA
c51b 20 cc cd           JSR VDC_Write_Register_X
c51e ad 3d 0a           LDA VDC_UPDATE_HI
c521 29 07              AND #%0000 0111 ; $07
c523 0d 2f 0a           ORA VDC_ATT_PAGE
c526 8d 3d 0a           STA VDC_UPDATE_HI
c529 a5 f1              LDA E_Attribute
c52b 29 8f              AND #%1000 1111 ; $8f
c52d 20 ca cd           JSR VDC_Write_Data  ; write attribute
c530 68                 PLA
c531 f0 03              BEQ CRTE_40
c533 20 3e c5           JSR VDC_Fill_Char_A ; fill row with attribute
c536 ae 31 0a CRTE_40   LDX VDC_ROW      ; restore X
c539 a4 e7              LDY Margin_Right    ; restore Y
c53b 60                 RTS ;Size  146 [Clear_Row_To_EOR]

c53c a9 01    VFCA_00   LDA #1

              ; ***********************
c53e            VDC_Fill_Char_A ; $c53e
              ; ***********************

c53e a2 1e              LDX #$1e            ; word count
c540 20 cc cd           JSR VDC_Write_Register_X
c543 2c 00 d6 VFCA_10   BIT VDC_Register
c546 10 fb              BPL VFCA_10
c548 a2 12              LDX #$12            ; update high
c54a 20 da cd           JSR VDC_Read_Register_X
c54d cd 3d 0a           CMP VDC_UPDATE_HI
c550 90 ea              BCC VFCA_00
c552 a2 13              LDX #$13            ; update low
c554 20 da cd           JSR VDC_Read_Register_X
c557 cd 3c 0a           CMP VDC_UPDATE_LO
c55a 90 e0              BCC VFCA_00
c55c 60                 RTS ;Size   31 [VDC_Fill_Char_A]

              ; Keyboard matrix
              ; ===============

              ;-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
              ;     | VIC Port $D02f  | CIA 1 - Port A - $DC00 keyboard column        |
              ;-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
              ; Row |  A  |  9  |  8  |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
              ;-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
              ;  0  | ALT | ESC | HLP |  1  |  BS |  +  |  9  |  7  |  5  |  3  | DEL |
              ;  1  |  0  |  +  |  8  | Arr |  *  |  P  |  I  |  Y  |  R  |  W  |  CR |
              ;  2  |  .  |  -  |  5  | CTL |  ;  |  L  |  J  |  G  |  D  |  A  | --> |
              ;  3  | CUP |  LF | TAB |  2  | HOM |  -  |  0  |  8  |  6  |  4  |  f7 |
              ;  4  | CDN |  CR |  2  | SPC | SHR |  .  |  M  |  B  |  C  |  Z  |  f1 |
              ;  5  | --> |  6  |  4  | CBM |  =  |  :  |  K  |  H  |  F  |  S  |  f3 |
              ;  6  | <-- |  9  |  7  |  Q  | Pnd |  @  |  O  |  U  |  T  |  E  |  f5 |
              ;  7  | NSC |  3  |  1  | STP |  /  |  ,  |  N  |  V  |  X  | SHL | CDN |
              ;-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

              ; bits in SHFLAG
              ; --------------
              ; ....3...  ALT
              ; .....2..  Ctrl
              ; ......1.  CBM
              ; .......0  Shift (Left or Right)

              ; *********************
c55d            Scan_Keyboard ; $c55d
              ; *********************

c55d a5 01              LDA R8502
c55f 29 40              AND #%0100 0000     ; extract bit 6 : ASCII/DIN
c561 49 40              EOR #%0100 0000     ; toggle  bit 6
c563 4a                 LSR A
c564 4a                 LSR A               ; bit 4 : 1 = DIN, 0 = ASCII
c565 85 d3              STA SHFLAG          ; store in shift flag
c567 a0 58              LDY #88             ; scan 88 keys (8 x 11 matrix)
c569 84 d4              STY SFDX            ; key index
c56b a9 00              LDA #0
c56d 8d 00 dc           STA CIA1_KBD_COL    ; enable all columns
c570 8d 2f d0           STA VIC_KBD         ; enable VIC keyboard
c573 ae 01 dc           LDX CIA1_KBD_ROW    ; get keypress row
c576 e0 ff              CPX #$ff            ; any keys down ?
c578 d0 03              BNE SKBD_10         ; -> handle keypress
c57a 4c 97 c6           JMP REPE_25           ; -> exit scan routine
c57d a8       SKBD_10   TAY                 ; Y = 0
c57e ad 3e 03           LDA DECODE          ; (KEYTAB) := (DECODE)
c581 85 cc              STA KEYTAB
c583 ad 3f 03           LDA DECODE+1
c586 85 cd              STA KEYTAB+1
c588 a9 ff              LDA #$ff
c58a 8d 2f d0           STA VIC_KBD
c58d 2a                 ROL A               ; A = 1111 1110
c58e 24 d3    SKBD_15   BIT SHFLAG          ; flag for Shift/Ctrl/CBM
c590 30 05              BMI SKBD_20         ; -> scan VIC port (col 8/9/A)
c592 8d 00 dc           STA CIA1_KBD_COL    ; use CIA column
c595 10 03              BPL SKBD_25         ; always

c597 8d 2f d0 SKBD_20   STA VIC_KBD         ; use VIC column
c59a a2 08    SKBD_25   LDX #8              ; scan 8 rows per column
c59c 48                 PHA
c59d ad 01 dc SKBD_30   LDA CIA1_KBD_ROW    ; unclutter
c5a0 cd 01 dc           CMP CIA1_KBD_ROW
c5a3 d0 f8              BNE SKBD_30

c5a5 4a       SKBD_35   LSR A               ; test row bit
c5a6 b0 17              BCS SKBD_50         ; -> key not pressed
c5a8 48                 PHA                 ; push row value
c5a9 b1 cc              LDA (KEYTAB),Y
c5ab c9 08              CMP #8              ; ALT key
c5ad f0 08              BEQ SKBD_40
c5af c9 05              CMP #5
c5b1 b0 09              BCS SKBD_45         ; -> no special keys
c5b3 c9 03              CMP #3
c5b5 f0 05              BEQ SKBD_45         ; -> no special keys
c5b7 05 d3    SKBD_40   ORA SHFLAG          ; set flags for modifier keys
c5b9 85 d3              STA SHFLAG
c5bb 2c                 BIT                 ; skip next instruction
c5bc 84 d4    SKBD_45   STY SFDX            ; key index
c5be 68                 PLA                 ; restore row value
c5bf c8       SKBD_50   INY
c5c0 ca                 DEX
c5c1 d0 e2              BNE SKBD_35         ; -> loop row bits

c5c3 c0 59              CPY #89
c5c5 b0 10              BCS SKBD_55         ; -> finished
c5c7 68                 PLA
c5c8 38                 SEC
c5c9 2a                 ROL A
c5ca b0 c2              BCS SKBD_15         ; -> handle next key
c5cc 8d 00 dc           STA CIA1_KBD_COL    ; select next column
c5cf 26 d3              ROL SHFLAG
c5d1 38                 SEC
c5d2 66 d3              ROR SHFLAG
c5d4 2a                 ROL A
c5d5 d0 b7              BNE SKBD_15

c5d7 06 d3    SKBD_55   ASL SHFLAG
c5d9 46 d3              LSR SHFLAG
c5db 68                 PLA
c5dc a5 d4              LDA SFDX
c5de 6c 3a 03           JMP (KEYVEC)        ; default: next statement

              ; *************************
c5e1            Edit_Use_Scancode ; $c5e1
              ; *************************

c5e1 c9 57              CMP #$57            ; NO SCROLL key
c5e3 d0 13              BNE SKBD_65
c5e5 24 f7              BIT LOCKS           ; halted by Ctrl-S ?
c5e7 70 5a              BVS SKBD_Ret        ; -> yes: no action
c5e9 ad 25 0a           LDA LSTHF           ; CBM-Shift delay ?
c5ec d0 55              BNE SKBD_Ret
c5ee a9 0d              LDA #13             ; index for Ctrl-S
c5f0 4d 21 0a           EOR PAUSE
c5f3 8d 21 0a           STA PAUSE
c5f6 50 30              BVC SKBD_75         ; always

c5f8 a5 d3    SKBD_65   LDA SHFLAG
c5fa f0 55              BEQ Edit_Repeat
c5fc c9 10              CMP #16             ; CAPS-LOCK/DIN ?
c5fe f0 44              BEQ SKBD_85         ; -> no
c600 c9 08              CMP #8              ; ALT ?
c602 f0 42              BEQ SKBD_90         ; -> no
c604 29 07              AND #7
c606 c9 03              CMP #3              ; CBM or Shift ?
c608 d0 25              BNE SKBD_80         ; -> yes
c60a a5 f7              LDA LOCKS
c60c 30 43              BMI Edit_Repeat     ; -> Shiftr-CBM disabled
c60e ad 25 0a           LDA LSTHF           ; CBM-Shift delay ?
c611 d0 3e              BNE Edit_Repeat     ; -> decode key
c613 24 d7              BIT MODE_80
c615 10 09              BPL SKBD_70         ; -> 40 column screen
c617 a5 f1              LDA E_Attribute
c619 49 80              EOR #$80
c61b 85 f1              STA E_Attribute
c61d 4c 28 c6           JMP SKBD_75
c620 ad 2c 0a SKBD_70   LDA VSH_TEXT
c623 49 02              EOR #2
c625 8d 2c 0a           STA VSH_TEXT
c628 a9 08    SKBD_75   LDA #8
c62a 8d 25 0a           STA LSTHF           ; set timer
c62d d0 22              BNE Edit_Repeat          ; always

c62f 0a       SKBD_80   ASL A
c630 c9 08              CMP #8
c632 90 12              BCC SKBD_90         ; -> no Ctrl
c634 a9 06              LDA #6              ; select Keytab_Control
c636 a6 d4              LDX SFDX
c638 e0 0d              CPX #13             ; key 'S' ?
c63a d0 0a              BNE SKBD_90         ; -> no
c63c 24 f7              BIT LOCKS
c63e 70 06              BVS SKBD_90
c640 8e 21 0a           STX PAUSE           ; flag pause Ctrl-S
c643 60       SKBD_Ret  RTS ;Size   99 [Edit_Use_Scancode]
c644 a9 0a    SKBD_85   LDA #10             ; select Keytab_Capslock
c646 aa       SKBD_90   TAX
c647 bd 3e 03           LDA DECODE,X        ; set KEYRAB pointer
c64a 85 cc              STA KEYTAB
c64c bd 3f 03           LDA DECODE+1,X
c64f 85 cd              STA KEYTAB+1

              ; *******************
c651            Edit_Repeat ; $c651
              ; *******************

c651 a4 d4              LDY SFDX            ; key index
c653 b1 cc              LDA (KEYTAB),Y      ; key value
c655 aa                 TAX
c656 c4 d5              CPY LSTX            ; equal to last used index ?
c658 f0 07              BEQ REPE_10         ; -> check repeat condition
c65a a0 10              LDY #16
c65c 8c 24 0a           STY DELAY           ; set initial delay
c65f d0 36              BNE REPE_25         ; always

c661 29 7f    REPE_10   AND #$7f
c663 2c 22 0a           BIT RPTFLG
c666 30 16              BMI REPE_15         ; -> $80 = all keys repeat
c668 70 5a              BVS UFK_20          ; -> $40 = no  keys repeat
c66a c9 7f              CMP #$7f            ; NO SCROLL ($ff)
c66c f0 29              BEQ REPE_25         ; -> repeat not
c66e c9 14              CMP #$14            ; DELETE / INSERT
c670 f0 0c              BEQ REPE_15         ; -> repeat
c672 c9 20              CMP #' '            ; BLANK
c674 f0 08              BEQ REPE_15         ; -> repeat
c676 c9 1d              CMP #RIGHT          ; cursor left / right
c678 f0 04              BEQ REPE_15         ; -> repeat
c67a c9 11              CMP #DOWN           ; cursor down / up
c67c d0 46              BNE UFK_20          ; -> repeat not

              ; repeat key after initial delay time

c67e ac 24 0a REPE_15   LDY DELAY
c681 f0 05              BEQ REPE_20         ; delay OK -> continue
c683 ce 24 0a           DEC DELAY
c686 d0 3c              BNE UFK_20          ; -> don't repeat while delaying

              ; repeat key after speed delay

c688 ce 23 0a REPE_20   DEC KOUNT
c68b d0 37              BNE UFK_20          ; -> don't repeat too fast
c68d a0 04              LDY #4
c68f 8c 23 0a           STY KOUNT           ; set new speed counter
c692 a4 d0              LDY NDX             ; keys in buffer
c694 88                 DEY
c695 10 2d              BPL UFK_20          ; -> don't repeat if buffer is not empty

c697 4e 25 0a REPE_25   LSR LSTHF
c69a a4 d4              LDY SFDX
c69c 84 d5              STY LSTX            ; last index = current index
c69e e0 ff              CPX #$ff            ; NO SCROLL key ?
c6a0 f0 22              BEQ UFK_20          ; -> finish
c6a2 a9 00              LDA #0
c6a4 8d 21 0a           STA PAUSE           ; clear Ctrl-S, scroll lock
c6a7 8a                 TXA
c6a8 a6 d3              LDX SHFLAG
0001 FALSE    #if KEYBOARD == 255
SKIP                    JMP (KEYCHK)
              #else
c6aa 4c c6 fc           JMP Check_DIN
              #endif

              ; *****************************
c6ad            Edit_Use_Function_Key ; $c6ad
              ; *****************************

c6ad a2 09              LDX #9
c6af dd dd c6 UFK_10    CMP FKey_Code,X
c6b2 f0 16              BEQ UFK_30
c6b4 ca                 DEX
c6b5 10 f8              BPL UFK_10
c6b7 a6 d0              LDX NDX
c6b9 ec 20 0a           CPX XMAX
c6bc b0 06              BCS UFK_20
c6be 9d 4a 03           STA KEYD,X
c6c1 e8                 INX
c6c2 86 d0              STX NDX
c6c4 a9 7f    UFK_20    LDA #$7f
c6c6 8d 00 dc           STA CIA1_KBD_COL
c6c9 60                 RTS ;Size   29 [Edit_Use_Function_Key]
c6ca 4c 00 cf UFK_30    JMP UFK_40

c6cd 85 d1              STA KYNDX           ; unused. replaced by patch
c6cf a9 00              LDA #0              ; startimg at UFK_40 ($cf00)
c6d1 ca       REPE_50   DEX                 ; *
c6d2 30 06              BMI REPE_55         ; *
c6d4 18                 CLC                 ; *
c6d5 7d 00 10           ADC PKYBUF,X        ; *
c6d8 90 f7              BCC REPE_50         ; *
c6da 85 d2    REPE_55   STA KEYIDX          ; *
c6dc 60                 RTS                 ; * ;Size   48 [Edit_Use_Function_Key]

              ; *****************
c6dd            FKey_Code ; $c6dd
              ; *****************

c6dd 85                 .BYTE $85           ; f1   graphic
c6de 89                 .BYTE $89           ; f2   dload"
c6df 86                 .BYTe $86           ; f3   directory
c6e0 8a                 .BYTE $8a           ; f4   scnclr
c6e1 87                 .BYTE $87           ; f5   dsave"
c6e2 8b                 .BYTE $8b           ; f6   run
c6e3 88                 .BYTE $88           ; f7   list
c6e4 8c                 .BYTE $8c           ; f8   monitor
c6e5 83                 .BYTE $83           ; RUN
c6e6 84                 .BYTE $84           ; HELP

              ; ********************
c6e7            Blink_Cursor ; $c6e7
              ; ********************

c6e7 24 d7              BIT MODE_80
c6e9 30 41              BMI BlCu_Ret        ; -> 80 column screen
c6eb ad 27 0a           LDA BLNSW
c6ee d0 3c              BNE BlCu_Ret        ; -> blinking off
c6f0 ce 28 0a           DEC BLNCT           ; blink counter
c6f3 d0 37              BNE BlCu_Ret        ; -> no change yet
c6f5 ad 26 0a           LDA BLNON
c6f8 29 c0              AND #$c0            ; blinking on, steady cursor
c6fa c9 c0              CMP #$c0
c6fc f0 2e              BEQ BlCu_Ret        ; -> nothing to do
c6fe a9 14              LDA #20
c700 8d 28 0a           STA BLNCT           ; restart blink timer
c703 a4 ec              LDY Cursor_Col
c705 ae 2a 0a           LDX GDCOL
c708 b1 e0              LDA (PNT),Y         ; character under cursor
c70a 2c 26 0a           BIT BLNON
c70d 30 10              BMI BlCu_10         ; -> visible cursor phase
c70f 8d 29 0a           STA GDBLN           ; save chracter under cursor
c712 20 7c c1           JSR Set_Attribute_Pointer
c715 b1 e2              LDA (USER),Y        ; color under cursor
c717 8d 2a 0a           STA GDCOL           ; save color under cursor
c71a a6 f1              LDX E_Attribute
c71c ad 29 0a           LDA GDBLN
c71f 49 80    BlCu_10   EOR #$80            ; toggle color
c721 20 40 cc           JSR Edit_Display_AX
c724 ad 26 0a           LDA BLNON
c727 49 80              EOR #$80            ; toggle cursor blink phase
c729 8d 26 0a           STA BLNON
c72c 60       BlCu_Ret  RTS ;Size   70 [Blink_Cursor]

              ; ******************
c72d            Edit_Print ; $c72d
              ; ******************

c72d 85 ef              STA DATAX           ; save character to print
c72f 48                 PHA                 ; push A
c730 8a                 TXA
c731 48                 PHA                 ; push X
c732 98                 TYA
c733 48                 PHA                 ; push Y
c734 ad 21 0a EdPr_10   LDA PAUSE
c737 d0 fb              BNE EdPr_10
c739 85 d6              STA CRSW            ; 0 = keyboard input
c73b a9 c3              LDA #>[Edit_Print_Exit-1]
c73d 48                 PHA
c73e a9 0b              LDA #<[Edit_Print_Exit-1]
c740 48                 PHA
c741 a4 ec              LDY Cursor_Col
c743 a5 ef              LDA DATAX
c745 c9 0d              CMP #CR
c747 f0 26              BEQ EdPr_50         ; -> new line
c749 c9 8d              CMP #$8d            ; shift CR
c74b f0 22              BEQ EdPr_50         ; -> new line
c74d a6 f0              LDX LSTCHR
c74f e0 1b              CPX #ESC
c751 d0 03              BNE EdPr_20
c753 4c be c9           JMP Edit_Escape_Jump           ; ESC command
c756 aa       EdPr_20   TAX
c757 10 03              BPL EdPr_30
c759 4c 02 c8           JMP Edit_Jump_Shifted

c75c c9 20    EdPr_30   CMP #' '
c75e 90 56              BCC Edit_Jump_Ctrl           ; control character
c760 c9 60              CMP #$60
c762 90 03              BCC EdPr_40         ; normal character
c764 29 df              AND #%1101 1111
c766 2c                 BIT
c767 29 3f    EdPr_40   AND #%0011 1111
c769 20 ff c2           JSR Edit_Toggle_Quote
c76c 4c 22 c3           JMP PTS_10          ; print to screen

              ; print CR

c76f 20 c3 cb EdPr_50   JSR Edit_Cursor_Last
c772 e8                 INX
c773 20 85 cb           JSR Clear_Cont_Flag
c776 a4 e6              LDY Margin_Left
c778 84 ec              STY Cursor_Col
c77a 20 63 c3           JSR Edit_Cursor_Down

              ; ***************************
c77d            Edit_Attributes_Off ; $c77d
              ; ***************************

c77d a5 f1              LDA E_Attribute
c77f 29 cf              AND #%1100 1111 ; $cf
c781 85 f1              STA E_Attribute
c783 a9 00              LDA #0
c785 85 f5              STA INSRT
c787 85 f3              STA E_Reverse
c789 85 f4              STA QTSW
c78b 60                 RTS ;Size   15 [Edit_Attributes_Off]

              ; *****************
c78c            Ctrl_Code ; $c78c
              ; *****************

c78c 02                 .BYTE $02           ; Ctrl B
c78d 07                 .BYTE $07           ; Ctrl G
c78e 09                 .BYTE $09           ; TAB
c78f 0a                 .BYTE $0a           ; Ctrl J
c790 0b                 .BYTE $0b           ; Ctrl K
c791 0c                 .BYTE $0c           ; Ctrl L
c792 0e                 .BYTE $0e           ; Ctrl N
c793 0f                 .BYTE $0f           ; Ctrl O
c794 11                 .BYTE $11           ; Ctrl Q
c795 12                 .BYTE $12           ; Ctrl R
c796 13                 .BYTE $13           ; HOME
c797 14                 .BYTE $14           ; DEL
c798 18                 .BYTE $18           ; Ctrl X
c799 1d                 .BYTE $1d           ; Cursor Right

              ; *******************
c79a            Ctrl_Action ; $c79a
              ; *******************

c79a c6 c8              .WORD Edit_Underline_On      - 1 ; Ctrl B Bold
c79c 8d c9              .WORD Ctrl_G_Bell            - 1
c79e 4e c9              .WORD Ctrl_I_Tab             - 1
c7a0 b0 c9              .WORD Ctrl_J_Linefeed        - 1
c7a2 a5 c8              .WORD Ctrl_K_Unlock_Charset  - 1
c7a4 ab c8              .WORD Ctrl_L_Lock_Charset    - 1
c7a6 7f c8              .WORD Edit_Charset_Text      - 1 ; Ctrl N Normal
c7a8 d4 c8              .WORD Edit_Blink_On          - 1 ; Ctrl O
c7aa 59 c8              .WORD Ctrl_Q_Down            - 1
c7ac c1 c8              .WORD Edit_Reverse_On        - 1 ; Ctrl R Reverse
c7ae b2 c8              .WORD Edit_Home              - 1
c7b0 1a c9              .WORD Edit_Delete            - 1
c7b2 60 c9              .WORD Edit_Toggle_Tab        - 1
c7b4 53 c8              .WORD Edit_Right             - 1

              ; **********************
c7b6            Edit_Jump_Ctrl ; $c7b6
              ; **********************

c7b6 6c 34 03           JMP (CTLVEC)        ; default: next statement

              ; *********************
c7b9            Edit_Use_Ctrl ; $c7b9
              ; *********************

c7b9 c9 1b              CMP #ESC            ; Escape ?
c7bb f0 38              BEQ ICtr_80         ; -> no action
c7bd a6 f5              LDX INSRT
c7bf d0 08              BNE ICtr_10         ; -> outstanding inserts
c7c1 c9 14              CMP #DEL
c7c3 f0 0b              BEQ ICtr_20         ; -> Delete
c7c5 a6 f4              LDX QTSW
c7c7 f0 07              BEQ ICtr_20         ; -> not in quotes
c7c9 a2 00    ICtr_10   LDX #0
c7cb 86 ef              STX DATAX           ; ignore character
c7cd 4c 26 c3           JMP PTS_20
c7d0 a2 0d    ICtr_20   LDX #13
c7d2 dd 8c c7 ICtr_30   CMP Ctrl_Code,X
c7d5 f0 1f              BEQ ICtr_90         ; -> found code
c7d7 ca                 DEX
c7d8 10 f8              BPL ICtr_30
c7da a2 0f    ICtr_40   LDX #15
c7dc dd 4c ce ICtr_50   CMP VIC_Color_Codes,X        ; search color codes
c7df f0 04              BEQ ICtr_60
c7e1 ca                 DEX
c7e2 10 f8              BPL ICtr_50
c7e4 60                 RTS ;Size   44 [Edit_Use_Ctrl]
c7e5 24 d7    ICtr_60   BIT MODE_80
c7e7 30 03              BMI ICtr_70
c7e9 86 f1              STX E_Attribute
c7eb 60                 RTS ;Size   51 [Edit_Use_Ctrl]
c7ec a5 f1    ICtr_70   LDA E_Attribute
c7ee 29 f0              AND #%1111 0000 ; $f0
c7f0 1d 5c ce           ORA VDC_Color_Codes,X
c7f3 85 f1              STA E_Attribute
c7f5 60       ICtr_80   RTS ;Size   61 [Edit_Use_Ctrl]
c7f6 8a       ICtr_90   TXA
c7f7 0a                 ASL A
c7f8 aa                 TAX                 ; push address
c7f9 bd 9b c7           LDA Ctrl_Action+1,X
c7fc 48                 PHA
c7fd bd 9a c7           LDA Ctrl_Action,X
c800 48                 PHA
c801 60                 RTS                 ; jump via RTS ;Size   73 [Edit_Use_Ctrl]

              ; *************************
c802            Edit_Jump_Shifted ; $c802
              ; *************************

c802 6c 36 03           JMP (SHFVEC)        ; default: next statement

              ; **************************
c805            Edit_Print_Shifted ; $c805
              ; **************************

c805 29 7f              AND #$7f            ; remove PETSCII shift bit
c807 c9 20              CMP #' '
c809 90 09              BCC PrSh_20         ; -> control codes
c80b c9 7f              CMP #$7f
c80d d0 02              BNE PrSh_10
c80f a9 5e              LDA #'^'            ; replace code $ff with $5e
c811 4c 20 c3 PrSh_10   JMP Print_To_Screen

c814 a6 f4    PrSh_20   LDX QTSW
c816 f0 05              BEQ PrSh_40         ; -> not in quotemode
c818 09 40    PrSh_30   ORA #%0100 0000     ; convert to display code
c81a 4c 26 c3           JMP PTS_20

c81d c9 14    PrSh_40   CMP #DEL            ; INSERT ? (Shift DEL)
c81f d0 03              BNE PrSh_50
c821 4c e3 c8           JMP Edit_Shift_Text

c824 a6 f5    PrSh_50   LDX INSRT
c826 d0 f0              BNE PrSh_30         ; -> already in insert mode
c828 c9 11              CMP #DOWN           ; Cursor UP ?
c82a f0 3b              BEQ Edit_Up
c82c c9 1d              CMP #RIGHT          ; Cursor LEFT ?
c82e f0 45              BEQ Edit_Left
c830 c9 0e              CMP #14             ; graphics charset ? ($8e)
c832 f0 5e              BEQ EdCT_20
c834 c9 12              CMP #REVERSE        ; Reverse off ? ($92)
c836 d0 03              BNE PrSh_60
c838 4c bf c8           JMP Edit_Reverse_Off

c83b c9 02    PrSh_60   CMP #C_ULINE        ; Underline off ? ($82)
c83d d0 03              BNE PrSh_70
c83f 4c ce c8           JMP Edit_Underline_Off

c842 c9 0f    PrSh_70   CMP #15             ; Blinking off ? ($8f)
c844 d0 03              BNE PrSh_80
c846 4c dc c8           JMP Edit_Blink_Off
c849 c9 13    PrSh_80   CMP #HOME           ; CLEAR ? ($93)
c84b d0 03              BNE PrSh_90
c84d 4c 42 c1           JMP Clear_Window
c850 09 80    PrSh_90   ORA #$80            ; restore shift bit
c852 d0 86              BNE ICtr_40         ; always

              ; ******************
c854            Edit_Right ; $c854
              ; ******************

c854 20 ed cb           JSR Edit_Cursor_Right
c857 b0 04              BCS Edit_Down
c859 60                 RTS ;Size    6 [Edit_Right]

              ; *******************
c85a            Ctrl_Q_Down ; $c85a
              ; *******************

c85a 20 63 c3           JSR Edit_Cursor_Down

              ; *****************
c85d            Edit_Down ; $c85d
              ; *****************

c85d 20 74 cb           JSR Is_Coupled_Row
c860 b0 03              BCS EdDo_10
c862 38                 SEC
c863 66 e8              ROR CurLst_Row      ; flag coupled row
c865 18       EdDo_10   CLC
c866 60       EdDo_Ret  RTS ;Size   10 [Edit_Down]

              ; ***************
c867            Edit_Up ; $c867
              ; ***************

c867 a6 e5              LDX Margin_Top
c869 e4 eb              CPX Cursor_Row
c86b b0 f9              BCS EdDo_Ret
c86d 20 5d c8 EdUp_10   JSR Edit_Down
c870 c6 eb              DEC Cursor_Row
c872 4c 5c c1           JMP Set_Screen_Pointer

              ; *****************
c875            Edit_Left ; $c875
              ; *****************

c875 20 00 cc           JSR Edit_Cursor_Left
c878 b0 ec              BCS EdDo_Ret
c87a d0 e9              BNE EdDo_10
c87c e6 eb              INC Cursor_Row
c87e d0 ed              BNE EdUp_10         ; always

              ; *************************
c880            Edit_Charset_Text ; $c880
              ; *************************

c880 24 d7              BIT MODE_80
c882 30 07              BMI EdCT_10
c884 ad 2c 0a           LDA VSH_TEXT
c887 09 02              ORA #%0000 0010 ; $02
c889 d0 10              BNE EdCT_30         ; always

c88b a5 f1    EdCT_10   LDA E_Attribute
c88d 09 80              ORA #%1000 0000 ; $80
c88f 85 f1              STA E_Attribute
c891 60                 RTS ;Size   18 [Edit_Charset_Text]

c892 24 d7    EdCT_20   BIT MODE_80
c894 30 09              BMI EdCT_40
c896 ad 2c 0a           LDA VSH_TEXT
c899 29 fd              AND #%1111 1101 ; $fd
c89b 8d 2c 0a EdCT_30   STA VSH_TEXT
c89e 60                 RTS ;Size   31 [Edit_Charset_Text]

c89f a5 f1    EdCT_40   LDA E_Attribute
c8a1 29 7f              AND #%0111 1111 ; $7f
c8a3 85 f1              STA E_Attribute
c8a5 60                 RTS ;Size   38 [Edit_Charset_Text]

              ; *****************************
c8a6            Ctrl_K_Unlock_Charset ; $c8a6
              ; *****************************

c8a6 a9 80              LDA #$80
c8a8 05 f7              ORA LOCKS
c8aa 30 04              BMI LUCS_10

              ; ***************************
c8ac            Ctrl_L_Lock_Charset ; $c8ac
              ; ***************************

c8ac a9 7f              LDA #$7f
c8ae 25 f7              AND LOCKS
c8b0 85 f7    LUCS_10   STA LOCKS
c8b2 60                 RTS ;Size    7 [Ctrl_L_Lock_Charset]

              ; *****************
c8b3            Edit_Home ; $c8b3
              ; *****************

c8b3 a5 f0              LDA LSTCHR
c8b5 c9 13              CMP #HOME
c8b7 d0 03              BNE EdHo_10
c8b9 20 24 ca           JSR Set_Fullscreen  ; 2 x HOME sets fullsize window
c8bc 4c 50 c1 EdHo_10   JMP Cursor_To_Window_Home

              ; ************************
c8bf            Edit_Reverse_Off ; $c8bf
              ; ************************

c8bf a9 00              LDA #0
c8c1 2c                 BIT

              ; ***********************
c8c2            Edit_Reverse_On ; $c8c2
              ; ***********************

c8c2 a9 80              LDA #$80
c8c4 85 f3              STA E_Reverse
c8c6 60                 RTS ;Size    5 [Edit_Reverse_On]

              ; *************************
c8c7            Edit_Underline_On ; $c8c7
              ; *************************

c8c7 a5 f1              LDA E_Attribute
c8c9 09 20              ORA #%0010 0000
c8cb 85 f1              STA E_Attribute
c8cd 60                 RTS ;Size    7 [Edit_Underline_On]

              ; **************************
c8ce            Edit_Underline_Off ; $c8ce
              ; **************************

c8ce a5 f1              LDA E_Attribute
c8d0 29 df              AND #%1101 1111 ; $df
c8d2 85 f1              STA E_Attribute
c8d4 60                 RTS ;Size    7 [Edit_Underline_Off]

              ; *********************
c8d5            Edit_Blink_On ; $c8d5
              ; *********************

c8d5 a5 f1              LDA E_Attribute
c8d7 09 10              ORA #%0001 0000
c8d9 85 f1              STA E_Attribute
c8db 60                 RTS ;Size    7 [Edit_Blink_On]

              ; **********************
c8dc            Edit_Blink_Off ; $c8dc
              ; **********************

c8dc a5 f1              LDA E_Attribute
c8de 29 ef              AND #%1110 1111 ; $ef
c8e0 85 f1              STA E_Attribute
c8e2 60                 RTS ;Size    7 [Edit_Blink_Off]

              ; ***********************
c8e3            Edit_Shift_Text ; $c8e3
              ; ***********************

c8e3 20 1e cc           JSR Edit_Save_Row_Col
c8e6 20 c3 cb           JSR Edit_Cursor_Last
c8e9 e4 df              CPX E_Row           ; at last row ?
c8eb d0 02              BNE EdST_10         ; -> no
c8ed c4 de              CPY E_Col
c8ef 90 21    EdST_10   BCC EdST_30
c8f1 20 3e c3           JSR Edit_Cursor_Next
c8f4 b0 22              BCS EdST_40
c8f6 20 00 cc EdST_20   JSR Edit_Cursor_Left
c8f9 20 58 cb           JSR Edit_Get_Char
c8fc 20 ed cb           JSR Edit_Cursor_Right
c8ff 20 32 cc           JSR Edit_Put_Char
c902 20 00 cc           JSR Edit_Cursor_Left
c905 a6 eb              LDX Cursor_Row
c907 e4 df              CPX E_Row
c909 d0 eb              BNE EdST_20
c90b c4 de              CPY E_Col
c90d d0 e7              BNE EdST_20
c90f 20 27 cc           JSR Edit_Put_Blank
c912 e6 f5    EdST_30   INC INSRT
c914 d0 02              BNE EdST_40
c916 c6 f5              DEC INSRT
c918 4c 32 c9 EdST_40   JMP EdDe_20

              ; *******************
c91b            Edit_Delete ; $c91b
              ; *******************

c91b 20 75 c8           JSR Edit_Left
c91e 20 1e cc           JSR Edit_Save_Row_Col ; destination position
c921 b0 0f              BCS EdDe_20           ; -> nothing to delete
c923 c4 e7    EdDe_10   CPY Margin_Right      ; at end of previous row ?
c925 90 16              BCC EdDe_30           ; -> no
c927 a6 eb              LDX Cursor_Row
c929 e8                 INX
c92a 20 76 cb           JSR Is_Coupled_Row_X
c92d b0 0e              BCS EdDe_30           ; -> yes
c92f 20 27 cc           JSR Edit_Put_Blank
c932 a5 de    EdDe_20   LDA E_Col
c934 85 ec              STA Cursor_Col
c936 a5 df              LDA E_Row
c938 85 eb              STA Cursor_Row
c93a 4c 5c c1           JMP Set_Screen_Pointer

c93d 20 ed cb EdDe_30   JSR Edit_Cursor_Right
c940 20 58 cb           JSR Edit_Get_Char
c943 20 00 cc           JSR Edit_Cursor_Left
c946 20 32 cc           JSR Edit_Put_Char
c949 20 ed cb           JSR Edit_Cursor_Right
c94c 4c 23 c9           JMP EdDe_10

              ; ******************
c94f            Ctrl_I_Tab ; $c94f
              ; ******************

c94f a4 ec              LDY Cursor_Col
c951 c8       ETab_10   INY
c952 c4 e7              CPY Margin_Right
c954 b0 06              BCS ETab_20
c956 20 6c c9           JSR Jc96c
c959 f0 f6              BEQ ETab_10
c95b 2c                 BIT
c95c a4 e7    ETab_20   LDY Margin_Right
c95e 84 ec              STY Cursor_Col
c960 60                 RTS ;Size   18 [Ctrl_I_Tab]

              ; ***********************
c961            Edit_Toggle_Tab ; $c961
              ; ***********************

c961 a4 ec              LDY Cursor_Col
c963 20 6c c9           JSR Jc96c
c966 45 da              EOR E_Beg
c968 9d 54 03           STA TABMAP,X
c96b 60                 RTS ;Size   11 [Edit_Toggle_Tab]

              ; *************
c96c            Jc96c ; $c96c
              ; *************

c96c 98                 TYA
c96d 29 07              AND #%0000 0111 ; $07
c96f aa                 TAX
c970 bd 6c ce           LDA Edit_Bit_Mask,X
c973 85 da              STA E_Beg
c975 98                 TYA
c976 4a                 LSR A
c977 4a                 LSR A
c978 4a                 LSR A
c979 aa                 TAX
c97a bd 54 03           LDA TABMAP,X
c97d 24 da              BIT E_Beg
c97f 60                 RTS ;Size   20 [Jc96c]

              ; **************************
c980            Clear_All_Tabstops ; $c980
              ; **************************

c980 a9 00              LDA #0
c982 2c                 BIT

              ; ****************************
c983            Set_Default_Tabstops ; $c983
              ; ****************************

c983 a9 80              LDA #$80           ; set tab on every 8th. column
c985 a2 09              LDX #9             ; use 10 bytes for 80 columns
c987 9d 54 03 STAB_10   STA TABMAP,X
c98a ca                 DEX
c98b 10 fa              BPL STAB_10
c98d 60       STAB_Ret  RTS ;Size   11 [Set_Default_Tabstops]

              ; *******************
c98e            Ctrl_G_Bell ; $c98e
              ; *******************

c98e 24 f9              BIT BEEPER
c990 30 fb              BMI STAB_Ret
c992 a9 15              LDA #$15
c994 8d 18 d4           STA SID_Volume
c997 a0 09              LDY #<CHARAC
c999 a2 00              LDX #>CHARAC
c99b 8c 05 d4           STY SID_Attack_1
c99e 8e 06 d4           STX SID_Sustain_1
c9a1 a9 30              LDA #$30
c9a3 8d 01 d4           STA SID_Freq_1+1
c9a6 a9 20              LDA #$20
c9a8 8d 04 d4           STA SID_Control_1
c9ab a9 21              LDA #$21
c9ad 8d 04 d4           STA SID_Control_1
c9b0 60                 RTS ;Size   35 [Ctrl_G_Bell]

              ; ***********************
c9b1            Ctrl_J_Linefeed ; $c9b1
              ; ***********************

c9b1 a5 ec              LDA Cursor_Col
c9b3 48                 PHA
c9b4 20 c3 cb           JSR Edit_Cursor_Last
c9b7 20 63 c3           JSR Edit_Cursor_Down
c9ba 68                 PLA
c9bb 85 ec              STA Cursor_Col
c9bd 60                 RTS ;Size   13 [Ctrl_J_Linefeed]

              ; ************************
c9be            Edit_Escape_Jump ; $c9be
              ; ************************

c9be 6c 38 03           JMP (ESCVEC)        ; default: next instruction

              ; **************************
c9c1            Edit_Escape_Switch ; $c9c1
              ; **************************

c9c1 c9 1b              CMP #ESC
c9c3 d0 05              BNE EdES_10
c9c5 46 ef              LSR DATAX           ; DATAX = CR (ESC >> 1)
c9c7 4c 7d c7           JMP Edit_Attributes_Off
c9ca 29 7f    EdES_10   AND #$7f
c9cc 38                 SEC
c9cd e9 40              SBC #'@'            ; from ESC @
c9cf c9 1b              CMP #$1b            ; to   ESC Z
c9d1 b0 0a              BCS EdES_Ret        ; -> out of range
c9d3 0a                 ASL A
c9d4 aa                 TAX
c9d5 bd df c9           LDA Edit_Escape_Case+1,X
c9d8 48                 PHA
c9d9 bd de c9           LDA Edit_Escape_Case,X
c9dc 48                 PHA
c9dd 60       EdES_Ret  RTS ;Size   29 [Edit_Escape_Switch]

              ; ************************
c9de            Edit_Escape_Case ; $c9de
              ; ************************

c9de 9e ca              .WORD Edit_Erase_EOS       - 1 ; ESC @
c9e0 ec ca              .WORD Edit_Auto_Insert_On  - 1 ; ESC A Auto
c9e2 15 ca              .WORD Edit_Set_Window_LR   - 1 ; ESC B Bottom
c9e4 e9 ca              .WORD Edit_Auto_Insert_Off - 1 ; ESC C
c9e6 51 ca              .WORD Edit_Delete_Line     - 1 ; ESC D Delete
c9e8 0a cb              .WORD Edit_Steady_Cursor   - 1 ; ESC E
c9ea 20 cb              .WORD Edit_Blinking_Cursor - 1 ; ESC F Flickering
c9ec 36 cb              .WORD Edit_Enable_Bell     - 1 ; ESC G
c9ee 39 cb              .WORD Edit_Disable_Bell    - 1 ; ESC H
c9f0 3c ca              .WORD Edit_Insert_Line     - 1 ; ESC I Insert
c9f2 b0 cb              .WORD Edit_Cursor_BOL      - 1 ; ESC J
c9f4 51 cb              .WORD Edit_Cursor_EOL      - 1 ; ESC K
c9f6 e1 ca              .WORD Edit_Scroll_Unlock   - 1 ; ESC L
c9f8 e4 ca              .WORD Edit_Scroll_Lock     - 1 ; ESC M
c9fa 47 cb              .WORD Edit_Inverse_Off     - 1 ; ESC N
c9fc 7c c7              .WORD Edit_Attributes_Off  - 1 ; ESC O Off
c9fe 8a ca              .WORD Edit_Erase_BOL       - 1 ; ESC P
ca00 75 ca              .WORD Edit_Erase_EOL       - 1 ; ESC Q
ca02 3e cb              .WORD Edit_Inverse_On      - 1 ; ESC R Reverse
ca04 f1 ca              .WORD Edit_Cursor_Block    - 1 ; ESC S Steady
ca06 13 ca              .WORD Edit_Window_UL       - 1 ; ESC T Top
ca08 fd ca              .WORD Edit_Cursor_Line     - 1 ; ESC U Underline
ca0a bb ca              .WORD Edit_Scroll_Line_Up  - 1 ; ESC V
ca0c c9 ca              .WORD Edit_Scroll_Line_Dn  - 1 ; ESC W
ca0e 2b cd              .WORD Edit_Toggle_Screen   - 1 ; ESC X eXchange
ca10 82 c9              .WORD Set_Default_Tabstops - 1 ; ESC Y Yank
ca12 7f c9              .WORD Clear_All_Tabstops   - 1 ; ESC Z Zero

              ; **********************
ca14            Edit_Window_UL ; $ca14
              ; **********************

ca14 18                 CLC
ca15 24                 .BYTE $24

              ; **************************
ca16            Edit_Set_Window_LR ; $ca16
              ; **************************

ca16 38                 SEC
ca17 a6 ec              LDX Cursor_Col
ca19 a5 eb              LDA Cursor_Row

              ; **************************
ca1b            Edit_Window_Corner ; $ca1b
              ; **************************

ca1b 90 11              BCC SeFu_10

              ; ******************************
ca1d            Set_Lower_Right_Corner ; $ca1d
              ; ******************************

ca1d 85 e4              STA Margin_Bottom
ca1f 86 e7              STX Margin_Right
ca21 4c 32 ca           JMP SeFu_20         ; clear concatenation flags

              ; **********************
ca24            Set_Fullscreen ; $ca24
              ; **********************

ca24 a5 ed              LDA LINES
ca26 a6 ee              LDX COLUMNS
ca28 20 1d ca           JSR Set_Lower_Right_Corner
ca2b a9 00              LDA #0              ; home position top  margin
ca2d aa                 TAX                 ; home position left margin
ca2e 85 e5    SeFu_10   STA Margin_Top
ca30 86 e6              STX Margin_Left
ca32 a9 00    SeFu_20   LDA #0              ; clear concatenation flags
ca34 a2 04              LDX #4              ; 4 bytes for 25 rows
ca36 9d 5d 03 SeFu_30   STA BITABL-1,X
ca39 ca                 DEX
ca3a d0 fa              BNE SeFu_30
ca3c 60                 RTS ;Size   25 [Set_Fullscreen]

              ; ************************
ca3d            Edit_Insert_Line ; $ca3d
              ; ************************

ca3d 20 7c c3           JSR Edit_Scroll_Down
ca40 20 56 c1           JSR Cursor_To_Left_Margin
ca43 e8                 INX
ca44 20 76 cb           JSR Is_Coupled_Row_X
ca47 08                 PHP
ca48 20 81 cb           JSR Toggle_Cont_Flag
ca4b 28                 PLP
ca4c b0 03              BCS EdIL_Ret
ca4e 38                 SEC
ca4f 66 e8              ROR CurLst_Row
ca51 60       EdIL_Ret  RTS ;Size   21 [Edit_Insert_Line]

              ; ************************
ca52            Edit_Delete_Line ; $ca52
              ; ************************

ca52 20 b5 cb           JSR Start_Of_Line
ca55 a5 e5              LDA Margin_Top
ca57 48                 PHA
ca58 a5 eb              LDA Cursor_Row
ca5a 85 e5              STA Margin_Top
ca5c a5 f8              LDA Scroll_Locked
ca5e 48                 PHA
ca5f a9 80              LDA #$80
ca61 85 f8              STA Scroll_Locked
ca63 20 b8 c3           JSR ScUp_20
ca66 68                 PLA
ca67 85 f8              STA Scroll_Locked
ca69 a5 e5              LDA Margin_Top
ca6b 85 eb              STA Cursor_Row
ca6d 68                 PLA
ca6e 85 e5              STA Margin_Top
ca70 38                 SEC
ca71 66 e8              ROR CurLst_Row
ca73 4c 56 c1           JMP Cursor_To_Left_Margin

              ; **********************
ca76            Edit_Erase_EOL ; $ca76
              ; **********************

ca76 20 1e cc           JSR Edit_Save_Row_Col
ca79 20 aa c4 EdEE_10   JSR Clear_Row_To_EOR
ca7c e6 eb              INC Cursor_Row
ca7e 20 5c c1           JSR Set_Screen_Pointer
ca81 a4 e6              LDY Margin_Left
ca83 20 74 cb           JSR Is_Coupled_Row
ca86 b0 f1              BCS EdEE_10
ca88 4c 32 c9 EdEE_20   JMP EdDe_20

              ; **********************
ca8b            Edit_Erase_BOL ; $ca8b
              ; **********************

ca8b 20 1e cc           JSR Edit_Save_Row_Col
ca8e 20 27 cc EdEB_10   JSR Edit_Put_Blank
ca91 c4 e6              CPY Margin_Left
ca93 d0 05              BNE EdEB_20
ca95 20 74 cb           JSR Is_Coupled_Row
ca98 90 ee              BCC EdEE_20
ca9a 20 00 cc EdEB_20   JSR Edit_Cursor_Left
ca9d 90 ef              BCC EdEB_10

              ; **********************
ca9f            Edit_Erase_EOS ; $caa2
              ; **********************

ca9f 20 1e cc           JSR Edit_Save_Row_Col
caa2 20 aa c4 EdEr_10   JSR Clear_Row_To_EOR
caa5 e6 eb              INC Cursor_Row
caa7 20 5c c1           JSR Set_Screen_Pointer
caaa a4 e6              LDY Margin_Left
caac 20 74 cb           JSR Is_Coupled_Row
caaf b0 f1              BCS EdEr_10
cab1 a5 eb              LDA Cursor_Row
cab3 c5 e4              CMP Margin_Bottom
cab5 90 eb              BCC EdEr_10
cab7 f0 e9              BEQ EdEr_10
cab9 4c 32 c9           JMP EdDe_20

              ; ***************************
cabc            Edit_Scroll_Line_Up ; $cabc
              ; ***************************

cabc 20 1e cc           JSR Edit_Save_Row_Col
cabf 8a                 TXA
cac0 48                 PHA
cac1 20 a6 c3           JSR Edit_Scroll_Up
cac4 68                 PLA
cac5 85 df              STA E_Row
cac7 4c 32 c9           JMP EdDe_20

              ; ***************************
caca            Edit_Scroll_Line_Dn ; $caca
              ; ***************************

caca 20 1e cc           JSR Edit_Save_Row_Col
cacd 20 74 cb           JSR Is_Coupled_Row
cad0 b0 03              BCS ESLD_10
cad2 38                 SEC
cad3 66 e8              ROR CurLst_Row
cad5 a5 e5    ESLD_10   LDA Margin_Top
cad7 85 eb              STA Cursor_Row
cad9 20 7c c3           JSR Edit_Scroll_Down
cadc 20 85 cb           JSR Clear_Cont_Flag
cadf 4c 32 c9           JMP EdDe_20

              ; *************************
cae2            Edit_Scroll_Unlock ; $cae2
              ; *************************

cae2 a9 00              LDA #0
cae4 2c                 BIT

              ; ************************
cae5            Edit_Scroll_Lock ; $cae5
              ; ************************

cae5 a9 80              LDA #$80
cae7 85 f8              STA Scroll_Locked
cae9 60                 RTS ;Size    5 [Edit_Scroll_Lock]

              ; ****************************
caea            Edit_Auto_Insert_Off ; $caea
              ; ****************************

caea a9 00              LDA #0
caec 2c                 BIT

              ; ***************************
caed            Edit_Auto_Insert_On ; $caed
              ; ***************************

caed a9 ff              LDA #$ff
caef 85 f6              STA INSFLG
caf1 60                 RTS ;Size    5 [Edit_Auto_Insert_On]

              ; *************************
caf2            Edit_Cursor_Block ; $caf2
              ; *************************

caf2 24 d7              BIT MODE_80
caf4 10 40              BPL EdBC_Ret
caf6 ad 2b 0a           LDA CURMOD
caf9 29 e0              AND #%1110 0000 ; $e0
cafb 4c 14 cb           JMP EdSC_10

              ; ************************
cafe            Edit_Cursor_Line ; $cafe
              ; ************************

cafe 24 d7              BIT MODE_80
cb00 10 34              BPL EdBC_Ret
cb02 ad 2b 0a           LDA CURMOD
cb05 29 e0              AND #%1110 0000 ; $e0
cb07 09 07              ORA #%0000 0111 ; $07
cb09 d0 09              BNE EdSC_10

              ; **************************
cb0b            Edit_Steady_Cursor ; $cb0b
              ; **************************

cb0b 24 d7              BIT MODE_80
cb0d 10 0b              BPL EdSC_20
cb0f ad 2b 0a           LDA CURMOD
cb12 29 1f              AND #%0001 1111 ; $1f
cb14 8d 2b 0a EdSC_10   STA CURMOD
cb17 4c 91 cd           JMP ECON_10
cb1a ad 26 0a EdSC_20   LDA BLNON
cb1d 09 40              ORA #%0100 0000 ; $40
cb1f d0 12              BNE EdBC_20

              ; ****************************
cb21            Edit_Blinking_Cursor ; $cb21
              ; ****************************

cb21 24 d7              BIT MODE_80
cb23 10 09              BPL EdBC_10
cb25 ad 2b 0a           LDA CURMOD
cb28 29 1f              AND #%0001 1111 ; $1f
cb2a 09 60              ORA #%0110 0000 ; $60
cb2c d0 e6              BNE EdSC_10
cb2e ad 26 0a EdBC_10   LDA BLNON
cb31 29 bf              AND #%1011 1111 ; $bf
cb33 8d 26 0a EdBC_20   STA BLNON
cb36 60       EdBC_Ret  RTS ;Size   22 [Edit_Blinking_Cursor]

              ; ************************
cb37            Edit_Enable_Bell ; $cb37
              ; ***********************

cb37 a9 00              LDA #0
cb39 2c                 BIT

              ; *************************
cb3a            Edit_Disable_Bell ; $cb3a
              ; *************************

cb3a a9 80              LDA #$80
cb3c 85 f9              STA BEEPER
cb3e 60                 RTS ;Size    5 [Edit_Disable_Bell]

              ; ***********************
cb3f            Edit_Inverse_On ; $cb3f
              ; ***********************

cb3f a2 18              LDX #$18
cb41 20 da cd           JSR VDC_Read_Register_X
cb44 09 40              ORA #%0100 0000
cb46 d0 07              BNE EdIO_10

              ; ************************
cb48            Edit_Inverse_Off ; $cb48
              ; ************************

cb48 a2 18              LDX #$18
cb4a 20 da cd           JSR VDC_Read_Register_X
cb4d 29 bf              AND #%1011 1111 ; $bf
cb4f 4c cc cd EdIO_10   JMP VDC_Write_Register_X

              ; ***********************
cb52            Edit_Cursor_EOL ; $cb48
              ; ***********************

cb52 20 c3 cb           JSR Edit_Cursor_Last
cb55 4c 3e c3           JMP Edit_Cursor_Next

              ; *********************
cb58            Edit_Get_Char ; $cb58
              ; *********************

cb58 a4 ec              LDY Cursor_Col      ; cursor column
cb5a 24 d7              BIT MODE_80         ; screen mode
cb5c 30 07              BMI EGSC_10         ; -> 80 column screen
cb5e b1 e2              LDA (USER),Y
cb60 85 f2              STA TCOLOR          ; TCOLOR = attribute
cb62 b1 e0              LDA (PNT),Y         ; A      = character
cb64 60                 RTS ;Size   13 [Edit_Get_Char]

cb65 20 f9 cd EGSC_10   JSR VDC_Set_Attr_Address
cb68 20 d8 cd           JSR VDC_Read_RAM
cb6b 85 f2              STA TCOLOR          ; TCOLOR = attribute
cb6d 20 e6 cd           JSR VDC_Set_Char_Address
cb70 20 d8 cd           JSR VDC_Read_RAM    ; A      = character
cb73 60                 RTS ;Size   28 [Edit_Get_Char]

              ; **********************
cb74            Is_Coupled_Row ; $cb74
              ; **********************

cb74 a6 eb              LDX Cursor_Row            ; X = row

              ; ************************
cb76            Is_Coupled_Row_X ; $cb76
              ; ************************

cb76 20 9f cb           JSR Cont_Flag_Bit_Pos
cb79 3d 5e 03           AND BITABL,X
cb7c c9 01              CMP #1
cb7e 4c 90 cb           JMP CCF_20

              ; ************************
cb81            Toggle_Cont_Flag ; $cb81
              ; ************************

cb81 a6 eb              LDX Cursor_Row

              ; **************************
cb83            Toggle_Cont_Flag_X ; $cb83
              ; **************************

cb83 b0 0e              BCS Set_Cont_Flag

              ; ***********************
cb85            Clear_Cont_Flag ; $cb85
              ; ***********************

cb85 20 9f cb           JSR Cont_Flag_Bit_Pos
cb88 49 ff              EOR #$ff
cb8a 3d 5e 03           AND BITABL,X
cb8d 9d 5e 03 CCF_10    STA BITABL,X
cb90 a6 da    CCF_20    LDX E_Beg
cb92 60                 RTS ;Size   14 [Clear_Cont_Flag]

              ; *********************
cb93            Set_Cont_Flag ; $cb93
              ; *********************

cb93 24 f8              BIT Scroll_Locked
cb95 70 df              BVS Is_Coupled_Row_X ; -> no coupled rows in scroll lock mode
cb97 20 9f cb           JSR Cont_Flag_Bit_Pos
cb9a 1d 5e 03           ORA BITABL,X
cb9d d0 ee              BNE CCF_10

              ; *************************
cb9f            Cont_Flag_Bit_Pos ; $cb9f
              ; *************************

cb9f 86 da              STX E_Beg          ; save row
cba1 8a                 TXA
cba2 29 07              AND #7              ; row mod 8
cba4 aa                 TAX                 ; X = bit number
cba5 bd 6c ce           LDA Edit_Bit_Mask,X ; A = bit mask
cba8 48                 PHA                 ; push bit mask
cba9 a5 da              LDA E_Beg          ; A = roq
cbab 4a                 LSR A               ; / 2
cbac 4a                 LSR A               ; / 4
cbad 4a                 LSR A               ; / 8
cbae aa                 TAX                 ; X = byte index
cbaf 68                 PLA                 ; A = bit  index
cbb0 60                 RTS ;Size   18 [Cont_Flag_Bit_Pos]

              ; ***********************
cbb1            Edit_Cursor_BOL ; $cbb1
              ; ***********************

cbb1 a4 e6              LDY Margin_Left
cbb3 84 ec              STY Cursor_Col

              ; *********************
cbb5            Start_Of_Line ; $cbb5
              ; *********************

cbb5 20 74 cb           JSR Is_Coupled_Row
cbb8 90 06              BCC SOL_10
cbba c6 eb              DEC Cursor_Row
cbbc 10 f7              BPL Start_Of_Line
cbbe e6 eb              INC Cursor_Row
cbc0 4c 5c c1 SOL_10    JMP Set_Screen_Pointer

              ; ************************
cbc3            Edit_Cursor_Last ; $cbc3
              ; ************************

cbc3 e6 eb              INC Cursor_Row
cbc5 20 74 cb           JSR Is_Coupled_Row
cbc8 b0 f9              BCS Edit_Cursor_Last
cbca c6 eb              DEC Cursor_Row
cbcc 20 5c c1           JSR Set_Screen_Pointer
cbcf a4 e7              LDY Margin_Right
cbd1 84 ec              STY Cursor_Col      ; PNTR = right margin
cbd3 20 58 cb EELR_10   JSR Edit_Get_Char
cbd6 a6 eb              LDX Cursor_Row
cbd8 c9 20              CMP #' '
cbda d0 0e              BNE EELR_30
cbdc c4 e6              CPY Margin_Left
cbde d0 05              BNE EELR_20
cbe0 20 74 cb           JSR Is_Coupled_Row
cbe3 90 05              BCC EELR_30
cbe5 20 00 cc EELR_20   JSR Edit_Cursor_Left
cbe8 90 e9              BCC EELR_10         ; -> cursor did move
cbea 84 ea    EELR_30   STY Cursor_End      ; position of last non blank
cbec 60                 RTS ;Size   42 [Edit_Cursor_Last]

              ; *************************
cbed            Edit_Cursor_Right ; $cbed
              ; *************************

cbed 48                 PHA
cbee a4 ec              LDY Cursor_Col
cbf0 c4 e7              CPY Margin_Right
cbf2 90 07              BCC EdCR_10
cbf4 20 63 c3           JSR Edit_Cursor_Down
cbf7 a4 e6              LDY Margin_Left
cbf9 88                 DEY
cbfa 38                 SEC
cbfb c8       EdCR_10   INY
cbfc 84 ec              STY Cursor_Col
cbfe 68                 PLA
cbff 60                 RTS ;Size   19 [Edit_Cursor_Right]

              ; ************************
cc00            Edit_Cursor_Left ; $cc00
              ; ************************

cc00 a4 ec              LDY Cursor_Col            ; Y = cursor column
cc02 88                 DEY                 ; --Y
cc03 30 04              BMI EdCL_10         ; -> off screen
cc05 c4 e6              CPY Margin_Left            ; compare with left margin
cc07 b0 0f              BCS EdCL_20         ; -> OK
cc09 a4 e5    EdCL_10   LDY Margin_Top           ; Y = upper margin
cc0b c4 eb              CPY Cursor_Row            ; compare with row
cc0d b0 0e              BCS EdCL_Ret        ; -> cursor is at home position
cc0f c6 eb              DEC Cursor_Row            ; up one row
cc11 48                 PHA                 ; save A
cc12 20 5c c1           JSR Set_Screen_Pointer
cc15 68                 PLA                 ; restore A
cc16 a4 e7              LDY Margin_Right
cc18 84 ec    EdCL_20   STY Cursor_Col            ; cursor column = wight margin
cc1a c4 e7              CPY Margin_Right
cc1c 18                 CLC                 ; success
cc1d 60       EdCL_Ret  RTS ;Size   30 [Edit_Cursor_Left]

              ; *************************
cc1e            Edit_Save_Row_Col ; $cc1e
              ; *************************

cc1e a4 ec              LDY Cursor_Col
cc20 84 de              STY E_Col
cc22 a6 eb              LDX Cursor_Row
cc24 86 df              STX E_Row
cc26 60                 RTS ;Size    9 [Edit_Save_Row_Col]

              ; **********************
cc27            Edit_Put_Blank ; $cc27
              ; **********************

cc27 a5 f1              LDA E_Attribute
cc29 29 8f              AND #%1000 1111 ; $8f
cc2b aa                 TAX
cc2c a9 20              LDA #' '
cc2e 2c                 BIT

              ; *************************
cc2f            Edit_Put_Char_Att ; $cc2f
              ; *************************

cc2f a6 f1              LDX E_Attribute
cc31 2c                 BIT                 ; skip next statement

              ; *********************
cc32            Edit_Put_Char ; $cc32
              ; *********************

cc32 a6 f2              LDX TCOLOR

              ; ********************
cc34            Edit_Display ; $cc34
              ; ********************

cc34 a8                 TAY
cc35 a9 02              LDA #2
cc37 8d 28 0a           STA BLNCT
cc3a 20 7c c1           JSR Set_Attribute_Pointer
cc3d 98                 TYA
cc3e a4 ec              LDY Cursor_Col

              ; ***********************
cc40            Edit_Display_AX ; $cc40
              ; ***********************

cc40 24 d7              BIT MODE_80
cc42 30 06              BMI CTSR_80
cc44 91 e0              STA (PNT),Y
cc46 8a                 TXA
cc47 91 e2              STA (USER),Y
cc49 60                 RTS ;Size   10 [Edit_Display_AX]

cc4a 48       CTSR_80   PHA
cc4b 8a                 TXA
cc4c 48                 PHA
cc4d 20 f9 cd           JSR VDC_Set_Attr_Address
cc50 68                 PLA
cc51 20 ca cd           JSR VDC_Write_Data
cc54 20 e6 cd           JSR VDC_Set_Char_Address
cc57 68                 PLA
cc58 4c ca cd           JMP VDC_Write_Data

              ; ***********************
cc5b            Edit_Get_Window ; $cc5b
              ; ***********************

              ; Output: A = screen columns
              ;         X = window width  - 1
              ;         Y = window height - 1

cc5b 38                 SEC
cc5c a5 e4              LDA Margin_Bottom
cc5e e5 e5              SBC Margin_Top
cc60 a8                 TAY
cc61 38                 SEC
cc62 a5 e7              LDA Margin_Right
cc64 e5 e6              SBC Margin_Left
cc66 aa                 TAX
cc67 a5 ee              LDA COLUMNS
cc69 60                 RTS ;Size   15 [Edit_Get_Window]

              ; *****************
cc6a            Edit_Plot ; $cc6a
              ; *****************

              ; Get or set cursor position relative to window upper left corner

              ; Carry = 1: X = Row = Cursor_Row - Margin_Top
              ;            Y = Col = Cursor_Col - Margin Left

              ; Carry = 0: Cursor_Row = Margin_Top  + X
              ;            Cursor_Col = Margin_Left + Y
              ;            Screen_Pointer and cursor updated

cc6a b0 29              BCS EdPl_50         ; -> get position
cc6c 8a                 TXA
cc6d 65 e5              ADC Margin_Top
cc6f b0 14              BCS EdPl_30
cc71 c5 e4              CMP Margin_Bottom
cc73 f0 02              BEQ EdPl_10
cc75 b0 0e              BCS EdPl_30
cc77 48       EdPl_10   PHA
cc78 18                 CLC
cc79 98                 TYA
cc7a 65 e6              ADC Margin_Left
cc7c b0 06              BCS EdPl_20
cc7e c5 e7              CMP Margin_Right
cc80 f0 04              BEQ EdPl_40
cc82 90 02              BCC EdPl_40
cc84 68       EdPl_20   PLA
cc85 60       EdPl_30   RTS ;Size   28 [Edit_Plot]
cc86 85 ec    EdPl_40   STA Cursor_Col
cc88 85 e9              STA CurLst_Col
cc8a 68                 PLA
cc8b 85 eb              STA Cursor_Row
cc8d 85 e8              STA CurLst_Row
cc8f 20 5c c1           JSR Set_Screen_Pointer
cc92 20 57 cd           JSR Edit_Cursor
cc95 a5 eb    EdPl_50   LDA Cursor_Row
cc97 e5 e5              SBC Margin_Top
cc99 aa                 TAX
cc9a 38                 SEC
cc9b a5 ec              LDA Cursor_Col
cc9d e5 e6              SBC Margin_Left
cc9f a8                 TAY
cca0 18                 CLC
cca1 60                 RTS ;Size   56 [Edit_Plot]

              ; *********************
cca2            Edit_Set_FKey ; $cca2
              ; *********************

              ; Input : A = #INDEXA
              ;         X = key number (1-8)
              ;         Y = length of string assignment

cca2 ca                 DEX                 ; key index (0-7)
cca3 86 dc              STX E_End
cca5 84 da              STY E_Beg           ; text lnegth
cca7 8d aa 02           STA FETCH+8         ; #INDEXA ($24)
ccaa a8                 TAY
ccab b6 02              LDX BANK,Y          ; LDX #1 (INDEX)B  ($26) = ($02,$24)
ccad 20 6b ff           JSR K_GETCFG        ; LDA #$7f (Bank_Config_Table,X)
ccb0 85 de              STA E_Col           ; save bank
ccb2 a2 0a              LDX #10             ; find position after all 10 text entries
ccb4 20 20 cd           JSR Edit_FText_Index
ccb7 85 db              STA E_Beg+1         ; total length so far
ccb9 a6 dc              LDX E_End           ; key index
ccbb e8                 INX                 ; + 1
ccbc 20 20 cd           JSR Edit_FText_Index
ccbf 85 dd              STA E_End+1         ; length after current key
ccc1 a6 dc              LDX E_End           ; key index
ccc3 a5 da              LDA E_Beg           ; new text length
ccc5 38                 SEC
ccc6 fd 00 10           SBC PKYBUF,X        ; old text length
ccc9 f0 2b              BEQ ESFK_40         ; -> just replace
cccb 90 16              BCC ESFK_20         ; new < old -> shift down
cccd 18                 CLC                 ; new > old
ccce 65 db              ADC E_Beg+1         ; A = (new-old) + total length
ccd0 b0 4d              BCS ESFK_Ret        ; -> overlow
ccd2 aa                 TAX                 ; X = new total length
ccd3 a4 db              LDY E_Beg+1         ; Y = old total length
ccd5 c4 dd    ESFK_10   CPY E_End+1         ; Y = length after current key ?
ccd7 f0 1d              BEQ ESFK_40         ; -> move finished
ccd9 88                 DEY
ccda ca                 DEX
ccdb b9 0a 10           LDA PKYDEF,Y        ; shift up
ccde 9d 0a 10           STA PKYDEF,X
cce1 b0 f2              BCS ESFK_10         ; always

cce3 65 dd    ESFK_20   ADC E_End+1
cce5 aa                 TAX
cce6 a4 dd              LDY E_End+1
cce8 c4 db    ESFK_30   CPY E_Beg+1
ccea b0 0a              BCS ESFK_40
ccec b9 0a 10           LDA PKYDEF,Y        ; shift down
ccef 9d 0a 10           STA PKYDEF,X
ccf2 c8                 INY
ccf3 e8                 INX
ccf4 90 f2              BCC ESFK_30         ; always

ccf6 a6 dc    ESFK_40   LDX E_End           ; key index
ccf8 20 20 cd           JSR Edit_FText_Index
ccfb aa                 TAX                 ; text index
ccfc a4 dc              LDY E_End           ; Y = key index
ccfe a5 da              LDA E_Beg           ; A = new text length
cd00 99 00 10           STA PKYBUF,Y        ; store text length in table
cd03 a0 00              LDY #0              ; store new text from (INDEXA)
cd05 c6 da    ESFK_50   DEC E_Beg           ; decrement text length
cd07 30 15              BMI ESFK_60         ; -> finish
cd09 86 df              STX E_Row           ; save X
cd0b a6 de              LDX E_Col           ; X = bank
cd0d ad aa 02           LDA FETCH+8         ; #INDEXA
cd10 78                 SEI
cd11 20 a2 02           JSR FETCH           ; replace with Get_INDEXA_1 !!!
cd14 58                 CLI
cd15 a6 df              LDX E_Row           ; restore X
cd17 9d 0a 10           STA PKYDEF,X
cd1a e8                 INX                 ; increment store index
cd1b c8                 INY                 ; increment load  index
cd1c d0 e7              BNE ESFK_50         ; always

cd1e 18       ESFK_60   CLC                 ; C=0 OK
cd1f 60       ESFK_Ret  RTS ;Size  126 [Edit_Set_FKey]

              ; ************************
cd20            Edit_FText_Index ; $cd20
              ; ************************

cd20 a9 00              LDA #0
cd22 18                 CLC
cd23 ca       EGFI_10   DEX
cd24 30 05              BMI EGFI_Ret
cd26 7d 00 10           ADC PKYBUF,X
cd29 90 f8              BCC EGFI_10
cd2b 60       EGFI_Ret  RTS ;Size   12 [Edit_FText_Index]

              ; **************************
cd2c            Edit_Toggle_Screen ; $cd2c
              ; **************************

cd2c 85 f0              STA LSTCHR

              ; ***************************
cd2e            Edit_Screen_Swapper ; $cd2e
              ; ***************************

              ; Toggle screen mode between 80 column VDC and 40 column VIC screen
              ; The zero page variables $e0 - $fa are swapped
              ; Also the TAB and Concatenation settings array $0354 - $0361
              ; Bit 7 of MODE_80 is toggled

cd2e a2 1a              LDX #$1a
cd30 bc 40 0a EdSS_10   LDY ZP_SW_COL,X
cd33 b5 e0              LDA PNT,X
cd35 9d 40 0a           STA ZP_SW_COL,X
cd38 98                 TYA
cd39 95 e0              STA PNT,X
cd3b ca                 DEX
cd3c 10 f2              BPL EdSS_10
cd3e a2 0d              LDX #13             ; 10 for TABMAP and 4 for BITABL
cd40 bc 60 0a EdSS_20   LDY SWPMAP,X
cd43 bd 54 03           LDA TABMAP,X
cd46 9d 60 0a           STA SWPMAP,X
cd49 98                 TYA
cd4a 9d 54 03           STA TABMAP,X
cd4d ca                 DEX
cd4e 10 f0              BPL EdSS_20
cd50 a5 d7              LDA MODE_80
cd52 49 80              EOR #%1000 0000 ; $80
cd54 85 d7              STA MODE_80
cd56 60       EdSS_Ret  RTS ;Size   41 [Edit_Screen_Swapper]

              ; *******************
cd57            Edit_Cursor ; $cd57
              ; *******************

cd57 24 d7              BIT MODE_80
cd59 10 fb              BPL EdSS_Ret
cd5b a2 0e              LDX #14
cd5d 18                 CLC
cd5e a5 e0              LDA PNT
cd60 65 ec              ADC Cursor_Col
cd62 48                 PHA
cd63 a5 e1              LDA PNT+1
cd65 69 00              ADC #0
cd67 20 cc cd           JSR VDC_Write_Register_X
cd6a e8                 INX
cd6b 68                 PLA
cd6c 4c cc cd           JMP VDC_Write_Register_X

              ; **********************
cd6f            Edit_Cursor_On ; $cd6f
              ; **********************

cd6f 24 d7              BIT MODE_80         ; 80 or 40 column screen ?
cd71 10 26              BPL ECON_20         ; -> 40 col

              ; cursor in 80 column screen

cd73 20 7c c1           JSR Set_Attribute_Pointer
cd76 a4 ec              LDY Cursor_Col
cd78 20 f9 cd           JSR VDC_Set_Attr_Address
cd7b 20 d8 cd           JSR VDC_Read_RAM
cd7e 8d 33 0a           STA VDC_ATT          ; save char under cursor
cd81 29 f0              AND #%1111 0000     ; invert char
cd83 85 db              STA E_Beg+1
cd85 20 f9 cd           JSR VDC_Set_Attr_Address
cd88 a5 f1              LDA E_Attribute
cd8a 29 0f              AND #%0000 1111     ; invert color
cd8c 05 db              ORA E_Beg+1
cd8e 20 ca cd           JSR VDC_Write_Data
cd91 a2 0a    ECON_10   LDX #10
cd93 ad 2b 0a           LDA CURMOD
cd96 4c cc cd           JMP VDC_Write_Register_X

              ; cursor in 40 column screen

cd99 a9 00    ECON_20   LDA #0
cd9b 8d 27 0a           STA BLNSW           ; 0 = blinking on
cd9e 60                 RTS ;Size   48 [Edit_Cursor_On]

              ; ***********************
cd9f            Edit_Cursor_Off ; $cd9f
              ; ***********************

cd9f 24 d7              BIT MODE_80         ; 80 or 40 column screen ?
cda1 10 10              BPL ECOF_10         ; -> 40 col

              ; cursor in 80 column screen

cda3 20 f9 cd           JSR VDC_Set_Attr_Address
cda6 ad 33 0a           LDA VDC_ATT         ; attribute under cursor
cda9 20 ca cd           JSR VDC_Write_Data  ; prepare to write
cdac a2 0a              LDX #10
cdae a9 20              LDA #' '
cdb0 4c cc cd           JMP VDC_Write_Register_X

              ; cursor in 40 column screen

cdb3 8d 27 0a ECOF_10   STA BLNSW           ; BLNSW != 0 : switch blinking off
cdb6 ad 26 0a           LDA BLNON           ; cursor blink on ?
cdb9 10 0e              BPL ECOF_Ret        ; -> no, nothing to do
cdbb 29 40              AND #%0100 0000
cdbd 8d 26 0a           STA BLNON
cdc0 ad 29 0a           LDA GDBLN
cdc3 ae 2a 0a           LDX GDCOL           ; cursor blink mode
cdc6 20 34 cc           JSR Edit_Display
cdc9 60       ECOF_Ret  RTS ;Size   43 [Edit_Cursor_Off]

              ; **********************
cdca            VDC_Write_Data ; $cdca
              ; **********************

cdca a2 1f              LDX #$1f

              ; ****************************
cdcc            VDC_Write_Register_X ; $cdcc
              ; ****************************

cdcc 8e 00 d6           STX VDC_Register
cdcf 2c 00 d6 VWRX_10   BIT VDC_Register
cdd2 10 fb              BPL VWRX_10
cdd4 8d 01 d6           STA VDC_Data
cdd7 60                 RTS ;Size   12 [VDC_Write_Register_X]

              ; ********************
cdd8            VDC_Read_RAM ; $cdd8
              ; ********************

cdd8 a2 1f              LDX #$1f

              ; ***************************
cdda            VDC_Read_Register_X ; $cdda
              ; ***************************

cdda 8e 00 d6           STX VDC_Register
cddd 2c 00 d6 VRRX_10   BIT VDC_Register
cde0 10 fb              BPL VRRX_10
cde2 ad 01 d6           LDA VDC_Data
cde5 60                 RTS ;Size   12 [VDC_Read_Register_X]

              ; ****************************
cde6            VDC_Set_Char_Address ; $cde6
              ; ****************************

cde6 a2 12              LDX #$12
cde8 18                 CLC
cde9 98                 TYA
cdea 65 e0              ADC PNT
cdec 48                 PHA
cded a9 00              LDA #0
cdef 65 e1              ADC PNT+1
cdf1 20 cc cd           JSR VDC_Write_Register_X
cdf4 68                 PLA
cdf5 e8                 INX
cdf6 4c cc cd           JMP VDC_Write_Register_X

              ; ****************************
cdf9            VDC_Set_Attr_Address ; $cdf9
              ; ****************************

cdf9 a2 12              LDX #18             ; VDC register 18
cdfb 18                 CLC
cdfc 98                 TYA
cdfd 65 e2              ADC USER            ; USER + Y
cdff 48                 PHA
ce00 a9 00              LDA #0
ce02 65 e3              ADC USER+1
ce04 20 cc cd           JSR VDC_Write_Register_X
ce07 68                 PLA
ce08 e8                 INX
ce09 4c cc cd           JMP VDC_Write_Register_X

              ; *************************
ce0c            Edit_Load_Chargen ; $ce0c
              ; *************************

ce0c a9 00              LDA #<VIC
ce0e a0 d0              LDY #>VIC
ce10 85 da              STA E_Beg
ce12 84 db              STY E_Beg+1
ce14 a2 12              LDX #$12
ce16 a9 20              LDA #$20            ; Write chargen to $2000
ce18 20 cc cd           JSR VDC_Write_Register_X
ce1b e8                 INX
ce1c a9 00              LDA #0
ce1e 20 cc cd           JSR VDC_Write_Register_X
ce21 a0 00              LDY #0
ce23 a2 0e    EdLC_10   LDX #$0e            ; bank
ce25 a9 da              LDA #E_Beg
ce27 20 74 ff           JSR K_INDFET
ce2a 20 ca cd           JSR VDC_Write_Data
ce2d c8                 INY
ce2e c0 08              CPY #8              ; 8 bytes per character
ce30 90 f1              BCC EdLC_10
ce32 a9 00              LDA #0
ce34 20 ca cd EdLC_20   JSR VDC_Write_Data
ce37 88                 DEY
ce38 d0 fa              BNE EdLC_20
ce3a 18                 CLC
ce3b a5 da              LDA E_Beg
ce3d 69 08              ADC #8              ; position to next character
ce3f 85 da              STA E_Beg
ce41 90 e0              BCC EdLC_10
ce43 e6 db              INC E_Beg+1
ce45 a5 db              LDA E_Beg+1
ce47 c9 e0              CMP #$e0            ; end of chargen ROM at $dfff
ce49 90 d8              BCC EdLC_10
ce4b 60                 RTS ;Size   64 [Edit_Load_Chargen]

              ; ***********************
ce4c            VIC_Color_Codes ; $ce4c
              ; ***********************

ce4c 90                 .BYTE $90           ; black
ce4d 05                 .BYTE $05           ; white
ce4e 1c                 .BYTE $1c           ; red
ce4f 9f                 .BYTE $9f           ; green
ce50 9c                 .BYTE $9c           ; violet
ce51 1e                 .BYTE $1e           ; dark green
ce52 1f                 .BYTE $1f           ; blue
ce53 9e                 .BYTE $9e           ; yellow

ce54 81                 .BYTE $81           ; light brown
ce55 95                 .BYTE $95           ; brown
ce56 96                 .BYTE $96           ; rose
ce57 97                 .BYTE $97           ; dark grey
ce58 98                 .BYTE $98           ; grey
ce59 99                 .BYTE $99           ; light green
ce5a 9a                 .BYTE $9a           ; light blue
ce5b 9b                 .BYTe $9b           ; light grey

              ; ***********************
ce5c            VDC_Color_Codes ; $ce5c
              ; ***********************

ce5c 00                 .BYTE $00           ; black
ce5d 0f                 .BYTE $0f           ; white
ce5e 08                 .BYTE $08           ; red
ce5f 07                 .BYTE $07           ; green
ce60 0b                 .BYTE $0b           ; violet
ce61 04                 .BYTE $04           ; dark green
ce62 02                 .BYTE $02           ; blue
ce63 0d                 .BYTE $0d           ; yellow

ce64 0a                 .BYTE $0a           ; light brown
ce65 0c                 .BYTE $0c           ; brown
ce66 09                 .BYTE $09           ; rose
ce67 06                 .BYTE $06           ; dark grey
ce68 01                 .BYTE $01           ; grey
ce69 05                 .BYTE $05           ; light green
ce6a 03                 .BYTE $03           ; light blue
ce6b 0e                 .BYTe $0e           ; light grey

              ; *********************
ce6c            Edit_Bit_Mask ; $ce6c
              ; *********************

ce6c 80 40 20           .BYTE $80,$40,$20,$10,$08,$04,$02,$01

              ; *****************
ce74            ZP_40_COL ; $ce74
              ; *****************

ce74 00 04              .WORD VIC_TEXT      ; $e0  PNT
ce76 00 d8              .WORD VIC_COLOR_RAM ; $e2  USER
ce78 18                 .BYTE 24            ; $e4  Margin_Bottom
ce79 00                 .BYTE  0            ; $e5  Margin_Top
ce7a 00                 .BYTE  0            ; $e6  Margin_Left
ce7b 27                 .BYTE 39            ; $e7  Margin_Right
ce7c 00                 .BYTE  0            ; $e8  CurLst_Row
ce7d 00                 .BYTE  0            ; $e9  CurLst_Col
ce7e 00                 .BYTE  0            ; $ea  Cursor_End
ce7f 00                 .BYTE  0            ; $eb  Cursor_Row
ce80 00                 .BYTE  0            ; $ec  Cursor_Col
ce81 18                 .BYTE 24            ; $ed  LINES
ce82 27                 .BYTE 39            ; $ee  COLUMNS
ce83 00                 .BYTE  0            ; $ef  DATAX
ce84 00                 .BYTE  0            ; $f0  LSTCHR
ce85 0d                 .BYTE 13            ; $f1  E_Attribute
ce86 0d                 .BYTE 13            ; $f2  TCOLOR
ce87 00                 .BYTE  0            ; $f3  E_Reverse
ce88 00                 .BYTE  0            ; $f4  QTSW
ce89 00                 .BYTE  0            ; $f5  INSRT
ce8a 00                 .BYTE  0            ; $f6  INSFLG
ce8b 00                 .BYTE  0            ; $f7  LOCKS
ce8c 00                 .BYTE  0            ; $f8  Scroll_Locked
ce8d 00                 .BYTE  0            ; $f9  BEEPER


              ; *****************
ce8e            ZP_80_COL ; $ce8e
              ; *****************

ce8e 00 00              .WORD $0000         ; $e0  PNT
ce90 00 08              .WORD $0800         ; $e2  USER
ce92 18                 .BYTE 24            ; $e4  Margin_Bottom
ce93 00                 .BYTE  0            ; $e5  Margin_Top
ce94 00                 .BYTE  0            ; $e6  Margin_Left
ce95 4f                 .BYTE 79            ; $e7  Margin_Right
ce96 00                 .BYTE  0            ; $e8  CurLst_Row
ce97 00                 .BYTE  0            ; $e9  CurLst_Col
ce98 00                 .BYTE  0            ; $ea  Cursor_End
ce99 00                 .BYTE  0            ; $eb  Cursor_Row
ce9a 00                 .BYTE  0            ; $ec  Cursor_Col
ce9b 18                 .BYTE 24            ; $ed  LINES
ce9c 4f                 .BYTE 79            ; $ee  COLUMNS
ce9d 00                 .BYTE  0            ; $ef  DATAX
ce9e 00                 .BYTE  0            ; $f0  LSTCHR
ce9f 07                 .BYTE  7            ; $f1  E_Attribute
cea0 07                 .BYTE  7            ; $f2  TCOLOR
cea1 00                 .BYTE  0            ; $f3  E_Reverse
cea2 00                 .BYTE  0            ; $f4  QTSW
cea3 00                 .BYTE  0            ; $f5  INSRT
cea4 00                 .BYTE  0            ; $f6  INSFLG
cea5 00                 .BYTE  0            ; $f7  LOCKS
cea6 00                 .BYTE  0            ; $f8  Scroll_Locked
cea7 00                 .BYTE  0            ; $f9  BEEPER

              ; ***********************
cea8            Edit_Default_FK ; $cea8
              ; ***********************

              ;                f1  f2  f3  f4  f5  f6  f7  f8 RUN HELP
cea8 07 06 0a           .BYTE $07,$06,$0a,$07,$06,$04,$05,$08,$09,$05
ceb2 47 52 41           .BYTE "GRAPHIC"     ; f1
ceb9 44 4c 4f           .BYTE "DLOAD\""     ; f2
cebf 44 49 52           .BYTE "DIRECTORY\r" ; f3
cec9 53 43 4e           .BYTE "SCNCLR\r"    ; f4
ced0 44 53 41           .BYTE "DSAVE\""     ; f5
ced6 52 55 4e           .BYTE "RUN\r"       ; f6
ceda 4c 49 53           .BYTE "LIST\r"      ; f7
cedf 4d 4f 4e           .BYTE "MONITOR\r"   ; f8
cee7 44 cc 22           .BYTE "D",$cc,QUOTE,"*\rRUN\r" ; DLOAD"* and RUN
cef0 48 45 4c           .BYTE "HELP\r"

cef5 ff ff ff           .FILL $cf00-* ($ff) ;   11 bytes ; 11 bytes

              ; **************
cf00            UFK_40 ; $cf00
              ; **************

              ; patch for Edit_Use_Function_Key

cf00 a5 d1              LDA KYNDX
cf02 d0 12              BNE UFK_70
cf04 bd 00 10           LDA PKYBUF,X
cf07 85 d1              STA KYNDX
cf09 a9 00              LDA #0
cf0b 18                 CLC
cf0c ca       UFK_50    DEX
cf0d 30 05              BMI UFK_60
cf0f 7d 00 10           ADC PKYBUF,X
cf12 90 f8              BCC UFK_50
cf14 85 d2    UFK_60    STA KEYIDX
cf16 4c c4 c6 UFK_70    JMP UFK_20

cf19 ff ff ff           .FILL $cf80-* ($ff) ;  103 bytes ; 103 bytes

              ; ***********
cf80            DMA ; $cf80
              ; ***********

cf80 ad 06 d5           LDA MMU_RAMC
cf83 48                 PHA                 ; save RAM configuration
cf84 5d f0 f7           EOR Bank_Config_Table,X
cf87 29 3f              AND #%0011 1111
cf89 5d f0 f7           EOR Bank_Config_Table,X
cf8c 8d 06 d5           STA MMU_RAMC
cf8f bd f0 f7           LDA Bank_Config_Table,X
cf92 aa                 TAX
cf93 08                 PHP
cf94 78                 SEI
cf95 20 f0 03           JSR RAM_DMA
cf98 28                 PLP
cf99 68                 PLA                 ; restore RAM configuration
cf9a 8d 06 d5           STA MMU_RAMC
cf9d 60                 RTS ;Size   30 [DMA]

cf9e ff ff ff           .FILL $cfc0-* ($ff) ;   34 bytes ; 34 bytes

cfc0 28 43 29           .BYTE "(C)1986 COMMODORE"
cfd1 20 45 4c           .BYTE " ELECTRONICS, LTD."
cfe3 20 41 4c           .BYTE " ALL RIGHTS RESERVED."
0000 TRUE     #if KEYBOARD == 0
cff8 ff 00 f3           .BYTE $ff,$00,$f3,$91,$3b,$ea,$01,$4c
              #endif
0001 FALSE    #if KEYBOARD == 2
SKIP                    .BYTE $11,$02,$ff,$ff,$ff,$ff,$01,$ff
              #endif
0001 FALSE    #if KEYBOARD == 3
SKIP                    .BYTE $11,$03,$22,$AE,$44,$3A,$01,$F2
              #endif
0001 FALSE    #if KEYBOARD == 4
SKIP                    .BYTE $08,$04,$5B,$BC,$9E,$B6,$01,$2F
              #endif
0001 FALSE    #if KEYBOARD == 5
SKIP                    .BYTE $11,$05,$FF,$FF,$FF,$FF,$01,$FF
              #endif
0001 FALSE    #if KEYBOARD == 6
SKIP                    .BYTE $11,$06,$FF,$FF,$FF,$FF,$01,$FF
              #endif
0001 FALSE    #if KEYBOARD == 255
SKIP                    .BYTE $FF,$FF,$FF,$FF,$76,$8F,$01,$3C
              #endif

              ; ***********
d000            VIC ; $d000
              ; ***********

e000                     * =  $e000

              ; ********************
e000            System_Reset ; $e000
              ; ********************

e000 a2 ff              LDX #$ff
e002 78                 SEI
e003 9a                 TXS
e004 d8                 CLD
e005 a9 00              LDA #0
e007 8d 00 ff           STA MMU_CR
e00a a2 0a              LDX #10
e00c bd 4b e0 SyRe_10   LDA MMU_Reset_Table,X
e00f 9d 00 d5           STA MMU_CONT,X
e012 ca                 DEX
e013 10 f7              BPL SyRe_10
e015 8d 04 0a           STA INIT_STATUS
e018 20 cd e0           JSR Init_Bank_Switching
e01b 20 f0 e1           JSR Check_CBM
e01e 20 42 e2           JSR Test_Cartridge
e021 20 09 e1           JSR IOINIT
e024 20 3d f6           JSR Check_STOP_Key
e027 48                 PHA
e028 30 07              BMI SyRe_20
e02a a9 a5              LDA #$a5
e02c cd 02 0a           CMP DEJAVU
e02f f0 03              BEQ SyRe_30
e031 20 93 e0 SyRe_20   JSR RAMTAS
e034 20 56 e0 SyRe_30   JSR RESTOR
e037 20 00 c0           JSR E_CINT
e03a 68                 PLA
e03b 58                 CLI
e03c 30 03              BMI SyRe_40
e03e 4c 00 b0           JMP BASIC_MONITOR
e041 c9 df    SyRe_40   CMP #$df
e043 f0 03              BEQ SyRe_50
e045 6c 00 0a           JMP (RESET_VECTOR)
e048 4c 4b e2 SyRe_50   JMP C64

              ; ***********************
e04b            MMU_Reset_Table ; $e04b
              ; ***********************

e04b 00                 .BYTE $00 ; RAM 0 - BASIC - Kernal - I/O
e04c 00                 .BYTE $00 ; Config A
e04d 00                 .BYTE $00 ; Config B
e04e 00                 .BYTE $00 ; Config C
e04f 00                 .BYTE $00 ; Config D
e050 bf                 .BYTE $bf ; Mode      80 Col - C128 - 8502
e051 04                 .BYTE $04 ; RAM       Bank 0 - lower common 1K
e052 00 00              .WORD $0000 ;     0 ; Zero  Page
e054 01 00              .WORD $0001 ;     1 ; Stack Page

              ; **************
e056            RESTOR ; $e056
              ; **************

e056 a2 73              LDX #<vectss
e058 a0 e0              LDY #>vectss
e05a 18                 CLC

              ; **************
e05b            VECTOR ; $e05b
              ; **************

              ; Input : (X/Y) = address of vector table (ROM or RAM)
              ;         C = 1 : copy values from IIRQ to (X/Y) table
              ;         C = 0 ; copy values from (X/Y) table to IIRQ

e05b 86 c3              STX MEMUSS
e05d 84 c4              STY MEMUSS+1
e05f a0 1f              LDY #$1f
e061 b9 14 03 VECT_10   LDA IIRQ,Y
e064 b0 02              BCS VECT_20
e066 b1 c3              LDA (MEMUSS),Y
e068 99 14 03 VECT_20   STA IIRQ,Y
e06b 90 02              BCC VECT_30
e06d 91 c3              STA (MEMUSS),Y
e06f 88       VECT_30   DEY
e070 10 ef              BPL VECT_10
e072 60                 RTS ;Size   24 [VECTOR]

              ; **************
e073            vectss ; $e073
              ; **************

e073 65 fa              .WORD IRQ_Normal    ; $0314 IIRQ
e075 03 b0              .WORD Mon_Break     ; $0316 IBRK
e077 40 fa              .WORD NMI_Normal    ; $0318 INMI
e079 bd ef              .WORD OPEN          ; $031a IOPEN
e07b 88 f1              .WORD CLOSE         ; $031c ICLOSE
e07d 06 f1              .WORD CHKIN         ; $031e ICHKIN
e07f 4c f1              .WORD CKOUT         ; $0320 ICKOUT
e081 26 f2              .WORD CLRCH         ; $0322 ICLRCH
e083 06 ef              .WORD BASIN         ; $0324 IBASIN
e085 79 ef              .WORD BSOUT         ; $0326 IBSOUT
e087 6e f6              .WORD STOP          ; $0328 ISTOP
e089 eb ee              .WORD GETIN         ; $032a KEYVEC
e08b 22 f2              .WORD CLALL         ; $032c ICLALL
e08d 06 b0              .WORD Mon_Command   ; $032e EXMON
e08f 6c f2              .WORD D_LOADSP      ; $0330 ILOAD
e091 4e f5              .WORD D_SAVE        ; $0332 ISAVE

              ; clear zero page and initialize some pointer

              ; **************
e093            RAMTAS ; $e093
              ; **************

e093 a9 00              LDA #0
e095 a8                 TAY
e096 99 02 00 RAMT_10   STA BANK,Y          ; clear $02 - $ff
e099 c8                 INY
e09a d0 fa              BNE RAMT_10
e09c a0 0b              LDY #>T_Buffer
e09e 84 b3              STY TAPE1+1         ; (TAPE1) = T_Buffer
e0a0 85 b2              STA TAPE1
e0a2 a0 0c              LDY #>R_Rece_Buffer
e0a4 84 c9              STY RIBUF+1         ; (RIBUF) = R_Rece_Buffer
e0a6 85 c8              STA RIBUF
e0a8 a0 0d              LDY #>R_Send_Buffer
e0aa 84 cb              STY ROBUF+1         ; (ROBUF) = R_Send_Buffer
e0ac 85 ca              STA ROBUF
e0ae 18                 CLC
e0af a0 ff              LDY #>$ff00
e0b1 a2 00              LDX #<$ff00
e0b3 20 6b f7           JSR SET_MEM_TOP     ; (MEM_TOP) = $ff00
e0b6 a0 1c              LDY #>RAMBOT
e0b8 a2 00              LDX #<RAMBOT
e0ba 20 7a f7           JSR SET_MEM_BOT     ; (MEM_BOT) = $1c00
e0bd a0 40              LDY #>B_Cold_Start
e0bf a2 00              LDX #<B_Cold_Start
e0c1 8c 01 0a           STY RESET_VECTOR+1
e0c4 8e 00 0a           STX RESET_VECTOR
e0c7 a9 a5              LDA #$a5
e0c9 8d 02 0a           STA DEJAVU          ; set flag RAMTAS executed
e0cc 60                 RTS ;Size   58 [RAMTAS]

              ; ***************************
e0cd            Init_Bank_Switching ; $e0cd
              ; ***************************

              ; set MMU config register

e0cd a0 03              LDY #3
e0cf b9 05 e1 InBS_10   LDA insttb,Y
e0d2 8d 00 ff           STA MMU_CR

              ; copy NMI routine from ROM to common upper RAM

e0d5 a2 3f              LDX #$3f
e0d7 bd 05 ff InBS_20   LDA NMI,X
e0da 9d 05 ff           STA NMI,X
e0dd ca                 DEX
e0de 10 f7              BPL InBS_20
              ; copy interrupt vectors from ROM to common upper RAM

e0e0 a2 05              LDX #5
e0e2 bd fa ff InBS_30   LDA V_NMI,X
e0e5 9d fa ff           STA V_NMI,X
e0e8 ca                 DEX
e0e9 10 f7              BPL InBS_30
e0eb 88                 DEY
e0ec 10 e1              BPL InBS_10

              ; copy RAM access routines from ROM to lower common RAM

e0ee a2 59              LDX #$59
e0f0 bd 00 f8 InBS_40   LDA ROM_FETCH,X
e0f3 9d a2 02           STA FETCH,X
e0f6 ca                 DEX
e0f7 10 f7              BPL InBS_40

              ; copy DMA routines from ROM to lower common RAM

e0f9 a2 0c              LDX #12
e0fb bd 5a f8 InBS_50   LDA ROM_DMA,X
e0fe 9d f0 03           STA RAM_DMA,X
e101 ca                 DEX
e102 10 f7              BPL InBS_50
e104 60                 RTS ;Size   56 [Init_Bank_Switching]

              ; MMU configuration
              ; -----------------

              ; xx......  RAM bank  00 = bank 0, 01 = bank 2
              ; ..xx....  KERNAL    00 = kernal $c000 - $ffff
              ; ....xx..  BASIC HI  00 = BASIC  $8000 - $bfff
              ; ......x.  BASIC LO   0 = BASIC  $4000 - $7fff
              ; .......x  I/O        0 = I/O    $d000 - $dfff

              ; **************
e105            insttb ; $e105
              ; **************

e105 00                 .BYTE $00           ; RAM bank 0
e106 40                 .BYTE $40           ; RAM bank 1
e107 80                 .BYTE $80           ; RAM bank 2 (not installed)
e108 c0                 .BYTE $c0           ; RAM bank 3 (not installed)

              ; **************
e109            IOINIT ; $e109
              ; **************

e109 a9 7f              LDA #$7f
e10b 8d 0d dc           STA CIA1_ICR
e10e 8d 0d dd           STA CIA2_ICR
e111 8d 00 dc           STA CIA1_KBD_COL
e114 a9 08              LDA #8
e116 8d 0e dc           STA CIA1_CRA
e119 8d 0e dd           STA CIA2_CRA
e11c 8d 0f dc           STA CIA1_CRB
e11f 8d 0f dd           STA CIA2_CRB
e122 a2 00              LDX #0
e124 8e 03 dc           STX CIA1_DDRB
e127 8e 03 dd           STX CIA2_DDRB
e12a ca                 DEX
e12b 8e 02 dc           STX CIA1_DDRA
e12e a9 07              LDA #7
e130 8d 00 dd           STA CIA2_PRA
e133 a9 3f              LDA #$3f
e135 8d 02 dd           STA CIA2_DDRA
e138 a9 e3              LDA #$e3
e13a 85 01              STA R8502
e13c a9 2f              LDA #$2f
e13e 85 00              STA D8502
e140 a2 ff              LDX #$ff
e142 ad 11 d0 IOIN_10   LDA VIC_Ctrl_1
e145 10 fb              BPL IOIN_10
e147 a9 08    IOIN_20   LDA #8
e149 cd 12 d0           CMP VIC_RASTER
e14c 90 06              BCC IOIN_30         ; -> PAL: PALNTS = $ff
e14e ad 11 d0           LDA VIC_Ctrl_1
e151 30 f4              BMI IOIN_20
e153 e8                 INX                 ;   NTSC: PALNTS = $00
e154 8e 03 0a IOIN_30   STX PALNTS
e157 a9 00              LDA #0
e159 20 55 fc           JSR Init_RS232
e15c 8d 39 0a           STA VSH_Ctrl_1
e15f 8d 0a 0a           STA IRQTMP+1
e162 8d 3a 0a           STA SPRITES
e165 8d 36 0a           STA PAL_ADJ
e168 85 99              STA DFLTN
e16a a9 03              LDA #3
e16c 85 9a              STA DFLTO
e16e a2 30              LDX #$30
e170 bd c7 e2 IOIN_40   LDA VIC_Init_Values,X
e173 9d 00 d0           STA VIC,X
e176 ca                 DEX
e177 10 f7              BPL IOIN_40
e179 a2 00              LDX #0
e17b 20 dc e1           JSR VDC_Program_X
e17e ad 00 d6           LDA VDC_Register
e181 29 07              AND #%0000 0111 ; $07
e183 f0 05              BEQ IOIN_50
e185 a2 3b              LDX #[VDC_Init_NTSC - VDC_Init_Values] ; $3b
e187 20 dc e1           JSR VDC_Program_X
e18a 2c 03 0a IOIN_50   BIT PALNTS
e18d 10 05              BPL IOIN_60
e18f a2 3e              LDX #[VDC_Init_PAL  - VDC_Init_Values] ; $3e
e191 20 67 fc           JSR VDC_Program_Mod
e194 ad 04 0a IOIN_60   LDA INIT_STATUS
e197 30 15              BMI IOIN_80
e199 20 27 c0           JSR E_DLCHR
e19c a9 80              LDA #$80
e19e 0d 04 0a           ORA INIT_STATUS
e1a1 8d 04 0a           STA INIT_STATUS
e1a4 a2 ff              LDX #$ff
e1a6 a0 ff              LDY #$ff
e1a8 88       IOIN_70   DEY
e1a9 d0 fd              BNE IOIN_70
e1ab ca                 DEX
e1ac d0 fa              BNE IOIN_70
e1ae a9 00    IOIN_80   LDA #0
e1b0 a2 18              LDX #$18
e1b2 9d 00 d4 IOIN_90   STA SID_Freq_1,X
e1b5 ca                 DEX
e1b6 10 fa              BPL IOIN_90

              ; *********************
e1b8            Test_Fast_IEC ; $e1b8
              ; *********************

e1b8 a2 01              LDX #1              ; X = 1
e1ba 8e 1a d0           STX VIC_IRQ_ENA     ; enable raster interrupt only
e1bd ca                 DEX                 ; X = 0
e1be 8e 1c 0a           STX Fast_IEC        ; default: not a fast device
e1c1 8e 0f 0a           STX RS_Enable       ; disable RS232 interface
e1c4 ca                 DEX                 ; X = $ff
e1c5 8e 06 dc           STX CIA1_TBLO
e1c8 8e 07 dc           STX CIA1_TBHI       ; $ffff = 65 msec
e1cb a2 11              LDX #%0001 0001     ; ONE STOP
e1cd 8e 0f dc           STX CIA1_CRB
e1d0 20 c3 e5           JSR IEC_Fast_Input
e1d3 20 d6 e5           JSR IEC_Fast_Output
e1d6 20 c3 e5           JSR IEC_Fast_Input
e1d9 4c 4e e5           JMP IEC_Clock_Low

              ; *********************
e1dc            VDC_Program_X ; $e1dc
              ; *********************

e1dc bc f8 e2           LDY VDC_Init_Values,X
e1df 30 0d              BMI VPX_10
e1e1 e8                 INX
e1e2 bd f8 e2           LDA VDC_Init_Values,X
e1e5 e8                 INX
e1e6 8c 00 d6           STY VDC_Register
e1e9 8d 01 d6           STA VDC_Data
e1ec 10 ee              BPL VDC_Program_X
e1ee e8       VPX_10    INX
e1ef 60                 RTS ;Size   20 [VDC_Program_X]

              ; *****************
e1f0            Check_CBM ; $e1f0
              ; *****************

e1f0 a2 f5              LDX #<$fff5
e1f2 a0 ff              LDY #>$fff5
e1f4 86 c3              STX MEMUSS
e1f6 84 c4              STY MEMUSS+1
e1f8 a9 c3              LDA #MEMUSS
e1fa 8d aa 02           STA FETCH+8
e1fd a0 02              LDY #2
e1ff a2 7f    CCBM_10   LDX #$7f            ; RAM bank 1
e201 20 a2 02           JSR FETCH
e204 d9 c4 e2           CMP ROM_CBM,Y
e207 d0 1b              BNE SYSTEM
e209 88                 DEY
e20a 10 f3              BPL CCBM_10
e20c a2 f8              LDX #<V_SYSTEM
e20e a0 ff              LDY #>V_SYSTEM
e210 86 c3              STX MEMUSS
e212 84 c4              STY MEMUSS+1
e214 a0 01              LDY #1
e216 a2 7f    CCBM_20   LDX #$7f
e218 20 a2 02           JSR FETCH
e21b 99 02 00           STA BANK,Y
e21e 88                 DEY
e21f 10 f5              BPL CCBM_20
e221 6c 02 00           JMP (BANK)

              ; **************
e224            SYSTEM ; $e224
              ; **************

e224 a9 40              LDA #$40 ; '@'
e226 8d 00 ff           STA MMU_CR
e229 a9 24              LDA #<SYSTEM
e22b a0 e2              LDY #>SYSTEM
e22d 8d f8 ff           STA V_SYSTEM
e230 8c f9 ff           STY V_SYSTEM+1
e233 a2 03              LDX #3
e235 bd c3 e2 SYST_10   LDA ROM_CBM-1,X
e238 9d f4 ff           STA V_LOCK-2,X
e23b ca                 DEX
e23c d0 f7              BNE SYST_10
e23e 8e 00 ff           STX MMU_CR
e241 60                 RTS ;Size   30 [SYSTEM]

              ; **********************
e242            Test_Cartridge ; $e242
              ; **********************

e242 ad 05 d5           LDA MMU_MODE
e245 29 30              AND #%0011 0000 ; $30
e247 c9 30              CMP #%0011 0000 ; $30
e249 f0 20              BEQ TeCa_10         ; -> no C64 modules

              ; ***********
e24b            C64 ; $e24b
              ; ***********

e24b a9 e3              LDA #$e3
e24d 85 01              STA R8502
e24f a9 2f              LDA #$2f
e251 85 00              STA D8502
e253 a2 08              LDX #8
e255 bd 62 e2 C64_10    LDA ROM_GO64-1,X    ; copy reset code to RAM
e258 95 01              STA BANK-1,X
e25a ca                 DEX
e25b d0 f8              BNE C64_10
e25d 8e 30 d0           STX VIC_SPEED       ; set to 1 MHz
e260 4c 02 00           JMP BANK            ; jump to reset in C64 mode

              ; ****************
e263            ROM_GO64 ; $e263
              ; ****************

e263 a9 f7              LDA #$f7
e265 8d 05 d5           STA MMU_MODE
e268 6c fc ff           JMP (V_RESET)

              ; search for ROM modules (cartridges) and call their
              ; initialization code if present

e26b a2 03    TeCa_10   LDX #3              ; 4 banks
e26d 8e c0 0a           STX Module_Bank
e270 a9 00              LDA #0
e272 9d c1 0a TeCa_20   STA Module_Flags,X  ; clear module flags
e275 ca                 DEX
e276 10 fa              BPL TeCa_20         ; loop
e278 85 9e              STA PTR_LO          ; ROM address low
e27a a0 09    TeCa_30   LDY #9
e27c ae c0 0a           LDX Module_Bank     ; module bank counter 3 -> 0
e27f bd bc e2           LDA ROM_PAGES,X
e282 85 9f              STA PTR_HI          ; ROM address high
e284 bd c0 e2           LDA ROM_BANK,X
e287 85 02              STA BANK            ; ROM bank
e289 a6 02    TeCa_40   LDX BANK
e28b a9 9e              LDA #PTR_LO
e28d 20 d0 f7           JSR INDFET          ; LDA ROM,9 and ROM,8 and ROM,7
e290 d9 bd e2           CMP ROM_CBM-7,Y     ; check for "CBM" string
e293 d0 21              BNE TeCa_50         ; -> no valid string
e295 88                 DEY
e296 c0 07              CPY #7              ; last index
e298 b0 ef              BCS TeCa_40         ; loop
e29a a6 02              LDX BANK
e29c a9 9e              LDA #PTR_LO
e29e 20 d0 f7           JSR INDFET          ; LDA ROM,6 (flags)
e2a1 ae c0 0a           LDX Module_Bank
e2a4 9d c1 0a           STA Module_Flags,X  ; store ROM flags
e2a7 c9 01              CMP #1              ; init code present ?
e2a9 d0 0b              BNE TeCa_50         ; -> no
e2ab a5 9e              LDA PTR_LO
e2ad a4 9f              LDY PTR_HI
e2af 85 04              STA PC_LO           ; PC := ROM address
e2b1 84 03              STY PC_HI
e2b3 20 cd 02           JSR JSRFAR          ; call ROM initialization code
e2b6 ce c0 0a TeCa_50   DEC Module_Bank     ; next ROM module
e2b9 10 bf              BPL TeCa_30
e2bb 60                 RTS ;Size   89 [ROM_GO64]

              ; *****************
e2bc            ROM_PAGES ; $e2bc
              ; *****************

e2bc c0                 .BYTE >$c000
e2bd 80                 .BYTE >$8000
e2be c0                 .BYTE >$c000
e2bf 80                 .BYTE >$8000

              ; ****************
e2c0            ROM_BANK ; $e2c0
              ; ****************

e2c0 04                 .BYTE $04
e2c1 04                 .BYTE $04
e2c2 08                 .BYTE $08
e2c3 08                 .BYTE $08

              ; ***************
e2c4            ROM_CBM ; $e2c4
              ; ***************

e2c4 43 42 4d           .BYTE "CBM"         ; expansion ROM marker

              ; ***********************
e2c7            VIC_Init_Values ; $e2c7
              ; ***********************

e2c7 00                 .BYTE $00           ; D000 X coordinate sprite 0
e2c8 00                 .BYTE $00           ; D001 Y coordinate sprite 0
e2c9 00                 .BYTE $00           ; D002 X coordinate sprite 1
e2ca 00                 .BYTE $00           ; D003 Y coordinate sprite 1
e2cb 00                 .BYTE $00           ; D004 X coordinate sprite 2
e2cc 00                 .BYTE $00           ; D005 Y coordinate sprite 2
e2cd 00                 .BYTE $00           ; D006 X coordinate sprite 3
e2ce 00                 .BYTE $00           ; D007 Y coordinate sprite 3

e2cf 00                 .BYTE $00           ; D008 X coordinate sprite 4
e2d0 00                 .BYTE $00           ; D009 Y coordinate sprite 4
e2d1 00                 .BYTE $00           ; D00A X coordinate sprite 5
e2d2 00                 .BYTE $00           ; D00B Y coordinate sprite 5
e2d3 00                 .BYTE $00           ; D00C X coordinate sprite 6
e2d4 00                 .BYTE $00           ; D00D Y coordinate sprite 6
e2d5 00                 .BYTE $00           ; D00E X coordinate sprite 7
e2d6 00                 .BYTE $00           ; D00F Y coordinate sprite 7

e2d7 00                 .BYTE $00           ; D010 MSBs of X coordinates
e2d8 1b                 .BYTE $1b           ; D011 Control register 1
e2d9 ff                 .BYTE $ff           ; D012 VIC_RASTER counter
e2da 00                 .BYTE $00           ; D013 Light pen X
e2db 00                 .BYTE $00           ; D014 Light pen Y
e2dc 00                 .BYTE $00           ; D015 Sprite enabled
e2dd 08                 .BYTE $08           ; D016 Control register 2
e2de 00                 .BYTE $00           ; D017 Sprite Y expansion

e2df 14                 .BYTE $14           ; D018 Memory control
e2e0 ff                 .BYTE $ff           ; D019 Interrupt register
e2e1 01                 .BYTE $01           ; D01A Interrupt enabled
e2e2 00                 .BYTE $00           ; D01B Sprite priority
e2e3 00                 .BYTE $00           ; D01C Sprite multicolor
e2e4 00                 .BYTE $00           ; D01D Sprite X expansion
e2e5 00                 .BYTE $00           ; D01E Sprite sprite collision
e2e6 00                 .BYTE $00           ; D01F Sprite data   collision

e2e7 0d                 .BYTE $0d           ; D020 Border color
e2e8 0b                 .BYTE $0b           ; D021 Background  color 0
e2e9 01                 .BYTE $01           ; D022 Background  color 1
e2ea 02                 .BYTE $02           ; D023 Background  color 2
e2eb 03                 .BYTE $03           ; D024 Background  color 3
e2ec 01                 .BYTE $01           ; D025 Sprite multicolor 0
e2ed 02                 .BYTE $02           ; D026 Sprite multicolor 1
e2ee 00                 .BYTE $00           ; D027 Sprite color 0

e2ef 01                 .BYTE $01           ; D028 Sprite color 1
e2f0 02                 .BYTE $02           ; D029 Sprite color 2
e2f1 03                 .BYTE $03           ; D02A Sprite color 3
e2f2 04                 .BYTE $04           ; D02B Sprite color 4
e2f3 05                 .BYTE $05           ; D02C Sprite color 5
e2f4 06                 .BYTE $06           ; D02D Sprite color 6
e2f5 07                 .BYTE $07           ; D02E Sprite color 7
e2f6 ff                 .BYTE $ff           ; D02F Keyboard control

e2f7 fc                 .BYTE $fc           ; D030 Fast (2 MHz) or Slow (1 MHz)


              ; ***********************
e2f8            VDC_Init_Values ; $e2f8
              ; ***********************

e2f8 00 7e              .BYTE $00,$7e       ; 00 total   columns (126)
e2fa 01 50              .BYTE $01,$50       ; 01 visible columns ( 80)
e2fc 02 66              .BYTE $02,$66       ; 02 horizonatl sync
e2fe 03 49              .BYTE $03,$49       ; 03 VSYNC / HSYNC
e300 04 20              .BYTE $04,$20       ; 04 total rows (32)
e302 05 00              .BYTE $05,$00       ; 05 rows adjust
e304 06 19              .BYTE $06,$19       ; 06 visible rows (25)
e306 07 1d              .BYTE $07,$1d       ; 07 VSYNC position

e308 08 00              .BYTE $08,$00       ; 08 Interlace
e30a 09 07              .BYTE $09,$07       ; 09 scanlines - 1 per character
e30c 0a 20              .BYTE $0a,$20       ; 0A cursor mode / start
e30e 0b 07              .BYTE $0b,$07       ; 0B cursor end
e310 0c 00              .BYTE $0c,$00       ; 0C character RAM start high
e312 0d 00              .BYTE $0d,$00       ; 0D character RAM start low
e314 0e 00              .BYTE $0e,$00       ; 0E cursor position high
e316 0f 00              .BYTE $0f,$00       ; 0F cursor position low

e318 14 08              .BYTE $14,$08       ; 14 attribute RAM start high
e31a 15 00              .BYTE $15,$00       ; 15 attribute RAM start low
e31c 17 08              .BYTE $17,$08       ; 17 scanlines - 1 per character

e31e 18 20              .BYTE $18,$20       ; 18 block copy / blink frequency
e320 19 40              .BYTE $19,$40       ; 19 text / graphics mode
e322 1a f0              .BYTE $1a,$f0       ; 1A foreground / background color
e324 1b 00              .BYTE $1b,$00       ; 1B row step value
e326 1c 20              .BYTE $1c,$20       ; 1C character generator page
e328 1d 07              .BYTE $1d,$07       ; 1D underline count

e32a 22 7d              .BYTE $22,$7d       ; 22 left margin
e32c 23 64              .BYTE $23,$64       ; 23 right margin
e32e 24 05              .BYTE $24,$05       ; 24 refresh cycles

e330 16 78              .BYTE $16,$78       ; 16 character width
e332 ff                 .BYTE $ff           ; end of table marker

e333          VDC_Init_NTSC

e333 19 47              .BYTE $19,$47       ; 19 text / graphics mode
e335 ff                 .BYTE $ff           ; end of table marker

e336          VDC_Init_PAL

e336 04 26              .BYTE $04,$26       ; 04 total rows (38)
e338 07 20              .BYTE $07,$20       ; 07 VSYNC position
e33a ff                 .BYTE $ff           ; end of table marker

              ; ************
e33b            TALK ; $e33b
              ; ************

e33b 09 40              ORA #%0100 0000     ; $40 set TALK bit
e33d 2c                 BIT                 ; skip next instruction

              ; *************
e33e            LISTN ; $e33e
              ; *************

e33e 09 20              ORA #%0010 0000     ; $20 set LISTEN bit
e340 20 ec e7           JSR RS232_Stop

              ; *******************
e343            Talk_Listen ; $e343
              ; *******************

e343 48                 PHA                 ; push primary address
e344 24 94              BIT C3PO            ; test IEC buffer flag
e346 10 0a              BPL TaLi_10         ; -> buffer empty
e348 38                 SEC
e349 66 a3              ROR R2D2            ; set
e34b 20 8c e3           JSR IEC_Send_Byte
e34e 46 94              LSR C3PO
e350 46 a3              LSR R2D2
e352 68       TaLi_10   PLA                 ; pull primary address
e353 85 95              STA BSOUR
e355 20 73 e5           JSR Disable_IRQ_and_Sprites
e358 20 57 e5           JSR IEC_Data_Out_High
e35b ad 00 dd           LDA CIA2_PRA
e35e 29 08              AND #%0000 1000     ; $08
e360 d0 12              BNE TaLi_30
e362 20 d6 e5           JSR IEC_Fast_Output
e365 a9 ff              LDA #$ff
e367 8d 0c dc           STA CIA1_SDR        ; send $ff
e36a 20 bc e5           JSR IEC_Wait_Ready
e36d 8a                 TXA
e36e a2 14              LDX #$14
e370 ca       TaLi_20   DEX
e371 d0 fd              BNE TaLi_20
e373 aa                 TAX
e374 ad 00 dd TaLi_30   LDA CIA2_PRA
e377 09 08              ORA #%0000 1000 ; $08
e379 8d 00 dd           STA CIA2_PRA

              ; *************************
e37c            IEC_Send_With_ATN ; $e37c
              ; *************************

e37c 20 73 e5           JSR Disable_IRQ_and_Sprites
e37f 20 4e e5           JSR IEC_Clock_Low
e382 20 57 e5           JSR IEC_Data_Out_High
e385 8a                 TXA
e386 a2 b8              LDX #$b8            ; wait 1 millisecond
e388 ca       ISWA_10   DEX
e389 d0 fd              BNE ISWA_10
e38b aa                 TAX

              ; *********************
e38c            IEC_Send_Byte ; $e38c
              ; *********************

e38c 20 73 e5           JSR Disable_IRQ_and_Sprites
e38f 20 57 e5           JSR IEC_Data_Out_High
e392 20 69 e5           JSR IEC_Clock_Data_In
e395 90 03              BCC ISB_10          ; -> DATA IN high
e397 4c 28 e4           JMP ISB_75          ; -> device not present
e39a 2c 0d dc ISB_10    BIT CIA1_ICR        ; reset IRQ flag
e39d 20 45 e5           JSR IEC_Clock_High
e3a0 24 a3              BIT R2D2
e3a2 10 0a              BPL ISB_25
e3a4 20 69 e5 ISB_15    JSR IEC_Clock_Data_In
e3a7 90 fb              BCC ISB_15          ; wait for DATA IN low
e3a9 20 69 e5 ISB_20    JSR IEC_Clock_Data_In
e3ac b0 fb              BCS ISB_20          ; wait for DATA IN high
e3ae ad 00 dd ISB_25    LDA CIA2_PRA
e3b1 cd 00 dd           CMP CIA2_PRA
e3b4 d0 f8              BNE ISB_25          ; -> debounce
e3b6 48                 PHA                 ; push
e3b7 ad 0d dc           LDA CIA1_ICR
e3ba 29 08              AND #%0000 1000     ; $08 test IRQ IEC port
e3bc f0 05              BEQ ISB_30          ; -> slow IEC device
e3be a9 c0              LDA #$c0            ; fast IEC and burst mode enabled
e3c0 8d 1c 0a           STA Fast_IEC        ; fast IEC device
e3c3 68       ISB_30    PLA
e3c4 10 e8              BPL ISB_25          ; -> DATA IN high
e3c6 09 10              ORA #%0001 0000     ; $10 DATA OUT low
e3c8 8d 00 dd           STA CIA2_PRA
e3cb 29 08              AND #%0000 1000     ; $08 ATN out
e3cd d0 13              BNE ISB_35          ; -> ATN low
e3cf 2c 1c 0a           BIT Fast_IEC
e3d2 10 0e              BPL ISB_35          ; -> slow IEC

              ; fast IEC send

e3d4 20 d6 e5           JSR IEC_Fast_Output
e3d7 a5 95              LDA BSOUR
e3d9 8d 0c dc           STA CIA1_SDR        ; store data in register
e3dc 20 bc e5           JSR IEC_Wait_Ready  ; wait until sent
e3df 4c 12 e4           JMP ISB_55          ; -> finish

              ; slow IEC send

e3e2 a9 08    ISB_35    LDA #8              ; send 8 bits
e3e4 85 a5              STA CNTDN
e3e6 ad 00 dd ISB_40    LDA CIA2_PRA
e3e9 cd 00 dd           CMP CIA2_PRA
e3ec d0 f8              BNE ISB_40            ; -> debounce
e3ee 0a                 ASL A                 ; DATA IN -> carry
e3ef 90 34              BCC ISB_70            ; -> error: timeout
e3f1 66 95              ROR BSOUR             ; next data bit -> carry
e3f3 b0 05              BCS ISB_45
e3f5 20 60 e5           JSR IEC_Data_Out_Low  ;    send '0' bit
e3f8 d0 03              BNE ISB_50            ; always
e3fa 20 57 e5 ISB_45    JSR IEC_Data_Out_High ; -> send '1' bit
e3fd 20 45 e5 ISB_50    JSR IEC_Clock_High
e400 ea                 NOP                   ; wait 8 cycles
e401 ea                 NOP
e402 ea                 NOP
e403 ea                 NOP
e404 ad 00 dd           LDA CIA2_PRA
e407 29 df              AND #%1101 1111       ; $df DATA  OUT high
e409 09 10              ORA #%0001 0000       ; $10 CLOCK OUT low
e40b 8d 00 dd           STA CIA2_PRA
e40e c6 a5              DEC CNTDN             ; next bit
e410 d0 d4              BNE ISB_40            ; loop

e412 8a       ISB_55    TXA
e413 48                 PHA                 ; save X
e414 a2 22              LDX #$22            ; timeout counter
e416 20 69 e5 ISB_60    JSR IEC_Clock_Data_In
e419 b0 05              BCS ISB_65          ; -> wait for DATA IN
e41b 68                 PLA
e41c aa                 TAX                 ; restore X
e41d 4c 9f e5           JMP Enable_IRQ_and_Sprites ; exit

e420 ca       ISB_65    DEX
e421 d0 f3              BNE ISB_60
e423 68                 PLA
e424 aa                 TAX                 ; restore X
e425 a9 03    ISB_70    LDA #3              ; timeout
e427 2c                 BIT
e428 a9 80    ISB_75    LDA #$80            ; device not present

              ; *****************
e42a            IEC_Error ; $e42a
              ; *****************

e42a 48                 PHA
e42b ad 1c 0a           LDA Fast_IEC
e42e 29 7f              AND #%0111 1111     ; $7f clear fast IEC flag
e430 8d 1c 0a           STA Fast_IEC
e433 68                 PLA
e434 20 57 f7           JSR SETST
e437 20 9f e5           JSR Enable_IRQ_and_Sprites
e43a 18                 CLC
e43b 4c 35 e5           JMP UNLSN_10

              ; *************
e43e            ACPTR ; $e43e
              ; *************

e43e 20 73 e5           JSR Disable_IRQ_and_Sprites
e441 a9 00              LDA #0
e443 85 a5              STA CNTDN           ; retry counter
e445 2c 0d dc           BIT CIA1_ICR        ; reset IRQ's
e448 8a                 TXA
e449 48                 PHA                 ; save X
e44a 20 45 e5           JSR IEC_Clock_High
e44d 20 69 e5 ACPTR_10  JSR IEC_Clock_Data_In
e450 10 fb              BPL ACPTR_10        ; wait for CLOCK IN high
e452 a2 0d    ACPTR_15  LDX #13             ; wait max. 0.25 msec
e454 ad 00 dd           LDA CIA2_PRA
e457 29 df              AND #%1101 1111     ; $df DATA OUT high
e459 8d 00 dd           STA CIA2_PRA
e45c ad 00 dd ACPTR_20  LDA CIA2_PRA
e45f cd 00 dd           CMP CIA2_PRA
e462 d0 f8              BNE ACPTR_20        ; -> debounce
e464 0a                 ASL A               ; CLOCK IN -> bit 7
e465 10 1d              BPL ACPTR_30        ; -> OK
e467 ca                 DEX
e468 d0 f2              BNE ACPTR_20        ; -> wait for CLOCK_IN
e46a a5 a5              LDA CNTDN
e46c d0 0f              BNE ACPTR_25        ; -> retry failed again
e46e 20 60 e5           JSR IEC_Data_Out_Low
e471 20 45 e5           JSR IEC_Clock_High
e474 a9 40              LDA #$40            ; EOF
e476 20 57 f7           JSR SETST           ; set EOF flag
e479 e6 a5              INC CNTDN           ; set retry flag
e47b d0 d5              BNE ACPTR_15        ; always

e47d 68       ACPTR_25  PLA                 ; read failed
e47e aa                 TAX                 ; restore X
e47f a9 02              LDA #2              ; timeout reading
e481 4c 2a e4           JMP IEC_Error

e484 a2 08    ACPTR_30  LDX #8 ; 8 bits to read
e486 ad 0d dc ACPTR_35  LDA CIA1_ICR
e489 29 08              AND #%0000 1000     ; $08 fast IEC ?
e48b d0 28              BNE ACPTR_60        ; -> fast IEC device

              ; slow IEC read

e48d ad 00 dd ACPTR_40  LDA CIA2_PRA
e490 cd 00 dd           CMP CIA2_PRA
e493 d0 f8              BNE ACPTR_40        ; -> debounce
e495 0a                 ASL A               ; CLOCK IN -> bit 7
e496 10 ee              BPL ACPTR_35        ; -> OK
e498 66 a4    ACPTR_45  ROR BSOUR1          ; store bit in BSOUR1
e49a ad 00 dd ACPTR_50  LDA CIA2_PRA
e49d cd 00 dd           CMP CIA2_PRA
e4a0 d0 f8              BNE ACPTR_50        ; -> debounce
e4a2 0a                 ASL A               ; CLOCK IN -> bit 7
e4a3 30 f5              BMI ACPTR_50        ; -> wait for CLOCK IN high
e4a5 ca                 DEX
e4a6 f0 17              BEQ ACPTR_65        ; -> all 8 bits read
e4a8 ad 00 dd ACPTR_55  LDA CIA2_PRA
e4ab cd 00 dd           CMP CIA2_PRA
e4ae d0 f8              BNE ACPTR_55        ; -> debounce
e4b0 0a                 ASL A               ; CLOCK IN -> bit 7
e4b1 10 f5              BPL ACPTR_55        ; -> wait for CLOCK IN low
e4b3 30 e3              BMI ACPTR_45        ; always

              ; fast IEC read

e4b5 ad 0c dc ACPTR_60  LDA CIA1_SDR        ; data register
e4b8 85 a4              STA BSOUR1          ; received byte
e4ba a9 c0              LDA #$c0            ; fast serial and burst mode enabled
e4bc 8d 1c 0a           STA Fast_IEC        ; store flags

              ; fast & slow common code

e4bf 68       ACPTR_65  PLA
e4c0 aa                 TAX                 ; restore X
e4c1 20 60 e5           JSR IEC_Data_Out_Low
e4c4 24 90              BIT STATUS
e4c6 50 03              BVC ACPTR_70        ; -> branch on EOI = 0
e4c8 20 38 e5           JSR IEC_CLOCK_DATA_OUT_High
e4cb 20 9f e5 ACPTR_70  JSR Enable_IRQ_and_Sprites
e4ce a5 a4              LDA BSOUR1          ; return result in A
e4d0 18                 CLC                 ; clear carry -> OK
e4d1 60                 RTS ;Size  148 [ACPTR]

              ; *************
e4d2            SECND ; $e4d2
              ; *************

e4d2 85 95              STA BSOUR
e4d4 20 7c e3           JSR IEC_Send_With_ATN

              ; ************************
e4d7            IEC_ATN_OUT_High ; $e4d7
              ; ************************

e4d7 ad 00 dd           LDA CIA2_PRA
e4da 29 f7              AND #%1111 0111     ; $f7 ATN OUT high
e4dc 8d 00 dd           STA CIA2_PRA
e4df 60                 RTS ;Size    9 [IEC_ATN_OUT_High]

              ; ************
e4e0            TKSA ; $e4e0
              ; ************

e4e0 85 95              STA BSOUR
e4e2 20 7c e3           JSR IEC_Send_With_ATN
e4e5 24 90              BIT STATUS
e4e7 30 4c              BMI UNLSN_10           ; branch on device not present

              ; *************************
e4e9            IEC_ATN_High_Exit ; $e4e9
              ; *************************

e4e9 20 73 e5           JSR Disable_IRQ_and_Sprites
e4ec 20 60 e5           JSR IEC_Data_Out_Low
e4ef 20 d7 e4           JSR IEC_ATN_OUT_High
e4f2 20 45 e5           JSR IEC_Clock_High
e4f5 ad 00 dd IAHE_10   LDA CIA2_PRA
e4f8 cd 00 dd           CMP CIA2_PRA
e4fb d0 f8              BNE IAHE_10
e4fd 0a                 ASL A
e4fe 30 f5              BMI IAHE_10
e500 4c 9f e5           JMP Enable_IRQ_and_Sprites

              ; *************
e503            CIOUT ; $e503
              ; *************

e503 24 94              BIT C3PO            ; data in buffer ?
e505 30 05              BMI CIOUT_10        ; -> yes
e507 38                 SEC
e508 66 94              ROR C3PO            ; set flag: data in buffer
e50a d0 05              BNE CIOUT_20        ; always

e50c 48       CIOUT_10  PHA                 ; save new data byte
e50d 20 8c e3           JSR IEC_Send_Byte   ; send buffered byte
e510 68                 PLA                 ; restore new data byte
e511 85 95    CIOUT_20  STA BSOUR           ; store in buffer
e513 18                 CLC                 ; OK
e514 60                 RTS ;Size   18 [CIOUT]

              ; *************
e515            UNTLK ; $e515
              ; *************

e515 20 73 e5           JSR Disable_IRQ_and_Sprites
e518 20 4e e5           JSR IEC_Clock_Low
e51b ad 00 dd           LDA CIA2_PRA
e51e 09 08              ORA #%0000 1000     ; $08
e520 8d 00 dd           STA CIA2_PRA
e523 a9 5f              LDA #$5f            ; UNTALK value
e525 2c                 BIT

              ; *************
e526            UNLSN ; $e526
              ; *************

e526 a9 3f              LDA #$3f            ; UNLISTEN value
e528 48                 PHA
e529 ad 1c 0a           LDA Fast_IEC
e52c 29 7f              AND #%0111 1111     ; $7f clear fast IEC flag
e52e 8d 1c 0a           STA Fast_IEC
e531 68                 PLA
e532 20 43 e3           JSR Talk_Listen
e535 20 d7 e4 UNLSN_10  JSR IEC_ATN_OUT_High

              ; *******************************
e538            IEC_CLOCK_DATA_OUT_High ; $e538
              ; *******************************

e538 8a                 TXA
e539 a2 0a              LDX #10
e53b ca       ICDO_10   DEX
e53c d0 fd              BNE ICDO_10
e53e aa                 TAX
e53f 20 45 e5           JSR IEC_Clock_High
e542 4c 57 e5           JMP IEC_Data_Out_High

              ; **********************
e545            IEC_Clock_High ; $e545
              ; **********************

e545 ad 00 dd           LDA CIA2_PRA
e548 29 ef              AND #%1110 1111 ; $ef
e54a 8d 00 dd           STA CIA2_PRA
e54d 60                 RTS ;Size    9 [IEC_Clock_High]

              ; *********************
e54e            IEC_Clock_Low ; $e54e
              ; *********************

e54e ad 00 dd           LDA CIA2_PRA
e551 09 10              ORA #%0001 0000 ; $10
e553 8d 00 dd           STA CIA2_PRA
e556 60                 RTS ;Size    9 [IEC_Clock_Low]

              ; *************************
e557            IEC_Data_Out_High ; $e557
              ; *************************

e557 ad 00 dd           LDA CIA2_PRA
e55a 29 df              AND #%1101 1111 ; $df
e55c 8d 00 dd           STA CIA2_PRA
e55f 60                 RTS ;Size    9 [IEC_Data_Out_High]

              ; ************************
e560            IEC_Data_Out_Low ; $e560
              ; ************************

e560 ad 00 dd           LDA CIA2_PRA
e563 09 20              ORA #%0010 0000 ; $20
e565 8d 00 dd           STA CIA2_PRA
e568 60                 RTS ;Size    9 [IEC_Data_Out_Low]

              ; **************************
e569            IEC_Clock_Data_In ; $e569
              ; **************************

e569 ad 00 dd           LDA CIA2_PRA
e56c cd 00 dd           CMP CIA2_PRA
e56f d0 f8              BNE IEC_Clock_Data_In
e571 0a                 ASL A
e572 60                 RTS ;Size   10 [IEC_Clock_Data_In]

              ; *******************************
e573            Disable_IRQ_and_Sprites ; $e573
              ; *******************************

e573 78                 SEI

              ; ***********************
e574            Disable_Sprites ; $e574
              ; ***********************

e574 2c 3a 0a           BIT SPRITES
e577 30 25              BMI DiSp_Ret
e579 2c 37 0a           BIT VSH_SPEED
e57c 30 20              BMI DiSp_Ret
e57e ad 30 d0           LDA VIC_SPEED
e581 8d 37 0a           STA VSH_SPEED
e584 ad 15 d0           LDA VIC_SPR_ENA
e587 8d 38 0a           STA VSH_SPR_ENA
e58a a9 00              LDA #0
e58c 8d 15 d0           STA VIC_SPR_ENA
e58f 8d 30 d0           STA VIC_SPEED
e592 ad 38 0a           LDA VSH_SPR_ENA
e595 f0 07              BEQ DiSp_Ret
e597 8a                 TXA
e598 a2 00              LDX #0
e59a ca       DiSp_10   DEX ; wait loop
e59b d0 fd              BNE DiSp_10
e59d aa                 TAX
e59e 60       DiSp_Ret  RTS ;Size   43 [Disable_Sprites]

              ; ******************************
e59f            Enable_IRQ_and_Sprites ; $e59f
              ; ******************************

e59f 2c 3a 0a           BIT SPRITES
e5a2 30 16              BMI EnSp_10
e5a4 2c 37 0a           BIT VSH_SPEED
e5a7 10 11              BPL EnSp_10
e5a9 ad 38 0a           LDA VSH_SPR_ENA
e5ac 8d 15 d0           STA VIC_SPR_ENA
e5af ad 37 0a           LDA VSH_SPEED
e5b2 8d 30 d0           STA VIC_SPEED
e5b5 a9 00              LDA #0
e5b7 8d 37 0a           STA VSH_SPEED
e5ba 58       EnSp_10   CLI
e5bb 60                 RTS ;Size   29 [Enable_IRQ_and_Sprites]

              ; **********************
e5bc            IEC_Wait_Ready ; $e5bc
              ; **********************

e5bc ad 0d dc           LDA CIA1_ICR
e5bf 29 08              AND #%0000 1000 ; $08
e5c1 f0 f9              BEQ IEC_Wait_Ready

              ; **********************
e5c3            IEC_Fast_Input ; $e5c3
              ; **********************

e5c3 ad 0e dc           LDA CIA1_CRA
e5c6 29 80              AND #%1000 0000 ; $80 save TOD flag
e5c8 09 08              ORA #%0000 1000 ; $08 set ONE SHOT flag
e5ca 8d 0e dc           STA CIA1_CRA
e5cd ad 05 d5           LDA MMU_MODE
e5d0 29 f7              AND #%1111 0111 ; $f7 fast serial direction input
e5d2 8d 05 d5           STA MMU_MODE
e5d5 60                 RTS ;Size   19 [IEC_Fast_Input]

              ; ***********************
e5d6            IEC_Fast_Output ; $e5d6
              ; ***********************

e5d6 ad 05 d5           LDA MMU_MODE
e5d9 09 08              ORA #%0000 1000     ; $08 Fast IEC direction output
e5db 8d 05 d5           STA MMU_MODE
e5de a9 7f              LDA #$7f
e5e0 8d 0d dc           STA CIA1_ICR        ; disable IRQ's
e5e3 a9 00              LDA #0
e5e5 8d 05 dc           STA CIA1_TAHI
e5e8 a9 04              LDA #4
e5ea 8d 04 dc           STA CIA1_TALO       ; set timer A to 4 (PHI2)
e5ed ad 0e dc           LDA CIA1_CRA
e5f0 29 80              AND #%1000 0000     ; $80
e5f2 09 55              ORA #%0101 0101     ; $55

              ; .1.. .... IEC port output mode
              ; ..0. .... timer A counts PHI2
              ; ...1 .... FORCE LOAD
              ; .... 0... continuos
              ; .... .1.. toggle
              ; .... ..0. PB6 normal
              ; .... ...1 start timer A

e5f4 8d 0e dc           STA CIA1_CRA
e5f7 2c 0d dc           BIT CIA1_ICR        ; reset IRQ flags
e5fa 60                 RTS ;Size   37 [IEC_Fast_Output]

              ; **************
e5fb            SPINIO ; $e5fb
              ; **************

e5fb 90 c6              BCC IEC_Fast_Input
e5fd b0 d7              BCS IEC_Fast_Output

              ; ***************
              ; RS232 interface
              ; ***************

              ; *******************
e5ff            RS_NMI_Send ; $e5ff
              ; *******************

e5ff a5 b4              LDA RS_Count        ; # of data bits to send
e601 f0 47              BEQ RS_Send_Next_Byte
e603 30 3f              BMI RNS_90          ; -> send STOP bit
e605 46 b6              LSR RS_Out          ; next bit to carry
e607 a2 00              LDX #0              ; $00 for bit 0
e609 90 01              BCC RNS_10
e60b ca                 DEX                 ; $ff for bit 1
e60c 8a       RNS_10    TXA
e60d 45 bd              EOR RS_Parity       ; update parity
e60f 85 bd              STA RS_Parity       ; store  parity
e611 c6 b4              DEC RS_Count
e613 f0 06              BEQ RNS_30          ; -> parity check
e615 8a       RNS_20    TXA
e616 29 04              AND #%0000 0100     ; $04 bit 2 = transfer position
e618 85 b5              STA RS_Next
e61a 60                 RTS ;Size   28 [RS_NMI_Send]

              ; 765. .... parity
              ; ..0. .... NO
              ; 001. .... ODD
              ; 011. .... EVEN
              ; 101. .... MARK
              ; 111. .... SPACE

e61b a9 20    RNS_30    LDA #%0010 0000     ; $20 ODD parity
e61d 2c 11 0a           BIT RS_Command
e620 f0 14              BEQ RNS_60          ; -> NO parity
e622 30 1c              BMI RNS_80          ; -> MARK or SPACE parity
e624 70 14              BVS RNS_70          ; -> EVEN parity
e626 a5 bd              LDA RS_Parity
e628 d0 01              BNE RNS_50
e62a ca       RNS_40    DEX
e62b c6 b4    RNS_50    DEC RS_Count
e62d ad 10 0a           LDA RS_Control
e630 10 e3              BPL RNS_20
e632 c6 b4              DEC RS_Count
e634 d0 df              BNE RNS_20
e636 e6 b4    RNS_60    INC RS_Count
e638 d0 f0              BNE RNS_40          ; always

e63a a5 bd    RNS_70    LDA RS_Parity       ; EVEN parity
e63c f0 ed              BEQ RNS_50          ; -> is EVEN  -> send 0
e63e d0 ea              BNE RNS_40          ; -> is ODD   -> send 1

e640 70 e9    RNS_80    BVS RNS_50          ; -> is MARK  -> send 1
e642 50 e6              BVC RNS_40          ; -> is SPACE -> send 0

e644 e6 b4    RNS_90    INC RS_Count        ; RS_Count = 0
e646 a2 ff              LDX #$ff            ; -> send 1 STOP bit
e648 d0 cb              BNE RNS_20          ; always

              ; *************************
e64a            RS_Send_Next_Byte ; $e64a
              ; *************************

e64a ad 11 0a           LDA RS_Command
e64d 4a                 LSR A
e64e 90 07              BCC RSNB_10         ; -> 3-wire communication
e650 2c 01 dd           BIT CIA2_PRB
e653 10 1d              BPL RSNB_20         ; -> error: missing DSR
e655 50 1e              BVC RSNB_30         ; -> error: missing CTS
e657 a9 00    RSNB_10   LDA #0
e659 85 bd              STA RS_Parity
e65b 85 b5              STA RS_Next
e65d ae 15 0a           LDX RS_Bits
e660 86 b4              STX RS_Count        ; initialize bit counter
e662 ac 1a 0a           LDY RS_OBP_Beg
e665 cc 1b 0a           CPY RS_OBP_End      ; compare buffer pointer
e668 f0 13              BEQ RSNB_40         ; -> buffer is empty
e66a b1 ca              LDA (ROBUF),Y       ; fetch next byte from buffer
e66c 85 b6              STA RS_Out          ; store it into transmitter buffer
e66e ee 1a 0a           INC RS_OBP_Beg      ; update buffer pointer
e671 60                 RTS ;Size   40 [RS_Send_Next_Byte]

e672 a9 40    RSNB_20   LDA #$40            ; missing DSR
e674 2c                 BIT
e675 a9 10    RSNB_30   LDA #16             ; missing CTS
e677 0d 14 0a           ORA RS_Status
e67a 8d 14 0a           STA RS_Status       ; set error bit
e67d a9 01    RSNB_40   LDA #1              ; start TIMER A

              ; **************************
e67f            Set_CIA2_Interrupt ; $e67f
              ; **************************

e67f 8d 0d dd           STA CIA2_ICR
e682 4d 0f 0a           EOR RS_Enable
e685 09 80              ORA #%1000 0000 ; $80
e687 8d 0f 0a           STA RS_Enable
e68a 8d 0d dd           STA CIA2_ICR
e68d 60                 RTS ;Size   15 [Set_CIA2_Interrupt]

              ; ***********************
e68e            RS_Set_Databits ; $e68e
              ; ***********************

e68e a2 09              LDX #9              ; databits + 1
e690 a9 20              LDA #%0010 0000     ; check bit 5
e692 2c 10 0a           BIT RS_Control

              ; .00. .... 8 bits
              ; .01. .... 7 bits
              ; .10. .... 6 bits
              ; .11. .... 5 bits

e695 f0 01              BEQ RSSD_10
e697 ca                 DEX                 ; X = 8
e698 50 02    RSSD_10   BVC RSSD_Ret
e69a ca                 DEX
e69b ca                 DEX
e69c 60       RSSD_Ret  RTS ;Size   15 [RS_Set_Databits]

              ; **********************
e69d            RS_NMI_Receive ; $e69d
              ; **********************

e69d a6 a9              LDX RSI_Start
e69f d0 33              BNE RSNR_30         ; -> get start bit
e6a1 c6 a8              DEC RSI_Count
e6a3 f0 3a              BEQ RSNR_35         ; -> byte complete
e6a5 30 0d              BMI RSNR_20         ; -> get stop bit
e6a7 a5 a7              LDA RSI_In_Bit
e6a9 45 ab              EOR RSI_Parity
e6ab 85 ab              STA RSI_Parity      ; update parity
e6ad 46 a7              LSR RSI_In_Bit
e6af 66 aa              ROR RSI_Data        ; rotate into data byte
e6b1 60       RSNR_10   RTS ;Size   21 [RS_NMI_Receive]

e6b2 c6 a8    RSNR_15   DEC RSI_Count
e6b4 a5 a7    RSNR_20   LDA RSI_In_Bit      ; stop bit
e6b6 f0 6b              BEQ RSNR_70         ; -> BREAK or error
e6b8 ad 10 0a           LDA RS_Control
e6bb 0a                 ASL A               ; C=1 -> 2 stop bits
e6bc a9 01              LDA #1              ; # of stop bits
e6be 65 a8              ADC RSI_Count
e6c0 d0 ef              BNE RSNR_10         ; -> return

              ; setup for next receiption

e6c2 a9 90    RSNR_25   LDA #$90            ; IRQ enable & RS232
e6c4 8d 0d dd           STA CIA2_ICR
e6c7 0d 0f 0a           ORA RS_Enable
e6ca 8d 0f 0a           STA RS_Enable
e6cd 85 a9              STA RSI_Start
e6cf a9 02              LDA #2
e6d1 4c 7f e6           JMP Set_CIA2_Interrupt

              ; get start bit

e6d4 a5 a7    RSNR_30   LDA RSI_In_Bit
e6d6 d0 ea              BNE RSNR_25         ; -> no start bit: reinitialize
e6d8 85 a9              STA RSI_Start
e6da a9 01              LDA #1
e6dc 85 ab              STA RSI_Parity
e6de 60                 RTS ;Size   66 [RS_NMI_Receive]

              ; byte complete

e6df ac 18 0a RSNR_35   LDY RS_IBP_End
e6e2 c8                 INY
e6e3 cc 19 0a           CPY RS_IBP_Beg      ; compare buffer pointers
e6e6 f0 2a              BEQ RSNR_55         ; -> error: input buffer overflow
e6e8 8c 18 0a           STY RS_IBP_End
e6eb 88                 DEY
e6ec a5 aa              LDA RSI_Data        ; received byte
e6ee ae 15 0a           LDX RS_Bits
e6f1 e0 09    RSNR_40   CPX #9
e6f3 f0 04              BEQ RSNR_45         ; -> byte in correct position
e6f5 4a                 LSR A               ; bitlengths < 8 need more shifts
e6f6 e8                 INX
e6f7 d0 f8              BNE RSNR_40

e6f9 91 c8    RSNR_45   STA (RIBUF),Y       ; store received byte in buffer
e6fb a9 20              LDA #$20
e6fd 2c 11 0a           BIT RS_Command      ; test parity
e700 f0 b0              BEQ RSNR_15         ; -> NO parity
e702 30 ad              BMI RSNR_10         ; -> fixed parity: ignore
e704 a5 a7              LDA RSI_In_Bit
e706 45 ab              EOR RSI_Parity
e708 f0 03              BEQ RSNR_50         ; -> check ODD parity
e70a 70 a5              BVS RSNR_10         ; -> EVEN parity -> OK
e70c 2c                 BIT
e70d 50 a2    RSNR_50   BVC RSNR_10         ; -> ODD parity -> OK
e70f a9 01              LDA #1              ; error: parity
e711 2c                 BIT
e712 a9 04    RSNR_55   LDA #4              ; error: input buffer overflow
e714 2c                 BIT
e715 a9 80    RSNR_60   LDA #$80            ; error: BREAK
e717 2c                 BIT
e718 a9 02    RSNR_65   LDA #2              ; error: frame
e71a 0d 14 0a           ORA RS_Status
e71d 8d 14 0a           STA RS_Status
e720 4c c2 e6           JMP RSNR_25

e723 a5 aa    RSNR_70   LDA RSI_Data        ; BREAK or frame error
e725 d0 f1              BNE RSNR_65
e727 f0 ec              BEQ RSNR_60

              ; ****************
e729            RS_CKOUT ; $e729
              ; ****************

e729 85 9a              STA DFLTO           ; output channel = 2
e72b ad 11 0a           LDA RS_Command
e72e 4a                 LSR A
e72f 90 29              BCC RSDM_10         ; -> 3-wire handshake
e731 a9 02              LDA #2
e733 2c 01 dd           BIT CIA2_PRB
e736 10 1d              BPL RS_DSR_Missing
e738 d0 20              BNE RSDM_10         ; always

e73a ad 0f 0a RSCO_10   LDA RS_Enable
e73d 29 02              AND #%0000 0010     ; $02 TIMER B
e73f d0 f9              BNE RSCO_10
e741 2c 01 dd RSCO_20   BIT CIA2_PRB
e744 70 fb              BVS RSCO_20
e746 ad 01 dd           LDA CIA2_PRB
e749 09 02              ORA #%0000 0010 ; $02
e74b 8d 01 dd           STA CIA2_PRB
e74e 2c 01 dd RSCO_30   BIT CIA2_PRB
e751 70 07              BVS RSDM_10
e753 30 f9              BMI RSCO_30

              ; **********************
e755            RS_DSR_Missing ; $e755
              ; **********************

e755 a9 40              LDA #$40
e757 8d 14 0a           STA RS_Status
e75a 18       RSDM_10   CLC
e75b 60                 RTS ;Size    7 [RS_DSR_Missing]

e75c 20 70 e7 RSW_00    JSR RS_Start_Baud

              ; ****************
e75f            RS_Write ; $e75f
              ; ****************

e75f ac 1b 0a           LDY RS_OBP_End
e762 c8                 INY
e763 cc 1a 0a           CPY RS_OBP_Beg      ; compare buffer pointer
e766 f0 f4              BEQ RSW_00          ; -> buffer full: wait
e768 8c 1b 0a           STY RS_OBP_End
e76b 88                 DEY
e76c a5 9e              LDA PTR_LO
e76e 91 ca              STA (ROBUF),Y       ; store byte into send buffer

              ; *********************
e770            RS_Start_Baud ; $e770
              ; *********************

e770 ad 0f 0a           LDA RS_Enable
e773 4a                 LSR A
e774 b0 1e              BCS RSSB_Ret        ; RS 232 output is active
e776 a9 10              LDA #16
e778 8d 0e dd           STA CIA2_CRA        ;
e77b ad 16 0a           LDA RS_Timer_Lo
e77e 8d 04 dd           STA CIA2_TALO
e781 ad 17 0a           LDA RS_Timer_Hi
e784 8d 05 dd           STA CIA2_TAHI
e787 a9 81              LDA #$81
e789 20 7f e6           JSR Set_CIA2_Interrupt
e78c 20 4a e6           JSR RS_Send_Next_Byte
e78f a9 11              LDA #$11            ; clear RS232 received & TIMER A
e791 8d 0e dd           STA CIA2_CRA
e794 60       RSSB_Ret  RTS ;Size   37 [RS_Start_Baud]

              ; ****************
e795            RS_CHKIN ; $e795
              ; ****************

e795 85 99              STA DFLTN           ; default input channel = 2
e797 ad 11 0a           LDA RS_Command
e79a 4a                 LSR A
e79b 90 28              BCC RSCI_40         ; -> 3-wire handshake
e79d 29 08              AND #%0000 1000     ; $08
e79f f0 24              BEQ RSCI_40         ; -> full duplex
e7a1 a9 02              LDA #2
e7a3 2c 01 dd           BIT CIA2_PRB
e7a6 10 ad              BPL RS_DSR_Missing
e7a8 f0 22              BEQ RSCI_50         ; RTS missing
e7aa ad 0f 0a RSCI_10   LDA RS_Enable
e7ad 4a                 LSR A
e7ae b0 fa              BCS RSCI_10         ; wait send completion
e7b0 ad 01 dd           LDA CIA2_PRB
e7b3 29 fd              AND #%1111 1101     ; $fd RTS request to send
e7b5 8d 01 dd           STA CIA2_PRB
e7b8 ad 01 dd RSCI_20   LDA CIA2_PRB
e7bb 29 04              AND #%0000 0100     ; $04
e7bd f0 f9              BEQ RSCI_20
e7bf a9 90    RSCI_30   LDA #$90
e7c1 18                 CLC
e7c2 4c 7f e6           JMP Set_CIA2_Interrupt

e7c5 ad 0f 0a RSCI_40   LDA RS_Enable
e7c8 29 12              AND #%0001 0010 ; $12
e7ca f0 f3              BEQ RSCI_30
e7cc 18       RSCI_50   CLC
e7cd 60                 RTS ;Size   57 [RS_CHKIN]

              ; ***************
e7ce            RS_Read ; $e7ce
              ; ***************

e7ce ad 14 0a           LDA RS_Status
e7d1 ac 19 0a           LDY RS_IBP_Beg
e7d4 cc 18 0a           CPY RS_IBP_End
e7d7 f0 0b              BEQ RSR_10          ; -> buffer empty
e7d9 29 f7              AND #%1111 0111 ; $f7
e7db 8d 14 0a           STA RS_Status
e7de b1 c8              LDA (RIBUF),Y       ; load byte from buffer
e7e0 ee 19 0a           INC RS_IBP_Beg
e7e3 60                 RTS ;Size   22 [RS_Read]
e7e4 09 08    RSR_10    ORA #%0000 1000 ; $08
e7e6 8d 14 0a           STA RS_Status
e7e9 a9 00              LDA #0
e7eb 60                 RTS ;Size   30 [RS_Read]

              ; ******************
e7ec            RS232_Stop ; $e7ec
              ; ******************

e7ec 48                 PHA
e7ed ad 0f 0a           LDA RS_Enable
e7f0 f0 11              BEQ RSS_20
e7f2 ad 0f 0a RSS_10    LDA RS_Enable
e7f5 29 03              AND #%0000 0011 ; $03
e7f7 d0 f9              BNE RSS_10
e7f9 a9 10              LDA #16
e7fb 8d 0d dd           STA CIA2_ICR
e7fe a9 00              LDA #0
e800 8d 0f 0a           STA RS_Enable
e803 68       RSS_20    PLA
e804 60                 RTS ;Size   25 [RS232_Stop]

              ; *******************
e805            RS_NMI_Main ; $e805
              ; *******************

e805 98                 TYA                 ; A = CIA2_ICR
e806 2d 0f 0a           AND RS_Enable
e809 aa                 TAX
e80a 29 01              AND #%0000 0001
e80c f0 28              BEQ RSNM_30         ; -> IRQ TIMER B
e80e ad 00 dd           LDA CIA2_PRA
e811 29 fb              AND #%1111 1011     ; $fb
e813 05 b5              ORA RS_Next         ; next bit to send at pos 2
e815 8d 00 dd           STA CIA2_PRA        ; sed next bit
e818 ad 0f 0a           LDA RS_Enable
e81b 8d 0d dd           STA CIA2_ICR
e81e 8a                 TXA
e81f 29 12              AND #%0001 0010     ; RS232 input & TIMER B
e821 f0 0d              BEQ RSNM_20
e823 29 02              AND #%0000 0010     ; TIMER B
e825 f0 06              BEQ RSNM_10         ; -> no TIMER B IRQ
e827 20 78 e8           JSR RS_NMI_Get_Bit
e82a 4c 30 e8           JMP RSNM_20
e82d 20 a9 e8 RSNM_10   JSR RS_NMI_Put_Bit
e830 20 ff e5 RSNM_20   JSR RS_NMI_Send
e833 4c 49 e8           JMP RSNM_50
e836 8a       RSNM_30   TXA
e837 29 02              AND #%0000 0010 ; $02
e839 f0 06              BEQ RSNM_40
e83b 20 78 e8           JSR RS_NMI_Get_Bit
e83e 4c 49 e8           JMP RSNM_50
e841 8a       RSNM_40   TXA
e842 29 10              AND #%0001 0000 ; $10
e844 f0 03              BEQ RSNM_50
e846 20 a9 e8           JSR RS_NMI_Put_Bit
e849 ad 0f 0a RSNM_50   LDA RS_Enable
e84c 8d 0d dd           STA CIA2_ICR
e84f 60                 RTS ;Size   75 [RS_NMI_Main]

              ; ********************
e850            RS_Baud_NTSC ; $e850
              ; ********************

e850 c1 27              .WORD $27c1 ; 10177    50   Baud  1.027.700
e852 3e 1a              .WORD $1a3e ;  6718    75   Baud  1.022.700
e854 c5 11              .WORD $11c5 ;  4549   110   Baud  1.022.780
e856 74 0e              .WORD $0e74 ;  3700   134.5 Baud  1.022.200
e858 ed 0c              .WORD $0ced ;  3309   150   Baud  1.022.700
e85a 45 06              .WORD $0645 ;  1605   300   Baud  1.023.000
e85c f0 02              .WORD $02f0 ;   752   600   Baud  1.022.400
e85e 46 01              .WORD $0146 ;   326  1200   Baud  1.022.400
e860 b8 00              .WORD $00b8 ;   184  1800   Baud  1.022.400
e862 71 00              .WORD $0071 ;   113  2400   Baud  1.022.400

              ; *******************
e864            RS_Baud_PAL ; $e864
              ; *******************

e864 19 26              .WORD $2619 ;  9753    50   Baud
e866 44 19              .WORD $1944 ;  6468    75   Baud
e868 1a 11              .WORD $111a ;  4378   110   Baud
e86a e8 0d              .WORD $0de8 ;  3560   134.5 Baud
e86c 70 0c              .WORD $0c70 ;  3184   150   Baud
e86e 06 06              .WORD $0606 ;  1542   300   Baud
e870 d1 02              .WORD $02d1 ;   721   600   Baud
e872 37 01              .WORD $0137 ;   311  1200   Baud
e874 ae 00              .WORD $00ae ;   174  1800   Baud
e876 69 00              .WORD $0069 ;   105  2400   Baud

              ; **********************
e878            RS_NMI_Get_Bit ; $e878
              ; **********************

e878 ad 01 dd           LDA CIA2_PRB
e87b 29 01              AND #1
e87d 85 a7              STA RSI_In_Bit      ; received data bit
e87f ad 06 dd           LDA CIA2_TBLO       ; reprogram TIMER B latch
e882 e9 28              SBC #40             ; B = B - 40 + baudtime
e884 6d 16 0a           ADC RS_Timer_Lo
e887 8d 06 dd           STA CIA2_TBLO
e88a ad 07 dd           LDA CIA2_TBHI
e88d 6d 17 0a           ADC RS_Timer_Hi
e890 8d 07 dd           STA CIA2_TBHI
e893 a9 11              LDA #$11
e895 8d 0f dd           STA CIA2_CRB        ; start TIMER B from latch
e898 ad 0f 0a           LDA RS_Enable
e89b 8d 0d dd           STA CIA2_ICR        ; enable TIMER interrupt
e89e a9 ff              LDA #$ff
e8a0 8d 06 dd           STA CIA2_TBLO       ; set TIMER B latch to maximum
e8a3 8d 07 dd           STA CIA2_TBHI
e8a6 4c 9d e6           JMP RS_NMI_Receive

              ; **********************
e8a9            RS_NMI_Put_Bit ; $e8a9
              ; **********************

e8a9 ad 12 0a           LDA RS_Baudrate     ; set baudrate
e8ac 8d 06 dd           STA CIA2_TBLO
e8af ad 13 0a           LDA RS_Baudrate+1
e8b2 8d 07 dd           STA CIA2_TBHI
e8b5 a9 11              LDA #$11
e8b7 8d 0f dd           STA CIA2_CRB        ; start TIMER B from latch
e8ba a9 12              LDA #$12
e8bc 4d 0f 0a           EOR RS_Enable
e8bf 8d 0f 0a           STA RS_Enable
e8c2 a9 ff              LDA #$ff
e8c4 8d 06 dd           STA CIA2_TBLO       ; set TIMER B latch to maximum
e8c7 8d 07 dd           STA CIA2_TBHI
e8ca ae 15 0a           LDX RS_Bits
e8cd 86 a8              STX RSI_Count
e8cf 60                 RTS ;Size   39 [RS_NMI_Put_Bit]

              ; *************
              ; TAPE routines
              ; *************

              ;   On Commodore computers, the streams consist of four kinds of symbols
              ;   that denote different kinds of low-to-high-to-low transitions on the
              ;   read or write signals of the Commodore tape interface.
              ;
              ;   1) A break in the communications, or a pulse with very long cycle time.
              ;
              ;   2) A short pulse, whose cycle time typically ranges from 296 to 424
              ;      microseconds, depending on the computer model.
              ;
              ;   3) A medium-length pulse, whose cycle time typically ranges from
              ;      440 to 576 microseconds, depending on the computer model.
              ;
              ;   4) A long pulse, whose cycle time typically ranges from 600 to 744
              ;      microseconds, depending on the computer model.
              ;
              ; The actual interpretation of the serial data takes a little more work to
              ; explain. The typical ROM tape loader (and the turbo loaders) will
              ; initialize a timer with a specified value and start it counting down. If
              ; either the tape data changes or the timer runs out, an IRQ will occur. The
              ; loader will determine which condition caused the IRQ. If the tape data
              ; changed before the timer ran out, we have a short pulse, or a "0" bit. If
              ; the timer ran out first, we have a long pulse, or a "1" bit. Doing this
              ; continuously and we decode the entire file.

              ; ************************
e8d0            TAPE_Find_Header ; $e8d0
              ; ************************

e8d0 a5 93              LDA K_VERCK         ; get load/verify flag
e8d2 48                 PHA                 ; save load/verify flag
e8d3 20 f2 e9           JSR TAPE_Read_Block
e8d6 68                 PLA                 ; restore load/verify flag
e8d7 85 93              STA K_VERCK         ; save load/verify flag
e8d9 b0 3d              BCS TAFH_Ret        ; exit on error
e8db a0 00              LDY #0
e8dd b1 b2              LDA (TAPE1),Y       ; read first byte from tape buffer
e8df c9 05              CMP #5              ; EOT (5) = End Of Tape
e8e1 f0 34              BEQ TAFH_60         ; exit if end of the tape
e8e3 c9 01              CMP #1              ; header of a relocatable BASIC program ?
e8e5 f0 08              BEQ TAFH_10         ; branch if program file header
e8e7 c9 03              CMP #3              ; header of a non relocatable program
e8e9 f0 04              BEQ TAFH_10         ; branch if program file header
e8eb c9 04              CMP #4              ; header sequential data file
e8ed d0 e1              BNE TAPE_Find_Header; continue search

e8ef aa       TAFH_10   TAX                 ; X = header type
e8f0 24 9d              BIT MSGFLG          ; get message mode flag
e8f2 10 22              BPL TAFH_50         ; exit if control messages off
e8f4 a0 63              LDY #Msg_Found      ; $63 FOUND
e8f6 20 22 f7           JSR System_Message

e8f9 a0 05              LDY #5              ; index to tape filename
e8fb b1 b2    TAFH_20   LDA (TAPE1),Y       ; get filename char
e8fd 20 d2 ff           JSR K_BSOUT         ; print it
e900 c8                 INY
e901 c0 15              CPY #21             ; length = 16 from Y=5 to 20
e903 d0 f6              BNE TAFH_20         ; loop

e905 a5 a1              LDA JIFFY_CLOCK+1   ; load medium byte of jiffy clock
e907 69 02              ADC #2              ; add 2 (2 * 256 / 60 sec = 8.5 sec)
e909 a4 91    TAFH_30   LDY STKEY           ; STOP key flag
e90b c8                 INY
e90c d0 04              BNE TAFH_40         ; -> STKEY was not $ff : key pressed
e90e c5 a1              CMP JIFFY_CLOCK+1   ; waittime of 8.5 seconds reached ?
e910 d0 f7              BNE TAFH_30         ; -> stay in STOP key wait loop

e912 c0 f0    TAFH_40   CPY #$f0            ; SPACE key ?
e914 f0 ba              BEQ TAPE_Find_Header; -> skip this file and continue
e916 18       TAFH_50   CLC                 ; set OK flag
e917 88       TAFH_60   DEY                 ; compensate INY: Y = STKEY or $ff
e918 60       TAFH_Ret  RTS                 ; return ;Size   73 [TAPE_Find_Header]

              ; *********************************
e919            TAPE_Write_Program_Header ; $e919
              ; *********************************

e919 85 9e              STA PTR_LO          ; save header type
e91b 20 80 e9           JSR TAPE_XY_Check
e91e 90 5f              BCC TWPH_Ret        ; don't write to ZP or stack
e920 a5 c2              LDA STAH            ; push I/O start address
e922 48                 PHA
e923 a5 c1              LDA STAL
e925 48                 PHA
e926 a5 af              LDA EAH             ; push tape end address
e928 48                 PHA
e929 a5 ae              LDA EAL
e92b 48                 PHA
e92c a0 bf              LDY #$bf            ; 191 = index to header end
e92e a9 20              LDA #' '
e930 91 b2    TWPH_10   STA (TAPE1),Y       ; blank buffer
e932 88                 DEY
e933 d0 fb              BNE TWPH_10
e935 a5 9e              LDA PTR_LO          ; header type
e937 91 b2              STA (TAPE1),Y       ; write to header 0
e939 c8                 INY
e93a a5 c1              LDA STAL            ; start address low
e93c 91 b2              STA (TAPE1),Y       ; write to header 1
e93e c8                 INY
e93f a5 c2              LDA STAH            ; start address high
e941 91 b2              STA (TAPE1),Y       ; write to header 2
e943 c8                 INY
e944 a5 ae              LDA EAL             ; end address low
e946 91 b2              STA (TAPE1),Y       ; write to header 3
e948 c8                 INY
e949 a5 af              LDA EAH             ; end address high
e94b 91 b2              STA (TAPE1),Y       ; write to header 4
e94d c8                 INY
e94e 84 9f              STY PTR_HI          ; save index
e950 a0 00              LDY #0
e952 84 9e              STY PTR_LO          ; clear name index
e954 a4 9e    TWPH_20   LDY PTR_LO          ; filename index
e956 c4 b7              CPY FNLEN           ; compare with file name length
e958 f0 0d              BEQ TWPH_30         ; exit loop if all done
e95a 20 ae f7           JSR Get_Filename_Char
e95d a4 9f              LDY PTR_HI          ; get buffer index
e95f 91 b2              STA (TAPE1),Y       ; save file name byte to buffer
e961 e6 9e              INC PTR_LO          ; increment file name index
e963 e6 9f              INC PTR_HI          ; increment tape buffer index
e965 d0 ed              BNE TWPH_20         ; loop, branch always
e967 20 87 e9 TWPH_30   JSR TAPE_SAL_EAL
e96a a9 69              LDA #$69            ; set write lead cycle count
e96c 85 ab              STA RSI_Parity      ; save write lead cycle count
e96e 20 1c ea           JSR TAPE_Write
e971 a8                 TAY
e972 68                 PLA
e973 85 ae              STA EAL             ; restore load end address
e975 68                 PLA
e976 85 af              STA EAH
e978 68                 PLA
e979 85 c1              STA STAL            ; restore load start address
e97b 68                 PLA
e97c 85 c2              STA STAH
e97e 98                 TYA
e97f 60       TWPH_Ret  RTS ;Size  103 [TAPE_Write_Program_Header]

              ; *********************
e980            TAPE_XY_Check ; $e980
              ; *********************

e980 a6 b2              LDX TAPE1
e982 a4 b3              LDY TAPE1+1
e984 c0 02              CPY #2
e986 60                 RTS ;Size    7 [TAPE_XY_Check]

              ; ********************
e987            TAPE_SAL_EAL ; $e987
              ; ********************

e987 20 80 e9           JSR TAPE_XY_Check
e98a 8a                 TXA
e98b 85 c1              STA STAL            ; SAL = TAPE1
e98d 18                 CLC
e98e 69 c0              ADC #$c0
e990 85 ae              STA EAL             ; EAL = TAPE1 + 192
e992 98                 TYA
e993 85 c2              STA STAH
e995 69 00              ADC #0
e997 85 af              STA EAH
e999 60                 RTS ;Size   19 [TAPE_SAL_EAL]

              ; **********************
e99a            TAPE_Find_File ; $e99a
              ; **********************

e99a 20 d0 e8           JSR TAPE_Find_Header
e99d b0 1e              BCS TAFF_Ret        ; -> end of tape: not found
e99f a0 05              LDY #5              ; start of filename
e9a1 84 9f              STY PTR_HI          ; buffered filename index
e9a3 a0 00              LDY #0
e9a5 84 9e              STY PTR_LO          ; fined filename index
e9a7 c4 b7    TAFF_10   CPY FNLEN
e9a9 f0 11              BEQ TAFF_20         ; -> OK found
e9ab 20 ae f7           JSR Get_Filename_Char
e9ae a4 9f              LDY PTR_HI
e9b0 d1 b2              CMP (TAPE1),Y
e9b2 d0 e6              BNE TAPE_Find_File  ; -> skip this file, try next one
e9b4 e6 9e              INC PTR_LO
e9b6 e6 9f              INC PTR_HI
e9b8 a4 9e              LDY PTR_LO
e9ba d0 eb              BNE TAFF_10         ; always
e9bc 18       TAFF_20   CLC                 ; success
e9bd 60       TAFF_Ret  RTS ;Size   36 [TAPE_Find_File]

              ; **************************
e9be            TAPE_Advance_BUFPT ; $e9be
              ; **************************

e9be 20 80 e9           JSR TAPE_XY_Check
e9c1 e6 a6              INC BUFPT
e9c3 a4 a6              LDY BUFPT
e9c5 c0 c0              CPY #$c0
e9c7 60                 RTS ;Size   10 [TAPE_Advance_BUFPT]

              ; **************************
e9c8            TAPE_Wait_for_Play ; $e9c8
              ; **************************

e9c8 20 df e9           JSR TAPE_Play_Key
e9cb f0 1a              BEQ TAPK_10
e9cd a0 1b              LDY #Msg_Play
e9cf 20 22 f7 TWFP_10   JSR System_Message
e9d2 20 8f ea TWFP_20   JSR TAPE_Stop_Key
e9d5 20 df e9           JSR TAPE_Play_Key
e9d8 d0 f8              BNE TWFP_20
e9da a0 6a              LDY #Msg_OK
e9dc 4c 22 f7           JMP System_Message

              ; *********************
e9df            TAPE_Play_Key ; $e9df
              ; *********************

e9df a9 10              LDA #16
e9e1 24 01              BIT R8502
e9e3 d0 02              BNE TAPK_10
e9e5 24 01              BIT R8502
e9e7 18       TAPK_10   CLC
e9e8 60                 RTS ;Size   10 [TAPE_Play_Key]

              ; ****************************
e9e9            TAPE_Wait_For_Record ; $e9e9
              ; ****************************

e9e9 20 df e9           JSR TAPE_Play_Key
e9ec f0 f9              BEQ TAPK_10
e9ee a0 2e              LDY #Msg_Record
e9f0 d0 dd              BNE TWFP_10

              ; ***********************
e9f2            TAPE_Read_Block ; $e9f2
              ; ***********************

e9f2 a9 00              LDA #0
e9f4 85 90              STA STATUS
e9f6 85 93              STA K_VERCK
e9f8 20 87 e9           JSR TAPE_SAL_EAL

              ; *****************
e9fb            TAPE_Read ; $e9fb
              ; *****************

e9fb 20 c8 e9           JSR TAPE_Wait_for_Play
e9fe b0 1f              BCS TAWB_10
ea00 78                 SEI
ea01 a9 00              LDA #0
ea03 85 aa              STA RSI_Data
ea05 85 b4              STA RS_Count
ea07 85 b0              STA CMP0
ea09 85 9e              STA PTR_LO
ea0b 85 9f              STA PTR_HI
ea0d 85 9c              STA DPSW
ea0f a9 90              LDA #$90            ; STA CIA1_IC
ea11 a2 0e              LDX #14             ; Install TAPE_IRQ_Read as IRQ routine
ea13 d0 11              BNE TAPE_Setup_IRQ  ; always

              ; *************************
ea15            TAPE_Write_Buffer ; $ea15
              ; *************************

ea15 20 87 e9           JSR TAPE_SAL_EAL

              ; **************************
ea18            TAPE_Write_Program ; $ea18
              ; **************************

ea18 a9 14              LDA #$14
ea1a 85 ab              STA RSI_Parity

              ; ******************
ea1c            TAPE_Write ; $ea1c
              ; ******************

ea1c 20 e9 e9           JSR TAPE_Wait_For_Record
ea1f b0 7a    TAWB_10   BCS TASK_10
ea21 78                 SEI
ea22 a9 82              LDA #$82
ea24 a2 08              LDX #8              ; Install TAPE_IRQ_Leader as IRQ routine

              ; **********************
ea26            TAPE_Setup_IRQ ; $ea26
              ; **********************

ea26 a0 00              LDY #0
ea28 8c 1a d0           STY VIC_IRQ_ENA
ea2b 88                 DEY
ea2c 8c 19 d0           STY VIC_IRQ_REG
ea2f 8d 0d dc           STA CIA1_ICR
ea32 ad 0e dc           LDA CIA1_CRA
ea35 09 19              ORA #%0001 1001 ; $19
ea37 8d 0f dc           STA CIA1_CRB
ea3a 29 91              AND #%1001 0001 ; $91
ea3c 8d 0b 0a           STA CASTON
ea3f 20 ec e7           JSR RS232_Stop
ea42 ad 11 d0           LDA VIC_Ctrl_1
ea45 a8                 TAY
ea46 29 10              AND #%0001 0000 ; $10
ea48 8d 39 0a           STA VSH_Ctrl_1
ea4b 98                 TYA
ea4c 29 6f              AND #%0110 1111 ; $6f
ea4e 8d 11 d0           STA VIC_Ctrl_1
ea51 20 74 e5           JSR Disable_Sprites
ea54 ad 14 03           LDA IIRQ            ; save old IRQ vector
ea57 8d 09 0a           STA IRQTMP
ea5a ad 15 03           LDA IIRQ+1
ea5d 8d 0a 0a           STA IRQTMP+1
ea60 20 9b ee           JSR TAPE_Switch_IRQ
ea63 a9 02              LDA #2
ea65 85 be              STA FSBLK
ea67 20 5a ed           JSR TAPE_Init_Byte
ea6a a5 01              LDA R8502
ea6c 29 1f              AND #%0001 1111 ; $1f
ea6e 85 01              STA R8502
ea70 85 c0              STA CAS1
ea72 a2 ff              LDX #$ff            ; wait 0.3 sec for tape start
ea74 a0 ff    TASI_10   LDY #$ff
ea76 88       TASI_20   DEY
ea77 d0 fd              BNE TASI_20
ea79 ca                 DEX
ea7a d0 f8              BNE TASI_10
ea7c 58                 CLI
ea7d ad 0a 0a TASI_30   LDA IRQTMP+1
ea80 cd 15 03           CMP IIRQ+1
ea83 18                 CLC
ea84 f0 15              BEQ TASK_10
ea86 20 8f ea           JSR TAPE_Stop_Key
ea89 20 3d f6           JSR Check_STOP_Key
ea8c 4c 7d ea           JMP TASI_30         ; wait until tape I/O finished

              ; *********************
ea8f            TAPE_Stop_Key ; $ea8f
              ; ********************

ea8f 20 e1 ff           JSR K_STOP
ea92 18                 CLC
ea93 d0 0b              BNE TASK_Ret
ea95 20 57 ee           JSR TAPE_Stop_IO
ea98 38                 SEC
ea99 68                 PLA                 ; remove return address
ea9a 68                 PLA
ea9b a9 00    TASK_10   LDA #0
ea9d 8d 0a 0a           STA IRQTMP+1        ; flag STOP
eaa0 60       TASK_Ret  RTS ;Size   18 [TAPE_Stop_Key]

              ; **********************
eaa1            TAPE_Set_Timer ; $eaa1
              ; **********************

eaa1 86 b1              STX CMP1
eaa3 a5 b0              LDA CMP0
eaa5 0a                 ASL A
eaa6 0a                 ASL A
eaa7 18                 CLC
eaa8 65 b0              ADC CMP0
eaaa 18                 CLC
eaab 65 b1              ADC CMP1
eaad 85 b1              STA CMP1
eaaf a9 00              LDA #0
eab1 24 b0              BIT CMP0
eab3 30 01              BMI TASS_10
eab5 2a                 ROL A
eab6 06 b1    TASS_10   ASL CMP1
eab8 2a                 ROL A
eab9 06 b1              ASL CMP1
eabb 2a                 ROL A
eabc aa                 TAX
eabd ad 06 dc TASS_20   LDA CIA1_TBLO
eac0 c9 16              CMP #$16
eac2 90 f9              BCC TASS_20
eac4 65 b1              ADC CMP1
eac6 8d 04 dc           STA CIA1_TALO
eac9 8a                 TXA
eaca 6d 07 dc           ADC CIA1_TBHI
eacd 8d 05 dc           STA CIA1_TAHI
ead0 ad 0b 0a           LDA CASTON
ead3 8d 0e dc           STA CIA1_CRA
ead6 8d 0d 0a           STA STUPID
ead9 ad 0d dc           LDA CIA1_ICR
eadc 29 10              AND #%0001 0000 ; $10
eade f0 09              BEQ TASS_30
eae0 a9 ea              LDA #$ea
eae2 48                 PHA
eae3 a9 e9              LDA #$e9
eae5 48                 PHA
eae6 4c c8 ee           JMP TAPE_Sim_IRQ
eae9 58       TASS_30   CLI
eaea 60                 RTS ;Size   74 [TAPE_Set_Timer]

              ; *********************
eaeb            TAPE_IRQ_Read ; $eaeb
              ; *********************

eaeb ae 07 dc           LDX CIA1_TBHI
eaee a0 ff              LDY #$ff
eaf0 98                 TYA
eaf1 ed 06 dc           SBC CIA1_TBLO
eaf4 ec 07 dc           CPX CIA1_TBHI
eaf7 d0 f2              BNE TAPE_IRQ_Read
eaf9 86 b1              STX CMP1
eafb aa                 TAX
eafc 8c 06 dc           STY CIA1_TBLO
eaff 8c 07 dc           STY CIA1_TBHI
eb02 a9 19              LDA #$19
eb04 8d 0f dc           STA CIA1_CRB
eb07 ad 0d dc           LDA CIA1_ICR
eb0a 8d 0c 0a           STA KIKA26
eb0d 98                 TYA
eb0e e5 b1              SBC CMP1
eb10 86 b1              STX CMP1
eb12 4a                 LSR A
eb13 66 b1              ROR CMP1
eb15 4a                 LSR A
eb16 66 b1              ROR CMP1
eb18 a5 b0              LDA CMP0
eb1a 18                 CLC
eb1b 69 3c              ADC #$3c
eb1d c5 b1              CMP CMP1
eb1f b0 4a              BCS TIR_22
eb21 a6 9c              LDX DPSW
eb23 f0 03              BEQ TIR_10
eb25 4c 1f ec           JMP TIR_50
eb28 a6 a3    TIR_10    LDX R2D2
eb2a 30 1b              BMI TIR_12
eb2c a2 00              LDX #0
eb2e 69 30              ADC #$30
eb30 65 b0              ADC CMP0
eb32 c5 b1              CMP CMP1
eb34 b0 1c              BCS TIR_16
eb36 e8                 INX
eb37 69 26              ADC #$26
eb39 65 b0              ADC CMP0
eb3b c5 b1              CMP CMP1
eb3d b0 17              BCS TIR_18
eb3f 69 2c              ADC #$2c
eb41 65 b0              ADC CMP0
eb43 c5 b1              CMP CMP1
eb45 90 03              BCC TIR_14
eb47 4c cf eb TIR_12    JMP TIR_38
eb4a a5 b4    TIR_14    LDA RS_Count
eb4c f0 1d              BEQ TIR_22
eb4e 85 a8              STA RSI_Count
eb50 d0 19              BNE TIR_22
eb52 e6 a9    TIR_16    INC RSI_Start
eb54 b0 02              BCS TIR_20
eb56 c6 a9    TIR_18    DEC RSI_Start
eb58 38       TIR_20    SEC
eb59 e9 13              SBC #$13
eb5b e5 b1              SBC CMP1
eb5d 65 92              ADC SVXT
eb5f 85 92              STA SVXT
eb61 a5 a4              LDA BSOUR1
eb63 49 01              EOR #%0000 0001 ; $01
eb65 85 a4              STA BSOUR1
eb67 f0 2b              BEQ TIR_30
eb69 86 c5              STX DATA
eb6b a5 b4    TIR_22    LDA RS_Count
eb6d f0 22              BEQ TIR_28
eb6f ad 0c 0a           LDA KIKA26
eb72 29 01              AND #%0000 0001 ; $01
eb74 d0 05              BNE TIR_24
eb76 ad 0d 0a           LDA STUPID
eb79 d0 16              BNE TIR_28
eb7b a9 00    TIR_24    LDA #0
eb7d 85 a4              STA BSOUR1
eb7f 8d 0d 0a           STA STUPID
eb82 a5 a3              LDA R2D2
eb84 10 30              BPL TIR_36
eb86 30 bf              BMI TIR_12
eb88 a2 a6    TIR_26    LDX #$a6
eb8a 20 a1 ea           JSR TAPE_Set_Timer
eb8d a5 9b              LDA PRTY
eb8f d0 b9              BNE TIR_14
eb91 4c 33 ff TIR_28    JMP IRQ_Exit
eb94 a5 92    TIR_30    LDA SVXT
eb96 f0 07              BEQ TIR_34
eb98 30 03              BMI TIR_32
eb9a c6 b0              DEC CMP0
eb9c 2c                 BIT
eb9d e6 b0    TIR_32    INC CMP0
eb9f a9 00    TIR_34    LDA #0
eba1 85 92              STA SVXT
eba3 e4 c5              CPX DATA
eba5 d0 0f              BNE TIR_36
eba7 8a                 TXA
eba8 d0 a0              BNE TIR_14
ebaa a5 a9              LDA RSI_Start
ebac 30 bd              BMI TIR_22
ebae c9 10              CMP #16
ebb0 90 b9              BCC TIR_22
ebb2 85 96              STA SYNO
ebb4 b0 b5              BCS TIR_22
ebb6 8a       TIR_36    TXA
ebb7 45 9b              EOR PRTY
ebb9 85 9b              STA PRTY
ebbb a5 b4              LDA RS_Count
ebbd f0 d2              BEQ TIR_28
ebbf c6 a3              DEC R2D2
ebc1 30 c5              BMI TIR_26
ebc3 46 c5              LSR DATA
ebc5 66 bf              ROR DRIVE
ebc7 a2 da              LDX #$da
ebc9 20 a1 ea           JSR TAPE_Set_Timer
ebcc 4c 33 ff           JMP IRQ_Exit
ebcf a5 96    TIR_38    LDA SYNO
ebd1 f0 04              BEQ TIR_40
ebd3 a5 b4              LDA RS_Count
ebd5 f0 07              BEQ TIR_42
ebd7 a5 a3    TIR_40    LDA R2D2
ebd9 30 03              BMI TIR_42
ebdb 4c 56 eb           JMP TIR_18
ebde 46 b1    TIR_42    LSR CMP1
ebe0 a9 93              LDA #$93
ebe2 38                 SEC
ebe3 e5 b1              SBC CMP1
ebe5 65 b0              ADC CMP0
ebe7 0a                 ASL A
ebe8 aa                 TAX
ebe9 20 a1 ea           JSR TAPE_Set_Timer
ebec e6 9c              INC DPSW
ebee a5 b4              LDA RS_Count
ebf0 d0 11              BNE TIR_44
ebf2 a5 96              LDA SYNO
ebf4 f0 26              BEQ TIR_48
ebf6 85 a8              STA RSI_Count
ebf8 a9 00              LDA #0
ebfa 85 96              STA SYNO
ebfc a9 81              LDA #$81
ebfe 8d 0d dc           STA CIA1_ICR
ec01 85 b4              STA RS_Count
ec03 a5 96    TIR_44    LDA SYNO
ec05 85 b5              STA RS_Next
ec07 f0 09              BEQ TIR_46
ec09 a9 00              LDA #0
ec0b 85 b4              STA RS_Count
ec0d a9 01              LDA #1
ec0f 8d 0d dc           STA CIA1_ICR
ec12 a5 bf    TIR_46    LDA DRIVE
ec14 85 bd              STA RS_Parity
ec16 a5 a8              LDA RSI_Count
ec18 05 a9              ORA RSI_Start
ec1a 85 b6              STA RS_Out
ec1c 4c 33 ff TIR_48    JMP IRQ_Exit
ec1f 20 5a ed TIR_50    JSR TAPE_Init_Byte
ec22 85 9c              STA DPSW
ec24 a2 da              LDX #$da
ec26 20 a1 ea           JSR TAPE_Set_Timer
ec29 a5 be              LDA FSBLK
ec2b f0 02              BEQ TIR_52
ec2d 85 a7              STA RSI_In_Bit
ec2f a9 0f    TIR_52    LDA #15
ec31 24 aa              BIT RSI_Data
ec33 10 17              BPL TIR_58
ec35 a5 b5              LDA RS_Next
ec37 d0 0c              BNE TIR_54
ec39 a6 be              LDX FSBLK
ec3b ca                 DEX
ec3c d0 0b              BNE TIR_56
ec3e a9 08              LDA #8
ec40 20 57 f7           JSR SETST
ec43 d0 04              BNE TIR_56
ec45 a9 00    TIR_54    LDA #0
ec47 85 aa              STA RSI_Data
ec49 4c 33 ff TIR_56    JMP IRQ_Exit
ec4c 70 31    TIR_58    BVS TIR_66
ec4e d0 18              BNE TIR_62
ec50 a5 b5              LDA RS_Next
ec52 d0 f5              BNE TIR_56
ec54 a5 b6              LDA RS_Out
ec56 d0 f1              BNE TIR_56
ec58 a5 a7              LDA RSI_In_Bit
ec5a 4a                 LSR A
ec5b a5 bd              LDA RS_Parity
ec5d 30 03              BMI TIR_60
ec5f 90 18              BCC TIR_64
ec61 18                 CLC
ec62 b0 15    TIR_60    BCS TIR_64
ec64 29 0f              AND #%0000 1111 ; $0f
ec66 85 aa              STA RSI_Data
ec68 c6 aa    TIR_62    DEC RSI_Data
ec6a d0 dd              BNE TIR_56
ec6c a9 40              LDA #$40 ; '@'
ec6e 85 aa              STA RSI_Data
ec70 20 51 ed           JSR STAL_To_SAL
ec73 a9 00              LDA #0
ec75 85 ab              STA RSI_Parity
ec77 f0 d0              BEQ TIR_56
ec79 a9 80    TIR_64    LDA #$80
ec7b 85 aa              STA RSI_Data
ec7d d0 ca              BNE TIR_56
ec7f a5 b5    TIR_66    LDA RS_Next
ec81 f0 0a              BEQ TIR_68
ec83 a9 04              LDA #4
ec85 20 57 f7           JSR SETST
ec88 a9 00              LDA #0
ec8a 4c 0c ed           JMP TIR_86
ec8d 20 b7 ee TIR_68    JSR Check_IO_End
ec90 90 03              BCC TIR_70
ec92 4c 0a ed           JMP TIR_84
ec95 a6 a7    TIR_70    LDX RSI_In_Bit
ec97 ca                 DEX
ec98 f0 2e              BEQ TIR_74
ec9a a5 93              LDA K_VERCK
ec9c f0 0d              BEQ TIR_72
ec9e a0 00              LDY #0
eca0 20 cc f7           JSR LDA_IND_SAL
eca3 c5 bd              CMP RS_Parity
eca5 f0 04              BEQ TIR_72
eca7 a9 01              LDA #1
eca9 85 b6              STA RS_Out
ecab a5 b6    TIR_72    LDA RS_Out
ecad f0 4c              BEQ TIR_80
ecaf a2 3d              LDX #$3d ; '='
ecb1 e4 9e              CPX PTR_LO
ecb3 90 3f              BCC TIR_78
ecb5 a6 9e              LDX PTR_LO
ecb7 a5 ad              LDA SAH
ecb9 9d 01 01           STA STACK+1,X
ecbc a5 ac              LDA SAL
ecbe 9d 00 01           STA STACK,X
ecc1 e8                 INX
ecc2 e8                 INX
ecc3 86 9e              STX PTR_LO
ecc5 4c fb ec           JMP TIR_80
ecc8 a6 9f    TIR_74    LDX PTR_HI
ecca e4 9e              CPX PTR_LO
eccc f0 37              BEQ TIR_82
ecce a5 ac              LDA SAL
ecd0 dd 00 01           CMP STACK,X
ecd3 d0 30              BNE TIR_82
ecd5 a5 ad              LDA SAH
ecd7 dd 01 01           CMP STACK+1,X
ecda d0 29              BNE TIR_82
ecdc e6 9f              INC PTR_HI
ecde e6 9f              INC PTR_HI
ece0 a5 93              LDA K_VERCK
ece2 f0 0c              BEQ TIR_76
ece4 a0 00              LDY #0
ece6 20 cc f7           JSR LDA_IND_SAL
ece9 c5 bd              CMP RS_Parity
eceb f0 18              BEQ TIR_82
eced c8                 INY
ecee 84 b6              STY RS_Out
ecf0 a5 b6    TIR_76    LDA RS_Out
ecf2 f0 07              BEQ TIR_80
ecf4 a9 10    TIR_78    LDA #16
ecf6 20 57 f7           JSR SETST
ecf9 d0 0a              BNE TIR_82
ecfb a5 93    TIR_80    LDA K_VERCK
ecfd d0 06              BNE TIR_82
ecff a8                 TAY
ed00 a5 bd              LDA RS_Parity
ed02 20 bc f7           JSR STA_IND_SAL
ed05 20 c1 ee TIR_82    JSR Inc_SAL_Word
ed08 d0 44              BNE TIR_94
ed0a a9 80    TIR_84    LDA #$80
ed0c 85 aa    TIR_86    STA RSI_Data
ed0e 78                 SEI
ed0f a2 01              LDX #1
ed11 8e 0d dc           STX CIA1_ICR
ed14 ae 0d dc           LDX CIA1_ICR
ed17 a6 be              LDX FSBLK
ed19 ca                 DEX
ed1a 30 02              BMI TIR_88
ed1c 86 be              STX FSBLK
ed1e c6 a7    TIR_88    DEC RSI_In_Bit
ed20 f0 08              BEQ TIR_90
ed22 a5 9e              LDA PTR_LO
ed24 d0 28              BNE TIR_94
ed26 85 be              STA FSBLK
ed28 f0 24              BEQ TIR_94
ed2a 20 57 ee TIR_90    JSR TAPE_Stop_IO
ed2d 20 51 ed           JSR STAL_To_SAL
ed30 a0 00              LDY #0
ed32 84 ab              STY RSI_Parity
ed34 20 cc f7 TIR_92    JSR LDA_IND_SAL
ed37 45 ab              EOR RSI_Parity
ed39 85 ab              STA RSI_Parity
ed3b 20 c1 ee           JSR Inc_SAL_Word
ed3e 20 b7 ee           JSR Check_IO_End
ed41 90 f1              BCC TIR_92
ed43 a5 ab              LDA RSI_Parity
ed45 45 bd              EOR RS_Parity
ed47 f0 05              BEQ TIR_94
ed49 a9 20              LDA #$20 ; ' '
ed4b 20 57 f7           JSR SETST
ed4e 4c 33 ff TIR_94    JMP IRQ_Exit

              ; *******************
ed51            STAL_To_SAL ; $ed51
              ; *******************

ed51 a5 c2              LDA STAH
ed53 85 ad              STA SAH
ed55 a5 c1              LDA STAL
ed57 85 ac              STA SAL
ed59 60                 RTS ;Size    9 [STAL_To_SAL]

              ; **********************
ed5a            TAPE_Init_Byte ; $ed5a
              ; **********************

ed5a a9 08              LDA #8
ed5c 85 a3              STA R2D2
ed5e a9 00              LDA #0
ed60 85 a4              STA BSOUR1
ed62 85 a8              STA RSI_Count
ed64 85 9b              STA PRTY
ed66 85 a9              STA RSI_Start
ed68 60                 RTS ;Size   15 [TAPE_Init_Byte]

              ; **********************
ed69            TAPE_Write_Bit ; $ed69
              ; **********************

ed69 a5 bd              LDA RS_Parity
ed6b 4a                 LSR A
ed6c a9 60              LDA #$60
ed6e 90 02              BCC TAPE_Write_A

              ; ********************
ed70            TAPE_Write_1 ; $ed70
              ; ********************

ed70 a9 b0              LDA #$b0

              ; ********************
ed72            TAPE_Write_A ; $ed72
              ; ********************

ed72 a2 00              LDX #0

              ; *********************
ed74            TAPE_Write_AX ; $ed74
              ; *********************

ed74 8d 06 dc           STA CIA1_TBLO
ed77 8e 07 dc           STX CIA1_TBHI
ed7a ad 0d dc           LDA CIA1_ICR
ed7d a9 19              LDA #$19
ed7f 8d 0f dc           STA CIA1_CRB
ed82 a5 01              LDA R8502
ed84 49 08              EOR #%0000 1000 ; $08
ed86 85 01              STA R8502
ed88 29 08              AND #%0000 1000 ; $08
ed8a 60                 RTS ;Size   23 [TAPE_Write_AX]

ed8b 38       TAIW_00   SEC
ed8c 66 b6              ROR RS_Out
ed8e 30 3c              BMI TAIW_20

              ; **********************
ed90            TAPE_IRQ_Write ; $ed90
              ; **********************

ed90 a5 a8              LDA RSI_Count
ed92 d0 12              BNE TAIW_10
ed94 a9 10              LDA #16
ed96 a2 01              LDX #1
ed98 20 74 ed           JSR TAPE_Write_AX
ed9b d0 2f              BNE TAIW_20
ed9d e6 a8              INC RSI_Count
ed9f a5 b6              LDA RS_Out
eda1 10 29              BPL TAIW_20
eda3 4c 1b ee           JMP TAIW_60
eda6 a5 a9    TAIW_10   LDA RSI_Start
eda8 d0 09              BNE TAIW_15
edaa 20 70 ed           JSR TAPE_Write_1
edad d0 1d              BNE TAIW_20
edaf e6 a9              INC RSI_Start
edb1 d0 19              BNE TAIW_20
edb3 20 69 ed TAIW_15   JSR TAPE_Write_Bit
edb6 d0 14              BNE TAIW_20
edb8 a5 a4              LDA BSOUR1
edba 49 01              EOR #1
edbc 85 a4              STA BSOUR1
edbe f0 0f              BEQ TAIW_25
edc0 a5 bd              LDA RS_Parity
edc2 49 01              EOR #1
edc4 85 bd              STA RS_Parity
edc6 29 01              AND #1
edc8 45 9b              EOR PRTY
edca 85 9b              STA PRTY
edcc 4c 33 ff TAIW_20   JMP IRQ_Exit
edcf 46 bd    TAIW_25   LSR RS_Parity
edd1 c6 a3              DEC R2D2
edd3 a5 a3              LDA R2D2
edd5 f0 3b              BEQ TAIW_50
edd7 10 f3              BPL TAIW_20
edd9 20 5a ed TAIW_30   JSR TAPE_Init_Byte
eddc 58                 CLI
eddd a5 a5              LDA CNTDN
eddf f0 12              BEQ TAIW_40
ede1 a2 00              LDX #0
ede3 86 c5              STX DATA
ede5 c6 a5              DEC CNTDN
ede7 a6 be              LDX FSBLK
ede9 e0 02              CPX #2
edeb d0 02              BNE TAIW_35
eded 09 80              ORA #$80
edef 85 bd    TAIW_35   STA RS_Parity
edf1 d0 d9              BNE TAIW_20
edf3 20 b7 ee TAIW_40   JSR Check_IO_End
edf6 90 0a              BCC TAIW_45
edf8 d0 91              BNE TAIW_00
edfa e6 ad              INC SAH
edfc a5 c5              LDA DATA
edfe 85 bd              STA RS_Parity
ee00 b0 ca              BCS TAIW_20
ee02 a0 00    TAIW_45   LDY #0
ee04 20 cc f7           JSR LDA_IND_SAL
ee07 85 bd              STA RS_Parity
ee09 45 c5              EOR DATA
ee0b 85 c5              STA DATA
ee0d 20 c1 ee           JSR Inc_SAL_Word
ee10 d0 ba              BNE TAIW_20
ee12 a5 9b    TAIW_50   LDA PRTY
ee14 49 01              EOR #1
ee16 85 bd              STA RS_Parity
ee18 4c 33 ff TAIW_55   JMP IRQ_Exit
ee1b c6 be    TAIW_60   DEC FSBLK
ee1d d0 03              BNE TAIW_65
ee1f 20 b0 ee           JSR TAPE_Stop_Motor
ee22 a9 50    TAIW_65   LDA #$50
ee24 85 a7              STA RSI_In_Bit
ee26 a2 08              LDX #8              ; switch IRQ to TAPE_IRQ_Leader
ee28 78                 SEI
ee29 20 9b ee           JSR TAPE_Switch_IRQ
ee2c d0 ea              BNE TAIW_55         ; always

              ; ***********************
ee2e            TAPE_IRQ_Leader ; $ee2e
              ; ***********************

ee2e a9 78              LDA #$78            ; set time constant low byte for bit = leader
ee30 20 72 ed           JSR TAPE_Write_A
ee33 d0 e3              BNE TAIW_55         ; if tape bit high restore registers and exit IRQ
ee35 c6 a7              DEC RSI_In_Bit      ; decrement cycle count
ee37 d0 df              BNE TAIW_55         ; if not all done restore registers and exit IRQ
ee39 20 5a ed           JSR TAPE_Init_Byte
ee3c c6 ab              DEC RSI_Parity      ; decrement cassette leader count
ee3e 10 d8              BPL TAIW_55         ; -> exit IRQ
ee40 a2 0a              LDX #10             ; switch IRQ to TAPE_IRQ_Write
ee42 20 9b ee           JSR TAPE_Switch_IRQ
ee45 58                 CLI                 ; enable interrupts
ee46 e6 ab              INC RSI_Parity      ; clear cassette leader counter, was -1
ee48 a5 be              LDA FSBLK           ; get cassette block count
ee4a f0 49              BEQ TSIO_30         ; if all done restore everything and exit IRQ
ee4c 20 51 ed           JSR STAL_To_SAL
ee4f a2 09              LDX #9              ; set 9 synchronisation bytes
ee51 86 a5              STX CNTDN           ; save cassette synchronization byte count
ee53 86 b6              STX RS_Out
ee55 d0 82              BNE TAIW_30         ; go do next tape byte, branch always

              ; ********************
ee57            TAPE_Stop_IO ; $ee57
              ; ********************

ee57 08                 PHP                 ; save status
ee58 78                 SEI                 ; disable interrupts
ee59 ad 11 d0           LDA VIC_Ctrl_1
ee5c 0d 39 0a           ORA VSH_Ctrl_1
ee5f 29 7f              AND #%0111 1111     ; disable all interrupts
ee61 8d 11 d0           STA VIC_Ctrl_1
ee64 2c 3a 0a           BIT SPRITES
ee67 30 16              BMI TSIO_10         ; -> don't change sprite enable flag
ee69 2c 37 0a           BIT VSH_SPEED
ee6c 10 11              BPL TSIO_10         ; -> sprites are on alreay
ee6e ad 38 0a           LDA VSH_SPR_ENA
ee71 8d 15 d0           STA VIC_SPR_ENA     ; restore sprite enable flag
ee74 ad 37 0a           LDA VSH_SPEED
ee77 8d 30 d0           STA VIC_SPEED       ; restore speed
ee7a a9 00              LDA #0
ee7c 8d 37 0a           STA VSH_SPEED       ; clear shadow register
ee7f 20 b0 ee TSIO_10   JSR TAPE_Stop_Motor
ee82 20 b8 e1           JSR Test_Fast_IEC   ; reset IEC attributes
ee85 ad 0a 0a           LDA IRQTMP+1        ; restore IRQ vector
ee88 f0 09              BEQ TSIO_20
ee8a 8d 15 03           STA IIRQ+1
ee8d ad 09 0a           LDA IRQTMP
ee90 8d 14 03           STA IIRQ
ee93 28       TSIO_20   PLP                 ; restore status
ee94 60                 RTS ;Size   62 [TAPE_Stop_IO]

ee95 20 57 ee TSIO_30   JSR TAPE_Stop_IO
ee98 4c 33 ff           JMP IRQ_Exit

              ; ***********************
ee9b            TAPE_Switch_IRQ ; $ee9b
              ; ***********************

ee9b bd a0 ee           LDA TAPE_IRQ_Table-8,X  ; get tape IRQ vector low byte
ee9e 8d 14 03           STA IIRQ                ; set IRQ vector low byte
eea1 bd a1 ee           LDA TAPE_IRQ_Table-7,X  ; get tape IRQ vector high byte
eea4 8d 15 03           STA IIRQ+1              ; set IRQ vector high byte
eea7 60                 RTS ;Size   13 [TAPE_Switch_IRQ]

              ; **********************
eea8            TAPE_IRQ_Table ; $eea8
              ; **********************

eea8 2e ee              .WORD TAPE_IRQ_Leader   ; write tape leader
eeaa 90 ed              .WORD TAPE_IRQ_Write    ; write data byte
eeac 65 fa              .WORD IRQ_Normal        ; default IRQ
eeae eb ea              .WORD TAPE_IRQ_Read     ; read data byte

              ; ***********************
eeb0            TAPE_Stop_Motor ; $eeb0
              ; ***********************

eeb0 a5 01              LDA R8502
eeb2 09 20              ORA #%0010 0000     ;  cassette motor off
eeb4 85 01              STA R8502
eeb6 60                 RTS ;Size    7 [TAPE_Stop_Motor]

              ; ********************
eeb7            Check_IO_End ; $eeb7
              ; ********************

eeb7 38                 SEC
eeb8 a5 ac              LDA SAL             ; get buffer address low byte
eeba e5 ae              SBC EAL             ; subtract buffer end low byte
eebc a5 ad              LDA SAH             ; get buffer address high byte
eebe e5 af              SBC EAH             ; subtract buffer end high byte
eec0 60                 RTS                 ; C=1 if SAL/H >= EAL/H ;Size   10 [Check_IO_End]

              ; ********************
eec1            Inc_SAL_Word ; $eec1
              ; ********************

eec1 e6 ac              INC SAL
eec3 d0 02              BNE ISW_Ret
eec5 e6 ad              INC SAH
eec7 60       ISW_Ret   RTS ;Size    7 [Inc_SAL_Word]

              ; ********************
eec8            TAPE_Sim_IRQ ; $eec8
              ; ********************

eec8 08                 PHP
eec9 68                 PLA
eeca 29 ef              AND #%1110 1111     ; $ef set IRQ/BRK bit to IRQ
eecc 48                 PHA
eecd 4c 17 ff           JMP IRQ

              ; *************************
eed0            TAPE_Switch_Sense ; $eed0
              ; *************************

eed0 a5 01              LDA R8502
eed2 29 10              AND #%0001 0000     ; $10
eed4 f0 0a              BEQ TSS_10          ; -> key pressed
eed6 a0 00              LDY #0
eed8 84 c0              STY CAS1            ; motor flag = 0
eeda a5 01              LDA R8502
eedc 09 20              ORA #%0010 0000     ; $20 bit5 = 1 : motor off
eede d0 08              BNE TSS_20          ; always
eee0 a5 c0    TSS_10    LDA CAS1            ; test motor flag
eee2 d0 06              BNE TSS_Ret         ; -> motor is already on
eee4 a5 01              LDA R8502
eee6 29 df              AND #%1101 1111     ; $df bit5 = 0 : motor on
eee8 85 01    TSS_20    STA R8502           ; motor on or off
eeea 60       TSS_Ret   RTS ;Size   27 [TAPE_Switch_Sense]

              ; *************
eeeb            GETIN ; $eeeb
              ; *************

eeeb a5 99              LDA DFLTN           ; get input channel
eeed d0 0a              BNE GETIN_10        ; -> not keyboard
eeef a5 d0              LDA NDX             ; keys in buffer
eef1 05 d1              ORA KYNDX           ; keys in function key buffer
eef3 f0 0f              BEQ GETIN_30        ; -> no keys
eef5 78                 SEI
eef6 4c 06 c0           JMP E_GETKEY        ; fetch byte from buffer or function key

eef9 c9 02    GETIN_10  CMP #2              ; input channel = RS232 ?
eefb d0 18              BNE BASIN_20           ; -> no
eefd 84 97    GETIN_20  STY XSAV            ; save Y
eeff 20 ce e7           JSR RS_Read         ; fetch byte from RS232 input buffer
ef02 a4 97              LDY XSAV            ; restore Y
ef04 18       GETIN_30  CLC                 ; operation OK
ef05 60                 RTS ;Size   27 [GETIN]

              ; *************
ef06            BASIN ; $ef06
              ; *************

ef06 a5 99              LDA DFLTN           ; current input channel
ef08 d0 0b              BNE BASIN_20        ; -> is not keyvoard
ef0a a5 ec              LDA Cursor_Col
ef0c 85 e9              STA CurLst_Col      ; last cursor column
ef0e a5 eb              LDA Cursor_Row
ef10 85 e8              STA CurLst_Row      ; last cursor row
ef12 4c 09 c0 BASIN_10  JMP E_GETSCR        ; get character from screen at cursor position

ef15 c9 03    BASIN_20  CMP #3              ; input channel = screen ?
ef17 d0 09              BNE BASIN_30        ; -> no
ef19 20 40 fc           JSR Set_CRSW        ; patch: set CRSW and save Cursor_Row
ef1c a5 e7              LDA Margin_Right
ef1e 85 ea              STA Cursor_End      ; define end of line
ef20 b0 f0              BCS BASIN_10        ; branch always (CMP #3)

ef22 b0 38    BASIN_30  BCS IEC_BASIN           ; -> channel > 3 : IEC device
ef24 c9 02              CMP #2              ; RS232 interface ?
ef26 f0 3f              BEQ RS232_BASIN           ; -> read from RS232 input buffer
ef28 86 97              STX XSAV            ; save X
ef2a 20 48 ef           JSR TAPE_BASIN      ; get character from TAPE buffer
ef2d b0 16              BCS BASIN_60        ; -> return on error
ef2f 48                 PHA                 ; push char
ef30 20 48 ef           JSR TAPE_BASIN      ; get next character from buffer
ef33 b0 0d              BCS BASIN_50        ; -> return on error
ef35 d0 05              BNE BASIN_40        ; -> unget character
ef37 a9 40              LDA #$40            ; set bit6 = EOF
ef39 20 57 f7           JSR SETST           ; mark EOF status
ef3c c6 a6    BASIN_40  DEC BUFPT           ; unget character
ef3e a6 97              LDX XSAV            ; restore X
ef40 68                 PLA                 ; restore read character
ef41 60                 RTS                 ; return ;Size   60 [BASIN]
ef42 aa       BASIN_50  TAX                 ; X = read character
ef43 68                 PLA                 ; clean stack
ef44 8a                 TXA                 ; A = read character
ef45 a6 97    BASIN_60  LDX XSAV            ; restore X
ef47 60                 RTS                 ; return ;Size   66 [BASIN]

              ; ******************
ef48            TAPE_BASIN ; $ef48
              ; ******************

ef48 20 be e9           JSR TAPE_Advance_BUFPT
ef4b d0 0b              BNE TABA_10         ; -> not at end : get character
ef4d 20 f2 e9           JSR TAPE_Read_Block ; read next block into buffer
ef50 b0 09              BCS TABA_Ret        ; -> exit on error
ef52 a9 00              LDA #0
ef54 85 a6              STA BUFPT           ; reset buffer pointer
ef56 f0 f0              BEQ TAPE_BASIN      ; -> branch always

ef58 b1 b2    TABA_10   LDA (TAPE1),Y       ; get character from TAPE buffer
ef5a 18                 CLC                 ; OK flag
ef5b 60       TABA_Ret  RTS                 ; return ;Size   20 [TAPE_BASIN]

              ; *****************
ef5c            IEC_BASIN ; $ef5c
              ; *****************

ef5c a5 90              LDA STATUS          ; check I/O status
ef5e d0 03              BNE IEBA_10         ; -> cannot read
ef60 4c 3e e4           JMP ACPTR           ; -> read from IEC device
ef63 a9 0d    IEBA_10   LDA #CR             ; return CR if not able to read
ef65 18       IEBA_20   CLC                 ; OK flag
ef66 60       IEBA_Ret  RTS ;Size   11 [IEC_BASIN]

              ; *******************
ef67            RS232_BASIN ; $ef67
              ; *******************

ef67 20 fd ee           JSR GETIN_20        ; get character from RS232 buffer
ef6a b0 f9              BCS IEBA_20         ; exit on error
ef6c c9 00              CMP #0
ef6e d0 f6              BNE IEBA_Ret        ; -> not NULL
ef70 ad 14 0a           LDA RS_Status
ef73 29 60              AND #%0110 0000     ; $60 check DSR signal (bit 6)
ef75 d0 ec              BNE IEBA_10         ; -> no DSR : load CR and exit
ef77 f0 ee              BEQ RS232_BASIN     ; -> DSR signal : try again

              ; *************
ef79            BSOUT ; $ef79
              ; *************

ef79 48                 PHA                 ; save character
ef7a a5 9a              LDA DFLTO
ef7c c9 03              CMP #3
ef7e d0 04              BNE BSOUT_10
ef80 68                 PLA                 ; restore character
ef81 4c 0c c0           JMP E_PRINT         ; print to screen (3)

ef84 90 04    BSOUT_10  BCC BSOUT_20        ; -> to tape (1) or RS232 (2)
ef86 68                 PLA
ef87 4c 03 e5           JMP CIOUT           ; output to IEC device (> 3)

ef8a 4a       BSOUT_20  LSR A               ; C=1 for tape, C=0 for RS232
ef8b 68                 PLA                 ; restore output byte

              ; ************************
ef8c            TAPE_RS232_BSOUT ; $ef8c
              ; ************************

ef8c 85 9e              STA PTR_LO          ; save character
ef8e 8a                 TXA
ef8f 48                 PHA                 ; save X
ef90 98                 TYA
ef91 48                 PHA                 ; save Y
ef92 90 23              BCC BSOUT_70        ; -> RS232 output
ef94 20 be e9           JSR TAPE_Advance_BUFPT
ef97 d0 0e              BNE BSOUT_30        ; if not iat end store byte and exit
ef99 20 15 ea           JSR TAPE_Write_Buffer
ef9c b0 0e              BCS BSOUT_50        ; -> error
ef9e a9 02              LDA #2              ; set data block type
efa0 a0 00              LDY #0
efa2 91 b2              STA (TAPE1),Y       ; save type to buffer
efa4 c8                 INY
efa5 84 a6              STY BUFPT           ; save tape buffer index
efa7 a5 9e    BSOUT_30  LDA PTR_LO          ; restore character
efa9 91 b2              STA (TAPE1),Y       ; store to buffer
efab 18       BSOUT_40  CLC                 ; flag no error
efac 68       BSOUT_50  PLA
efad a8                 TAY                 ; pull Y
efae 68                 PLA
efaf aa                 TAX                 ; pull X
efb0 a5 9e              LDA PTR_LO          ; restore output character
efb2 90 02              BCC BSOUT_60        ; -> exit if OK
efb4 a9 00              LDA #0              ; A=0 for error return
efb6 60       BSOUT_60  RTS ;Size   43 [TAPE_RS232_BSOUT]
efb7 20 5f e7 BSOUT_70  JSR RS_Write        ; write character to RS232 buffer
efba 4c ab ef           JMP BSOUT_40        ; -> exit

              ; ************
efbd            OPEN ; $efbd
              ; ************

efbd a6 b8              LDX LA              ; logical address
efbf 20 02 f2           JSR Lookup_X          ; look up entry in file tables
efc2 f0 2f              BEQ OPEN_30         ; -> error: already open
efc4 a6 98              LDX LDTND           ; # of open files
efc6 e0 0a              CPX #10             ; compare with upper limit 10
efc8 b0 26              BCS OPEN_20         ; -> error: too many open files
efca e6 98              INC LDTND           ; increment # of open files
efcc a5 b8              LDA LA              ; logical address
efce 9d 62 03           STA LAT,X           ; table of LA's
efd1 a5 b9              LDA SA              ; secondary address
efd3 09 60              ORA #%0110 0000     ; OR with $60
efd5 85 b9              STA SA              ; store it
efd7 9d 76 03           STA SAT,X           ; table of SA's
efda a5 ba              LDA FA              ; first address (device/unit)
efdc 9d 6c 03           STA FAT,X           ; table of FA's
efdf f0 0d              BEQ OPEN_10         ; -> open keyboard: no further action
efe1 c9 02              CMP #2              ; RS232 device ?
efe3 f0 5b              BEQ RS_OPEN         ; -> open RS232 channel
efe5 90 0f              BCC TAPE_OPEN       ; -> device = 1 (tape)
efe7 c9 03              CMP #3              ; screen device ?
efe9 f0 03              BEQ OPEN_10         ; -> open screen: no further action
efeb 20 cb f0           JSR IEC_OPEN        ; device >= 4: open IEC device
efee 18       OPEN_10   CLC                 ; flag: OK
efef 60                 RTS                 ; return ;Size   51 [OPEN]
eff0 4c 7c f6 OPEN_20   JMP Too_Many_Files           ; error
eff3 4c 7f f6 OPEN_30   JMP File_Open_Err           ; error

              ; *****************
eff6            TAPE_OPEN ; $eff6
              ; *****************

eff6 20 80 e9           JSR TAPE_XY_Check
eff9 b0 03              BCS TAOP_10
effb 4c 94 f6           JMP Illegal_Device_Number           ; -> illeagl device number
effe a5 b9    TAOP_10   LDA SA
f000 29 0f              AND #%0000 1111     ; $0f
f002 d0 1f              BNE TAOP_40         ; -> open for write
f004 20 c8 e9           JSR TAPE_Wait_for_Play
f007 b0 36              BCS TAOP_Ret        ; -> error
f009 20 0f f5           JSR Searching       ; display SEARCHING
f00c a5 b7              LDA FNLEN           ; filename length
f00e f0 0a              BEQ TAOP_30         ; -> not specified: find any file
f010 20 9a e9           JSR TAPE_Find_File  ; look for named file
f013 90 18              BCC TAOP_50         ; -> found
f015 f0 28              BEQ TAOP_Ret        ; -> forced STOP
f017 4c 85 f6 TAOP_20   JMP File_Not_Found
f01a 20 d0 e8 TAOP_30   JSR TAPE_Find_Header
f01d 90 0e              BCC TAOP_50         ; -> found
f01f f0 1e              BEQ TAOP_Ret        ; -> forced STOP
f021 b0 f4              BCS TAOP_20         ; always

f023 20 e9 e9 TAOP_40   JSR TAPE_Wait_For_Record
f026 b0 17              BCS TAOP_Ret        ; -> error
f028 a9 04              LDA #4              ; -> header type: 1st. block of data
f02a 20 19 e9           JSR TAPE_Write_Program_Header
f02d a9 bf    TAOP_50   LDA #$bf            ; 191 = last buffer index
f02f a4 b9              LDY SA
f031 c0 60              CPY #$60            ; SA = 60 ?
f033 f0 07              BEQ TAOP_60         ; -> PRG file
f035 a0 00              LDY #0              ; 1st. buffer index
f037 a9 02              LDA #2              ; type 2: data block
f039 91 b2              STA (TAPE1),Y       ; store header info
f03b 98                 TYA                 ; A = index
f03c 85 a6    TAOP_60   STA BUFPT           ; save buffer index
f03e 18                 CLC                 ; flag OK
f03f 60       TAOP_Ret  RTS                 ; return ;Size   74 [TAPE_OPEN]

              ; ***************
f040            RS_OPEN ; $f040
              ; ***************

f040 20 b0 f0           JSR RS_Init_CIA
f043 8c 14 0a           STY RS_Status       ; Y = 0
f046 c4 b7    RSOP_10   CPY FNLEN
f048 f0 0b              BEQ RSOP_20
f04a 20 ae f7           JSR Get_Filename_Char
f04d 99 10 0a           STA RS_Control,Y    ; get RS232 parameter
f050 c8                 INY
f051 c0 04              CPY #4
f053 d0 f1              BNE RSOP_10
f055 20 8e e6 RSOP_20   JSR RS_Set_Databits
f058 8e 15 0a           STX RS_Bits
f05b ad 10 0a           LDA RS_Control
f05e 29 0f              AND #%0000 1111     ; $0f
f060 f0 1c              BEQ RSOP_50         ; -> user baudrate
f062 0a                 ASL A
f063 aa                 TAX                 ; index to baudrate table
f064 ad 03 0a           LDA PALNTS          ; check PAL or NTSC
f067 d0 09              BNE RSOP_30         ; -> use PAL  values
f069 bc 4f e8           LDY RS_Baud_NTSC-1,X
f06c bd 4e e8           LDA RS_Baud_NTSC-2,X
f06f 4c 78 f0           JMP RSOP_40
f072 bc 63 e8 RSOP_30   LDY RS_Baud_PAL-1,X
f075 bd 62 e8           LDA RS_Baud_PAL-2,X
f078 8c 13 0a RSOP_40   STY RS_Baudrate+1
f07b 8d 12 0a           STA RS_Baudrate
f07e ad 12 0a RSOP_50   LDA RS_Baudrate     ; X/Y = baudrate * 2
f081 0a                 ASL A
f082 aa                 TAX
f083 ad 13 0a           LDA RS_Baudrate+1
f086 2a                 ROL A
f087 a8                 TAY
f088 8a                 TXA
f089 69 c8              ADC #$c8            ; add 200
f08b 8d 16 0a           STA RS_Timer_Lo
f08e 98                 TYA
f08f 69 00              ADC #0
f091 8d 17 0a           STA RS_Timer_Hi     ; timer = baudrate * 2 + 200
f094 ad 11 0a           LDA RS_Command
f097 4a                 LSR A
f098 90 09              BCC RSOP_60         ; -> 3 wire handshake
f09a ad 01 dd           LDA CIA2_PRB
f09d 30 04              BMI RSOP_60         ; -> DSR set
f09f 20 55 e7           JSR RS_DSR_Missing
f0a2 18                 CLC
f0a3 ad 18 0a RSOP_60   LDA RS_IBP_End      ; sync buffer pointer (buffer empty)
f0a6 8d 19 0a           STA RS_IBP_Beg
f0a9 ad 1b 0a           LDA RS_OBP_End
f0ac 8d 1a 0a           STA RS_OBP_Beg
f0af 60                 RTS ;Size  112 [RS_OPEN]

              ; *******************
f0b0            RS_Init_CIA ; $f0b0
              ; *******************

f0b0 a9 7f              LDA #$7f            ; enable interrupts
f0b2 8d 0d dd           STA CIA2_ICR
f0b5 a9 06              LDA #6              ; set DTR & RTS to output
f0b7 8d 03 dd           STA CIA2_DDRB
f0ba 8d 01 dd           STA CIA2_PRB
f0bd a9 04              LDA #4              ; set DTR & RTS to high
f0bf 0d 00 dd           ORA CIA2_PRA
f0c2 8d 00 dd           STA CIA2_PRA
f0c5 a0 00              LDY #0              ; disable all RS interrupts
f0c7 8c 0f 0a           STY RS_Enable
f0ca 60                 RTS ;Size   27 [RS_Init_CIA]

              ; ****************
f0cb            IEC_OPEN ; $f0cb
              ; ****************

f0cb a5 b9              LDA SA
f0cd 30 04              BMI IEOP_10         ; -> no SA set
f0cf a4 b7              LDY FNLEN
f0d1 d0 02              BNE IEOP_20         ; -> filename given
f0d3 18       IEOP_10   CLC                 ; clear carry for OK
f0d4 60                 RTS ;Size   10 [IEC_OPEN]
f0d5 a9 00    IEOP_20   LDA #0
f0d7 85 90              STA STATUS          ; clear status bits
f0d9 a5 ba              LDA FA
f0db 20 3e e3           JSR LISTN           ; IEC listen
f0de 24 90              BIT STATUS
f0e0 30 0b              BMI IEOP_30         ; -> device not present
f0e2 a5 b9              LDA SA
f0e4 09 f0              ORA #%1111 0000     ; $f0
f0e6 20 d2 e4           JSR SECND           ; send SA
f0e9 a5 90              LDA STATUS
f0eb 10 05              BPL IEOP_40         ; -> OK
f0ed 68       IEOP_30   PLA                 ; remove return address
f0ee 68                 PLA                 ; jump to error routine
f0ef 4c 88 f6           JMP Device_Not_Present
f0f2          IEOP_40
f0f2 a5 b7              LDA FNLEN           ; redundant: was already
f0f4 f0 0d              BEQ IEOP_60         ; checked at entry
f0f6 a0 00              LDY #0
f0f8 20 ae f7 IEOP_50   JSR Get_Filename_Char
f0fb 20 03 e5           JSR CIOUT           ; send filename
f0fe c8                 INY
f0ff c4 b7              CPY FNLEN
f101 d0 f5              BNE IEOP_50         ; loop
f103 4c b0 f5 IEOP_60   JMP IEC_Unlisten           ; UNLSN CLC and RTS
f106                    .FILL $f106-* (0) ; 0 bytes

              ; *************
f106            CHKIN ; $f106
              ; *************

f106 20 02 f2           JSR Lookup_X
f109 d0 3e              BNE CHKERR_4        ; -> FILE NOT OPEN
f10b 20 12 f2           JSR Get_LASAFA
f10e f0 13              BEQ CHKIN_10        ; -> input from keyboard
f110 c9 03              CMP #3
f112 f0 0f              BEQ CHKIN_10        ; -> input from screen
f114 b0 11              BCS CHKIN_20        ; -> input from IEC
f116 c9 02              CMP #2
f118 d0 03              BNE IEC_CHKIN       ; -> input from IEC
f11a 4c 95 e7           JMP RS_CHKIN        ; -> input from RS232

              ; *****************
f11d            IEC_CHKIN ; $f11d
              ; *****************

f11d a6 b9              LDX SA
f11f e0 60              CPX #$60            ; SA for LOAD ?
f121 d0 20              BNE CHKERR_2
f123 85 99    CHKIN_10  STA DFLTN           ; set unit for input
f125 18                 CLC                 ; flag OK
f126 60                 RTS ;Size   10 [IEC_CHKIN]

f127 aa       CHKIN_20  TAX                 ; device / unit
f128 20 3b e3           JSR TALK
f12b 24 90              BIT STATUS
f12d 30 11              BMI CHKERR_1
f12f a5 b9              LDA SA
f131 10 05              BPL CHKIN_30
f133 20 e9 e4           JSR IEC_ATN_High_Exit
f136 10 03              BPL CHKIN_40
f138 20 e0 e4 CHKIN_30  JSR TKSA
f13b 8a       CHKIN_40  TXA
f13c 24 90              BIT STATUS
f13e 10 e3              BPL CHKIN_10

f140 4c 88 f6 CHKERR_1  JMP Device_Not_Present
f143 4c 8b f6 CHKERR_2  JMP Not_Input_File
f146 4c 8e f6 CHKERR_3  JMP Not_Output_File
f149 4c 82 f6 CHKERR_4  JMP File_Not_Open

              ; *************
f14c            CKOUT ; $f14c
              ; *************

f14c 20 02 f2           JSR Lookup_X
f14f d0 f8              BNE CHKERR_4        ; -> FILE NOT OPEN
f151 20 12 f2           JSR Get_LASAFA
f154 f0 f0              BEQ CHKERR_3        ; -> cannot output to keyboard
f156 c9 03              CMP #3
f158 f0 0f              BEQ CKOUT_20        ; -> output to screen
f15a b0 11              BCS IEC_CKOUT
f15c c9 02              CMP #2
f15e d0 03              BNE CKOUT_10
f160 4c 29 e7           JMP RS_CKOUT        ; -> output to RS232

f163 a6 b9    CKOUT_10  LDX SA
f165 e0 60              CPX #$60            ; -> SA for LOAD ?
f167 f0 dd              BEQ CHKERR_3        ; -> cannot use LOAD SA for output
f169 85 9a    CKOUT_20  STA DFLTO           ; -> select output device
f16b 18       CKOUT_30  CLC                 ; -> flag OK
f16c 60                 RTS ;Size   33 [CKOUT]

              ; *****************
f16d            IEC_CKOUT ; $f16d
              ; *****************

f16d aa                 TAX                 ; X = unit
f16e 20 3e e3           JSR LISTN           ; LISTEN
f171 24 90              BIT STATUS
f173 30 cb              BMI CHKERR_1        ; -> device not present
f175 a5 b9              LDA SA
f177 10 05              BPL CKOUT_40
f179 20 d7 e4           JSR IEC_ATN_OUT_High
f17c d0 03              BNE CKOUT_50
f17e 20 d2 e4 CKOUT_40  JSR SECND
f181 8a       CKOUT_50  TXA
f182 24 90              BIT STATUS
f184 10 e3              BPL CKOUT_20        ; -> OK
f186 30 b8              BMI CHKERR_1        ; always

              ; *************
f188            CLOSE ; $f188
              ; *************

f188 66 92              ROR SVXT
f18a 20 07 f2           JSR Lookup_A
f18d d0 dc              BNE CKOUT_30        ; -> not found: return
f18f 20 12 f2           JSR Get_LASAFA
f192 8a                 TXA
f193 48                 PHA                 ; push table index
f194 a5 ba              LDA FA
f196 f0 4c              BEQ CLOSE_50        ; -> close keyboard channel
f198 c9 03              CMP #3
f19a f0 48              BEQ CLOSE_50        ; -> close screen channel
f19c b0 31              BCS CLOSE_30        ; -> close IEC device
f19e c9 02              CMP #2
f1a0 d0 07              BNE CLOSE_10        ; -> close TAPE channel
f1a2 68                 PLA
f1a3 20 e5 f1           JSR Remove_Filehandle
f1a6 4c b0 f0           JMP RS_Init_CIA

f1a9 a5 b9    CLOSE_10  LDA SA
f1ab 29 0f              AND #$0f
f1ad f0 35              BEQ CLOSE_50        ; -> close input file
f1af 20 80 e9           JSR TAPE_XY_Check
f1b2 a9 00              LDA #0
f1b4 38                 SEC
f1b5 20 8c ef           JSR TAPE_RS232_BSOUT
f1b8 20 15 ea           JSR TAPE_Write_Buffer
f1bb 90 04              BCC CLOSE_20
f1bd 68                 PLA
f1be a9 00              LDA #0
f1c0 60                 RTS ;Size   57 [CLOSE]

f1c1 a5 b9    CLOSE_20  LDA SA
f1c3 c9 62              CMP #$62
f1c5 d0 1d              BNE CLOSE_50
f1c7 a9 05              LDA #5              ; write EOT marker
f1c9 20 19 e9           JSR TAPE_Write_Program_Header
f1cc 4c e4 f1           JMP CLOSE_50
f1cf 24 92    CLOSE_30  BIT SVXT
f1d1 10 0e              BPL CLOSE_40
f1d3 a5 ba              LDA FA
f1d5 c9 08              CMP #8
f1d7 90 08              BCC CLOSE_40        ; -> not a disc device
f1d9 a5 b9              LDA SA
f1db 29 0f              AND #%0000 1111 ; $0f
f1dd c9 0f              CMP #15
f1df f0 03              BEQ CLOSE_50        ; command channel
f1e1 20 9e f5 CLOSE_40  JSR IEC_Close
f1e4 68       CLOSE_50  PLA

              ; *************************
f1e5            Remove_Filehandle ; $f1e5
              ; *************************

f1e5 aa                 TAX
f1e6 c6 98              DEC LDTND
f1e8 e4 98              CPX LDTND
f1ea f0 14              BEQ ReFi_10
f1ec a4 98              LDY LDTND
f1ee b9 62 03           LDA LAT,Y
f1f1 9d 62 03           STA LAT,X
f1f4 b9 6c 03           LDA FAT,Y
f1f7 9d 6c 03           STA FAT,X
f1fa b9 76 03           LDA SAT,Y
f1fd 9d 76 03           STA SAT,X
f200 18       ReFi_10   CLC
f201 60                 RTS ;Size   29 [Remove_Filehandle]

              ; ****************
f202            Lookup_X ; $f202
              ; ****************

f202 a9 00              LDA #0
f204 85 90              STA STATUS
f206 8a                 TXA

              ; ****************
f207            Lookup_A ; $f207
              ; ****************

f207 a6 98              LDX LDTND
f209 ca       LoUp_10   DEX
f20a 30 05              BMI LoUp_Ret
f20c dd 62 03           CMP LAT,X
f20f d0 f8              BNE LoUp_10
f211 60       LoUp_Ret  RTS ;Size   11 [Lookup_A]

              ; ******************
f212            Get_LASAFA ; $f212
              ; ******************

f212 bd 62 03           LDA LAT,X
f215 85 b8              STA LA
f217 bd 76 03           LDA SAT,X
f21a 85 b9              STA SA
f21c bd 6c 03           LDA FAT,X
f21f 85 ba              STA FA
f221 60                 RTS ;Size   16 [Get_LASAFA]

              ; *************
f222            CLALL ; $f222
              ; *************

f222 a9 00              LDA #0
f224 85 98              STA LDTND           ; clear file open table

              ; *************
f226            CLRCH ; $f226
              ; *************

f226 a2 03              LDX #3
f228 e4 9a              CPX DFLTO
f22a b0 03              BCS CLRCH_10
f22c 20 26 e5           JSR UNLSN           ; UNLISTEN if IEC device
f22f e4 99    CLRCH_10  CPX DFLTN
f231 b0 03              BCS CLRCH_20
f233 20 15 e5           JSR UNTLK           ; UNTALK if IEC device
f236 86 9a    CLRCH_20  STX DFLTO
f238 a9 00              LDA #0
f23a 85 99              STA DFLTN
f23c 60                 RTS ;Size   23 [CLRCH]

              ; **************
f23d            CLOALL ; $f23d
              ; **************

              ; Close all channels of device (A)

f23d 85 ba              STA FA              ; closing device
f23f c5 9a              CMP DFLTO           ; active output device ?
f241 d0 05              BNE CLOA_10         ; -> no
f243 a9 03              LDA #3
f245 85 9a              STA DFLTO           ; reset active output
f247 2c                 BIT
f248 c5 99    CLOA_10   CMP DFLTN           ; active input device ?
f24a d0 04              BNE CLOA_20         ; -> no
f24c a9 00              LDA #0
f24e 85 99              STA DFLTN           ; reset active input
f250 a5 ba    CLOA_20   LDA FA
f252 a6 98              LDX LDTND           ; # of open channels
f254 ca       CLOA_30   DEX
f255 30 0d              BMI CLOA_Ret        ; -> done
f257 dd 6c 03           CMP FAT,X           ; device to close ?
f25a d0 f8              BNE CLOA_30         ; -> no
f25c bd 62 03           LDA LAT,X
f25f 20 c3 ff           JSR K_CLOSE         ; -> close this channel
f262 90 ec              BCC CLOA_20         ; loop if OK
f264 60       CLOA_Ret  RTS ;Size   40 [CLOALL]

              ; ****************
f265            LOAD_AXY ; $f265
              ; ****************

              ; Input:  A = LOAD (0) or VERIFY (1)
              ;         X = load address low
              ;         Y = load address high

f265 86 c3              STX MEMUSS
f267 84 c4              STY MEMUSS+1

              ; ******************
f269            LOADSP_MEM ; $f269
              ; ******************

f269 6c 30 03           JMP (ILOAD)         ; default -> D_LOADSP

              ; ****************
f26c            D_LOADSP ; $f26c
              ; ****************

f26c 85 93              STA K_VERCK         ; verify flag
f26e a9 00              LDA #0
f270 85 90              STA STATUS          ; clear status
f272 a5 ba              LDA FA
f274 c9 04              CMP #4
f276 b0 03              BCS LOAD_10         ; -> IEC  load
f278 4c 26 f3           JMP TAPE_LOAD       ; -> TAPE load
f27b ad 1c 0a LOAD_10   LDA Fast_IEC
f27e 29 be              AND #%1011 1110     ; $be clear burst mode bit 6
f280 8d 1c 0a           STA Fast_IEC        ; should be $bf ?
f283 a6 b9              LDX SA
f285 86 9e              STX PTR_LO          ; save SA
f287 a4 b7              LDY FNLEN
f289 d0 03              BNE LOAD_20         ; -> filename given
f28b 4c 1a f3           JMP Err_Missing_File_Name
f28e 84 9f    LOAD_20   STY PTR_HI          ; save FNLEN
f290 20 0f f5           JSR Searching
f293 20 a1 f3           JSR BURST_LOAD      ; try burst load
f296 b0 03              BCS LOAD_30         ; -> continue with slow load
f298 4c 9b f3           JMP LOAD_Done       ; -> finish

              ; device doesn't support burst mode or "$" directory load

f29b a4 9f    LOAD_30   LDY PTR_HI          ; saved   FNLEN
f29d 84 b7              STY FNLEN           ; restore FNLEN
f29f a9 60              LDA #$60            ; special value for LOAD protocol
f2a1 85 b9              STA SA
f2a3 20 cb f0           JSR IEC_OPEN        ; open file for LOAD
f2a6 a5 ba              LDA FA
f2a8 20 3b e3           JSR TALK            ; talk
f2ab a5 b9              LDA SA
f2ad 20 e0 e4           JSR TKSA            ; talk secondary
f2b0 20 3e e4           JSR ACPTR           ; Load address low
f2b3 85 ae              STA EAL
f2b5 20 3e e4           JSR ACPTR           ; Load address high
f2b8 85 af              STA EAH
f2ba a5 90              LDA STATUS
f2bc 4a                 LSR A
f2bd 4a                 LSR A               ; C = bit 6 EOI
f2be b0 57              BCS Err_File_Not_Found
f2c0 a5 9e              LDA PTR_LO          ; saved SA
f2c2 d0 08              BNE LOAD_40         ; -> use load address from file
f2c4 a5 c3              LDA MEMUSS
f2c6 85 ae              STA EAL             ; overwrite load address
f2c8 a5 c4              LDA MEMUSS+1
f2ca 85 af              STA EAH
f2cc 20 4a fc LOAD_40   JSR EA_to_SA        ; copy EA to SA
f2cf a9 fd    LOAD_50   LDA #$fd
f2d1 25 90              AND STATUS          ; clear bit 1 (time out read)
f2d3 85 90              STA STATUS
f2d5 20 e1 ff           JSR K_STOP          ; STOP key pressed ?
f2d8 f0 49              BEQ Stop_Load       ; -> close file and stop loading
f2da 20 3e e4           JSR ACPTR           ; read next byte
f2dd aa                 TAX                 ; save it in X
f2de a5 90              LDA STATUS
f2e0 4a                 LSR A
f2e1 4a                 LSR A
f2e2 b0 eb              BCS LOAD_50         ; -> time out: try again
f2e4 8a                 TXA                 ; A = read byte
f2e5 a4 93              LDY K_VERCK         ; verify flag
f2e7 f0 12              BEQ LOAD_60         ; -> loading
f2e9 85 bd              STA RS_Parity       ; store read byte
f2eb a0 00              LDY #0
f2ed 20 c9 f7           JSR LDA_IND_EAL
f2f0 c5 bd              CMP RS_Parity       ; verify
f2f2 f0 0a              BEQ LOAD_70         ; -> OK
f2f4 a9 10              LDA #16             ; bit 4: set verify error
f2f6 20 57 f7           JSR SETST
f2f9 d0 03              BNE LOAD_70         ; always
f2fb 20 bf f7 LOAD_60   JSR STA_IND_EAL     ; store read byte
f2fe e6 ae    LOAD_70   INC EAL             ; increment load address
f300 d0 08              BNE LOAD_80
f302 e6 af              INC EAH
f304 a5 af              LDA EAH             ; check for memory overflow $ff00
f306 c9 ff              CMP #$ff
f308 f0 16              BEQ Err_Break_IO
f30a 24 90    LOAD_80   BIT STATUS          ; check bit 6 EOI
f30c 50 c1              BVC LOAD_50         ; -> loop
f30e 20 15 e5           JSR UNTLK           ; start exit procedure
f311 20 9e f5           JSR IEC_Close
f314 4c 9b f3           JMP LOAD_Done

f317          Err_File_Not_Found
f317 4c 85 f6           JMP File_Not_Found

f31a          Err_Missing_File_Name
f31a 4c 91 f6           JMP Missing_File_Name

f31d          Err_Illegal_Device_Number
f31d 4c 94 f6           JMP Illegal_Device_Number

f320          Err_Break_IO
f320 4c 97 f6           JMP Break_IO

f323 4c b5 f5 Stop_Load JMP Err_IEC_Close

              ; *****************
f326            TAPE_LOAD ; $f326
              ; *****************

f326 c9 01              CMP #1              ; check device = 1
f328 d0 f3              BNE Err_Illegal_Device_Number
f32a 20 80 e9           JSR TAPE_XY_Check
f32d 90 ee              BCC Err_Illegal_Device_Number
f32f 20 c8 e9           JSR TAPE_Wait_for_Play
f332 b0 6c              BCS LOAD_Ret        ; time out
f334 20 0f f5           JSR Searching
f337 a5 b7    TALO_10   LDA FNLEN
f339 f0 09              BEQ TALO_20         ; -> load next file
f33b 20 9a e9           JSR TAPE_Find_File
f33e 90 0b              BCC TALO_30         ; -> found
f340 f0 5e              BEQ LOAD_Ret        ; -> STOP key
f342 b0 d3              BCS Err_File_Not_Found
f344 20 d0 e8 TALO_20   JSR TAPE_Find_Header
f347 f0 57              BEQ LOAD_Ret        ; -> STOP key
f349 b0 cc              BCS Err_File_Not_Found
f34b 38       TALO_30   SEC
f34c a5 90              LDA STATUS
f34e 29 10              AND #%0001 0000     ; $10 bit 4: verify error
f350 d0 4e              BNE LOAD_Ret
f352 e0 01              CPX #1              ; 1 = BASIC program
f354 f0 11              BEQ TALO_50         ; -> load BASIC program
f356 e0 03              CPX #3              ; 3 = binary program
f358 d0 dd              BNE TALO_10         ; not a program -> search again
f35a a0 01    TALO_40   LDY #1
f35c b1 b2              LDA (TAPE1),Y       ; byte 1: load address low
f35e 85 c3              STA MEMUSS
f360 c8                 INY
f361 b1 b2              LDA (TAPE1),Y       ; byte 2: load address high
f363 85 c4              STA MEMUSS+1
f365 b0 04              BCS TALO_60
f367 a5 b9    TALO_50   LDA SA
f369 d0 ef              BNE TALO_40         ; SA != 0 -> absolute load
f36b a0 03    TALO_60   LDY #3
f36d b1 b2              LDA (TAPE1),Y       ; byte 3: end address low
f36f a0 01              LDY #1
f371 f1 b2              SBC (TAPE1),Y
f373 aa                 TAX
f374 a0 04              LDY #4
f376 b1 b2              LDA (TAPE1),Y       ; byte 4: end address high
f378 a0 02              LDY #2
f37a f1 b2              SBC (TAPE1),Y
f37c a8                 TAY                 ; X/Y = file length
f37d 18                 CLC
f37e 8a                 TXA
f37f 65 c3              ADC MEMUSS          ; check if file fits into memory
f381 85 ae              STA EAL
f383 98                 TYA
f384 65 c4              ADC MEMUSS+1
f386 85 af              STA EAH
f388 c9 ff              CMP #$ff
f38a f0 94              BEQ Err_Break_IO
f38c a5 c3              LDA MEMUSS          ; set start address
f38e 85 c1              STA STAL
f390 a5 c4              LDA MEMUSS+1
f392 85 c2              STA STAH
f394 20 33 f5           JSR Loading_Verifying
f397 20 fb e9           JSR TAPE_Read       ; start tape load
f39a 24                 .BYTE $24
f39b 18       LOAD_Done CLC
f39c a6 ae              LDX EAL
f39e a4 af              LDY EAH
f3a0 60       LOAD_Ret  RTS ;Size  123 [TAPE_LOAD]

              ; ******************
f3a1            BURST_LOAD ; $f3a1
              ; ******************

f3a1 a0 00              LDY #0
f3a3 20 ae f7           JSR Get_Filename_Char
f3a6 c9 24              CMP #'$'            ; directory load ?
f3a8 f0 f6              BEQ LOAD_Ret        ; -> return for slow load C=1
f3aa a6 ba              LDX FA
f3ac a0 0f              LDY #15
f3ae a9 00              LDA #0
f3b0 20 38 f7           JSR SETLFS          ; OPEN 0,U,15
f3b3 85 b7              STA FNLEN           ; no filename
f3b5 20 c0 ff           JSR K_OPEN          ; open command channel
f3b8 a6 b8              LDX LA
f3ba 20 c9 ff           JSR K_CKOUT         ; select command channel
f3bd 90 08              BCC BULO_10         ; -> OK
f3bf 20 8c f4           JSR BULO_Close   ; C=1: error
f3c2 68                 PLA                 ; remove return address
f3c3 68                 PLA
f3c4 4c 88 f6           JMP Device_Not_Present
f3c7 a0 03    BULO_10   LDY #3              ; send "U0" $1f
f3c9 b9 0b f5 BULO_15   LDA Burst_Load_Command-1,Y
f3cc 20 d2 ff           JSR K_BSOUT
f3cf 88                 DEY
f3d0 d0 f7              BNE BULO_15
f3d2 20 ae f7 BULO_20   JSR Get_Filename_Char
f3d5 20 d2 ff           JSR K_BSOUT         ; send filename
f3d8 c8                 INY
f3d9 c4 9f              CPY PTR_HI          ; FNLEN
f3db d0 f5              BNE BULO_20
f3dd 20 cc ff           JSR K_CLRCH
f3e0 2c 1c 0a           BIT Fast_IEC        ; burst mode enabled ?
f3e3 70 05              BVS BULO_25         ; -> yes
f3e5 20 8c f4           JSR BULO_Close
f3e8 38                 SEC                 ; Set error flag
f3e9 60                 RTS ;Size   73 [BURST_LOAD]
f3ea a5 9f    BULO_25   LDA PTR_HI
f3ec 85 b7              STA FNLEN           ; restore Filename length
f3ee 78                 SEI
f3ef 20 45 e5           JSR IEC_Clock_High
f3f2 20 c3 e5           JSR IEC_Fast_Input
f3f5 2c 0d dc           BIT CIA1_ICR
f3f8 20 03 f5           JSR Toggle_CLOCK_OUT
f3fb 20 ba f4           JSR Read_Burst_Byte   ; burst status byte
f3fe c9 02              CMP #2              ; 2 = file not found
f400 d0 08              BNE BULO_30         ; -> file found
f402 20 8c f4           JSR BULO_Close
f405 68                 PLA
f406 68                 PLA
f407 4c 85 f6           JMP File_Not_Found
f40a 48       BULO_30   PHA                 ; Push transfer status
f40b c9 1f              CMP #$1f            ; burst status = EOI ?
f40d d0 0b              BNE BULO_35
f40f 20 03 f5           JSR Toggle_CLOCK_OUT
f412 20 ba f4           JSR Read_Burst_Byte   ; bytes following status byte
f415 85 a5              STA CNTDN
f417 4c 21 f4           JMP BULO_40
f41a c9 02    BULO_35   CMP #2              ; burst status OK ? ( < 2 )
f41c 90 03              BCC BULO_40         ; -> OK
f41e 68                 PLA
f41f b0 77              BCS BULO_Err           ; -> always
f421 20 33 f5 BULO_40   JSR Loading_Verifying
f424 20 03 f5           JSR Toggle_CLOCK_OUT
f427 20 ba f4           JSR Read_Burst_Byte
f42a 85 ae              STA EAL             ; Load address low
f42c 20 03 f5           JSR Toggle_CLOCK_OUT
f42f 20 ba f4           JSR Read_Burst_Byte
f432 85 af              STA EAH             ; Load address high
f434 a6 9e              LDX PTR_LO          ; SA
f436 d0 08              BNE BULO_45         ; -> SA != 0 -> use address from file
f438 a5 c3              LDA MEMUSS          ; Overwrite load address
f43a a6 c4              LDX MEMUSS+1
f43c 85 ae              STA EAL
f43e 86 af              STX EAH
f440 a5 ae    BULO_45   LDA EAL
f442 a6 af              LDX EAH
f444 85 ac              STA SAL
f446 86 ad              STX SAH
f448 68                 PLA                 ; Pull burst status
f449 c9 1f              CMP #$1f            ; burst status = EOI ?
f44b f0 32              BEQ BULO_65         ; ->
f44d 20 03 f5           JSR Toggle_CLOCK_OUT
f450 a9 fc              LDA #$fc            ; Length of 1st. data block = 252
f452 85 a5              STA CNTDN
f454 20 3d f6 BULO_50   JSR Check_STOP_Key
f457 20 e1 ff           JSR K_STOP
f45a f0 4a              BEQ BULO_Stop
f45c 20 c5 f4           JSR Read_Burst_Block  ; read block in burst mode
f45f b0 51              BCS BULO_Break
f461 20 ba f4           JSR Read_Burst_Byte   ; read burst status
f464 c9 02              CMP #2
f466 90 06              BCC BULO_55         ; -> OK
f468 c9 1f              CMP #$1f            ; EOI ?
f46a f0 0b              BEQ BULO_60         ; -> finish
f46c d0 2a              BNE BULO_Err           ; -> error

f46e 20 03 f5 BULO_55   JSR Toggle_CLOCK_OUT
f471 a9 fe              LDA #$fe            ; Next data block = 254 bytes
f473 85 a5              STA CNTDN
f475 d0 dd              BNE BULO_50         ; loop always

f477 20 03 f5 BULO_60   JSR Toggle_CLOCK_OUT
f47a 20 ba f4           JSR Read_Burst_Byte
f47d 85 a5              STA CNTDN           ; Length of last data block
f47f 20 03 f5 BULO_65   JSR Toggle_CLOCK_OUT
f482 20 c5 f4           JSR Read_Burst_Block
f485 b0 2b              BCS BULO_Break
f487 a9 40              LDA #$40            ; bit 6 = EOI
f489 20 57 f7           JSR SETST

              ; ******************
f48c            BULO_Close ; $f48c
              ; ******************

f48c 20 45 e5           JSR IEC_Clock_High
f48f 58                 CLI
f490 a5 b8              LDA LA
f492 38                 SEC
f493 20 c3 ff           JSR K_CLOSE
f496 18                 CLC
f497 60                 RTS ;Size   12 [BULO_Close]

              ; *****************
f498            BULO_Err  ; $f498
              ; *****************

f498 a9 02              LDA #2              ; bit 1 = TIME OUT READ
f49a 20 57 f7           JSR SETST
f49d 20 8c f4           JSR BULO_Close
f4a0 68                 PLA                 ; remove BURST_LOAD return address
f4a1 68                 PLA
f4a2 a9 29              LDA #$29            ; FILE READ ERROR
f4a4 38                 SEC                 ; error flag
f4a5 60                 RTS                 ; return from LOADSP ;Size   14 [BULO_Err]

              ; *****************
f4a6            BULO_Stop ; $f4a6
              ; *****************

f4a6 20 8c f4           JSR BULO_Close
f4a9 a9 00              LDA #0
f4ab 85 b9              STA SA
f4ad 68                 PLA
f4ae 68                 PLA
f4af 4c b5 f5           JMP Err_IEC_Close

              ; ******************
f4b2            BULO_Break ; $f4b2
              ; ******************

f4b2 20 8c f4           JSR BULO_Close
f4b5 68                 PLA
f4b6 68                 PLA
f4b7 4c 97 f6           JMP Break_IO

              ; ***********************
f4ba            Read_Burst_Byte ; $f4ba
              ; ***********************

f4ba a9 08              LDA #8              ; bit 3 = ISDR
f4bc 2c 0d dc RBB_10    BIT CIA1_ICR
f4bf f0 fb              BEQ RBB_10          ; wait for interrupt ISDR
f4c1 ad 0c dc           LDA CIA1_SDR        ; A = data byte
f4c4 60                 RTS ;Size   11 [Read_Burst_Byte]

              ; ************************
f4c5            Read_Burst_Block ; $f4c5
              ; ************************

f4c5 a9 08              LDA #8              ; bit 3 = ISDR
f4c7 2c 0d dc RBBl_10   BIT CIA1_ICR
f4ca f0 fb              BEQ RBBl_10         ; wait for interrupt ISDR

f4cc ac 0c dc           LDY CIA1_SDR        ; Y = data byte
f4cf ad 00 dd           LDA CIA2_PRA
f4d2 49 10              EOR #%0001 0000     ; $10 toggle CLOCK OUT
f4d4 8d 00 dd           STA CIA2_PRA
f4d7 98                 TYA                 ; A = data byte
f4d8 a4 93              LDY K_VERCK         ; LOAD (0) or VERIFY (1) ?
f4da f0 12              BEQ RBBl_20         ; -> LOAD
f4dc 85 bd              STA RS_Parity       ; store read byte
f4de a0 00              LDY #0
f4e0 20 c9 f7           JSR LDA_IND_EAL     ; load memory byte
f4e3 c5 bd              CMP RS_Parity       ; verify
f4e5 f0 0a              BEQ RBBl_30         ; -> OK
f4e7 a9 10              LDA #16             ; Veriyfy error
f4e9 20 57 f7           JSR SETST
f4ec d0 03              BNE RBBl_30         ; always
f4ee 20 bf f7 RBBl_20   JSR STA_IND_EAL     ; store read byte
f4f1 e6 ae    RBBl_30   INC EAL             ; increment load address
f4f3 d0 08              BNE RBBl_40
f4f5 e6 af              INC EAH
f4f7 a5 af              LDA EAH
f4f9 c9 ff              CMP #$ff            ; Do not load to page $ff
f4fb f0 05              BEQ RBBl_Ret        ; -> exit with C=1 (error)
f4fd c6 a5    RBBl_40   DEC CNTDN           ; decrement burst count down
f4ff d0 c4              BNE Read_Burst_Block
f501 18                 CLC
f502 60       RBBl_Ret  RTS ;Size   62 [Read_Burst_Block]

              ; ************************
f503            Toggle_CLOCK_OUT ; $f503
              ; ************************

f503 ad 00 dd           LDA CIA2_PRA
f506 49 10              EOR #%0001 0000
f508 8d 00 dd           STA CIA2_PRA
f50b 60                 RTS ;Size    9 [Toggle_CLOCK_OUT]

              ; **************************
f50c            Burst_Load_Command ; $f50c
              ; **************************

f50c 1f                 .BYTE $1f           ; "U0" + CHR$(31)
f50d 30 55              .BYTE "0U"          ; used reverse

              ; *****************
f50f            Searching ; $f50f
              ; *****************

f50f a5 9d              LDA MSGFLG
f511 10 1f              BPL OuFi_Ret
f513 a0 0c              LDY #Msg_Searching
f515 20 22 f7           JSR System_Message
f518 a5 b7              LDA FNLEN
f51a f0 16              BEQ OuFi_Ret
f51c a0 17              LDY #Msg_For
f51e 20 22 f7           JSR System_Message

              ; **********************
f521            Ouput_Filename ; $f521
              ; **********************

f521 a4 b7              LDY FNLEN
f523 f0 0d              BEQ OuFi_Ret
f525 a0 00              LDY #0
f527 20 ae f7 OuFi_10   JSR Get_Filename_Char
f52a 20 d2 ff           JSR K_BSOUT
f52d c8                 INY
f52e c4 b7              CPY FNLEN
f530 d0 f5              BNE OuFi_10
f532 60       OuFi_Ret  RTS ;Size   18 [Ouput_Filename]

              ; *************************
f533            Loading_Verifying ; $f533
              ; *************************

f533 a0 49              LDY #Msg_Loading
f535 a5 93              LDA K_VERCK
f537 f0 02              BEQ LoVe_10
f539 a0 59              LDY #Msg_Verifying
f53b 4c 1e f7 LoVe_10   JMP System_Message_Cond

              ; **************
f53e            SAVESP ; $f53e
              ; **************

              ; Input: A = ZP address which holds the start address
              ;        X = end address low
              ;        Y = end address high

f53e 86 ae              STX EAL
f540 84 af              STY EAH
f542 aa                 TAX
f543 b5 00              LDA 0,X
f545 85 c1              STA STAL
f547 b5 01              LDA 1,X
f549 85 c2              STA STAH
f54b 6c 32 03           JMP (ISAVE)         ; default = D_SAVE

              ; **************
f54e            D_SAVE ; $f54e
              ; **************

f54e a5 ba              LDA FA
f550 c9 01              CMP #1
f552 f0 74              BEQ TAPE_SAVE       ; save to tape
f554 c9 04              CMP #4
f556 b0 09              BCS DSAV_30         ; save to IEC

f558 4c 94 f6 DSAV_10   JMP Illegal_Device_Number
f55b 4c 91 f6 DSAV_20   JMP Missing_File_Name
f55e 4c 85 f6           JMP File_Not_Found

f561 a4 b7    DSAV_30   LDY FNLEN
f563 f0 f6              BEQ DSAV_20
f565 a9 61              LDA #$61            ; SA for saving
f567 85 b9              STA SA
f569 20 cb f0           JSR IEC_OPEN
f56c 20 bc f5           JSR Saving          ; print saving filename
f56f a5 ba              LDA FA
f571 20 3e e3           JSR LISTN
f574 a5 b9              LDA SA
f576 20 d2 e4           JSR SECND
f579 a0 00              LDY #0
f57b 20 51 ed           JSR STAL_To_SAL
f57e 20 03 e5           JSR CIOUT           ; write start address low
f581 a5 ad              LDA SAH
f583 20 03 e5           JSR CIOUT           ; write start address high
f586 20 b7 ee DSAV_40   JSR Check_IO_End
f589 b0 10              BCS DSAV_50         ; -> finish
f58b 20 cc f7           JSR LDA_IND_SAL     ; load data byte from memory
f58e 20 03 e5           JSR CIOUT           ; write data byte
f591 20 e1 ff           JSR K_STOP          ; check STOP key
f594 f0 1f              BEQ Err_IEC_Close
f596 20 c1 ee           JSR Inc_SAL_Word    ; increment address SAL/SAH
f599 d0 eb              BNE DSAV_40         ; loop always
f59b 20 26 e5 DSAV_50   JSR UNLSN

              ; *****************
f59e            IEC_Close ; $f59e
              ; *****************

f59e 24 b9              BIT SA
f5a0 30 11              BMI IEC_Ret
f5a2 a5 ba              LDA FA
f5a4 20 3e e3           JSR LISTN
f5a7 a5 b9              LDA SA
f5a9 29 ef              AND #%1110 1111     ; $ef
f5ab 09 e0              ORA #%1110 0000     ; $e0
f5ad 20 d2 e4           JSR SECND

              ; ********************
f5b0            IEC_Unlisten ; $f5b0
              ; ********************

f5b0 20 26 e5           JSR UNLSN
f5b3 18       IEC_Ret   CLC
f5b4 60                 RTS ;Size    5 [IEC_Unlisten]

              ; *********************
f5b5            Err_IEC_Close ; $f5b5
              ; *********************

f5b5 20 9e f5           JSR IEC_Close
f5b8 a9 00              LDA #0
f5ba 38                 SEC
f5bb 60                 RTS ;Size    7 [Err_IEC_Close]

              ; **************
f5bc            Saving ; $f5bc
              ; **************

f5bc a5 9d              LDA MSGFLG
f5be 10 37              BPL TASA_Ret
f5c0 a0 51              LDY #Msg_Saving
f5c2 20 22 f7           JSR System_Message
f5c5 4c 21 f5           JMP Ouput_Filename

              ; ******************
f5c8            TAPE_SAVE  ; $f5c8
              ; ******************

f5c8 20 80 e9           JSR TAPE_XY_Check   ; setup buffer
f5cb 90 8b              BCC DSAV_10         ; -> error
f5cd 20 e9 e9           JSR TAPE_Wait_For_Record
f5d0 b0 25              BCS TASA_Ret        ; -> timed out
f5d2 20 bc f5           JSR Saving
f5d5 a2 03              LDX #3              ; header type for binary
f5d7 a5 b9              LDA SA
f5d9 29 01              AND #1
f5db d0 02              BNE TASA_10
f5dd a2 01              LDX #1              ; header type for BASIC program
f5df 8a       TASA_10   TXA
f5e0 20 19 e9           JSR TAPE_Write_Program_Header
f5e3 b0 12              BCS TASA_Ret        ; -> error
f5e5 20 18 ea           JSR TAPE_Write_Program
f5e8 b0 0d              BCS TASA_Ret        ; -> error
f5ea a5 b9              LDA SA
f5ec 29 02              AND #2
f5ee f0 06              BEQ TASA_20
f5f0 a9 05              LDA #5
f5f2 20 19 e9           JSR TAPE_Write_Program_Header
f5f5 24                 .BYTE $24           ; skip next byte
f5f6 18       TASA_20   CLC
f5f7 60       TASA_Ret  RTS ;Size   48 [TAPE_SAVE]

              ; *************
f5f8            UDTIM ; $f5f8
              ; *************

f5f8 e6 a2              INC JIFFY_CLOCK+2   ; increment 24 bit jiffy clock
f5fa d0 06              BNE UDTIM_10
f5fc e6 a1              INC JIFFY_CLOCK+1
f5fe d0 02              BNE UDTIM_10
f600 e6 a0              INC JIFFY_CLOCK
f602 38       UDTIM_10  SEC                 ; timer - $4f1a01 (24 * 60 * 60 * 60 + 1)
f603 a5 a2              LDA JIFFY_CLOCK+2
f605 e9 01              SBC #1
f607 a5 a1              LDA JIFFY_CLOCK+1
f609 e9 1a              SBC #$1a
f60b a5 a0              LDA JIFFY_CLOCK
f60d e9 4f              SBC #$4f
f60f 90 08              BCC UDTIM_20        ; -> no overflow (24 hours)
f611 a2 00              LDX #0              ; reset timer
f613 86 a0              STX JIFFY_CLOCK
f615 86 a1              STX JIFFY_CLOCK+1
f617 86 a2              STX JIFFY_CLOCK+2
f619 ad 1d 0a UDTIM_20  LDA JIFFY_COUNTDOWN
f61c d0 0b              BNE UDTIM_40
f61e ad 1e 0a           LDA JIFFY_COUNTDOWN+1
f621 d0 03              BNE UDTIM_30
f623 ce 1f 0a           DEC JIFFY_COUNTDOWN+2
f626 ce 1e 0a UDTIM_30  DEC JIFFY_COUNTDOWN+1
f629 ce 1d 0a UDTIM_40  DEC JIFFY_COUNTDOWN
f62c 2c 03 0a           BIT PALNTS          ; check PAL NTSC flag
f62f 10 0c              BPL Check_STOP_Key  ; -> NTSC
f631 ce 36 0a           DEC PAL_ADJ
f634 10 07              BPL Check_STOP_Key  ; -> no PAL adjustment this time
f636 a9 05              LDA #5
f638 8d 36 0a           STA PAL_ADJ         ; reset PAL adjustment counter
f63b d0 bb              BNE UDTIM           ; -> run once more for PAL adjustment

              ; **********************
f63d            Check_STOP_Key ; $f63d
              ; **********************

f63d ad 01 dc           LDA CIA1_KBD_ROW
f640 cd 01 dc           CMP CIA1_KBD_ROW
f643 d0 f8              BNE Check_STOP_Key
f645 aa                 TAX
f646 30 13              BMI Bf65b
f648 a2 bd              LDX #$bd
f64a 8e 00 dc           STX CIA1_KBD_COL
f64d ae 01 dc Bf64d     LDX CIA1_KBD_ROW
f650 ec 01 dc           CPX CIA1_KBD_ROW
f653 d0 f8              BNE Bf64d
f655 8d 00 dc           STA CIA1_KBD_COL
f658 e8                 INX
f659 d0 02              BNE Bf65d
f65b 85 91    Bf65b     STA STKEY
f65d 60       Bf65d     RTS ;Size   33 [Check_STOP_Key]

              ; *************
f65e            RDTIM ; $f65e
              ; *************

f65e 78                 SEI
f65f a5 a2              LDA JIFFY_CLOCK+2
f661 a6 a1              LDX JIFFY_CLOCK+1
f663 a4 a0              LDY JIFFY_CLOCK

              ; **************
f665            SETTIM ; $f665
              ; **************

f665 78                 SEI
f666 85 a2              STA JIFFY_CLOCK+2
f668 86 a1              STX JIFFY_CLOCK+1
f66a 84 a0              STY JIFFY_CLOCK
f66c 58                 CLI
f66d 60                 RTS ;Size    9 [SETTIM]

              ; ************
f66e            STOP ; $f66e
              ; ************

f66e a5 91              LDA STKEY
f670 c9 7f              CMP #$7f
f672 d0 07              BNE STOP_Ret
f674 08                 PHP
f675 20 cc ff           JSR K_CLRCH         ; clear channels
f678 85 d0              STA NDX             ; empty keyboard buffer
f67a 28                 PLP
f67b 60       STOP_Ret  RTS ;Size   14 [STOP]

              ; **********************
f67c            Too_Many_Files ; $f67c
              ; **********************

f67c a9 01              LDA #1
f67e 2c                 BIT

              ; *********************
f67f            File_Open_Err ; $f67f
              ; *********************

f67f a9 02              LDA #2
f681 2c                 BIT

              ; *********************
f682            File_Not_Open ; $f682
              ; *********************

f682 a9 03              LDA #3
f684 2c                 BIT

              ; **********************
f685            File_Not_Found ; $f685
              ; **********************

f685 a9 04              LDA #4
f687 2c                 BIT

              ; **************************
f688            Device_Not_Present ; $f688
              ; **************************

f688 a9 05              LDA #5
f68a 2c                 BIT

              ; **********************
f68b            Not_Input_File ; $f68b
              ; **********************

f68b a9 06              LDA #6
f68d 2c                 BIT

              ; ***********************
f68e            Not_Output_File ; $f68e
              ; ***********************

f68e a9 07              LDA #7
f690 2c                 BIT

              ; *************************
f691            Missing_File_Name ; $f691
              ; *************************

f691 a9 08              LDA #8
f693 2c                 BIT

              ; *****************************
f694            Illegal_Device_Number ; $f694
              ; *****************************

f694 a9 09              LDA #9
f696 2c                 BIT

              ; ****************
f697            Break_IO ; $f697
              ; ****************

f697 a9 10              LDA #16
f699 48                 PHA
f69a 20 cc ff           JSR K_CLRCH
f69d a0 00              LDY #Msg_Error
f69f 24 9d              BIT MSGFLG
f6a1 50 0a              BVC Break_Ret
f6a3 20 22 f7           JSR System_Message
f6a6 68                 PLA
f6a7 48                 PHA
f6a8 09 30              ORA #'0'            ; convert error # to ASCII
f6aa 20 d2 ff           JSR K_BSOUT
f6ad 68       Break_Ret PLA
f6ae 38                 SEC
f6af 60                 RTS ;Size   25 [Break_IO]

              ; *********************
f6b0            Message_Table ; $f6b0
              ; *********************

0000            Msg_Error     = * - Message_Table
f6b0 0d 49 2f           .BYTE "\rI/O ERROR #"^
000c            Msg_Searching = * - Message_Table
f6bc 0d 53 45           .BYTE "\rSEARCHING "^
0017            Msg_For       = * - Message_Table
f6c7 46 4f 52           .BYTE "FOR "^
001b            Msg_Play      = * - Message_Table
f6cb 0d 50 52           .BYTE "\rPRESS PLAY ON TAPE"^
002e            Msg_Record    = * - Message_Table
f6de 50 52 45           .BYTE "PRESS RECORD & PLAY ON TAPE"^
0049            Msg_Loading   = * - Message_Table
f6f9 0d 4c 4f           .BYTE "\rLOADING"^
0051            Msg_Saving    = * - Message_Table
f701 0d 53 41           .BYTE "\rSAVING "^
0059            Msg_Verifying = * - Message_Table
f709 0d 56 45           .BYTE "\rVERIFYING"^
0063            Msg_Found     = * - Message_Table
f713 0d 46 4f           .BYTE "\rFOUND "^
006a            Msg_OK        = * - Message_Table
f71a 0d 4f 4b           .BYTE "\rOK\r"^

              ; ***************************
f71e            System_Message_Cond ; $f71e
              ; ***************************

f71e 24 9d              BIT MSGFLG
f720 10 0d              BPL SyMe_10

              ; **********************
f722            System_Message ; $f722
              ; **********************

f722 b9 b0 f6           LDA Message_Table,Y
f725 08                 PHP
f726 29 7f              AND #%0111 1111 ; $7f
f728 20 d2 ff           JSR K_BSOUT
f72b c8                 INY
f72c 28                 PLP
f72d 10 f3              BPL System_Message
f72f 18       SyMe_10   CLC
f730 60                 RTS ;Size   15 [System_Message]

              ; **************
f731            SETNAM ; $f731
              ; **************

f731 85 b7              STA FNLEN
f733 86 bb              STX FNADR
f735 84 bc              STY FNADR+1
f737 60                 RTS ;Size    7 [SETNAM]

              ; **************
f738            SETLFS ; $f738
              ; **************

f738 85 b8              STA LA
f73a 86 ba              STX FA
f73c 84 b9              STY SA
f73e 60                 RTS ;Size    7 [SETLFS]

              ; **************
f73f            SETBNK ; $f73f
              ; **************

f73f 85 c6              STA BA
f741 86 c7              STX FNBANK
f743 60                 RTS ;Size    5 [SETBNK]

              ; **************
f744            READST ; $f744
              ; **************

f744 a5 ba              LDA FA
f746 c9 02              CMP #2              ; RS232 active ?
f748 d0 0b              BNE REAST_10        ; -> no, read common status
f74a ad 14 0a           LDA RS_Status
f74d 48                 PHA
f74e a9 00              LDA #0
f750 8d 14 0a           STA RS_Status       ; clear RS232 status after reading
f753 68                 PLA
f754 60                 RTS ;Size   17 [READST]
f755 a5 90    REAST_10  LDA STATUS

              ; *************
f757            SETST ; $f757
              ; *************

f757 05 90              ORA STATUS
f759 85 90              STA STATUS
f75b 60                 RTS ;Size    5 [SETST]

              ; **************
f75c            SETMSG ; $f75c
              ; **************

f75c 85 9d              STA MSGFLG
f75e 60                 RTS ;Size    3 [SETMSG]

              ; **************
f75f            SETTMO ; $f75f
              ; **************

f75f 8d 0e 0a           STA TIMOUT
f762 60                 RTS ;Size    4 [SETTMO]

              ; **************
f763            MEMTOP ; $f763
              ; **************

              ; Input:  C=0 set new MEM_TOP from (X/Y)
              ;         C=1 read    MEM_TOP to   (X/Y)

f763 90 06              BCC SET_MEM_TOP
f765 ae 07 0a           LDX MEM_TOP
f768 ac 08 0a           LDY MEM_TOP+1

              ; *******************
f76b            SET_MEM_TOP ; $f76b
              ; *******************

f76b 8e 07 0a           STX MEM_TOP
f76e 8c 08 0a           STY MEM_TOP+1
f771 60                 RTS ;Size    7 [SET_MEM_TOP]

              ; **************
f772            MEMBOT ; $f772
              ; **************

              ; Input:  C=0 set new MEM_BOT from (X/Y)
              ;         C=1 read    MEM_BOT to   (X/Y)

f772 90 06              BCC SET_MEM_BOT
f774 ae 05 0a           LDX MEM_BOT
f777 ac 06 0a           LDY MEM_BOT+1

              ; *******************
f77a            SET_MEM_BOT ; $f77a
              ; *******************

f77a 8e 05 0a           STX MEM_BOT
f77d 8c 06 0a           STY MEM_BOT+1
f780 60                 RTS ;Size    7 [SET_MEM_BOT]

              ; **************
f781            IOBASE ; $f781
              ; **************

f781 a2 00              LDX #<VIC
f783 a0 d0              LDY #>VIC
f785 60                 RTS ;Size    5 [IOBASE]

              ; **************
f786            LKUPSA ; $f786
              ; **************

              ; Lookup secondary address (Y) in table of open files
              ; Input:  Y = secondary address to look for
              ; Output: C=1: not found
              ;         C=0: found A=LA, X=FA, Y=SA

f786 98                 TYA                 ; A = address
f787 a6 98              LDX LDTND           ; X = # of open files
f789 ca       LKSA_10   DEX
f78a 30 0f              BMI LKSA_30         ; -> not found
f78c dd 76 03           CMP SAT,X
f78f d0 f8              BNE LKSA_10
f791 20 12 f2 LKSA_20   JSR Get_LASAFA
f794 aa                 TAX                 ; X = FA
f795 a5 b8              LDA LA
f797 a4 b9              LDY SA
f799 18                 CLC                 ; C=0 : found
f79a 60                 RTS ;Size   21 [LKUPSA]
f79b 38       LKSA_30   SEC                 ; C=1 : not found
f79c 60                 RTS ;Size   23 [LKUPSA]

              ; **************
f79d            LKUPLA ; $f79d
              ; **************

              ; Lookup logical address (A) in table of open files
              ; Input:  A = logical address to look for

f79d aa                 TAX
f79e 20 02 f2           JSR Lookup_X
f7a1 f0 ee              BEQ LKSA_20         ; -> found
f7a3 d0 f6              BNE LKSA_30         ; -> not found

              ; dead code (replaced by DMA at $cf80)

f7a5 bd f0 f7           LDA Bank_Config_Table,X
f7a8 29 fe              AND #%1111 1110 ; $fe
f7aa aa                 TAX
f7ab 4c f0 03           JMP RAM_DMA

              ; *************************
f7ae            Get_Filename_Char ; $f7ae
              ; *************************

f7ae 8e 35 0a           STX FN_SAVE_X
f7b1 a6 c7              LDX FNBANK
f7b3 a9 bb              LDA #FNADR
f7b5 20 d0 f7           JSR INDFET
f7b8 ae 35 0a           LDX FN_SAVE_X
f7bb 60                 RTS ;Size   14 [Get_Filename_Char]

              ; *******************
f7bc            STA_IND_SAL ; $f7bc
              ; *******************

f7bc a2 ac              LDX #SAL
f7be 2c                 BIT

              ; *******************
f7bf            STA_IND_EAL ; $f7bf
              ; *******************

f7bf a2 ae              LDX #EAL
f7c1 8e b9 02           STX STASH+10
f7c4 a6 c6              LDX BA
f7c6 4c da f7           JMP INDSTA

              ; *******************
f7c9            LDA_IND_EAL ; $f7c9
              ; *******************

f7c9 a9 ae              LDA #EAL
f7cb 2c                 BIT

              ; *******************
f7cc            LDA_IND_SAL ; $f7cc
              ; *******************

f7cc a9 ac              LDA #SAL
f7ce a6 c6              LDX BA

              ; **************
f7d0            INDFET ; $f7d0
              ; **************

f7d0 8d aa 02           STA FETCH+8
f7d3 bd f0 f7           LDA Bank_Config_Table,X
f7d6 aa                 TAX
f7d7 4c a2 02           JMP FETCH

              ; **************
f7da            INDSTA ; $f7da
              ; **************

f7da 48                 PHA
f7db bd f0 f7           LDA Bank_Config_Table,X
f7de aa                 TAX
f7df 68                 PLA
f7e0 4c af 02           JMP STASH

              ; **************
f7e3            INDCMP ; $f7e3
              ; **************

f7e3 48                 PHA
f7e4 bd f0 f7           LDA Bank_Config_Table,X
f7e7 aa                 TAX
f7e8 68                 PLA
f7e9 4c be 02           JMP CMPARE

              ; **************
f7ec            GETCFG ; $f7ec
              ; **************

f7ec bd f0 f7           LDA Bank_Config_Table,X
f7ef 60                 RTS ;Size    4 [GETCFG]

              ; *************************
f7f0            Bank_Config_Table ; $f7f0
              ; *************************

              ; MMU configuration bytes

              ; xx.. .... RAM bank
              ; ..xx .... $c000 - $cfff
              ; .... xx.. $8000 - $bfff
              ; .... ..x. $4000 - $7fff
              ; .... ...x $d000 - $dfff

f7f0 3f                 .BYTE %0011 1111    ; $3f RAM 0
f7f1 7f                 .BYTE %0111 1111    ; $7f RAM 1
f7f2 bf                 .BYTE %1011 1111    ; $bf RAM 2
f7f3 ff                 .BYTE %1111 1111    ; $ff RAM 3

f7f4 16                 .BYTE %0001 0110    ; $16 internal ROM, RAM 0, I/O
f7f5 56                 .BYTE %0101 0110    ; $56 internal ROM, RAM 1, I/O
f7f6 96                 .BYTE %1001 0110    ; $96 internal ROM, RAM 2, I/O
f7f7 d6                 .BYTE %1101 0110    ; $d6 internal ROM, RAM 3, I/O

f7f8 2a                 .BYTE %0010 1010    ; $2a external ROM, RAM 0, I/O
f7f9 6a                 .BYTE %0110 1010    ; $2a external ROM, RAM 1, I/O
f7fa aa                 .BYTE %1010 1010    ; $2a external ROM, RAM 2, I/O
f7fb ea                 .BYTE %1110 1010    ; $2a external ROM, RAM 3, I/O

f7fc 06                 .BYTE %0000 0110    ; $06 kernal, int.  ROM, RAM 0, I/O
f7fd 0a                 .BYTE %0000 1010    ; $0a kernal, ext.  ROM, RAM 0, I/O
f7fe 01                 .BYTE %0000 0001    ; $01 kernal, BASIC ROM, RAM 0, CHAR
f7ff 00                 .BYTE %0000 0000    ; $00 kernal, BASIC ROM, RAM 0, I/O

              ; *****************
f800            ROM_FETCH ; $f800
              ; *****************

f800 ad 00 ff           LDA MMU_CR
f803 8e 00 ff           STX MMU_CR
f806 aa                 TAX
f807 b1 ff              LDA ($ff),Y         ; dummy address
f809 8e 00 ff           STX MMU_CR
f80c 60                 RTS ;Size   13 [ROM_FETCH]

              ; *****************
f80d            ROM_STASH ; $f80d
              ; *****************

f80d 48                 PHA
f80e ad 00 ff           LDA MMU_CR
f811 8e 00 ff           STX MMU_CR
f814 aa                 TAX
f815 68                 PLA
f816 91 ff              STA ($ff),Y         ; dummy address
f818 8e 00 ff           STX MMU_CR
f81b 60                 RTS ;Size   15 [ROM_STASH]

              ; ******************
f81c            ROM_CMPARE ; $f81c
              ; ******************

f81c 48                 PHA
f81d ad 00 ff           LDA MMU_CR
f820 8e 00 ff           STX MMU_CR
f823 aa                 TAX
f824 68                 PLA
f825 d1 ff              CMP ($ff),Y         ; dummy address
f827 8e 00 ff           STX MMU_CR
f82a 60                 RTS ;Size   15 [ROM_CMPARE]

              ; ******************
f82b            ROM_JSRFAR ; $f82b
              ; ******************

f82b 20 e3 02           JSR JMPFAR
f82e 85 06              STA A_REG
f830 86 07              STX X_REG
f832 84 08              STY Y_REG
f834 08                 PHP
f835 68                 PLA
f836 85 05              STA S_REG
f838 ba                 TSX
f839 86 09              STX CHARAC
f83b a9 00              LDA #0
f83d 8d 00 ff           STA MMU_CR
f840 60                 RTS ;Size   22 [ROM_JSRFAR]

              ; ******************
f841            ROM_JMPFAR ; $f841
              ; ******************

f841 a2 00              LDX #0
f843 b5 03    JMPF_10   LDA PC_HI,X
f845 48                 PHA
f846 e8                 INX
f847 e0 03              CPX #3
f849 90 f8              BCC JMPF_10
f84b a6 02              LDX BANK
f84d 20 6b ff           JSR K_GETCFG
f850 8d 00 ff           STA MMU_CR
f853 a5 06              LDA A_REG
f855 a6 07              LDX X_REG
f857 a4 08              LDY Y_REG
f859 40                 RTI

              ; ***************
f85a            ROM_DMA ; $f85a
              ; ***************

              ; this routine is copied to and executed at RAM_DMA = $03f0

f85a ae 00 ff           LDX MMU_CR
f85d 8c 01 df           STY DMA_CMD
f860 8d 00 ff           STA MMU_CR
f863 8e 00 ff           STX MMU_CR
f866 60                 RTS ;Size   13 [ROM_DMA]

              ; ***************
f867            PHOENIX ; $f867
              ; ***************

              ; check 4 ROM module configurations and call their
              ; initialization routine if appropiate

f867 78                 SEI
f868 a2 03              LDX #3
f86a 8e c0 0a           STX Module_Bank
f86d ae c0 0a PHOE_10   LDX Module_Bank
f870 bd c1 0a           LDA Module_Flags,X
f873 f0 11              BEQ PHOE_20
f875 a0 00              LDY #0
f877 bd bc e2           LDA ROM_PAGES,X
f87a 85 03              STA PC_HI
f87c 84 04              STY PC_LO
f87e bd c0 e2           LDA ROM_BANK,X
f881 85 02              STA BANK
f883 20 cd 02           JSR JSRFAR
f886 ce c0 0a PHOE_20   DEC Module_Bank
f889 10 e2              BPL PHOE_10
f88b 58                 CLI
f88c a2 08              LDX #8              ; default unit
f88e a9 30              LDA #'0'            ; default drive

              ; ************
f890            BOOT ; $f890
              ; ************

              ; Boot from 1st. sector of floppy disk

              ; Input:  A = drive
              ;         X = unit

f890 85 bf              STA DRIVE           ; ASCII, typically '0'
f892 86 ba              STX FA              ; default 8
f894 8a                 TXA                 ; X = unit / device
f895 20 3d f2           JSR CLOALL          ; close all channels of boot device
f898 a2 00              LDX #0
f89a 86 9f              STX PTR_HI
f89c 86 c2              STX STAH            ; sector = 0
f89e e8                 INX
f89f 86 c1              STX STAL            ; track  = 1
f8a1 c8       BOOT_10   INY                 ; delay loop for 0.3 sec
f8a2 d0 fd              BNE BOOT_10
f8a4 e8                 INX
f8a5 d0 fa              BNE BOOT_10

f8a7 a2 0c              LDX #12            ; copy block read command to stack bottom
f8a9 bd 08 fa BOOT_15   LDA BootComm,X
f8ac 9d 00 01           STA STACK,X
f8af ca                 DEX
f8b0 10 f7              BPL BOOT_15

f8b2 a5 bf              LDA DRIVE
f8b4 8d 06 01           STA STACK+6         ; insert drive #
f8b7 a9 00              LDA #0
f8b9 a2 0f              LDX #15             ; kernal, BASIC ROM, RAM 0, I/O
f8bb 20 3f f7           JSR SETBNK          ; boot to MMU config 15
f8be a9 01              LDA #1
f8c0 a2 15              LDX #<InitDrive
f8c2 a0 fa              LDY #>InitDrive
f8c4 20 31 f7           JSR SETNAM          ; prepare initialization command "I"
f8c7 a9 00              LDA #0
f8c9 a0 0f              LDY #15
f8cb a6 ba              LDX FA
f8cd 20 38 f7           JSR SETLFS          ; specify commandchannel
f8d0 20 c0 ff           JSR K_OPEN          ; send "I" on command channel
f8d3 b0 16              BCS BOOT_20         ; -> branch on error
f8d5 a9 01              LDA #1
f8d7 a2 16              LDX #<Hash
f8d9 a0 fa              LDY #>Hash
f8db 20 31 f7           JSR SETNAM          ; prepare open buffer command "#"
f8de a9 0d              LDA #13
f8e0 a8                 TAY
f8e1 a6 ba              LDX FA
f8e3 20 38 f7           JSR SETLFS          ; prepare open parameter 13,unit,13
f8e6 20 c0 ff           JSR K_OPEN          ; open channel to floppy buffer
f8e9 90 03              BCC BOOT_25         ; -> branch if OK
f8eb 4c 8b f9 BOOT_20   JMP BOOT_Exit
f8ee a9 00    BOOT_25   LDA #<T_Buffer
f8f0 a0 0b              LDY #>T_Buffer
f8f2 85 ac              STA SAL
f8f4 84 ad              STY SAH             ; SAL/SAH = tape buffer
f8f6 20 d5 f9           JSR IEC_Read_Block  ; read boot sector to T_Buffer
f8f9 a2 00              LDX #0
f8fb bd 00 0b BOOT_30   LDA T_Buffer,X      ; look for "CBM" in first 3 bytes
f8fe dd c4 e2           CMP ROM_CBM,X
f901 d0 e8              BNE BOOT_20         ; -> no "CBM" signature: exit
f903 e8                 INX
f904 e0 03              CPX #3
f906 90 f3              BCC BOOT_30         ; loop
f908 20 17 fa           JSR PRIMM           ; OK, print "BOOTING "
f90b 0d 42 4f           .BYTE "\rBOOTING ",0

f915 bd 00 0b BOOT_35   LDA T_Buffer,X      ; copy start and end address
f918 95 a9              STA SAL-3,X         ; X (3..6) -> SAL,SAH,EAL,EAH
f91a e8                 INX
f91b e0 07              CPX #7
f91d 90 f6              BCC BOOT_35
f91f bd 00 0b BOOT_40   LDA T_Buffer,X      ; print boot sector message
f922 f0 06              BEQ BOOT_45         ; starting at byte 7
f924 20 d2 ff           JSR K_BSOUT
f927 e8                 INX
f928 d0 f5              BNE BOOT_40

f92a 86 9e    BOOT_45   STX PTR_LO          ; save index to buffer
f92c 20 17 fa           JSR PRIMM
f92f 2e 2e 2e           .BYTE "...\r",0

f934 a5 ae              LDA EAL
f936 85 c6              STA BA
f938 a5 af    BOOT_50   LDA EAH
f93a f0 09              BEQ BOOT_55         ; -> must not boot to ZP
f93c c6 af              DEC EAH
f93e 20 b3 f9           JSR Read_Next_Block
f941 e6 ad              INC SAH             ; load address += 256
f943 d0 f3              BNE BOOT_50         ; loop

f945 20 8b f9 BOOT_55   JSR BOOT_Exit       ; close channels
f948 a6 9e              LDX PTR_LO          ; X = buffer index
f94a 2c                 BIT                 ; skip next statement

f94b e6 9f    BOOT_60   INC PTR_HI          ; count skipped bytes
f94d e8                 INX
f94e bd 00 0b           LDA T_Buffer,X
f951 d0 f8              BNE BOOT_60         ; skip buffer content until zero

f953 e8                 INX
f954 86 04              STX PC_LO           ; save end index
f956 a6 9e              LDX PTR_LO          ; X = start index
f958 a9 3a              LDA #':'
f95a 9d 00 0b           STA T_Buffer,X      ; store ':'
f95d ca                 DEX
f95e a5 bf              LDA DRIVE
f960 9d 00 0b           STA T_Buffer,X      ; precede command with drive and ':'
f963 86 9e              STX PTR_LO          ; update start index
f965 a6 9f              LDX PTR_HI          ; filename length
f967 f0 15              BEQ BOOT_65         ; -> nothing to load
f969 e8                 INX
f96a e8                 INX
f96b 8a                 TXA                 ; length plus 2 (drive and :)
f96c a6 9e              LDX PTR_LO
f96e a0 0b              LDY #11
f970 20 31 f7           JSR SETNAM          ; prepare filename
f973 a9 00              LDA #0
f975 aa                 TAX
f976 20 3f f7           JSR SETBNK
f979 a9 00              LDA #0
f97b 20 69 f2           JSR LOADSP_MEM      ; load file
f97e a9 0b    BOOT_65   LDA #>T_Buffer
f980 85 03              STA PC_HI
f982 a9 0f              LDA #15
f984 85 02              STA BANK
f986 20 cd 02           JSR JSRFAR          ; call boot sector address
f989 18                 CLC
f98a 60                 RTS ;Size  251 [BOOT]

              ; *****************
f98b            BOOT_Exit ; $f98b
              ; *****************

f98b 08                 PHP                 ; save status
f98c 48                 PHA                 ; save A
f98d 20 cc ff           JSR K_CLRCH
f990 a9 0d              LDA #13
f992 18                 CLC
f993 20 c3 ff           JSR K_CLOSE         ; close floppy buffer channel
f996 a2 00              LDX #0
f998 20 c9 ff           JSR K_CKOUT         ; command channel
f99b b0 0a              BCS BOEx_10
f99d a9 55              LDA #'U'
f99f 20 d2 ff           JSR K_BSOUT
f9a2 a9 49              LDA #'I'
f9a4 20 d2 ff           JSR K_BSOUT         ; send "UI" (reset floppy drive)
f9a7 20 cc ff BOEx_10   JSR K_CLRCH
f9aa a9 00              LDA #0
f9ac 38                 SEC
f9ad 20 c3 ff           JSR K_CLOSE         ; close command channel
f9b0 68                 PLA
f9b1 28                 PLP
f9b2 60                 RTS ;Size   40 [BOOT_Exit]

              ; ***********************
f9b3            Read_Next_Block ; $f9b3
              ; ***********************

              ; This routine modifies the read track/sector command for the
              ; next block by increasing sector or track
              ; This routine assumes a 1541/1571/4040 formatted floppy disk
              ; and will give correct results only in the first zone with
              ; sector counts of 21 sectors per track.
              ; On other drives, eg. 1581 it will work only in the first
              ; 21 sectors of track 1.

f9b3 a6 c2              LDX STAH            ; sector
f9b5 e8                 INX                 ; next sector
f9b6 e0 15              CPX #21             ; sector range:  0-20
f9b8 90 04              BCC NeBl_10
f9ba a2 00              LDX #0              ; set sector to tero
f9bc e6 c1              INC STAL            ; increment track
f9be 86 c2    NeBl_10   STX STAH            ; update sector
f9c0 8a                 TXA
f9c1 20 fb f9           JSR Format_Byte     ; format sector
f9c4 8d 00 01           STA STACK
f9c7 8e 01 01           STX STACK+1         ; update sector in command string
f9ca a5 c1              LDA STAL
f9cc 20 fb f9           JSR Format_Byte     ; format track
f9cf 8d 03 01           STA STACK+3
f9d2 8e 04 01           STX STACK+4         ; update track in command string

              ; **********************
f9d5            IEC_Read_Block ; $f9d5
              ; **********************

f9d5 a2 00              LDX #0
f9d7 20 c9 ff           JSR K_CKOUT         ; command channel
f9da a2 0c              LDX #12
f9dc bd 00 01 ReBl_10   LDA STACK,X         ; send U1 block read command
f9df 20 d2 ff           JSR K_BSOUT
f9e2 ca                 DEX
f9e3 10 f7              BPL ReBl_10
f9e5 20 cc ff           JSR K_CLRCH
f9e8 a2 0d              LDX #13
f9ea 20 c6 ff           JSR K_CHKIN         ; floppy buffer channel
f9ed a0 00              LDY #0
f9ef 20 cf ff ReBl_20   JSR K_BASIN         ; read from floppy buffer
f9f2 20 bc f7           JSR STA_IND_SAL     ; store to memory
f9f5 c8                 INY
f9f6 d0 f7              BNE ReBl_20         ; loop until 256 bytes are read
f9f8 4c cc ff           JMP K_CLRCH

              ; *******************
f9fb            Format_Byte ; $f9fb
              ; *******************

              ; Input : A = binary number
              ; Output: A = ones digit
              ;         X = tens digit

f9fb a2 30              LDX #'0'
f9fd 38                 SEC
f9fe e9 0a    FoBy_10   SBC #10
fa00 90 03              BCC FoBy_20
fa02 e8                 INX
fa03 b0 f9              BCS FoBy_10
fa05 69 3a    FoBy_20   ADC #'0'+10
fa07 60                 RTS ;Size   13 [Format_Byte]

fa08 30 30 20 BootComm  .BYTE "00 10 0 31:1U" ; U1:13 0 01 00 (1st. sector)
fa15 49       InitDrive .BYTE "I"
fa16 23       Hash      .BYTE "#"

              ; *************
fa17            PRIMM ; $fa17
              ; *************

fa17 48                 PHA
fa18 8a                 TXA
fa19 48                 PHA
fa1a 98                 TYA
fa1b 48                 PHA
fa1c a0 00              LDY #0
fa1e ba       PRIMM_10  TSX
fa1f fe 04 01           INC STACK+4,X       ; return address low
fa22 d0 03              BNE PRIMM_20
fa24 fe 05 01           INC STACK+5,X       ; return address high
fa27 bd 04 01 PRIMM_20  LDA STACK+4,X
fa2a 85 ce              STA IMPARM
fa2c bd 05 01           LDA STACK+5,X
fa2f 85 cf              STA IMPARM+1
fa31 b1 ce              LDA (IMPARM),Y
fa33 f0 05              BEQ PRIMM_30
fa35 20 d2 ff           JSR K_BSOUT
fa38 90 e4              BCC PRIMM_10
fa3a 68       PRIMM_30  PLA
fa3b a8                 TAY
fa3c 68                 PLA
fa3d aa                 TAX
fa3e 68                 PLA
fa3f 60                 RTS                 ; 41 bytes ;Size   41 [PRIMM]

              ; ******************
fa40            NMI_Normal ; $fa40
              ; ******************

fa40 d8                 CLD                 ; clear decimal flag
fa41 a9 7f              LDA #$7f
fa43 8d 0d dd           STA CIA2_ICR
fa46 ac 0d dd           LDY CIA2_ICR
fa49 30 14              BMI NMI_10          ; -> RS232 interrupt
fa4b 20 3d f6           JSR Check_STOP_Key
fa4e 20 e1 ff           JSR K_STOP
fa51 d0 0c              BNE NMI_10          ; -> no STOP key pressed
fa53 20 56 e0           JSR RESTOR          ; STOP RESTORE action
fa56 20 09 e1           JSR IOINIT
fa59 20 00 c0           JSR E_CINT
fa5c 6c 00 0a           JMP (RESET_VECTOR)

fa5f 20 05 e8 NMI_10    JSR RS_NMI_Main
fa62 4c 33 ff           JMP IRQ_Exit

              ; ******************
fa65            IRQ_Normal ; $fa65
              ; ******************

fa65 d8                 CLD                 ; clear decimal flag
fa66 20 24 c0           JSR E_RASTER        ; check for raster interrupt
fa69 90 12              BCC IRQN_10         ;
fa6b 20 f8 f5           JSR UDTIM           ; update clock
fa6e 20 d0 ee           JSR TAPE_Switch_Sense
fa71 ad 0d dc           LDA CIA1_ICR        ; clear IRQ flags
fa74 ad 04 0a           LDA INIT_STATUS
fa77 4a                 LSR A
fa78 90 03              BCC IRQN_10
fa7a 20 06 40           JSR B_BASIC_IRQ     ; perform BASIC tasks
fa7d 4c 33 ff IRQN_10   JMP IRQ_Exit

              ; *********************
fa80            Keytab_Normal ; $fa80
              ; *********************

fa80 14 0d 1d           .BYTE $14,$0d,$1d,$88 ; 00  DEL  CR   Down F7
fa84 85 86 87           .BYTE $85,$86,$87,$11 ; 04  F1   F3   F5   Right
fa88 33 57 41           .BYTE '3','W','A','4' ; 08  3    W    A    4
fa8c 5a 53 45           .BYTE 'Z','S','E',$01 ; 0C  Z    S    E    LShift
fa90 35 52 44           .BYTE '5','R','D','6' ; 10  5    R    D    6
fa94 43 46 54           .BYTE 'C','F','T','X' ; 14  C    F    T    X
fa98 37 59 47           .BYTE '7','Y','G','8' ; 18  7    Y    G    8
fa9c 42 48 55           .BYTE 'B','H','U','V' ; 1C  B    H    U    V
faa0 39 49 4a           .BYTE '9','I','J','0' ; 20  9    I    J    0
faa4 4d 4b 4f           .BYTE 'M','K','O','N' ; 24  M    K    O    N
faa8 2b 50 4c           .BYTE '+','P','L','-' ; 28  +    P    L    -
faac 2e 3a 40           .BYTE '.',':','@',',' ; 2C  .    :    @    ,
fab0 5c 2a 3b           .BYTE $5c,'*',';',$13 ; 30  pnd  *    ;    HOME
fab4 01 3d 5e           .BYTE $01,'=','^','/' ; 34  RShi =    ^    /
fab8 31 5f 04           .BYTE '1','_',$04,'2' ; 38  1    _    Ctrl 2
fabc 20 02 51           .BYTE ' ',$02,'Q',$03 ; 3C  SPC       Q    STOP
fac0 84 38 35           .BYTE $84,'8','5',$09 ; 40  HELP K8   K5   TAB
fac4 32 34 37           .BYTE '2','4','7','1' ; 44  K2   K4   K7   K1
fac8 1b 2b 2d           .BYTE $1b,'+','-',$0a ; 48  ESC  K+   K-   LF
facc 0d 36 39           .BYTE $0d,'6','9','3' ; 4C  Entr K6   K9   K3
fad0 08 30 2e           .BYTE $08,'0','.',$91 ; 50  ALT  K0   K.   Up
fad4 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Down Left Righ NOSCRL
fad8 ff                 .BYTE $ff             ; 58

              ; **********************
fad9            Keytab_Shifted ; $fad9
              ; **********************

fad9 94 8d 9d           .BYTE $94,$8d,$9d,$8c ; 00  INST ShCR Up   F8
fadd 89 8a 8b           .BYTE $89,$8a,$8b,$91 ; 04  F2   F4   F6   Left
fae1 23 d7 c1           .BYTE '#',$d7,$c1,'$' ; 08  #    W    A    $
fae5 da d3 c5           .BYTE $da,$d3,$c5,$01 ; 0C  Z    S    E    LShift
fae9 25 d2 c4           .BYTE '%',$d2,$c4,'&' ; 10  %    R    D    &
faed c3 c6 d4           .BYTE $c3,$c6,$d4,$d8 ; 14  C    F    T    X
faf1 27 d9 c7           .BYTE $27,$d9,$c7,'(' ; 18  Apo  Y    G    (
faf5 c2 c8 d5           .BYTE $c2,$c8,$d5,$d6 ; 1C  B    H    U    V
faf9 29 c9 ca           .BYTE ')',$c9,$ca,'0' ; 20  )    I    J    0
fafd cd cb cf           .BYTE $cd,$cb,$cf,$ce ; 24  M    K    O    N
fb01 db d0 cc           .BYTE $db,$d0,$cc,$dd ; 28  +    P    L    -
fb05 3e 5b ba           .BYTE '>','[',$ba,'<' ; 2C  >    [    @    <
fb09 a9 c0 5d           .BYTE $a9,$c0,']',$93 ; 30  pnd  *    ]    CLR
fb0d 01 3d de           .BYTE $01,'=',$de,'?' ; 34  RShi =    ^    ?
fb11 21 5f 04           .BYTE '!','_',$04,$22 ; 38  !    _    Ctrl Quote
fb15 a0 02 d1           .BYTE $a0,$02,$d1,$83 ; 3C  SPC       Q    RUN
fb19 84 38 35           .BYTE $84,'8','5',$18 ; 40  HELP K8   K5   TAB
fb1d 32 34 37           .BYTE '2','4','7','1' ; 44  K2   K4   K7   K1
fb21 1b 2b 2d           .BYTE $1b,'+','-',$0a ; 48  ESC  K+   K-   LF
fb25 8d 36 39           .BYTE $8d,'6','9','3' ; 4C  Entr K6   K9   K3
fb29 08 30 2e           .BYTE $08,'0','.',$91 ; 50  ALT  K0   K.   Up
fb2d 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Righ Left Down NOSCRL
fb31 ff                 .BYTE $ff             ; 58

              ; ******************
fb32            Keytab_CBM ; $fb32
              ; ******************

fb32 94 8d 9d           .BYTE $94,$8d,$9d,$8c ; 00  INST ShCR Up   F8
fb36 89 8a 8b           .BYTE $89,$8a,$8b,$91 ; 04  F2   F4   F6   Left
fb3a 96 b3 b0           .BYTE $96,$b3,$b0,$97 ; 08  #    W    A    $
fb3e ad ae b1           .BYTE $ad,$ae,$b1,$01 ; 0C  Z    S    E    LShift
fb42 98 b2 ac           .BYTE $98,$b2,$ac,$99 ; 10  %    R    D    &
fb46 bc bb a3           .BYTE $bc,$bb,$a3,$bd ; 14  C    F    T    X
fb4a 9a b7 a5           .BYTE $9a,$b7,$a5,$9b ; 18  Apo  Y    G    (
fb4e bf b4 b8           .BYTE $bf,$b4,$b8,$be ; 1C  B    H    U    V
fb52 29 a2 b5           .BYTE $29,$a2,$b5,$30 ; 20  )    I    J    0
fb56 a7 a1 b9           .BYTE $a7,$a1,$b9,$aa ; 24  M    K    O    N
fb5a a6 af b6           .BYTE $a6,$af,$b6,$dc ; 28  +    P    L    -
fb5e 3e 5b a4           .BYTE '>','[',$a4,'<' ; 2C  >    [    @    <
fb62 a8 df 5d           .BYTE $a8,$df,$5d,$93 ; 30  pnd  *    ]    CLR
fb66 01 3d de           .BYTE $01,'=',$de,'?' ; 34  RShi =    ^    ?
fb6a 81 5f 04           .BYTE $81,$5f,$04,$95 ; 38  !    _    Ctrl Quote
fb6e a0 02 ab           .BYTE $a0,$02,$ab,$03 ; 3C  SPC       Q    STOP
fb72 84 38 35           .BYTE $84,'8','5',$18 ; 40  HELP K8   K5   TAB
fb76 32 34 37           .BYTE '2','4','7','1' ; 44  K2   K4   K7   K1
fb7a 1b 2b 2d           .BYTE $1b,'+','-',$0a ; 48  ESC  K+   K-   LF
fb7e 8d 36 39           .BYTE $8d,'6','9','3' ; 4C  Entr K6   K9   K3
fb82 08 30 2e           .BYTE $08,'0','.',$91 ; 50  ALT  K0   K.   Up
fb86 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Righ Left Down NOSCRL
fb8a ff                 .BYTE $ff             ; 58

              ; **********************
fb8b            Keytab_Control ; $fb8b
              ; **********************

fb8b ff ff ff           .BYTE $ff,$ff,$ff,$ff ; 00  INST ShCR Up   F8
fb8f ff ff ff           .BYTE $ff,$ff,$ff,$ff ; 04  F2   F4   F6   Left
fb93 1c 17 01           .BYTE $1c,$17,$01,$9f ; 08  #    W    A    $
fb97 1a 13 05           .BYTE $1a,$13,$05,$ff ; 0C  Z    S    E    LShift
fb9b 9c 12 04           .BYTE $9c,$12,$04,$1e ; 10  %    R    D    &
fb9f 03 06 14           .BYTE $03,$06,$14,$18 ; 14  C    F    T    X
fba3 1f 19 07           .BYTE $1f,$19,$07,$9e ; 18  Apo  Y    G    (
fba7 02 08 15           .BYTE $02,$08,$15,$16 ; 1C  B    H    U    V
fbab 12 09 0a           .BYTE $12,$09,$0a,$92 ; 20  )    I    J    0
fbaf 0d 0b 0f           .BYTE $0d,$0b,$0f,$0e ; 24  M    K    O    N
fbb3 ff 10 0c           .BYTE $ff,$10,$0c,$ff ; 28  +    P    L    -
fbb7 ff 1b 00           .BYTE $ff,$1b,$00,$ff ; 2C  >    [    @    <
fbbb 1c ff 1d           .BYTE $1c,$ff,$1d,$ff ; 30  pnd  *    ]    CLR
fbbf ff 1f 1e           .BYTE $ff,$1f,$1e,$ff ; 34  RShi =    ^    ?
fbc3 90 06 ff           .BYTE $90,$06,$ff,$05 ; 38  !    _    Ctrl Quote
fbc7 ff ff 11           .BYTE $ff,$ff,$11,$ff ; 3C  SPC       Q    STOP
fbcb 84 38 35           .BYTE $84,$38,$35,$18 ; 40  HELP K8   K5   TAB
fbcf 32 34 37           .BYTE $32,$34,$37,$31 ; 44  K2   K4   K7   K1
fbd3 1b 2b 2d           .BYTE $1b,$2b,$2d,$0a ; 48  ESC  K+   K-   LF
fbd7 8d 36 39           .BYTE $8d,$36,$39,$33 ; 4C  Entr K6   K9   K3
fbdb 08 30 2e           .BYTE $08,$30,$2e,$91 ; 50  ALT  K0   K.   Up
fbdf 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Righ Left Down NOSCRL
fbe3 ff                 .BYTE $ff             ; 58

              ; ***********************
fbe4            Keytab_Capslock ; $fbe4
              ; ***********************

fbe4 14 0d 1d           .BYTE $14,$0d,$1d,$88 ; 00  INST ShCR Up   F8
fbe8 85 86 87           .BYTE $85,$86,$87,$11 ; 04  F2   F4   F6   Left
fbec 33 d7 c1           .BYTE $33,$d7,$c1,$34 ; 08  #    W    A    $
fbf0 da d3 c5           .BYTE $da,$d3,$c5,$01 ; 0C  Z    S    E    LShift
fbf4 35 d2 c4           .BYTE $35,$d2,$c4,$36 ; 10  %    R    D    &
fbf8 c3 c6 d4           .BYTE $c3,$c6,$d4,$d8 ; 14  C    F    T    X
fbfc 37 d9 c7           .BYTE $37,$d9,$c7,$38 ; 18  Apo  Y    G    (
fc00 c2 c8 d5           .BYTE $c2,$c8,$d5,$d6 ; 1C  B    H    U    V
fc04 39 c9 ca           .BYTE $39,$c9,$ca,$30 ; 20  )    I    J    0
fc08 cd cb cf           .BYTE $cd,$cb,$cf,$ce ; 24  M    K    O    N
fc0c 2b d0 cc           .BYTE $2b,$d0,$cc,$2d ; 28  +    P    L    -
fc10 2e 3a 40           .BYTE $2e,$3a,$40,$2c ; 2C  >    [    @    <
fc14 5c 2a 3b           .BYTE $5c,$2a,$3b,$13 ; 30  pnd  *    ]    CLR
fc18 01 3d 5e           .BYTE $01,$3d,$5e,$2f ; 34  RShi =    ^    ?
fc1c 31 5f 04           .BYTE $31,$5f,$04,$32 ; 38  !    _    Ctrl Quote
fc20 20 02 d1           .BYTE $20,$02,$d1,$03 ; 3C  SPC       Q    STOP
fc24 84 38 35           .BYTE $84,$38,$35,$09 ; 40  HELP K8   K5   TAB
fc28 32 34 37           .BYTE $32,$34,$37,$31 ; 44  K2   K4   K7   K1
fc2c 1b 2b 2d           .BYTE $1b,$2b,$2d,$0a ; 48  ESC  K+   K-   LF
fc30 0d 36 39           .BYTE $0d,$36,$39,$33 ; 4C  Entr K6   K9   K3
fc34 08 30 2e           .BYTE $08,$30,$2e,$91 ; 50  ALT  K0   K.   Up
fc38 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Righ Left Down NOSCRL
fc3c ff ff ff           .BYTE $ff,$ff,$ff,$ff ; 58

              ; ****************
fc40            Set_CRSW ; $fc40
              ; ****************

fc40 05 d6              ORA CRSW
fc42 85 d6              STA CRSW
fc44 a5 eb              LDA Cursor_Row
fc46 8d 30 0a           STA LINTMP
fc49 60                 RTS ;Size   10 [Set_CRSW]

              ; ****************
fc4a            EA_to_SA ; $fc4a
              ; ****************

fc4a a5 ae              LDA EAL
fc4c a4 af              LDY EAH
fc4e 85 ac              STA SAL
fc50 84 ad              STY SAH
fc52 4c 33 f5           JMP Loading_Verifying

              ; ******************
fc55            Init_RS232 ; $fc55
              ; ******************

fc55 8d 37 0a           STA VSH_SPEED
fc58 8d 11 0a           STA RS_Command
fc5b 8d 12 0a           STA RS_Baudrate
fc5e 8d 13 0a           STA RS_Baudrate+1
fc61 a2 06              LDX #6
fc63 8e 10 0a           STX RS_Control
fc66 60                 RTS ;Size   18 [Init_RS232]

              ; ***********************
fc67            VDC_Program_Mod ; $fc67
              ; ***********************

fc67 a0 00              LDY #0
fc69 a9 7f              LDA #$7f
fc6b 8c 00 d6           STY VDC_Register
fc6e 8d 01 d6           STA VDC_Data
fc71 4c dc e1           JMP VDC_Program_X

fc74 ff ff ff           .BYTE $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff

0000 TRUE     #if KEYBOARD != 255
              ; **********************
fc80            Edit_Patch_DIN ; $fc80
              ; **********************

fc80 8d c5 0a           STA DINFLAG
fc83 8d 18 d4           STA SID_Volume
fc86 60                 RTS ;Size    7 [Edit_Patch_DIN]

              ; ***********************
fc87            K_Scan_Keyboard ; $fc87
              ; ***********************

fc87 2c c5 0a           BIT DINFLAG
fc8a 30 37              BMI KEY_40          ; -> ASCII keyboard
fc8c a5 d3              LDA SHFLAG
fc8e 29 10              AND #%0001 0000     ; $10
fc90 f0 0d              BEQ KEY_10          ; -> No CAPS lock
fc92 ad 3f 03           LDA DECODE+1
fc95 c9 fd              CMP #>DIN_Normal
fc97 f0 2a              BEQ KEY_40
fc99 a9 34              LDA #<DIN_Key_Tables
fc9b a0 fe              LDY #>DIN_Key_Tables
fc9d d0 0b              BNE KEY_20          ; always

fc9f ad 3f 03 KEY_10    LDA DECODE+1
fca2 c9 fa              CMP #>Keytab_Normal
fca4 f0 1d              BEQ KEY_40
fca6 a9 6f              LDA #<ASCII_Key_Tables
fca8 a0 c0              LDY #>ASCII_Key_Tables

fcaa 85 cc    KEY_20    STA KEYTAB
fcac 84 cd              STY KEYTAB+1
fcae a0 0b              LDY #11
fcb0 b1 cc    KEY_30    LDA (KEYTAB),Y      ; update table vectors
fcb2 99 3e 03           STA DECODE,Y
fcb5 88                 DEY
fcb6 10 f8              BPL KEY_30
fcb8 c8                 INY
fcb9 8c c5 0a           STY DINFLAG         ; DINFLAG = 0
fcbc 08                 PHP
fcbd 78                 SEI
fcbe 20 0c ce           JSR Edit_Load_Chargen
fcc1 28                 PLP
fcc2 60                 RTS ;Size   60 [K_Scan_Keyboard]
fcc3 4c 5d c5 KEY_40    JMP Scan_Keyboard

              ; *****************
fcc6            Check_DIN ; $fcc6
              ; *****************

fcc6 ae 3f 03           LDX DECODE+1
fcc9 e0 fd              CPX #>DIN_Normal
fccb d0 55              BNE CDIN_90         ; -> US keyboard mode
fccd ae c5 0a           LDX DINFLAG
fcd0 30 50              BMI CDIN_90         ; -> already in DIN mode
fcd2 f0 1d              BEQ CDIN_30         ; -> last key was not an accented key
fcd4 bc 45 fe           LDY Accent_Index,X  ; Y = # of diacritics to check
fcd7 ca                 DEX                 ; X = 0,1,2 for accent key
fcd8 88       CDIN_10   DEY                 ; Y = 2,6,11
fcd9 48                 PHA                 ; push A
fcda 98                 TYA                 ; A = 2,6,11
fcdb dd 45 fe           CMP Accent_Index,X  ; compare with prevoius index
fcde 68                 PLA                 ; pull A
fcdf 90 08              BCC CDIN_20         ; -> exit comparison loop
fce1 d9 4a fe           CMP Accent_Vocals-1,Y ; compare with allowed chars
fce4 d0 f2              BNE CDIN_10         ; -> no match: loop

fce6 b9 65 fe           LDA Accent_Codes-1,Y      ; load diacritic character
fce9 48       CDIN_20   PHA
fcea 29 7f              AND #%0111 1111     ; $7f
fcec c9 20              CMP #' '            ; blank ?
fcee 68                 PLA
fcef 90 23              BCC CDIN_60         ; -> not printable

fcf1 a2 05    CDIN_30   LDX #5              ; check for accents and circumflex
fcf3 dd 3f fe CDIN_40   CMP Accent_Key-1,X
fcf6 f0 03              BEQ CDIN_50         ; found accent acute, grave or circumflec
fcf8 ca                 DEX
fcf9 d0 f8              BNE CDIN_40
fcfb 8e c5 0a CDIN_50   STX DINFLAG         ; store accent index or zero
fcfe e0 00              CPX #0
fd00 f0 20              BEQ CDIN_90         ; -> no accent key
fd02 a8                 TAY                 ; Y = key
fd03 24 f6              BIT INSFLG          ; insert flag ?
fd05 30 0d              BMI CDIN_60         ; -> branch on auto insert
fd07 24 d7              BIT MODE_80
fd09 10 0a              BPL CDIN_70         ; -> branch on 40 column mode
fd0b a2 0a              LDX #10
fd0d 20 da cd           JSR VDC_Read_Register_X
fd10 29 40              AND #%0100 0000     ; $40
fd12 d0 06              BNE CDIN_80         ; -> cursor is blinking
fd14 60       CDIN_60   RTS ;Size   79 [Check_DIN]
fd15 ad 27 0a CDIN_70   LDA BLNSW
fd18 d0 fa              BNE CDIN_60
fd1a 98       CDIN_80   TYA
fd1b 09 40              ORA #%0100 0000     ; $40
fd1d 29 7f              AND #%0111 1111     ; $7f
fd1f 4c 2f cc           JMP Edit_Put_Char_Att
fd22 a6 d3    CDIN_90   LDX SHFLAG
fd24 a4 d5              LDY LSTX
fd26 6c 3c 03           JMP (KEYCHK)        ; -> Edit_Use_Function_Key

              ; ******************
fd29            DIN_Normal ; $fd29
              ; ******************

0000 TRUE     #if KEYBOARD == 0
fd29 14 0d 1d           .BYTE $14,$0d,$1d,$88 ; 00  DEL  CR   Down F7
fd2d 85 86 87           .BYTE $85,$86,$87,$11 ; 04  F1   F3   F5   Right
fd31 33 57 41           .BYTE '3','W','A','4' ; 08  3    W    A    4
fd35 59 53 45           .BYTE 'Y','S','E',$01 ; 0C [Y]   S    E    LShift
fd39 35 52 44           .BYTE '5','R','D','6' ; 10  5    R    D    6
fd3d 43 46 54           .BYTE 'C','F','T','X' ; 14  C    F    T    X
fd41 37 5a 47           .BYTE '7','Z','G','8' ; 18  7   [Z]   G    8
fd45 42 48 55           .BYTE 'B','H','U','V' ; 1C  B    H    U    V
fd49 39 49 4a           .BYTE '9','I','J','0' ; 20  9    I    J    0
fd4d 4d 4b 4f           .BYTE 'M','K','O','N' ; 24  M    K    O    N
fd51 be 50 4c           .BYTE $be,'P','L',$af ; 28 [sz]  P    L   [Acc]
fd55 2e bc bd           .BYTE '.',$bc,$bd,',' ; 2C  .   [oe] [ue]  ,
fd59 5b 2b bb           .BYTE '[','+',$bb,$13 ; 30  [    +   [ae]  HOME
fd5d 01 23 5d           .BYTE $01,'#',']','-' ; 34  RShi[#]   ]   [-]
fd61 31 3c 04           .BYTE '1','<',$04,'2' ; 38  1   [<]   Ctrl 2
fd65 20 02 51           .BYTE ' ',$02,'Q',$03 ; 3C  SPC       Q    STOP
fd69 84 38 35           .BYTE $84,'8','5',$09 ; 40  HELP K8   K5   TAB
fd6d 32 34 37           .BYTE '2','4','7','1' ; 44  K2   K4   K7   K1
fd71 1b 2b 2d           .BYTE $1b,'+','-',$0a ; 48  ESC  K+   K-   LF
fd75 0d 36 39           .BYTE $0d,'6','9','3' ; 4C  Entr K6   K9   K3
fd79 08 30 2e           .BYTE $08,'0','.',$91 ; 50  ALT  K0   K.   Up
fd7d 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Down Left Righ NOSCRL
fd81 ff                 .BYTE $ff             ; 58
              #endif
0001 FALSE    #if KEYBOARD == 2
SKIP                   .BYTE $14,$0d,$1d,$88
SKIP                   .BYTE $85,$86,$87,$11
SKIP                   .BYTE '"','Z','Q',$27
SKIP                   .BYTE 'W','S','E',$01
SKIP                   .BYTE '(','R','D',$b0
SKIP                   .BYTE 'C','F','T','X'
SKIP                   .BYTE $b2,'Y','G','!'
SKIP                   .BYTE 'B','H','U','V'
SKIP                   .BYTE $df,'I','J',$b1
SKIP                   .BYTE ',','K','O','N'
SKIP                   .BYTE ')','P','L','-'
SKIP                   .BYTE ':','M',$ae,';'
SKIP                   .BYTE '@','$',$b5,$13
SKIP                   .BYTE $01,'^','*','='
SKIP                   .BYTE '&','<',$04,$bf
SKIP                   .BYTE ' ',$02,'A',$03
SKIP                   .BYTE $84,'8','5',$09
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $0d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 3
SKIP                   .BYTE $14,$0d,$1d,$88
SKIP                   .BYTE $85,$86,$87,$11
SKIP                   .BYTE '3','W','A','4'
SKIP                   .BYTE 'Y','S','E',$01
SKIP                   .BYTE '5','R','D','6'
SKIP                   .BYTE 'C','F','T','X'
SKIP                   .BYTE '7','Z','G','8'
SKIP                   .BYTE 'B','H','U','V'
SKIP                   .BYTE '9','I','J','0'
SKIP                   .BYTE 'M','K','O','N'
SKIP                   .BYTE $27,'P','L',$ae
SKIP                   .BYTE '.',$bc,$bd,','
SKIP                   .BYTE ']',$af,$bb,$13
SKIP                   .BYTE $01,'$','[','-'
SKIP                   .BYTE '1','<',$04,'2'
SKIP                   .BYTE ' ',$02,'Q',$03
SKIP                   .BYTE $84,'8','5',$09
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $0d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 4
SKIP                   .BYTE $14,$0d,$1d,$88
SKIP                   .BYTE $85,$86,$87,$11
SKIP                   .BYTE '3','W','A','4'
SKIP                   .BYTE 'Z','S','E',$01
SKIP                   .BYTE '5','R','D','6'
SKIP                   .BYTE 'C','F','T','X'
SKIP                   .BYTE '7','Y','G','8'
SKIP                   .BYTE 'B','H','U','V'
SKIP                   .BYTE '9','I','J','0'
SKIP                   .BYTE 'M','K','O','N'
SKIP                   .BYTE '-','P','L','='
SKIP                   .BYTE '.',$5c,']',','
SKIP                   .BYTE ':','@','[',$13
SKIP                   .BYTE $01,';','^','/'
SKIP                   .BYTE '1',$5f,$04,'2'
SKIP                   .BYTE ' ',$02,'Q',$03
SKIP                   .BYTE $84,'8','5',$09
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $0d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 5
SKIP                   .BYTE $14,$0d,$1d,$88
SKIP                   .BYTE $85,$86,$87,$11
SKIP                   .BYTE '3','W','A','4'
SKIP                   .BYTE 'Z','S','E',$01
SKIP                   .BYTE '5','R','D','6'
SKIP                   .BYTE 'C','F','T','X'
SKIP                   .BYTE '7','Y','G','8'
SKIP                   .BYTE 'B','H','U','V'
SKIP                   .BYTE '9','I','J','0'
SKIP                   .BYTE 'M','K','O','N'
SKIP                   .BYTE '+','P','L','-'
SKIP                   .BYTE '.',$5c,']',','
SKIP                   .BYTE ':','*','[',$13
SKIP                   .BYTE $01,'=','^','/'
SKIP                   .BYTE '1',$5f,$04,'2'
SKIP                   .BYTE ' ',$02,'Q',$03
SKIP                   .BYTE $84,'8','5',$09
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $0d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 6
SKIP                   .BYTE $14,$0d,$1d,$88
SKIP                   .BYTE $85,$86,$87,$11
SKIP                   .BYTE '"','Z','A',$27
SKIP                   .BYTE 'W','S','E',$01
SKIP                   .BYTE '(','R','D',$5f
SKIP                   .BYTE 'C','F','T','X'
SKIP                   .BYTE $b2,'Y','G','&'
SKIP                   .BYTE 'B','H','U','V'
SKIP                   .BYTE $df,'I','J',$b1
SKIP                   .BYTE ',','K','O','N'
SKIP                   .BYTE ')','P','L','-'
SKIP                   .BYTE ':','M',$b3,';'
SKIP                   .BYTE '@','$',$b5,$13
SKIP                   .BYTE $01,'^','*',$b4
SKIP                   .BYTE $ac,'<',$04,$bf
SKIP                   .BYTE ' ',$02,'Q',$03
SKIP                   .BYTE $84,'8','5',$09
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $0d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif

              ; *****************
fd82            DIN_Shift ; $fd82
              ; *****************

0000 TRUE     #if KEYBOARD == 0
fd82 94 8d 9d           .BYTE $94,$8d,$9d,$8c ; 00  INST ShCR Up   F8
fd86 89 8a 8b           .BYTE $89,$8a,$8b,$91 ; 04  F2   F4   F6   Left
fd8a 40 d7 c1           .BYTE $40,$d7,$c1,$24 ; 08  #    W    A    $
fd8e d9 d3 c5           .BYTE $d9,$d3,$c5,$01 ; 0C [Y]   S    E    LShift
fd92 25 d2 c4           .BYTE $25,$d2,$c4,$26 ; 10  %    R    D    &
fd96 c3 c6 d4           .BYTE $c3,$c6,$d4,$d8 ; 14  C    F    T    X
fd9a 2f da c7           .BYTE $2f,$da,$c7,$28 ; 18  Apo [Z]   G    (
fd9e c2 c8 d5           .BYTE $c2,$c8,$d5,$d6 ; 1C  B    H    U    V
fda2 29 c9 ca           .BYTE $29,$c9,$ca,$3d ; 20  )    I    J    0
fda6 cd cb cf           .BYTE $cd,$cb,$cf,$ce ; 24  M    K    O    N
fdaa 3f d0 cc           .BYTE '?',$d0,$cc,$c0 ; 28 [?]   P    L   [Acc]
fdae 3a dc dd           .BYTE ':',$dc,$dd,';' ; 2C [:]  [OE] [UE] [;]
fdb2 5e 2a db           .BYTE $5e,$2a,$db,$93 ; 30  pnd  *   [AE]  CLR
fdb6 01 27 5c           .BYTE $01,$27,$5c,'_' ; 34  RShi[']   Pnd [_]
fdba 21 3e 04           .BYTE '!','>',$04,$22 ; 38  !   [>]   Ctrl Quote
fdbe a0 02 d1           .BYTE $a0,$02,$d1,$83 ; 3C  SPC       Q    RUN
fdc2 84 38 35           .BYTE $84,$38,$35,$18 ; 40  HELP K8   K5   TAB
fdc6 32 34 37           .BYTE '2','4','7','1' ; 44  K2   K4   K7   K1
fdca 1b 2b 2d           .BYTE $1b,'+','-',$0a ; 48  ESC  K+   K-   LF
fdce 8d 36 39           .BYTE $8d,'6','9','3' ; 4C  Entr K6   K9   K3
fdd2 08 30 2e           .BYTE $08,'0','.',$91 ; 50  ALT  K0   K.   Up
fdd6 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Righ Left Down NOSCRL
fdda ff                 .BYTE $ff             ; 58
              #endif
0001 FALSE    #if KEYBOARD == 2
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE '3',$da,$d1,'4'
SKIP                   .BYTE $d7,$d3,$c5,$01
SKIP                   .BYTE '5',$d2,$c4,'6'
SKIP                   .BYTE $c3,$c6,$d4,$d8
SKIP                   .BYTE '7',$d9,$c7,'8'
SKIP                   .BYTE $c2,$c8,$d5,$d6
SKIP                   .BYTE '9',$c9,$ca,'0'
SKIP                   .BYTE '?',$cb,$cf,$ce
SKIP                   .BYTE $dd,$d0,$cc,$5f
SKIP                   .BYTE '/',$cd,$af,'.'
SKIP                   .BYTE '#','[','%',$93
SKIP                   .BYTE $01,$5c,']','+'
SKIP                   .BYTE '1','>',$04,'2'
SKIP                   .BYTE $a0,$02,$c1,$83
SKIP                   .BYTE $84,$a9,$ab,$18
SKIP                   .BYTE $a3,$a5,$a8,$a2
SKIP          .         BYTE $1b,$a1,'-',$0a
SKIP                   .BYTE $8d,$a7,$aa,$a4
SKIP                   .BYTE $08,$a6,$de,$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 3
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE '*',$d7,$c1,$df
SKIP                   .BYTE $d9,$d3,$c5,$01
SKIP                   .BYTE '%',$d2,$c4,'&'
SKIP                   .BYTE $c3,$c6,$d4,$d8
SKIP                   .BYTE '/',$da,$c7,'('
SKIP                   .BYTE $c2,$c8,$d5,$d6
SKIP                   .BYTE ')',$c9,$ca,'='
SKIP                   .BYTE $cd,$cb,$cf,$ce
SKIP                   .BYTE '?',$d0,$cc,$c0
SKIP                   .BYTE ':',$bf,$b2,';'
SKIP                   .BYTE '^','!',$b1,$93
SKIP                   .BYTE $01,'@','#',$5f
SKIP                   .BYTE '+','>',$04,'"'
SKIP                   .BYTE $a0,$02,$d1,$83
SKIP                   .BYTE $84,$a9,$ab,$18
SKIP                   .BYTE $a3,$a5,$a8,$a2
SKIP                   .BYTE $1b,$a1,$dd,$0a
SKIP                   .BYTE $8d,$a7,$aa,$a4
SKIP                   .BYTE $08,$a6,$de,$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 4
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE '#',$d7,$c1,'$'
SKIP                   .BYTE $da,$d3,$c5,$01
SKIP                   .BYTE '%',$d2,$c4,'&'
SKIP                   .BYTE $c3,$c6,$d4,$d8
SKIP          .         BYTE $27,$d9,$c7,'('
SKIP                   .BYTE $c2,$c8,$d5,$d6
SKIP                   .BYTE ')',$c9,$ca,'0'
SKIP                   .BYTE $cd,$cb,$cf,$ce
SKIP                   .BYTE $db,$d0,$cc,$dd
SKIP                   .BYTE '>',$dc,$dd,'<'
SKIP                   .BYTE '*',$c0,$db,$93
SKIP                   .BYTE $01,'+',$de,'?'
SKIP                   .BYTE '!',$5f,$04,'"'
SKIP                   .BYTE $a0,$02,$d1,$83
SKIP                   .BYTE $84,'8','5',$18
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $8d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 5
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE '#',$d7,$c1,'$'
SKIP                   .BYTE $da,$d3,$c5,$01
SKIP                   .BYTE '%',$d2,$c4,'&'
SKIP                   .BYTE $c3,$c6,$d4,$d8
SKIP                   .BYTE $27,$d9,$c7,'('
SKIP                   .BYTE $c2,$c8,$d5,$d6
SKIP                   .BYTE ')',$c9,$ca,'0'
SKIP                   .BYTE $cd,$cb,$cf,$ce
SKIP                   .BYTE $db,$d0,$cc,$dd
SKIP                   .BYTE '>',$dc,$dd,'<'
SKIP                   .BYTE ';',$c0,$db,$93
SKIP                   .BYTE $01,'@',$de,'?'
SKIP                   .BYTE '!',$5f,$04,'"'
SKIP                   .BYTE $a0,$02,$d1,$83
SKIP                   .BYTE $84,'8','5',$18
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $8d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 6
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE '3',$da,$c1,'4'
SKIP                   .BYTE $d7,$d3,$c5,$01
SKIP                   .BYTE '5',$d2,$c4,'6'
SKIP                   .BYTE $c3,$c6,$d4,$d8
SKIP                   .BYTE '7',$d9,$c7,'8'
SKIP                   .BYTE $c2,$c8,$d5,$d6
SKIP                   .BYTE '9',$c9,$ca,'0'
SKIP                   .BYTE '?',$cb,$cf,$ce
SKIP                   .BYTE $dd,$d0,$cc,'+'
SKIP                   .BYTE '/',$cd,'=','.'
SKIP                   .BYTE '#','[','%',$93
SKIP                   .BYTE $01,$5c,']','!'
SKIP                   .BYTE '1','>',$04,'2'
SKIP                   .BYTE $a0,$02,$d1,$83
SKIP                   .BYTE $84,$a9,$ab,$18
SKIP                   .BYTE $a3,$a5,$a8,$a2
SKIP                   .BYTE $1b,$a1,'-',$0a
SKIP                   .BYTE $8d,$a7,$aa,$a4
SKIP                   .BYTE $08,$a6,$de,$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif

              ; ***************
fddb            DIN_CBM ; $fddb
              ; ***************

0000 TRUE     #if KEYBOARD == 0
fddb 94 8d 9d           .BYTE $94,$8d,$9d,$8c ; 00  INST ShCR Up   F8
fddf 89 8a 8b           .BYTE $89,$8a,$8b,$91 ; 04  F2   F4   F6   Left
fde3 96 a7 a8           .BYTE $96,$a7,$a8,$97 ; 08  #   [W]  [A]   $
fde7 a2 aa a3           .BYTE $a2,$aa,$a3,$01 ; 0C [Z]  [S]  [E]   LShift
fdeb 98 a9 c4           .BYTE $98,$a9,$c4,$99 ; 10  %   [R]  [D]   &
fdef c5 d3 ce           .BYTE $c5,$d3,$ce,$a4 ; 14 [C]  [F]  [T]  [X]
fdf3 9a c2 df           .BYTE $9a,$c2,$df,$9b ; 18  Apo [Y]  [G]   (
fdf7 a1 c9 d6           .BYTE $a1,$c9,$d6,$d7 ; 1C [B]  [H]  [U]  [V]
fdfb d1 c3 d5           .BYTE $d1,$c3,$d5,$c1 ; 20 [)]  [I]  [J]  [0]
fdff cb da d8           .BYTE $cb,$da,$d8,$cd ; 24 [M]  [K]  [O]  [N]
fe03 ab d9 c8           .BYTE $ab,$d9,$c8,$bf ; 28 [+]  [P]  [L]  [-]
fe07 ba ca b0           .BYTE $ba,$ca,$b0,$ac ; 2C  >    [    @    <
fe0b ad a6 db           .BYTE $ad,$a6,$db,$93 ; 30  pnd  *    ]    CLR
fe0f 01 dd de           .BYTE $01,$dd,$de,$b9 ; 34  RShi =    ^    ?
fe13 81 b1 04           .BYTE $81,$b1,$04,$95 ; 38  !    _    Ctrl Quote
fe17 a0 02 a5           .BYTE $a0,$02,$a5,$03 ; 3C  SPC       Q    STOP
fe1b 84 38 35           .BYTE $84,$38,$35,$18 ; 40  HELP K8   K5   TAB
fe1f 32 34 37           .BYTE $32,$34,$37,$31 ; 44  K2   K4   K7   K1
fe23 1b 2b 2d           .BYTE $1b,$2b,$2d,$0a ; 48  ESC  K+   K-   LF
fe27 8d 36 39           .BYTE $8d,$36,$39,$33 ; 4C  Entr K6   K9   K3
fe2b 08 30 2e           .BYTE $08,$30,$2e,$91 ; 50  ALT  K0   K.   Up
fe2f 11 9d 1d           .BYTE $11,$9d,$1d,$ff ; 54  Righ Left Down NOSCRL
fe33 ff                 .BYTE $ff             ; 58
              #endif
0001 FALSE    #if KEYBOARD == 2
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE $96,$da,$d1,$97
SKIP                   .BYTE $d7,$d3,$c5,$01
SKIP                   .BYTE $98,$d2,$c4,$99
SKIP                   .BYTE $c3,$c6,$d4,$d8
SKIP                   .BYTE $9a,$d9,$c7,$9b
SKIP                   .BYTE $c2,$c8,$d5,$d6
SKIP                   .BYTE ')',$c9,$ca,'0'
SKIP                   .BYTE '?',$cb,$cf,$ce
SKIP                   .BYTE $dd,$d0,$cc,$5f
SKIP                   .BYTE '/',$cd,$af,'.'
SKIP                   .BYTE '#','[','%',$93
SKIP                   .BYTE $01,$5c,']','+'
SKIP                   .BYTE $81,'<',$04,$95
SKIP                   .BYTE $a0,$02,$c1,$03
SKIP                   .BYTE $84,$a9,$ab,$18
SKIP                   .BYTE $a3,$a5,$a8,$a2
SKIP                   .BYTE $1b,$a1,'-',$0a
SKIP                   .BYTE $8d,$a7,$aa,$a4
SKIP                   .BYTE $08,$a6,$de,$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 3
SKIP                    .BYTE $94,$8d,$9d,$8c
SKIP                    .BYTE $89,$8a,$8b,$91
SKIP                    .BYTE $96,$d7,$c1,$97
SKIP                    .BYTE $d9,$d3,$c5,$01
SKIP                    .BYTE $98,$d2,$c4,$99
SKIP                    .BYTE $c3,$c6,$d4,$d8
SKIP                    .BYTE $9a,$da,$c7,$9b
SKIP                    .BYTE $c2,$c8,$d5,$d6
SKIP                    .BYTE ')',$c9,$ca,'='
SKIP                    .BYTE $cd,$cb,$cf,$ce
SKIP                    .BYTE $5c,$d0,$cc,$ad
SKIP                    .BYTE ':',$bf,$b2,';'
SKIP                    .BYTE $ac,'!',$b1,$93
SKIP                    .BYTE $01,'@','#',$5f
SKIP                    .BYTE $81,'>',$04,$95
SKIP                    .BYTE $a0,$02,$d1,$03
SKIP                    .BYTE $84,$a9,$ab,$18
SKIP                    .BYTE $a3,$a5,$a8,$a2
SKIP                    .BYTE $1b,$a1,$dd,$0a
SKIP                    .BYTE $8d,$a7,$aa,$a4
SKIP                    .BYTE $08,$a6,$de,$91
SKIP                    .BYTE $11,$9d,$1d,$ff
SKIP                    .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 4
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE $96,$b3,$b0,$97
SKIP                   .BYTE $ad,$ae,$b1,$01
SKIP                   .BYTE $98,$b2,$ac,$99
SKIP                   .BYTE $bc,$bb,$a3,$bd
SKIP                   .BYTE $9a,$b7,$a5,$9b
SKIP                   .BYTE $bf,$b4,$b8,$be
SKIP                   .BYTE ')',$a2,$b5,'0'
SKIP                   .BYTE $a7,$a1,$b9,$aa
SKIP                   .BYTE $a6,$af,$b6,$dc
SKIP                   .BYTE '>',$dc,$a4,'<'
SKIP                   .BYTE $a8,$df,$db,$93
SKIP                   .BYTE $01,'+',$de,'?'
SKIP                   .BYTE $81,$5f,$04,$95
SKIP                   .BYTE $a0,$02,$ab,$03
SKIP                   .BYTE $84,'8','5',$18
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $8d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 5
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE $96,$b3,$b0,$97
SKIP                   .BYTE $ad,$ae,$b1,$01
SKIP                   .BYTE $98,$b2,$ac,$99
SKIP                   .BYTE $bc,$bb,$a3,$bd
SKIP                   .BYTE $9a,$b7,$a5,$9b
SKIP                   .BYTE $bf,$b4,$b8,$be
SKIP                   .BYTE ')',$a2,$b5,'0'
SKIP                   .BYTE $a7,$a1,$b9,$aa
SKIP                   .BYTE $a6,$af,$b6,$dc
SKIP                   .BYTE '>',$ba,$a4,'<'
SKIP                   .BYTE $a8,$df,$a9,$93
SKIP                   .BYTE $01,'@',$de,'?'
SKIP                   .BYTE $81,$5f,$04,$95
SKIP                   .BYTE $a0,$02,$ab,$03
SKIP                   .BYTE $84,'8','5',$18
SKIP                   .BYTE '2','4','7','1'
SKIP                   .BYTE $1b,'+','-',$0a
SKIP                   .BYTE $8d,'6','9','3'
SKIP                   .BYTE $08,'0','.',$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif
0001 FALSE    #if KEYBOARD == 6
SKIP                   .BYTE $94,$8d,$9d,$8c
SKIP                   .BYTE $89,$8a,$8b,$91
SKIP                   .BYTE $96,$da,$c1,$97
SKIP                   .BYTE $d7,$d3,$c5,$01
SKIP                   .BYTE $98,$d2,$ac,$99
SKIP                   .BYTE $c3,$c6,$d4,$d8
SKIP                   .BYTE $9a,$d9,$c7,$9b
SKIP                   .BYTE $c2,$c8,$d5,$d6
SKIP                   .BYTE $df,$c9,$ca,'0'
SKIP                   .BYTE '?',$cb,$cf,$ce
SKIP                   .BYTE $dd,$d0,$cc,'+'
SKIP                   .BYTE '/',$cd,'=','.'
SKIP                   .BYTE '#','[','%',$93
SKIP                   .BYTE $01,$1c,']','!'
SKIP                   .BYTE $81,'>',$04,$95
SKIP                   .BYTE $a0,$02,$d1,$03
SKIP                   .BYTE $84,$a9,$ab,$18
SKIP                   .BYTE $a3,$a5,$a8,$a2
SKIP                   .BYTE $1b,$a1,'-',$0a
SKIP                   .BYTE $8d,$a7,$aa,$a4
SKIP                   .BYTE $08,$a6,$de,$91
SKIP                   .BYTE $11,$9d,$1d,$ff
SKIP                   .BYTE $ff
              #endif

              ; **********************
fe34            DIN_Key_Tables ; $fe34
              ; **********************

fe34 29 fd              .WORD DIN_Normal
fe36 82 fd              .WORD DIN_Shift
fe38 db fd              .WORD DIN_CBM
fe3a 8b fb              .WORD Keytab_Control
fe3c 29 fd              .WORD DIN_Normal
fe3e 29 fd              .WORD DIN_Normal

              ; ******************
fe40            Accent_Key ; $fe40
              ; ******************

0000 TRUE     #if KEYBOARD == 0
fe40 af                 .BYTE $af           ; accent acute       A
fe41 c0                 .BYTE $c0           ; accent grave       A E U
fe42 bf                 .BYTE $bf           ; accent circumflex  A E I O U

fe43 00 00              .FILL 2 (0) ; 2 bytes
              #endif
0001 FALSE    #if (KEYBOARD == 2) || (KEYBOARD == 3) || (KEYBOARD == 6)
SKIP                    .BYTE $ad
SKIP                    .BYTE $c0
SKIP                    .BYTE $ae
SKIP                    .BYTE $af
SKIP          
SKIP                    .BYTE $00
              #endif
0001 FALSE    #if (KEYBOARD == 4) || (KEYBOARD == 5)
SKIP                    .FILL 5 ($ff)
              #endif

              ; *******************
fe45            Accent_Index ; $fe45
              ; *******************

0000 TRUE     #if KEYBOARD == 0
fe45 01                 .BYTE  1            ; index to acute      table
fe46 03                 .BYTE  3            ; index to grave      table
fe47 07                 .BYTE  7            ; index to circumflex table
fe48 0c                 .BYTE 12
fe49 0c                 .BYTE 12
fe4a 0c                 .BYTE 12
              #endif
0001 FALSE    #if KEYBOARD == 2
SKIP                    .BYTE  1            ; index to acute      table
SKIP                    .BYTE  2            ; index to grave      table
SKIP                    .BYTE  7            ; index to circumflex table
SKIP                    .BYTE 12
SKIP                    .BYTE 17
SKIP                    .BYTE 17
              #endif
0001 FALSE    #if (KEYBOARD == 3) || (KEYBOARD == 6)
SKIP                    .BYTE  1            ; index to acute      table
SKIP                    .BYTE  2            ; index to grave      table
SKIP                    .BYTE  7            ; index to circumflex table
SKIP                    .BYTE 12
SKIP                    .BYTE 14
SKIP                    .BYTE 15
              #endif
0001 FALSE    #if (KEYBOARD == 4) || (KEYBOARD == 5)
SKIP                    .FILL 6 ($ff)
              #endif

              ; *********************
fe4b            Accent_Vocals ; $fe4b
              ; *********************

0000 TRUE     #if KEYBOARD == 0
fe4b 45 c0              .BYTE 'E'    ,$c0   ; vocals with acute
fe4d 41 45 55           .BYTE "AEU"  ,$af   ; vocals with grave
fe51 41 45 49           .BYTE "AEIOU"       ; vocals with circumflex

fe56 ff ff ff           .FILL 16 ($ff) ; 16 bytes
              #endif
0001 FALSE    #if KEYBOARD == 2
SKIP                    .BYTE $45,$41,$45,$49,$4F,$55,$41,$45,$49,$4F,$55,$41,$45,$49,$4F,$55
SKIP                    .FILL 11 ($ff)
              #endif
0001 FALSE    #if (KEYBOARD == 3) || (KEYBOARD == 6)
SKIP                    .BYTE $45,$41,$45,$55,$4F,$49,$41,$45,$49,$4F,$55,$45,$49
SKIP                    .FILL 14 ($ff)
              #endif
0001 FALSE    #if (KEYBOARD == 4) || (KEYBOARD == 5)
SKIP                    .FILL 27 ($ff)
              #endif


              ; ********************
fe66            Accent_Codes ; $fe66
              ; ********************

0000 TRUE     #if KEYBOARD == 0
fe66 ac                 .BYTE $ac           ; e acute
fe67 bf                 .BYTE $bf
fe68 b2                 .BYTE $b2           ; a grave
fe69 ae                 .BYTE $ae           ; e grave
fe6a b3                 .BYTE $b3           ; u grave
fe6b bf                 .BYTE $bf
fe6c b4                 .BYTE $b4           ; a circumflex
fe6d b5                 .BYTE $b5           ; e circumflex
fe6e b6                 .BYTE $b6           ; i circumflex
fe6f b7                 .BYTE $b7           ; o circumflex
fe70 b8                 .BYTE $b8           ; u circumflex

fe71 ff ff ff           .FILL 16 ($ff) ; 16 bytes
              #endif
0001 FALSE    #if KEYBOARD == 2
SKIP                    .BYTE $BF,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$DB,$DC,$BC,$BD
SKIP                    .FILL 11 ($ff)
              #endif
0001 FALSE    #if (KEYBOARD == 3) || (KEYBOARD == 6)
SKIP                    .BYTE $BF,$B1,$B2,$B5,$B4,$B3,$B6,$B7,$B8,$B9,$BA,$DB,$DC
SKIP                    .FILL 14 ($ff)
              #endif
0001 FALSE    #if (KEYBOARD == 4) || (KEYBOARD == 5)
SKIP                    .FILL 27 ($ff)
              #endif

              ; ********************
fe81            DIN_or_ASCII ; $fe81
              ; ********************

fe81 a5 01              LDA R8502
fe83 29 40              AND #%0100 0000     ; $40 extract bit 6
fe85 49 40              EOR #%0100 0000     ; $40 flip    bit 6
fe87 4a                 LSR A
fe88 4a                 LSR A               ; shift DIN bit to bit 4
fe89 85 d3              STA SHFLAG          ; store flag
fe8b 60                 RTS ;Size   11 [DIN_or_ASCII]
              #endif
fe8c ff ff ff           .FILL $ff00-* ($ff) ;  116 bytes ; 116 bytes

ff00 ff       MMU_CR    .BYTE $ff
ff01 ff       MMU_LCRA  .BYTE $ff
ff02 ff       MMU_LCRB  .BYTE $ff
ff03 ff       MMU_LCRC  .BYTE $ff
ff04 ff       MMU_LCRD  .BYTE $ff

              ; Following code is present in all bank configurations

              ; ***********
ff05            NMI ; $ff05
              ; ***********

ff05 78                 SEI
ff06 48                 PHA
ff07 8a                 TXA
ff08 48                 PHA
ff09 98                 TYA
ff0a 48                 PHA
ff0b ad 00 ff           LDA MMU_CR
ff0e 48                 PHA
ff0f a9 00              LDA #0
ff11 8d 00 ff           STA MMU_CR
ff14 6c 18 03           JMP (INMI)

              ; ***********
ff17            IRQ ; $ff17
              ; ***********

ff17 48                 PHA                 ; push A
ff18 8a                 TXA
ff19 48                 PHA                 ; push X
ff1a 98                 TYA
ff1b 48                 PHA                 ; push Y
ff1c ad 00 ff           LDA MMU_CR
ff1f 48                 PHA                 ; push bank
ff20 a9 00              LDA #0
ff22 8d 00 ff           STA MMU_CR          ; switch to system bank
ff25 ba                 TSX
ff26 bd 05 01           LDA STACK+5,X       ; get IRQ flags
ff29 29 10              AND #%0001 0000     ; test BRK flag
ff2b f0 03              BEQ IRQ_10          ; -> no BRK : jump to normal IRQ
ff2d 6c 16 03           JMP (IBRK)
ff30 6c 14 03 IRQ_10    JMP (IIRQ)
ff33 68       IRQ_Exit  PLA                 ; pull bank
ff34 8d 00 ff           STA MMU_CR
ff37 68                 PLA                 ; pull Y
ff38 a8                 TAY
ff39 68                 PLA                 ; pull X
ff3a aa                 TAX
ff3b 68                 PLA                 ; pull A
ff3c 40                 RTI

              ; *************
ff3d            RESET ; $ff3d
              ; *************

ff3d a9 00              LDA #0
ff3f 8d 00 ff           STA MMU_CR
ff42 4c 00 e0           JMP System_Reset

ff45 ff ff              .WORD $ffff ;     1
ff47 4c fb e5 K_SPINIO  JMP SPINIO
ff4a 4c 3d f2 K_CLOALL  JMP CLOALL
ff4d 4c 4b e2 K_C64     JMP C64
ff50 4c 80 cf K_DMA     JMP DMA
ff53 4c 90 f8 K_BOOT    JMP BOOT
ff56 4c 67 f8 K_PHOENIX JMP PHOENIX
ff59 4c 9d f7 K_LKUPLA  JMP LKUPLA
ff5c 4c 86 f7 K_LKUPSA  JMP LKUPSA
ff5f 4c 2a c0 K_SWAPPER JMP E_SWAPPER
ff62 4c 27 c0 K_DLCHR   JMP E_DLCHR
ff65 4c 21 c0 K_PFKEY   JMP E_PFKEY
ff68 4c 3f f7 K_SETBNK  JMP SETBNK
ff6b 4c ec f7 K_GETCFG  JMP GETCFG
ff6e 4c cd 02 K_JSRFAR  JMP JSRFAR
ff71 4c e3 02 K_JMPFAR  JMP JMPFAR
ff74 4c d0 f7 K_INDFET  JMP INDFET
ff77 4c da f7 K_INDSTA  JMP INDSTA
ff7a 4c e3 f7 K_INDCMP  JMP INDCMP
ff7d 4c 17 fa K_PRIMM   JMP PRIMM
ff80 01       K_VERSION .BYTE $01
ff81 4c 00 c0 K_CINT    JMP E_CINT
ff84 4c 09 e1 K_IOINIT  JMP IOINIT
ff87 4c 93 e0 K_RAMTAS  JMP RAMTAS
ff8a 4c 56 e0 K_RESTOR  JMP RESTOR
ff8d 4c 5b e0 K_VECTOR  JMP VECTOR
ff90 4c 5c f7 K_SETMSG  JMP SETMSG
ff93 4c d2 e4 K_SECND   JMP SECND
ff96 4c e0 e4 K_TKSA    JMP TKSA
ff99 4c 63 f7 K_MEMTOP  JMP MEMTOP
ff9c 4c 72 f7 K_MEMBOT  JMP MEMBOT
ff9f 4c 12 c0 K_KEY     JMP E_KEY
ffa2 4c 5f f7 K_SETTMO  JMP SETTMO
ffa5 4c 3e e4 K_ACPTR   JMP ACPTR
ffa8 4c 03 e5 K_CIOUT   JMP CIOUT
ffab 4c 15 e5 K_UNTLK   JMP UNTLK
ffae 4c 26 e5 K_UNLSN   JMP UNLSN
ffb1 4c 3e e3 K_LISTN   JMP LISTN
ffb4 4c 3b e3 K_TALK    JMP TALK
ffb7 4c 44 f7 K_READST  JMP READST
ffba 4c 38 f7 K_SETLFS  JMP SETLFS
ffbd 4c 31 f7 K_SETNAM  JMP SETNAM
ffc0 6c 1a 03 K_OPEN    JMP (IOPEN)
ffc3 6c 1c 03 K_CLOSE   JMP (ICLOSE)
ffc6 6c 1e 03 K_CHKIN   JMP (ICHKIN)
ffc9 6c 20 03 K_CKOUT   JMP (ICKOUT)
ffcc 6c 22 03 K_CLRCH   JMP (ICLRCH)
ffcf 6c 24 03 K_BASIN   JMP (IBASIN)
ffd2 6c 26 03 K_BSOUT   JMP (IBSOUT)
ffd5 4c 65 f2 K_LOADSP  JMP LOAD_AXY
ffd8 4c 3e f5 K_SAVESP  JMP SAVESP
ffdb 4c 65 f6 K_SETTIM  JMP SETTIM
ffde 4c 5e f6 K_RDTIM   JMP RDTIM
ffe1 6c 28 03 K_STOP    JMP (ISTOP)
ffe4 6c 2a 03 K_GETIN   JMP (IGETIN)
ffe7 6c 2c 03 K_CLALL   JMP (ICLALL)
ffea 4c f8 f5 K_UDTIM   JMP UDTIM
ffed 4c 0f c0 K_SCRORG  JMP E_SCRORG
fff0 4c 18 c0 K_PLOT    JMP E_PLOT
fff3 4c 81 f7 K_IOBASE  JMP IOBASE
fff6 ff ff    V_LOCK    .WORD $ffff ;     1
fff8 24 e2    V_SYSTEM  .WORD SYSTEM
fffa 05 ff    V_NMI     .WORD NMI
fffc 3d ff    V_RESET   .WORD RESET
fffe 17 ff    V_IRQ     .WORD IRQ


 4066 Symbols
-------------
D8502                          $0000    38D 22524  22675
KEYBOARD                       $0000    10D 19517  19629  19682  19866
                                     20575  22272  22275  22278  22281
                                     22284  22287  22290  26967  27074
                                     27099  27124  27149  27174  27199
                                     27229  27254  27279  27304  27329
                                     27354  27384  27409  27434  27459
                                     27484  27509  27550  27557  27557
                                     27557  27565  27565  27573  27581
                                     27589  27589  27597  27597  27605
                                     27612  27616  27616  27620  27620
                                     27629  27644  27648  27648  27652
                                     27652
Msg_Error                      $0000 26077D 26061
R8502                          $0001    39D  7551   7554   7560  15260
                                     15263  15267  19624  19626  19806
                                     19826  19851  20389  22522  22673
                                     24026  24028  24122  24124  24552
                                     24554  24721  24723  24760  24765
                                     24770  24772  27660
COLINK                         $0002  1519
BANK                           $0002    43D  3505   3515   3534   4957
                                      8673  17646  17669  17691  17698
                                     19222  21808  22410  22636  22639
                                     22678  22682  22707  22708  22716
                                     26444  26482  26618
IEC_IFR_BIT                    $0002  1543
C_ULINE                        $0002    18D 20850
PC_HI                          $0003    47D  4955   8677  17649  17667
                                     17695  19221  22726  26439  26479
                                     26616
RS232_C_BIT                    $0004  1546
PC_LO                          $0004    48D  4953   8675  17666  19220
                                     22725  26480  26594
S_REG                          $0005    49D  4969   5006  17663  17876
                                     26427
A_REG                          $0006    50D  4960   5003  17660  26422
                                     26447
X_REG                          $0007    51D  4963  17661  26423  26448
IEC_ATN_BIT                    $0008  1542
Y_REG                          $0008    52D  4966  17662  26424  26449
CHARAC                         $0009    53D  3037   3050   3694   3713
                                      4036   4040   4041   4757   4759
                                      4763  11582  11597  12805  13255
                                     13313  17679  17910  21138  21139
                                     26429
ENDCHR                         $000a    62D  3040   3045   3688   3692
                                      4038   4039   4042   4045   4766
                                      5152   5365   5970  11583  11599
LF                             $000a    19D  4494
TRMPOS                         $000b    63D  4525   4532
Msg_Searching                  $000c 26079D 25747
B_VERCK                        $000c    64D 13484  13492  13500  16065
B_COUNT                        $000d    76D  2154   2182   2223   2237
                                      2248   2249   3033   3036   3039
                                      3044   3046   3049   3051   3232
                                      3241   3312   3387   4992   5002
                                      5012   5013   5743   5760   5784
                                     10140  10142  10195  10219  10243
                                     10281  10316  10385
CR                             $000d    20D  3485   4490   4563   8741
                                      8962  17092  17127  17716  18423
                                     19032  19039  19047  19432  19913
                                     19950  19957  20679  24859
Default_Color                  $000e  1522
DIMFLG                         $000e    83D  9810  10111  10151  10189
                                     10226  10277
BLINK                          $000f    21
VALTYP                         $000f    89D  3070   4204   4467   4750
                                      5000   6662   9226   9311   9366
                                      9388   9486   9635   9822   9836
                                     10114  10147  11265  11542  11651
                                     14184
INTFLG                         $0010    95D  4202   4779   5010   9695
                                      9823   9843  10112  10149
IEC_CLK_BIT                    $0010  1544
DOWN                           $0011    22D 20546  20840
GARBFL                         $0011   110D  3761   3769   3771   3788
                                      9748   9751   9752   9757  13761
                                     13798  13802
REVERSE                        $0012    23D 20846
SUBFLG                         $0012   116D  3949   5809   9840   9852
                                      9857  11289  11314
INPFLG                         $0013   120D  4704   4722   4752   4785
                                      4818
HOME                           $0013    24D 20857  20958
TANSGN                         $0014   130D  3114   9457  14043  14045
                                     14063  14073
DEL                            $0014    25D 20775  20834
CHANNL                         $0015   137D  1656   1705   3183   4439
                                      4483   4492   4572   4614   4622
                                      4633   4641   4644   4666   4675
                                      4684   4740   4788   4792   4828
LINNUM                         $0016   145D  2743   2745   3167   3170
                                      3376   3378   3400   3404   3661
                                      3670   3689   3690   3695   3700
                                      3705   3706   3708   3709   3710
                                      3711   3712   3714   3716   3739
                                      3741   4952   4954   5088   5090
                                      5103   5104   5109   5110   5162
                                      5164   5312   5313   5367   5368
                                      5381   5383   5391   5392   5455
                                      5462   5639   5643   5649   5652
                                      5654   5973   5974   6048  10605
                                     10607  10613  10617  10619  10629
                                     10693  10695  10701  10704  10707
                                     10709  11090  11092  11102  11105
                                     11108  11110  11889  11890  16771
                                     16772  16966  16968
Msg_For                        $0017 26081D 25751
TEMPPT                         $0018   150D  1738   3938  10464  11635
                                     11636  11656  11823  13822  13943
LASTPT                         $0019   155D  1706  11652  11819  11821
                                     11825
ROWS                           $0019  1518
Msg_Play                       $001b 26083D 24013
ESC                            $001b    26D 17901  18359  18423  19047
                                     20684  20771  21172
TEMPST                         $001b   162D  6371   6374   6449   6453
                                     13823  13944
RIGHT                          $001d    27D  4581  20544  20842
IEC_DAT_BIT                    $0020  1545
QUOTE                          $0022    28D  3767   4048   4121   4153
                                      4651   4760   5491   5495   6147
                                      6302   6311   9513  11581  11601
                                     16464  16617  18115  18121  20000
                                     20005  22221
INDEXA                         $0024   168D  1976y  2081   2205   2208
                                      2211y  2220   2221   2228y  2232y
                                      2240   2241   2243   2246y  3258
                                      3260   3285   3287   3294   3333
                                      3343   3349   3438   3439   3453
                                      3456y  3458   3460y  3461   3462
                                      3470   3471   3696   3702   3704
                                      3707   3798   3799   3803y  3805
                                      3807   3812y  4341   4342   4349y
                                      4352y  4354   4356   4362y  4365y
                                      4408   4409   4413   4414   4416
                                      5735   5737   5752   5754   5765y
                                      5796   5799   5935   5936   6247
                                      6365   6367   6417   6420   6423
                                      6425   6426   6448   6452   6461y
                                      6463   6465   7132   7134   9371
                                      9373   9425   9428   9442   9777
                                      9778   9971   9972   9996   9997
                                      9999  10000  10028  10029  10031
                                     10074  10084  10090  10242  10313
                                     10344  10535  10537  11452  11453
                                     11455  11707  11708  11762  11763
                                     11771y 11774y 11778  11779  11782
                                     11783  11810  11811  12320  12321
                                     12323y 12326y 12329y 12332y 12340y
                                     12349  12350  12539  12540  12542y
                                     12545y 12548y 12551y 12556y 12580
                                     12581  12584y 12587y 12590y 12595y
                                     12598y 12951  12953  13649  13650
                                     13771  13772  13776  13789y 13792y
                                     13891y 13936  15735  15737  15756
                                     15758  15759  15765y 15833  15836
                                     15840y 15843  16728  16730  16734
                                     16735  16984  16986
INDEXB                         $0026   174D  1985y  2708   2710   2713y
                                      2715   2717   3190y  3262   3271
                                      3283   3291y  3295   5739   5741
                                      5775   5777   5778   5787y  5797
                                      5800   5889   5890   5903   5907
                                      5920y  6246   6820   6821   7243
                                      7246   7252y 10421  10423  10425
                                     10427  10559  10561  10564  10570
                                     10571  10648y 10660y 12714  12715
                                     12717y 12721y 12726y 12731y 12735y
                                     12741y 15739  15741  15760  15762
                                     15763  15834  15838  15844  15846
APOSTR                         $0027    29D  3824  18052
FAC3_M1                        $0028   178D 12118  12255  12297  12299
                                     12300  12525
COLS                           $0028  1517
FAC3_M2                        $0029   179D 12256  12294  12296  12301
                                     12527
FAC3_M3                        $002a   180D 10327  10346  10371  12257
                                     12291  12293  12302  12529
FAC3_M4                        $002b   181D 10354  10374  12258  12288
                                     12290  12303  12487  12531
TXTTAB                         $002d   187D  1741   1742   3436   3437
                                      3645   3646   3875y  3877y  3879
                                      3883   3964   3967   5178   5179
                                      5326   5327  13465  13493  13494
                                     15772  15774  15849  15851
Msg_Record                     $002e 26085D 24038
VARTAB                         $002f   191D  1745   1746   3920   3921
                                      4294   4298   9858   9859
ARYTAB                         $0031   195D  3922   3923   9862   9864
                                      9938   9939   9956   9957  10152
                                     10153
STREND                         $0033   199D  3924   3925   6364   6366
                                      6418   6421   9942   9943   9966
                                      9968  10069  10070  10156  10158
                                     10255  10256  10269  10273  10521
                                     10524  13779  13782
FRETOP                         $0035   203D  3580   3583   3601   3604
                                      3914   3915   4286   4291   4399
                                      4402   6369   6372  10501  10520
                                     10523  11786  11788  11792  11793
                                     11795  11796  11798  13765  13768
                                     13795  13796  13915  13918  13959
                                     13960
FRESPC                         $0037   207D  9677y 11625y 11719y 11729
                                     11730  11732  13784  13785  13793
                                     13794  13842  13845  13872  13873
                                     13905  13906  13957  13958
MEMSIZ                         $0039   211D  1753   1754   3912   3913
                                      4393   4396  13838  13839
CURLIN                         $003b   217D  2794   2797   2922   2923
                                      3157   3200   3216   3996   4110
                                      4113   4929   4932   5161   5163
                                      5213   5216   5258   5259   5633
                                      5635   5828   5831   6035   6038
                                      6058   6091   6164   6167   6203
                                      6204   6222  12986  12987  17182
TXTPTR                         $003d   223D  1934   1936   1939y  1994y
                                      2094   2096   2156y  2166   2168
                                      2170   2173   2191y  2194y  2204
                                      2206   2212y  2226y  2748   2750
                                      2763   2765   2800   2801   2803
                                      2811   2812   3219   3220   3304y
                                      3389y  3966   3969   3988   3991
                                      4011   4012   4014   4116   4117
                                      4119   4148   4150   4714   4717
                                      4744   4745   4755   4767   4768
                                      4801   4802   4806   4809   4923
                                      4926   5168   5169   5184   5187
                                      5207   5210   5254   5255   5435
                                      5436   5466y  5469y  5523   5525
                                      5532   5534   5536   5538   5539
                                      5608y  5725   5727   5734   5736
                                      5822   5824   6041   6042   6044
                                      6060   6089   6170   6171   6173
                                      6214   6217   9185   9187   9209
                                      9211   9330   9332   9333   9391
                                      9393   9394   9520   9521   9533
                                      9534  11300  11302  11352  11354
                                     11357  11360  11374  11376  15788
                                     15789
FNDPNT                         $003f   228D  2011   3507   3510   3518y
                                      3524y  3528y  3533y  3542   3543
                                      3545   3614   3616   3623   3625
                                      3987y  3990y  3993y  3995y  4883
                                      4886   4891y  4894y  4898y  4909
                                      4912   4919y  4922y  4925y  4928y
                                      4931y  5447   5448   5557   5559
                                      5561   5563   5572   5574   5575
                                      6213y  6216y  6219y  6221y 14161
                                     15799  15802  15807y 15818  15819
                                     15821  15864y 15869y 15873
DATLIN                         $0041   233D  4849   4853
DATPTR                         $0043   238D  4694   4695   4820   4821
                                      5331   5332  15775  15777  15855
                                     15857
INPPTR                         $0045   244D  4705   4706   4716   4807
                                      4816   4817   4825
VARNAM                         $0047   254D  9633   9634   9816   9844
                                      9845   9850   9867   9871   9927
                                      9928  10037  10041  10119  10121
                                     10125  10127  10163  10166  10207
                                     10213  10320  10323
VARPNT                         $0049   260D 10054  10055  10332  10335
                                     10337  11296  11298  11337  11342
                                     11344  11349  11361  11363  13135
                                     13147
Msg_Loading                    $0049 26087D 25772
FORPNT                         $004b   266D  3521   3527   3760   3764
                                      3795   3821   3835   4198   4199
                                      4223y  4226y  4229   4230   4240
                                      4347   4351   4353   4355   4369y
                                      4711   4712   4875   4876   4998
                                      4999   5029   5030   5047   5487
                                      5489   5632   5634   5868   5870
                                      6793   6795   7737   7742   7747
                                      7748   8785   8789   8792y  8858y
                                      8877y  8884y  8911y  8978y  9003y
                                      9160   9161   9163y  9194   9196
                                      9200   9213   9214  13548  13570
                                     13576  13620  13627  13629  13638
                                     13639
VARTXT                         $004d   271D  4715   4808   9382   9454
OP_TMP                         $004f   275D  3071   9344   9354   9355
                                      9357   9361   9396   9411
COLMAX                         $0050  1520
GRBPNT                         $0050   281D  2004   2067  11316  11317
                                     11325  11327  11332  11334  11367
                                     11369  11380y 13244  13245  13250
                                     13251  13260  13261  13841  13844
                                     13895  13896  13969  13970  13973
                                     13974  14065  14066  14075  14076
                                     15747  15750  15752  15754
Msg_Saving                     $0051 26089D 25870
DSCPNT                         $0052   285D  2018   4328   4329   4339
                                      4340  11445  11446  11518  11520
                                     11564  11565  11683  11684
HELPER                         $0055   292D  3774   5107   5112   5130
JUMPER                         $0056   299D  1685   2983   2985   2986
                                     11512  11521
OLDOV                          $0058   304D 11928  11959  11978  12026
                                     13306  13327
Msg_Verifying                  $0059 26091D 25775
FACTPA                         $0059   312D  3589  12572  13347  13350
                                     13351  14068  14069  14842  14849
                                     14852  15415  15420
ARYPNT                         $005a   317D  3319   3320   3348   3350
                                      3352   3358y  3362y  3364   5387
                                      5388   5396   5398   5638   5642
                                      5662   5680   5683   9950   9951
                                      9953   9954   9958   9959   9964
                                      9965   9981   9982   9985   9986
                                     10001  10003  10089  10091  10093
                                     10096y 10100y 10102  10245  10247
                                     10250  10262y 10264  10267  10331
                                     10334  10392  10393  13837  13855
                                     13858  13861  13924  16108  16109
                                     16110
HIGHTR/DESCA                   $005c   324D  2025   2032   3310   3311
                                      3331   3335   3341   3344   3346
                                      3363   5049   5069   5360   5361
                                      5380   5382   5408   5411   5459
                                      5463   5646   5650   5682   5684
                                      9944   9945  10013  10017  10021y
                                     10025y 10072  10076  10082  10085
                                     10087  10101    326D 14851  14866
                                     14876
FACTPB/TMPVAR                  $005e   334D  5075y 12565  13385  13386
                                     13830y 13833y 13949y 13952y 13997
                                     14000  14005  14006  14008  18351
                                       335D  9654  10356  10377  12831
                                     12874  12894  13044  13059  13065
                                     13074  13086  13141
M_Aval                         $0060   339D 17841  17849  17850  17851
                                     17875  17891  17988  17990  17993
                                     17994  17996  17997  17999  18000
                                     18014  18017  18022  18031  18033
                                     18067  18135  18144  18145  18193
                                     18251  18259  18329  18332  18417
                                     18891  18892  18893  18936  18942
                                     18943  18944  18956  18957  18959
                                     18960  18962  18963  18968  18969
                                     18971  18972  18974  18975  19114
                                     19116  19118  19127  19129  19130
                                     19132  19133  19135  19150  19152
                                     19153  19155  19156  19158  19217
                                     19218  19219  19240  19242  19244
                                     19247  19249  19251  19267  19272
                                     19273  19345  19347  19349  19395
                                     19400  19402  19411  19461  19472
                                     19476
TENEXP                         $0060   336D  5051   5061   5063   9650
                                     12866  12872  12875  12880  12885
                                     12918  12928  12941  13085  13168
                                     13173  13890  14854  14858  14863
                                     14870  14880
LOWTR                          $0061   337D  2046   2074   3238   3261
                                      3266   3275   3278   3332   3336
                                      3372y  3374y  3377y  3380y  3382
                                      3384   3386   3390y  3653   3654
                                      3750   3751   5055   5057   5059
                                      5073   5119   5122   5182   5185
                                      5317   5318   5385   5386   5395
                                      5397   5887   5888   5901   5902
                                      5905   5908   5921   5923   9860
                                      9861   9876   9940   9941  10039y
                                     10042y 10045y 10048  10051  10073
                                     10077  10154  10155  10171  10175
                                     10209y 10214y 10223y 10235y 10238y
                                     10270  10272y 10275  10276y 10388
                                     10389  12859  12862  12869  12870
                                     12892  12922  13840  13843  13865y
                                     13868y 13883y 13983  13984  13987
                                     13988  15726  15736
FAC1_EX                        $0063   345D  3073   3083   3087   3595
                                      4062   4247   4336   4337   5844
                                      5864   6102   6108   6187   6376
                                      6393   6395   7358   9440   9472
                                      9781  11176  11179  11217  11574
                                     11604  11640  11883  11909  11950
                                     11953  11960  11972  12022  12049
                                     12053  12055  12181  12185  12342
                                     12375  12385  12392  12425  12465
                                     12466  12468  12557  12597  12615
                                     12632  12643  12664  12698  12724
                                     12757  12768  12793  12803  12913
                                     13027  13272  13308  13322  13323
                                     14106  14839  14864  14874  14884
                                     14890  14891
M_Bval                         $0063   340D 17992  17995  17998  18278
                                     18287  18320  18326  18575  18577
                                     18580  18581  19166  19168  19169
                                     19171  19172  19174  19248  19250
                                     19252  19470  19479
Msg_Found                      $0063 26093D 23862
FAC1_M1/FAC1_M2                $0064   346D  3074   3409   5465   5655
                                      5673   5709   5711   5840   5841
                                      6377   6402   6404   6750y  6777y
                                      6784   9438   9729   9787  10666y
                                     10733y 11149  11167  11169  11266
                                     11416y 11572  11591  11642  11991
                                     12002  12005  12037  12039  12046
                                     12057  12076  12078  12104  12267
                                     12473  12511  12526  12554  12594
                                     12683  12687  12728  12777  12778
                                     12779  12807  12993  13117  13119
                                     14227y 14861  14869  14879  14887
                                       347D  3075   3403   4268   5468
                                      5653   5671   5705   5708   6786
                                      9436   9726   9790  11153  11170
                                     11172  11267  11573  11592  11644
                                     11988  12004  12007  12034  12036
                                     12045  12058  12079  12081  12102
                                     12265  12476  12508  12528  12549
                                     12589  12685  12732  12808  12994
                                     13114  13116
M_Cval                         $0066   341D 17794  17795  17807  17809
                                     17821  17823  17987  17989  18003
                                     18151  18175  18176  18187  18330
                                     18333  18369  18372  18376  18499
                                     18503  18998  19002  19003  19115
                                     19117  19119  19128  19131  19134
                                     19188  19189  19191  19193  19201
                                     19203  19204  19206  19207  19209
                                     19317  19318  19319
FAC1_M3                        $0066   348D  2039   2965   3035   3048
                                      4221   4267   4297   4300   6789
                                      9216   9247   9434   9550   9631
                                      9643   9708   9725   9775   9793
                                     10135  10288  10310  11151  11171
                                     11173  11194  11562  11647  11665
                                     11751  11846  11887  11985  12006
                                     12009  12031  12033  12044  12059
                                     12082  12084  12100  12263  12479
                                     12505  12530  12546  12586  12697
                                     12736  12809  13111  13113  14154
                                     14818  14824
FAC1_M4                        $0067   349D  2963   3038   3043   4182
                                      4225   4269   4293   4301   6791
                                      9218   9248   9432   9547   9632
                                      9646   9705   9727   9776   9796
                                     10137  10292  10314  11155  11166
                                     11168  11195  11479  11499  11501
                                     11563  11648  11663  11752  11848
                                     11888  11982  12008  12011  12028
                                     12030  12043  12060  12085  12087
                                     12098  12261  12482  12502  12532
                                     12543  12583  12696  12742  12804
                                     12810  13107  13110  14156  14820
                                     14826  14829  14835
FAC1_SI                        $0068   350D  3089   3095   4248   4892
                                      5838   7356   9419   9470   9785
                                     11175  11210  11881  11904  11906
                                     11955  12023  12068  12070  12334
                                     12365  12396  12399  12552  12592
                                     12612  12666  12700  12707  12722
                                     12744  12761  12775  12798  12799
                                     12911  13016  13020  13274  13276
                                     14037  14041  14072  14102
DEGREE                         $0069   352D 12837  12887  13367  13387
Msg_OK                         $006a 26095D 24018
FAC2_EX                        $006a   356D  3064   3065   9459  11929
                                     11930  11973  11975  12341  12372
                                     12382  12614  12633  13241  13321
                                     13324
FAC2_M1                        $006b   357D  3062   3063   9461  12038
                                     12298  12338  12369  12472  12496
                                     12510  12512
FAC2_M2                        $006c   358D  9463  12035  12295  12330
                                     12361  12475  12495  12507  12509
FAC2_M3                        $006d   359D  3076   3079   5601   5614
                                      5744   5763   5786   9465  12032
                                     12292  12327  12358  12478  12494
                                     12504  12506
FAC2_M4                        $006e   360D  3077   3080   9467  12029
                                     12289  12324  12355  12481  12493
                                     12501  12503
FAC2_SI                        $006f   361D  3060   9469  11907  11954
                                     12333  12336  12364  12367  12606
                                     12910  13247  14027
STRPTR                         $0070   365D  2053   2060   4330   4331
                                      4333   4334   9176   9177   9471
                                      9638  10504  10511  11589  11590
                                     11606  11608  11649  11670  11672
                                     11687  11688  11908  11970  12335
                                     12366  12395  12423  12447  12912
                                     13335  14032
FROUND                         $0071   370D  9782  10508  10509  10514
                                     11177  11927  11963  11967  11979
                                     12010  12012  12027  12042  12061
                                     12088  12090  12091  12120  12139
                                     12259  12304  12523  12558  12599
                                     12618  12636  12645  12699  12740
                                     12797  13302  13328
STRNG2                         $0072   374D  4249   4252   4253   4261
                                      9531   9532   9652  10205  10218
                                     10240  10241  10258  10259  10265
                                     10283  10284  10304  10305  10315
                                     10318  10366  10367  10536  10539
                                     10541  10545y 10551y 10562  10563
                                     10590  10591  10596  10597  11607
                                     11611  13021  13090  13099  13136
                                     13146  13159  13344  13345  13358
                                     13359  13366y 13368  13372  13373
                                     13374  13376  13377  13382  13383
AUTINC                         $0074   375D  1710   1711   3397   3398
                                      3402   3405   5089   5091   5268
                                      5269
MVDFLG                         $0076   376D  1709  15719  15733  15783
                                     15828  15832  15865  15880
TEMP_A                         $0077   377D  4603   4724   5040   5060
                                      5444   5450   5541   6241   6248
                                      6277   6282   6315   6959   6961
                                      7235   7239   7242   7244   7258
                                      7261   7264   7271   7274   7276
                                      7278   7374   7381   7432   7436
                                      7439   7767   7796   7815   7839
                                      7887   7974   7978   8485   8488
                                      8492  14181  14237  14372  14409
                                     14496  14533  14555  14557  14598
                                     14650  14664  14718  15238  15241
                                     15247  15250  15614  15616
KEYSIZ                         $0078   378D  5034   5056   5067   5072
                                      6276   6307   7976   7977   7983
                                     14193  14208  14268  14331  14385
                                     14397  14403  14417  14511
SYNTMP                         $0079   379D  3104   3106   3660   3662
                                      3669   3671   6290   6296   6320
                                      9599   9601  10008  10012  10194
                                     10196  10290  10293  10298  10299
                                     11433  11435  11467  11470  11493
                                     11496  11675  11678  12932  12938
                                     14878  14882
DS_LEN                         $007a   380D  3906   4317   9687  17061
                                     17064  17070  17073  17143  17154
                                     17710  18117  18130  18267  18857
                                     18867  18912  19089  19096  19103
                                     19407  19419  19420  19450  19457
DS_ADR                         $007b   381D  4310   4315   4404   4406
                                      9666   9675   9744   9754  16184
                                     16209  17066  17067  17071y 17074y
                                     17094y 17103y 17148y 17151
TOS                            $007d   383D  3558   3559   3560   3563
                                      3567   3613   3615   3624   3626
                                      3635   3636   3638   3918   3919
                                      5208y  5211y  5214y  5217y  5220y
                                      5823y  5827y  5830y  5833y  5845y
                                      5863y  5869y  5872y  5875y  6115y
                                      6118y  6121y  6124y  6127
CTRL_COL                       $007f  1506
STND_COL                       $007f  1509
RUNMOD                         $007f   384D  2733   2778   2787   2824
                                      2919   3154   3208   4103   5188
                                      5247   5266   5286   6157  11253
                                     11275  13506  13520  15780  16181
                                     16204  17120  17187
DOSFLA                         $0080   397D  8663  14266  14283  14295
                                     14297  14334  14340  14383  14419
                                     14460  14518  14529  14554  14565
                                     14582  15891  15897  15975  16024
                                     16274  16289  16292  16294  16419
                                     16439  16584  16585  16651  16652
                                     16724  16726  16780  16943  17013
                                     17017  17035  17044  17054
DOSFLB                         $0081   405D  8669  16087  16420  16435
                                     16440  16560  16561  16703  16704
                                     16788
OLDSTK                         $0082   407D  2782   3173
COLSEL                         $0083   411D  6355   6883   7066   7164
                                      7259  15181  15189  15209  15228
                                     15572
MULCO1                         $0084   412D  1733   7172   7392   7438
                                     10787
MULCO2                         $0085   413D  1735   7174   7394   7555
                                     10789  15264
FG_COL                         $0086   414D  1731   7161   7176   7181
                                      7211   7387   7427  10785
SCALE_X                        $0087   415D  7314   7315   7345   7347
                                     15358  15359
SCALE_Y                        $0089   416D  7316   7317   7342   7343
                                     15361  15362
STOPNB                         $008b   417D  6353  15206
GRAPNT                         $008c   419D  6705y  6736y  7223   7226
                                      7228   7230   7232   7280y  7534
                                      7536   7537y  7540   9065y  9069y
                                      9087y  9089y  9129   9133   9147y
                                      9191   9192   9203y 15176y 15187y
                                     15200y 15225  15227  15239y 15242y
                                     15248y 15251y 15253  15256  15265y
                                     15295  15298  15300  15302  15304
VTEMPA                         $008e   420D  6672   6677   6692   6693
                                      6723   6737   6743   6761   8837
                                      8861   8865   8866   8868   8870
                                      8874   8971   8975   8977y  9043
                                      9046   9053   9058  14956  14963
                                     15463  15464  15475  15476
STATUS                         $0090   434D 18106  18164  19434  19473
                                     19477  19490  23104  23134  24046
                                     24856  25079  25082  25087  25132
                                     25140  25176  25184  25263  25362
                                     25396  25408  25409  25414  25436
                                     25477  26158  26164  26165
UP                             $0091    30D 19032
STKEY                          $0091   436D 23874  25955  25982
SVXT                           $0092   437D 24260  24261  24285  24292
                                     25192  25228
K_VERCK                        $0093   438D 17760  17975  17984  18019
                                     18075  18082  18146  18157  18167
                                     23842  23846  24047  24413  24446
                                     24459  25360  25419  25703  25773
C3PO                           $0094   440D 22887  22892  23156  23159
BSOUR                          $0095   441D 22895  22965  22979  23116
                                     23132  23165
SYNO                           $0096   443D 24301  24315  24333  24337
                                     24341
XSAV                           $0097   444D 24789  24791  24817  24827
                                     24833
LDTND                          $0098   451D 24934  24937  25245  25246
                                     25248  25270  25294  25329  26238
DFLTN                          $0099   455D 19952  22541  23635  24779
                                     24799  25126  25304  25309  25324
                                     25327
DFLTO                          $009a   465D 19954  22543  23566  24881
                                     25166  25301  25307  25319  25322
PRTY                           $009b   468D 24282  24304  24305  24518
                                     24592  24593  24627
DPSW                           $009c   469D 24063  24230  24330  24355
MSGFLG                         $009d   471D 23860  25745  25868  26062
                                     26102  26172
PTR_LO                         $009e   472D 22701  22709  22717  22723
                                     23608  23890  23906  23923  23924
                                     23930  23983  23990  23992  24061
                                     24424  24426  24433  24436  24478
                                     24898  24913  24920  25371  25400
                                     25593  26571  26585  26595  26601
                                     26607
PTR_HI                         $009f   473D 18283  18321  18396  18404
                                     22705  22724  23921  23928  23931
                                     23981  23987  23991  24062  24435
                                     24444  24445  25375  25383  25553
                                     25561  26504  26588  26602
JIFFY_CLOCK                    $00a0   483D 23872  23877  25906  25908
                                     25910  25912  25914  25916  25920
                                     25921  25922  25963  25964  25965
                                     25972  25973  25974
R2D2                           $00a3   485D 22890  22893  22938  24233
                                     24277  24308  24319  24514  24596
                                     24597
BSOUR1                         $00a4   486D 23077  23095  23108  24262
                                     24264  24275  24516  24584  24586
CNTDN                          $00a5   487D 22973  22993  23033  23051
                                     23057  24602  24606  24661  25580
                                     25608  25623  25628  25720
BUFPT                          $00a6   488D 24002  24003  24826  24845
                                     24912  24994
RSI_In_Bit                     $00a7   490D 23485  23488  23493  23513
                                     23541  23773  24360  24381  24410
                                     24476  24635  24648
RSI_Count                      $00a8   491D 23482  23492  23498  23807
                                     24252  24335  24350  24517  24566
                                     24572
RSI_Start                      $00a9   492D 23480  23507  23515  24254
                                     24256  24297  24351  24519  24576
                                     24580
RSI_Data                       $00aa   493D 23489  23528  23558  24058
                                     24362  24373  24389  24390  24393
                                     24399  24467
RSI_Parity                     $00ab   494D 23486  23487  23517  23542
                                     23935  24079  24396  24485  24487
                                     24488  24492  24651  24656
SAL                            $00ac   496D  8674  24429  24438  24506
                                     24731  24741  25601  26286  26309
                                     26547  26561  26939
SAH                            $00ad   497D  8676  24427  24441  24504
                                     24616  24733  24743  25602  25822
                                     26548  26581  26940
EAL                            $00ae   498D 23899  23915  23939  23967
                                     24732  25393  25403  25430  25506
                                     25520  25589  25597  25599  25714
                                     25786  26293  26302  26575  26937
EAH                            $00af   499D 23897  23918  23941  23971
                                     24734  25395  25405  25432  25433
                                     25509  25521  25592  25598  25600
                                     25716  25717  25787  26577  26579
                                     26938
CMP0                           $00b0   502D 24060  24161  24165  24170
                                     24225  24237  24242  24246  24288
                                     24290  24326
CMP1                           $00b1   503D 24160  24167  24168  24173
                                     24175  24181  24210  24219  24220
                                     24222  24224  24228  24238  24243
                                     24247  24259  24322  24325
TAPE1                          $00b2   508D 22414  22415  23849y 23866y
                                     23903y 23907y 23910y 23913y 23916y
                                     23919y 23929y 23953  23954  23988y
                                     24848y 24910y 24914y 24992y 25485y
                                     25488y 25494y 25496y 25499y 25501
RS_Count                       $00b4   509D 23364  23374  23396  23399
                                     23401  23411  23429  24059  24250
                                     24267  24306  24317  24331  24340
                                     24345
RS_Next                        $00b5   510D 23378  23427  23710  24342
                                     24364  24377  24401
RS_Out                         $00b6   511D 23367  23434  24352  24379
                                     24420  24421  24453  24454  24559
                                     24573  24662
FNLEN                          $00b7   515D 18104  18124  19403  23925
                                     23984  24971  25004  25074  25093
                                     25099  25372  25384  25467  25536
                                     25562  25749  25758  25764  25809
                                     26123
LA                             $00b8   516D 24931  24938  25282  25538
                                     25641  26132  26245
SA                             $00b9   517D 18101  18150  18178  24940
                                     24942  24965  24987  25072  25084
                                     25123  25134  25163  25178  25209
                                     25222  25233  25284  25370  25386
                                     25390  25491  25666  25812  25817
                                     25838  25842  25884  25893  26134
                                     26246
FA                             $00ba   518D 13659  18100  18136  24944
                                     25080  25198  25230  25286  25318
                                     25328  25363  25388  25532  25799
                                     25815  25840  26133  26149  26500
                                     26530  26540
FNADR                          $00bb   519D 18108  18110  18123y 26124
                                     26125  26277
RS_Parity                      $00bd   521D 23372  23373  23393  23404
                                     23426  24349  24383  24417  24450
                                     24462  24493  24526  24588  24590
                                     24595  24611  24618  24622  24629
                                     25421  25424  25705  25708
FSBLK                          $00be   522D 24120  24358  24366  24472
                                     24475  24480  24607  24631  24657
DRIVE                          $00bf   523D 24311  24348  26499  26519
                                     26599
CAS1                           $00c0   524D 24125  24764  24768
STAL                           $00c1   526D 23895  23909  23943  23964
                                     24505  25513  25790  26507  26665
                                     26671
STAH                           $00c2   527D 23893  23912  23945  23969
                                     24503  25515  25792  26505  26660
                                     26666
MEMUSS                         $00c3   528D 22368  22369  22373y 22376y
                                     22618  22619  22620  22631  22632
                                     25347  25348  25402  25404  25486
                                     25489  25505  25508  25512  25514
                                     25595  25596
DATA                           $00c5   530D 24266  24293  24310  24605
                                     24617  24623  24624
BA                             $00c6   531D 18103  18140  26141  26295
                                     26310  26576
FNBANK                         $00c7   532D 18105  26142  26276
RIBUF                          $00c8   534D 22417  22418  23536y 23674
ROBUF                          $00ca   535D 22420  22421  23433y 23609
KEYTAB                         $00cc   537D 20406  20408  20427y 20517
                                     20519  20526y 26998  26999  27001
IMPARM                         $00ce   539D 26733  26735  26736
NDX                            $00d0   541D  3423  18381  19636  19897
                                     19899  19907  20562  20590  20595
                                     24781  25987
KYNDX                          $00d1   542D 19637  19881  19885  19908
                                     20601  22232  22235  24782
KEYIDX                         $00d2   543D 19883  19886  20608  22242
SHFLAG                         $00d3   544D 20394  20412  20434  20435
                                     20450  20452  20456  20457  20477
                                     20574  26982  27066  27665
SFDX                           $00d4   545D 20396  20437  20459  20507
                                     20525  20567
LSTX                           $00d5   546D 20528  20568  27067
CRSW                           $00d6   547D 19638  19915  19944  19949
                                     19980  20672  26927  26928
MODE_80                        $00d7   548D  1869   3184   5132   7401
                                      7471   7504   7519   7619   7647
                                      8611   8622  10756  10794  11133
                                     17846  17858  17894  17938  17955
                                     19635  19752  19758  19773  20179
                                     20265  20490  20630  20793  20913
                                     20924  21412  21422  21433  21447
                                     21503  21712  21915  21917  21924
                                     21942  21973  27053
COLRAM_PAGE                    $00d8  1521
GRAPHM                         $00d8   550D  3186   6708   6715   6725
                                      6755   6769   6860   6880   6890
                                      6940   7099   7135   7166   7255
                                      7311   7573   7605   7614   7617
                                      7649   7651   8698   8745  10750
                                     15178  15231  15309  15334  15569
                                     19634  19792  19800  19802  19817
                                     19858
CHAREN                         $00d9   551D 19641  19829
E_Beg                          $00da   552D 20183  20187  20191y 20212
                                     20217  20221  20222  20224  20225
                                     20228  20239  20244  21090  21102
                                     21109  21552  21569  21575  21805
                                     21813  21819  21825  21828  21840
                                     21852  21855  21953  21957  22067
                                     22068  22077  22088  22090  22092
                                     22093
E_End                          $00dc   553D 20182  20190  20193y 21804
                                     21814  21817  21818  21829  21837
                                     21839  21848  21851
E_Col                          $00de   554D 21022  21034  21056  21669
                                     21810  21858
E_Row                          $00df   555D 20128  20130  21020  21032
                                     21058  21360  21671  21857  21863
PNT                            $00e0   557D 19669  19755  19764  19770
                                     19772  20192y 20270y 20288  20292
                                     20644y 21507y 21714y 21901  21904
                                     21928  21931  22036  22039
USER                           $00e2   558D 19771  19780  20194y 20272y
                                     20318  20321  20649y 21505y 21716y
                                     22052  22055
Margin_Bottom                  $00e4   562D 11124  19721  20053  20074
                                     20095  20118  20148  21246  21346
                                     21738  21765
Margin_Top                     $00e5   563D 11126  19729  20078  20114
                                     20120  20127  20132  20892  21259
                                     21289  21292  21300  21303  21372
                                     21651  21739  21763  21786
Margin_Left                    $00e6   564D 11130  19737  19921  20097
                                     20147  20257  20706  21260  21316
                                     21327  21342  21587  21616  21634
                                     21649  21743  21771  21790
Margin_Right                   $00e7   565D 11128  20050  20195  20231
                                     20273  20301  20337  21049  21075
                                     21080  21247  21610  21631  21658
                                     21660  21742  21773  24810
CurLst_Row                     $00e8   567D 19731  19922  20090  20094
                                     20124  20126  20884  21281  21305
                                     21371  21782  24804
CurLst_Col                     $00e9   568D 19739  19926  21779  24802
Cursor_End                     $00ea   569D 19929  19978  21622  24811
Cursor_Row                     $00eb   571D 19730  19745  19924  19932
                                     19974  20052  20073  20079  20083
                                     20092  20098  20123  20893  20896
                                     20906  21031  21051  21059  21234
                                     21291  21301  21314  21340  21345
                                     21373  21521  21536  21596  21598
                                     21605  21608  21613  21652  21654
                                     21670  21781  21785  24803  26929
Cursor_Col                     $00ec   572D 19738  19933  19977  20642
                                     20677  20707  21057  21073  21081
                                     21088  21154  21159  21233  21502
                                     21588  21611  21630  21638  21646
                                     21659  21668  21706  21778  21789
                                     21929  21948  24801
LINES                          $00ed   574D 21254
COLUMNS                        $00ee   575D 21255  21745
DATAX                          $00ef   576D 19962  19964  19965  19987
                                     19992  20012  20664  20678  20780
                                     21174
LSTCHR                         $00f0   577D 20013  20683  20957  21888
E_Attribute                    $00f1   578D  7404   7407   8713   8716
                                      8729  10793  20271  20330  20492
                                     20494  20651  20714  20716  20795
                                     20797  20800  20919  20921  20931
                                     20933  20982  20984  20991  20993
                                     21000  21002  21009  21011  21678
                                     21688  21955
TCOLOR                         $00f2   579D 21506  21512  21695
E_Reverse                      $00f3   580D 20031  20719  20975
QTSW                           $00f4   581D 19917  19969  20002  20004
                                     20017  20720  20777  20829
INSRT                          $00f5   582D 20015  20034  20036  20042
                                     20718  20773  20838  21037  21039
INSFLG                         $00f6   583D  5271  20037  21405  27051
LOCKS                          $00f7   584D 20468  20486  20510  20941
                                     20949  20950
Scroll_Locked                  $00f8   585D 20055  20063  20076  20138
                                     21293  21296  21299  21390  21559
BEEPER                         $00f9   586D 21134  21470
CTRL_ROW                       $00fb  1507
PICHAR                         $00ff    31D  3786
STACK                          $0100   588D  3415   5553   5567   5587
                                      9898  10131  10133  10136  10138
                                     11400  11401  13019  13093  13098
                                     13140  13145  13160  13176  13178
                                     13186  13188  13190  13193  13195
                                     14219  14225  14270  14280  14288
                                     14309  14428  14453  14454  14473
                                     14475  14482  14483  14541  14552
                                     14578  14641  14655  16422  18065
                                     24428  24430  24439  24442  26515
                                     26520  26669  26670  26673  26674
                                     26683  26729  26731  26732  26734
                                     27708
DOS_COUNT                      $0110   600D 16883  16889
DOS_FNLEN_1                    $0111   601D 16575  16581  16972  16979
DOS_DRIVE_1                    $0112   602D  8679  16532  16917
DOS_FNLEN_2                    $0113   603D 16647  16987  16995
DOS_DRIVE_2                    $0114   604D 16533  16629  16921
DOS_FNADR_2                    $0115   605D 16648  16649  16983  16985
DOS_BEG                        $0117   606D 16093  16097  16106  16107
                                     16131  16132  16147  16148  16427
                                     16557  16558
DOS_END                        $0119   607D 16092  16096  16111  16112
                                     16566  16567
DOS_LA                         $011b   608D 16027  16229  16238  16245
                                     16350  16498  16933
DOS_FA                         $011c   609D  1716   8681  15911  16034
                                     16243  16688  16934  17075  17078
DOS_SA                         $011d   610D 16012  16070  16139  16247
                                     16935
DOS_RL                         $011e   611D 16237  16521  16913  16956
                                     16962
DOS_BANK                       $011f   612D  8672  16103  16143  16431
                                     16701
DOS_ID                         $0120   613D 16176  16544  16546  16950
                                     16953
DOS_UNIT                       $0122   614D 16541  16548
BNR                            $0123   620D 14182  14404  14538  14544
                                     14572  14584  14599
ENR                            $0124   621D 14281  14307  14386  14535
                                     14548  14585  14652
DOLR                           $0125   622D 14519  14596  14665  14743
                                     14746  17525
FLAG                           $0126   623D  8028   8030   8032   8034
                                      8110   8177  14517  14606  14658
SWE                            $0127   624D 14324  14351  14371  14514
                                     14673  14675
USGN                           $0128   625D 14291  14335  14447  14464
                                     14471  14636
UEXP                           $0129   626D 14293  14305  14311  14329
                                     14430  14443  14629  14640
VN                             $012a   627D 14285  14346  14349  14361
                                     14369  14381  14390  14407  14558
CHSN                           $012b   628D 14188  14196  14738
VF                             $012c   629D 14300  14318  14320  14348
                                     14380  14739  14747
NF                             $012d   630D 14322  14360  14530
POSP                           $012e   631D 14314  14352  14678  14772
                                     14774
FESP                           $012f   632D 14303  14758
ETOF                           $0130   633D 14333  14445  14458
CFORM                          $0131   634D 14192  14499  14693  14720
                                     14722  14776
SNO                            $0132   635D 14263  14316  14354  14645
                                     14647  14768  14771
BLFD                           $0133   636D 14261  14612  14683  17521
BEGFD                          $0134   637D 14601  14704  14711  14717
LFOR                           $0135   638D 14165  14494
ENDFD                          $0136   639D 14150  14643  14700  14775
                                     14781  14782
BUF                            $0200   651D  1726   1727   3488   4480
                                      4481   4482   4619   4664   4673
                                      4733   4734   4735  17712  17719
                                     18118  19097  19421  19454  19458
FETCH                          $02a2   659D 21806  21859  21861  22468
                                     22621  22624  22635  26316  26319
STASH                          $02af   669D 10630  17808  18015  26294
                                     26329
CMPARE                         $02be   681D 17822  18016  26339
JSRFAR                         $02cd   693D 22727  26483  26619  27744
JMPFAR                         $02e3   709D 26421  27745
USRVEC                         $02fc   730D  1911   1913   3017
IERROR                         $0300   735D  1907   3144
IMAIN                          $0302   736D  3209
ICRNCH                         $0304   737D  2088
IQPLOP                         $0306   738D  3779
IGONE                          $0308   739D  2727
IEVAL                          $030a   740D  9479
IESCLK                         $030c   741D  2102
IESCPR                         $030e   742D  3851
IESCEX                         $0310   743D  2875
IIRQ                           $0314   749D 22371  22374  24114  24116
                                     24134  24689  24691  24703  24705
                                     27712
IBRK                           $0316   750D 27711
INMI                           $0318   751D 27692
IOPEN                          $031a   752D 27772
ICLOSE                         $031c   753D 27773
ICHKIN                         $031e   754D 27774
ICKOUT                         $0320   755D 27775
ICLRCH                         $0322   756D 27776
IBASIN                         $0324   757D 27777
IBSOUT                         $0326   758D 27778
ISTOP                          $0328   759D 27783
IGETIN                         $032a   760D 27784
ICLALL                         $032c   761D 27785
EXMON                          $032e   762D 17724
ILOAD                          $0330   763D 25354
ISAVE                          $0332   764D 25793
CTLVEC                         $0334   770D 19677  20765
SHFVEC                         $0336   771D 20815
ESCVEC                         $0338   772D 21166
KEYVEC                         $033a   773D 20460
KEYCHK                         $033c   774D 27068
DECODE                         $033e   776D 19691  20405  20407  20516
                                     20518  26985  26992  27002  27018
KEYD                           $034a   778D  3417   3421  18365  18367
                                     18368  18371  18374  18375  18378
                                     18379  19893  19894  19895  20593
TABMAP                         $0354   779D 21091  21108  21125  21909
                                     21912
BITABL                         $035e   780D 21263  21528  21550  21551
                                     21562
LAT                            $0362   785D 24939  25249  25250  25273
                                     25281  25334
FAT                            $036c   786D 24945  25251  25252  25285
                                     25332
SAT                            $0376   787D 24943  25253  25254  25283
                                     26241
CHRGET                         $0380   802D  1701   2100   2127   2161
                                      2164   2195   2755   2770   2857
                                      2865   2866   2948   2988   2993
                                      3221   3717   4076   4079   4090
                                      4091   4099   4132   4155   4186
                                      4538   4608   4610   4749   4873
                                      5018   5227   5230   5508   5515
                                      5519   5527   5535   5555   5570
                                      5611   5855   5967   6045   6143
                                      6229   6265   7081   7603   7955
                                      9358   9487   9499   9603   9824
                                      9829   9849  10952  11202  11833
                                     12950  14151  14247  15612  15646
                                     16473  16511  16543  16545  16549
                                     16600  16607  16610  16668  16753
                                     16765
CHRGOT                         $0386   808D  2098   3227   4057   4064
                                      4080   4092   4446   4720   4781
                                      4812   4855   4870   4943   4993
                                      5016   5143   5301   5362   5620
                                      5852   5884   5963   6000   6017
                                      6095   6104   6135   7067   7071
                                      7074   7115   7306   7739   7933
                                      7947   9345   9804   9817  10141
                                     10415  11370  11480  11849  13590
                                     13606  14233  14243  14830  15518
                                     15541  15561  15580  15606  15676
                                     16432  16586  16653
ISNUM                          $0390   815D  4277
Fetch_0                        $039f   829D  1955   2026   2047   2054
                                      2082   4826
Fetch_1                        $03ab   843D  1965   2005   2012   2019
                                      2033   2040   2061   2068   2075
                                      3100   3103   4368   5048   5074
                                      6836   6852   9201   9667   9676
                                      9745   9755  10542  11345  14850
                                     14853  14877  14881  16185  16210
Get_INDEXA_1                   $03b7   856D  4276   4385   4389   4392
                                      4398   4560   5988   6427   7148
                                      7187   7980   9780   9784   9789
                                      9792   9795   9974   9977   9980
                                      9984   9992  10006  10010  10015
                                     10566  11553  11718  11802  11805
                                     11808  12354  12357  12360  12363
                                     12371  12937  12960  13869  13902
                                     14210  16577  16719  16990
Get_INDEXB_0                   $03c0   864D  5785  15764  15839
INDTXT                         $03c9   872D  2784   2790   2793   2796
                                      4043   4068   4074   4087   4106
                                      4109   4112   4151   4165   4845
                                      4848   4851   5403   5406   5410
                                      5430   5433   5457   5728   5956
                                      6024   6027   6030   6034   6037
                                      6160   6163   6166   9600  12935
NULL_DESC                      $03d2   885D  9644   9647   9706   9709
                                      9903   9904  10964
USER_BANK                      $03d5   891D  1729   4956   7672   7744
                                      8668  10611  10631  16430  17503
TMPDES                         $03d6   893D 14819  14821  14825  14827
                                     14841  14896  14897  14900  14901
STR_BANK                       $03da   894D 12828  12933  12948
SAVSIZ                         $03db   895D  6686   6689   6771   6772
                                      6774   6783   6785   6787   6806
                                      6808   9181   9182   9183   9193
                                      9195   9198   9215   9217
BITS                           $03df   896D  1704   3950  12127  12765
                                     12772  12781
SPRTMP                         $03e0   897D  9186   9188   9208   9210
FG_BG                          $03e2   899D  7437   7572  15230  15245
FG_MC1                         $03e3   900D  7440   7575  15236
RAM_DMA                        $03f0   905D 22261  22476  26269
VAR_START                      $0400   917D  1743   1744
VIC_TEXT                       $0400   916D 19538  19539  19540  19541
                                     19542  19543  19544  19545  19546
                                     19547  19548  19549  19550  19551
                                     19552  19553  19554  19555  19556
                                     19557  19558  19559  19560  19561
                                     19562  19568  19569  19570  19571
                                     19572  19573  19574  19575  19576
                                     19577  19578  19579  19580  19581
                                     19582  19583  19584  19585  19586
                                     19587  19588  19589  19590  19591
                                     19592  22152
BASIC_STACK                    $0800   919D  1765   3508   3511   3916
                                      3917
RESET_VECTOR                   $0a00   921D  1674  17768  22335  22431
                                     22432  26762
DEJAVU                         $0a02   922D 22324  22434
PALNTS                         $0a03   923D 10435  22534  22556  25018
                                     25930
INIT_STATUS                    $0a04   924D  1670   1672  19680  19700
                                     19701  22315  22560  22564  22565
                                     26777
MEM_BOT                        $0a05   925D 26209  26210  26216  26217
MEM_TOP                        $0a07   926D 26190  26191  26197  26198
IRQTMP                         $0a09   927D 22538  24115  24117  24133
                                     24153  24687  24690
CASTON                         $0a0b   931D 24104  24186
KIKA26                         $0a0c   932D 24217  24269
STUPID                         $0a0d   933D 24188  24272  24276
TIMOUT                         $0a0e   934D 26179
RS_Enable                      $0a0f   938D 22586  23450  23452  23505
                                     23506  23575  23615  23645  23658
                                     23687  23689  23695  23704  23712
                                     23733  23783  23801  23802  25065
RS_Control                     $0a10   939D 23397  23462  23495  25007
                                     25013  26952
RS_Command                     $0a11   940D 23389  23419  23538  23567
                                     23636  25039  26948
RS_Baudrate                    $0a12   941D 23794  23796  25025  25026
                                     25027  25030  26949  26950
RS_Status                      $0a14   942D 23441  23442  23554  23555
                                     23592  23668  23673  23678  24871
                                     25003  26152  26155
RS_Bits                        $0a15   951D 23428  23529  23806  25012
RS_Timer_Lo                    $0a16   952D 23620  23776  25035
RS_Timer_Hi                    $0a17   953D 23622  23779  25038
RS_IBP_End                     $0a18   954D 23522  23526  23670  25046
RS_IBP_Beg                     $0a19   955D 23524  23669  23675  25047
RS_OBP_Beg                     $0a1a   956D 23430  23435  23604  25049
RS_OBP_End                     $0a1b   957D 23431  23602  23606  25048
Fast_IEC                       $0a1c   959D 22585  22952  22959  23018
                                     23020  23097  23187  23189  25367
                                     25369  25556
JIFFY_COUNTDOWN                $0a1d   971D  7683   7684   7685   7689
                                      7690   7691   7696   7711   7712
                                      7713   7722   7723   7725   7726
                                      7728   7729  25923  25925  25927
                                     25928  25929
XMAX                           $0a20   972D 19652  20591
PAUSE                          $0a21   973D 19639  20473  20474  20512
                                     20572  20670
RPTFLG                         $0a22   974D 19659  20535
KOUNT                          $0a23   975D 19657  20558  20561
DELAY                          $0a24   976D 19655  20531  20551  20553
LSTHF                          $0a25   977D 20470  20488  20500  20566
BLNON                          $0a26   979D 19640  20636  20645  20655
                                     20657  21439  21453  21455  21988
                                     21991
BLNSW                          $0a27   980D 19654  20632  21966  21987
                                     27060
BLNCT                          $0a28   981D 19653  20634  20641  21703
GDBLN                          $0a29   982D 20647  20652  21992
GDCOL                          $0a2a   983D 20643  20650  21993
CURMOD                         $0a2b   992D 19663  21414  21424  21435
                                     21437  21449  21960
VSH_TEXT                       $0a2c   993D 19644  19831  20496  20498
                                     20915  20926  20928
VSH_BITMAP                     $0a2d   994D 19646  19810
VDC_RAM_PAGE                   $0a2e   995D 19642  19761  20216
VDC_ATT_PAGE                   $0a2f   996D 19648  19776  20241  20328
LINTMP                         $0a30   997D 19919  19927  19975  26930
VDC_ROW                        $0a31   998D 20202  20209  20250  20279
                                     20336
VDC_COL                        $0a32   999D 20203  20234  20235  20247
                                     20280  20302
VDC_ATT                        $0a33  1000D 21951  21979
VSH_SPLIT                      $0a34  1001D  7475   7636  19665  19804
FN_SAVE_X                      $0a35  1002D 26275  26279
PAL_ADJ                        $0a36  1003D 22540  25932  25935
VSH_SPEED                      $0a37  1004D 23264  23267  23288  23292
                                     23295  24677  24681  24684  26947
VSH_SPR_ENA                    $0a38  1005D 23269  23273  23290  24679
VSH_Ctrl_1                     $0a39  1006D 22537  24109  24672
SPRITES                        $0a3a  1007D 22539  23262  23286  24675
VIC_RAM_PAGE                   $0a3b  1008D 19650  19763  20186
VDC_UPDATE_LO                  $0a3c  1009D 20290  20307  20308  20356
VDC_UPDATE_HI                  $0a3d  1010D 20293  20310  20311  20326
                                     20329  20352
ZP_SW_COL                      $0a40  1015D 19671  21900  21902
SWPMAP                         $0a60  1020D 21908  21910
M_Data                         $0a80  1024D 18057  18068  18079  18107
                                     18109
M_Operand                      $0aa0  1025D 18214  18234  18235  18249
                                     18263  18272  18397  19309  19312
                                     19323  19324  19325  19330  19331
                                     19332  19346  19348  19350  19352
                                     19368  19369  19370  19371
M_Format                       $0aaa  1026D 18286  18300  18307  18474
                                     18483  18547
M_Op_Size                      $0aab  1027D 18298  18324  18348  18361
                                     18362  18427  18428  18430  18454
                                     18472  18549
M_Mne                          $0aac  1028D 18223  18229
M_Save_XR                      $0aaf  1029D 18395  18405  19054  19058
                                     19095  19104  19148  19151
M_Opcode                       $0ab1  1030D 18280  18284  18355  18401
M_Save_X                       $0ab2  1031D 17793  17799  17806  17813
                                     17820  17828
M_Dir                          $0ab3  1032D 17977  18007  18029
M_Count                        $0ab4  1033D 18215  18243  18257  18868
                                     18883  18894  18931  18988  19364
                                     19379  19381
M_Number                       $0ab5  1034D 18927  18928  18967
M_Shift                        $0ab6  1035D 18254  18915  18941  18983
                                     19365  19366
M_Temp                         $0ab7  1036D 18002  18188  18937  18951
                                     18952  18953  18955  18958  18961
                                     19241  19243  19245
Module_Bank                    $0ac0  1038D 22696  22703  22719  22728
                                     26473  26474  26484
Module_Flags                   $0ac1  1039D 22698  22720  26475
DINFLAG                        $0ac5  1040D 26972  26980  27006  27021
                                     27047
T_Buffer                       $0b00  1046D 22413  26545  26546  26551
                                     26560  26565  26590  26597  26600
                                     26615
R_Rece_Buffer                  $0c00  1047D 22416
R_Send_Buffer                  $0d00  1048D 22419
PKYBUF                         $1000  1049D  6274  19696  20606  21821
                                     21853  21880  22234  22240
PKYDEF                         $100a  1050D  6287  19884  21833  21834
                                     21842  21843  21864
DOSSTR                         $1100  1051D 16923  16930  16931  16951
                                     16967  16976  16992
XPOS                           $1131  1055D  6389   6391   6392   6397
                                      6399   6401   6405   6407   6408
                                      6429   6459   6477   6479   6502
                                      6522   6529   6548   6550   6567
                                      6569   6580   6582   6583   6597
                                      6599   6600   6603   6639   6641
                                      6642   6644   6646   6681   6683
                                      6697   6699   6707   6729   6730
                                      6732   6803   6805   6885   6887
                                      6904   6970   6972   7014   7495
                                      7874   7876  14989  14991  15015
                                     15018  15020  15023  15044  15046
                                     15097  15099  15143  15145  15158
                                     15160  15162  15164  15165  15308
                                     15328  15331  15369  15372  15400
                                     15403  15414  15417  15428  15430
                                     15465  15466  15469  15471  15479
                                     15482  15509  15511  15586  15587
                                     15619  15621  15629  15631  15637
                                     15639  15663  15665  15685  15687
YPOS                           $1133  1056D  6378   6380   6381   6385
                                      6387   6409   6411   6799   6801
                                      6907   6909  15305  15340  15342
                                     15620  15622
XDEST                          $1135  1057D  6587   6591   6903   7055
                                      7827   7829   7901   7908   7914
                                     15508  15510
YDEST                          $1137  1058D  7828   7830   7883   7884
                                      7891
XABS                           $1139  1059D  6588   6592  15068  15072
                                     15112  15114  15116  15118
YABS                           $113b  1060
XSGN                           $113d  1061D  7130   7142   7153   7250
                                      8701   8719  15056  15057  15060
                                     15061  15067  15144
YSGN                           $113f  1062
FCT                            $1141  1063D  6589   6593  15070  15074
                                     15128  15131
ERRVAL                         $1145  1064D 15107  15108  15122  15127
                                     15129  15130  15132
LESSER                         $1147  1065D 15086  15091  15121
GREATR                         $1148  1066D 15088  15104  15110  15125
                                     15133
ANGSGN                         $1149  1067D  6508   6540   6557   6560
                                      6607   6609   6616   7851  14936
                                     14944  14975  14992
SINVAL                         $114a  1068D  7845   7847  14980  14982
                                     14989
COSVAL                         $114c  1069D 14991
ANGCNT                         $114e  1070D  6498   6614   6619   6621
                                      7034   7037   7038   7042   7043
                                     15014  15016
XCIRCL                         $1150  1071D  6477   6582
YCIRCL                         $1152  1072D  6603   6819   6830
XRADIUS                        $1154  1073D  6482   6483   6580   6696
                                      6744   6745   6828   6841   6849
                                      6850   6865   6932   6933   6937
                                      6939   6974   6981   7023  15015
YRADIUS                        $1156  1074D  6518   6854   6856   6857
                                      6862   6869   6871   6876   6935
                                      6938   6942   6944
ROTANG                         $1158  1075D  6680   6685   6753   6760
                                      6807   6838   6843   6901   6975
YDIST2                         $115a  1076D  6513   6515   6533   6535
                                      6537   6682   6688   6763   6765
                                      6798   6809   6845   6911   6913
ANGBEG                         $115c  1077D  6479   6501   6583   6698
                                      6767   6802   6844   6889   6895
                                      6902   6914   6916   6953   6954
                                      6995   6996   6998   7014  15023
ANGEND                         $115e  1078D  6600   6660   6700   6792
                                      6804   6846   6896   6898   6956
                                      6957   7104   7105   7107   7109
                                      7111   7114   7137   7138   7182
                                      7200   7202   7206   8797   8798
                                      8840   8841   8845   8854   8855
                                      8856   8895   8897   8924   8928
                                      8934   8939   8942   8950   9076
                                      9078
XRCOS                          $1160  1079D  6512   6514   6661   6718
                                      6738   6752   6794   6982   7022
                                      7184   7185   7186   8996   9002
                                      9004
YRSIN                          $1162  1080
XRSIN                          $1164  1081
YRCOS                          $1166  1082
CHRPAG                         $1168  1083D  7160   7198   7245   8696
BITCNT                         $1169  1084D  6848   6859   6864   6919
SCALEM                         $116a  1085D  1713   7305   7645  15356
WIDTH                          $116b  1086D  1712   8474  15156
FILFLG                         $116c  1087D  1714   6488   6505  15155
BITMSK                         $116d  1088D  8756   8765   8768  15175
                                     15177  15182  15184  15186  15199
                                     15201
NUMCNT                         $116e  1089D  7122   7146   7189   7824
                                      7832   7881   7892   7902   7926
                                      7939   9001   9005
TRCFLG                         $116f  1090D  1707   2822   3878   4984
Ren_Line_Lo                    $1170  1094D  5356   5369   5389   5670
Ren_Line_Hi                    $1171  1095D  5357   5370   5390   5672
Ren_Step_Lo                    $1172  1096D  5358   5373   5375   5707
Ren_Step_Hi                    $1173  1097D  5359   5374   5710
T3                             $1174  1099D  7863  15927  15936
T4                             $1175  1100D 15929  15938
T5                             $1176  1101D 15933  15939
VTEMP3                         $1177  1103D 15473  15481  15483  15485
                                     15490
VTEMP4                         $1178  1104D 15604  15618  15627  15647
                                     15648  15650  15655  15667  15684
Rel_Abs_Flag                   $1179  1105D 15625  15633  15642  15660
                                     15682
ADRAY1                         $117a  1106D  1693   1694
ADRAY2                         $117c  1107D  1697   1698
SPRITE_DATA                    $117e  1109D  1722   1772   1856   7842
                                      7853   7858   8773  11061  17224
                                     17226  17230  17240  17251  17445
                                     17446  17447  17448  17449  17450
VSH                            $11d6  1115D  1116   1117   1118   7898
                                      7900   7905   7906   7909   7911
                                      7912   7917   8762   8764   8766
                                      8767  11065  11079  17212  17248
                                     17250  17455  17461
VSH_SS_COLL                    $11e7  1116D 11034  11036  17276  17277
VSH_LPX                        $11e9  1117D 10921  10924  17304
VSH_LPY                        $11ea  1118D 17306
CHARGEN_TEXT                   $11eb  1120D  1779   7193
CHARGEN_GRAF                   $11ec  1121D  1777   7159   7197
REC_SA                         $11ed  1123D 16242  16940
OLDLIN                         $1200  1124D  2924   2925   5256   5257
                                      5524   5526   5531   5533
OLDTXT                         $1202  1125D  2813   2814   3159   3948
                                      4799   4800   5250   5253  15792
                                     15793
PU_FILL                        $1204  1127D  3928   5990  14260
PU_COMMA                       $1205  1128D 14609
PU_DOT                         $1206  1129D 14618
PU_MONEY                       $1207  1130D 14670
ERRNUM                         $1208  1132D  3153   3911   5098   6069
                                      9772
ERRLIN                         $1209  1133D  3158   3909   3910   5101
                                      5102   6014   6057   6070   6071
                                      9767   9768
TRAPNO                         $120b  1134D  2899   3163   3169   3908
                                      6003   6006   6073  10462
TMPTRP                         $120d  1135D  3168   6072
ERRTXT                         $120e  1136D  3160   5125   5127   6059
                                     15796  15797
TEXT_TOP                       $1210  1138D  3245   3246   3259   3269
                                      3270   3272   3274   3279   3308
                                      3309   3328   3329   3475   3476
                                      3882   3885   5445   5446   5603
                                      5605   5616   5618   5619   5738
                                      5740   5913   5914   5916   5917
                                      5939   5942  10426  10428  10496
                                     10499  13463  13464  13518  13519
                                     15722  15734  15738  15740  15769
                                     15771  15845  15852  15854
TEXT_MAX                       $1212  1139D  1749   1750   3249   3252
                                      3321   3324   5562   5564  10495
                                     10498  15727  15730
TEXT_TMP                       $1214  1140D  6090   6114   6117
TEXT_LIN                       $1216  1141D  6092   6120   6123   6201
                                      6202
FUNC_USR                       $1218  1142D  1686   1689   1690   2579
RNDX                           $121b  1144D  1715  11157  11158  11181
                                     11182
ARC_SEG                        $1220  1146D  6992   6994
Snd_Tempo                      $1222  1150D  1793   8257  17320
Snd_Duration                   $1223  1151D  1816   1817   1818   8042
                                      8180   8209   8212   8214   8223
                                      8224   8226   8227   8566  17316
                                     17318  17321  17323  17325
Snd_Dur_Tmp                    $1229  1152D  1788   1789   8132   8134
                                      8137   8138   8211   8213   8217
                                      8220
Snd_Octave                     $122b  1153D  1791   8066   8153
Snd_Sharp                      $122c  1154D  8157   8199   8246
Snd_Pitch                      $122d  1155D  8167   8172   8202   8232
                                      8234  10440
VOICE                          $122f  1157D  1820   1823   1825   8040
                                      8062   8075   8207
WAVE0                          $1230  1158D  8077   8238  17330
DNOTE                          $1233  1159D  8124   8215   8247
FLTSAV                         $1234  1160D  8293   8302   8303   8305
                                      8307   8309   8318   8322   8335
                                      8338   8340
FLTFLG                         $1238  1161D  8311   8319   8321   8323
NIBBLE                         $1239  1163D  8334   8337   8371   8375
                                      8381   8385
TONNUM                         $123a  1164D  8355   8407   8411
TONVAL                         $123b  1165D  8357   8359   8361   8373
                                      8376   8383   8386   8399   8403
                                      8412   8414   8416
PARCNT                         $123e  1167D  8363   8372   8382   8387
ATKTAB                         $123f  1168D  1805   8080   8356   8413
SUSTAB                         $1249  1169D  8082   8358   8415
WAVTAB                         $1253  1170D  8076   8360   8417
PULSLO                         $125d  1171D  8084   8410
PULSHI                         $1267  1172D  1810   8086   8408
FILTERS                        $1271  1173D  8045   8048   8052   8292
                                      8341
Old_Filter                     $1274  1174D  1800   8049   8095   8098
                                      8486   8489
Old_Volume                     $1275  1175D  1801   8050   8099   8490
                                      8493
INT_TRIP_FLAG                  $1276  1176D  1717   1718   2738   2741
                                      5273  17294
Light_Pen_Flag                 $1278  1177D  1719  17311
INT_ADR_LO                     $1279  1178D  2742   8434
INT_ADR_HI                     $127c  1179D  2744   8432
INT_VAL                        $127f  1180D  1720   2735   2752   2754
                                      2759   2761   5270   8435   8440
                                     17287  17307
Collision_Type                 $1280  1181D  8428   8431
Voice_Number                   $1281  1182D  8508   8562   8579   8595
Sound_Duration_1_Lo            $1282  1183D  8601  17404  17407
Sound_Duration_2_Lo            $1283  1184
Sound_Duration_3_Lo            $1284  1185
Sound_Duration_1_Hi            $1285  1186D  1813   8568   8599  17343
                                     17406  17408
Sound_Duration_2_Hi            $1286  1187D  1814
Sound_Duration_3_Hi            $1287  1188D  1815
SOUND_MAX_LO                   $1288  1189D  8572  17373  17384
SOUND_MAX_HI                   $128b  1190D 17375  17380
SOUND_MIN_LO                   $128e  1191D 17363  17393
SOUND_MIN_HI                   $1291  1192D 17365  17395
SOUND_DIR                      $1294  1193D 17356  17371  17391
SOUND_STEP_LO                  $1297  1194D 17351  17420  17424
SOUND_STEP_HI                  $129a  1195D 17354  17425  17428
SOUND_FREQ_LO                  $129d  1196D 17350  17352  17362  17374
                                     17383  17394  17398
SOUND_FREQ_HI                  $12a0  1197D 17353  17355  17364  17376
                                     17379  17396  17400
TEMP_TIME_LO                   $12a3  1198D  8517   8559   8596
TEMP_TIME_HI                   $12a4  1199D  8518   8560   8597
TEMP_MAX_LO                    $12a5  1200D  8510   8571
TEMP_MAX_HI                    $12a6  1201D  8511
TEMP_MIN_LO                    $12a7  1202D  8527
TEMP_MIN_HI                    $12a8  1203D  8528
TEMP_DIRECTION                 $12a9  1204D  8523
TEMP_STEP_LO                   $12aa  1205D  8543
TEMP_STEP_HI                   $12ab  1206D  8541
TEMP_FREQ_LO                   $12ac  1207D  8512   8589
TEMP_FREQ_HI                   $12ad  1208D  8513
TEMP_PULSE_LO                  $12ae  1209D  8557
TEMP_PULSE_HI                  $12af  1210D  8558
TEMP_WAVEFORM                  $12b0  1211D  8550
POT_IEMP_1                     $12b1  1213D 10876  10890  10922  10927
                                     10929
POT_IEMP_2                     $12b2  1214D 10888  10906
Win_XL                         $12b3  1216D  8615   8627   8640
Win_YL                         $12b4  1217D  8619   8633   8641
Win_XH                         $12b5  1218D  8626   8644
Win_YH                         $12b6  1219D  8632   8645
SAVRAM                         $12b7  1221D  8793   8883   9164   9168
                                      9169   9171   9173   9174   9175
                                     16579  16975
DEFMOD                         $12fa  1223D  8760   8859   8878   8891
                                      8893   8920   8931   8944   8946
                                      9007   9035   9066   9079
LINCNT                         $12fb  1224D  8997   9021
SPRNUM                         $12fc  1225D  8749   8770   8781   8810
                                      8904   9044
IRQ_ACTIVE_FLAG                $12fd  1226D  1798  17204  17207  17436
RAMBOT                         $1c00  1227D  1708  22426  22427
COLOR_RAM                      $1c00  1230D  7577
PROGRAM_START                  $1c01  1228D  1739   1740
GRAFX_RAM                      $2000  1231D  7569   7590
V3e00                          $3e00  1233D  8984
B_Cold_Start                   $4000  1629D 22429  22430
B_Warm_Start                   $4003  1635D  1673
B_BASIC_IRQ                    $4006  1641D 26780
Warm_Start                     $4009  1647D  1638
Go_Ready                       $401c  1657D  1678
Cold_Start                     $4023  1663D  1632
Init_BASIC                     $4045  1681D  1668
InBA_10                        $406c  1700D  1703
InBA_20                        $40a5  1722D  1724
InBA_30                        $40f0  1764D  1768
InBA_40                        $40fc  1772D  1774
Init_SID                       $4112  1783D  1653   1775
ISID_10                        $4141  1804D  1807
ISID_20                        $414c  1809D  1812
ISID_30                        $416c  1821D  1824
ISID_40                        $4176  1825
Init_MMU                       $417a  1829D  1651   1666
IMMU_10                        $417f  1834D  1837
MMU_Preconfiguration           $4189  1841D  1834
Stop_Sprites                   $418d  1850D  1652
StSp_10                        $4191  1855D  1858
Show_Startup_Message           $419b  1862D  1669
SSM_10                         $419d  1866D  1879
SSM_20                         $41aa  1872D  1875
SSM_30                         $41b2  1876D  1868
SSM_40                         $41b5  1877D  1870
Startup_Message                $41bb  1884D  1866
Init_RAM_Vectors               $4251  1902D  1667
IRV_10                         $4253  1906D  1909
ROM_BASIC_Vector_Table         $4267  1917D  1906
ROM_CHRGET                     $4279  1931D  1700   1944
CHRG_10                        $427f  1937D  1935
CHRG_RET                       $4297  1949D  1942
ROM_Fetch_0                    $4298  1952
ROM_Fetch_1                    $42a4  1962
ROM_Get_INDEXA_1               $42b0  1972
ROM_Get_INDEXB_0               $42b9  1981
ROM_INDTXT                     $42c2  1990
GRBPNT_from_Bank_1             $42ce  2001D 11336  11340  11356  11359
FNDPNT_from_Bank_1             $42d3  2008D 14172  14498  14602  14680
                                     17518
Get_DSCPNT_1                   $42d8  2015D 11432  11438  11466  11492
Get_HIGHTR_0                   $42dd  2022D  3357   3361
Get_HIGHTR_1                   $42e2  2029D 10019  10023  10095  10099
Get_FAC1_M3_1                  $42e7  2036D  4290   4309   4314   4326
                                      5050   9251   9254   9257   9698
                                      9701  11676  14159  14164
Get_LOWTR_0                    $42ec  2043D  3236   3257   3264   3655
                                      3659   3668   3675   3678   3727
                                      3730   3735   3738   3746   3749
                                      3777   3819   3833   5894   5898
                                      5900   5919
Get_STRPTR_0                   $42f1  2050D 11595  11623
Get_STRPTR_1                   $42f6  2057D 11674  11698  11701  11704
GRBPNT_from_Bank_1_Copy        $42fb  2064D 13852  13864  13867  13882
                                     13931  13935
Get_LOWTR_1                    $4300  2071D  9866   9870  10161  10165
                                     10169  10174  10193  10280  10289
                                     10297  10345  10348
Get_INDEXA_0                   $4305  2078D  3290   3442   3445   3449
                                      5762
CRUNCH                         $430a  2085D  3226   3231  17608
DEF_CRUNCH                     $430d  2091D  1922
CRUN_05                        $4313  2098D  2124   2163
CRUN_10                        $4319  2100D  2101   2113   2121   2131
                                      2150   2160   2196
CRUN_15                        $431c  2101D  2099
DEF_ESCLK                      $4321  2105D  1926
CRUN_25                        $4326  2110D  2108
CRUN_30                        $4336  2118D  2115
CRUN_35                        $4345  2125D  2119
CRUN_40                        $4349  2127D  2132
CRUN_45                        $4356  2133D  2126
CRUN_50                        $4365  2140D  2136
CRUN_55                        $4374  2147D  2143
CRUN_60                        $4384  2154D  2152
CRUN_65                        $4386  2155D  2117
CRUN_70                        $439b  2164D  2158
CRUN_75                        $43a1  2166D  2111   2129
CRUN_80                        $43b0  2179D  2139   2146
CRUN_85                        $43b2  2183D  2109
CRUN_90                        $43be  2190D  2188
kloop                          $43cc  2199D  2123   2153   2185
kloop_10                       $43da  2210D  2213
reser                          $43e2  2217D  2135   2142   2149
reser_10                       $43eb  2225D  2229
reser_20                       $43ec  2226D  2247
reser_30                       $43f7  2232D  2235
reser_40                       $43fe  2236D  2233
reser_50                       $440b  2244D  2242
reser_60                       $4412  2248D  2231
BASIC_Keytab_A                 $4417  2253D  3796   3797
BASIC_Keytab_B                 $451e  2337
BASIC_Keytab_C                 $4609  2390D  3828   3829
BASIC_Keytab_D                 $46c9  2433D  2140   2141   3842   3843
BASIC_Action_A                 $46fc  2448D  2853   2855
BASIC_Action_B                 $4742  2488
BASIC_Action_C                 $478e  2531
BASIC_Function_A               $47d8  2573D  2982   2984
BASIC_Function_B               $4806  2601
BASIC_Function_C               $4816  2614
BASIC_Operator                 $4828  2628D  9376   9398   9406   9408
                                      9420  17599
Unimplemented                  $4846  2643D  2562   2568   6269
Error_Messages                 $484b  2650D  2707   2709
Error_Message_B                $49dc  2686
Set_Error_Index                $4a82  2702D  3180  10643
SEI_10                         $4a8d  2711D  2720
SEI_20                         $4a90  2713D  2719
SEI_30                         $4a99  2718D  2716
SEI_Ret                        $4a9e  2721D  2712
Interpret                      $4a9f  2724D  2804   2885
DEF_GONE                       $4aa2  2730D  1924
Inter_20                       $4aad  2738D  2769
Inter_30                       $4aed  2768D  2739
Inter_40                       $4af0  2770D  2734   2736
Inter_50                       $4af3  2771D  3228
Next_Statement                 $4af6  2774D  2758   3176   5145   5297
                                      5304  17610
NeSt_10                        $4b03  2783D  2779
NeSt_20                        $4b0d  2787D  2785
NeSt_30                        $4b2e  2804D  2802
NeSt_40                        $4b31  2805D  2788   2791
TXTPTR_TO_OLDTXT               $4b34  2808D  2780   2921
TPOT_Ret                       $4b3e  2815D  2821
Execute                        $4b3f  2818D  2771   4093
Exec_05                        $4b59  2833D  2823   2825   4185
Exec_10                        $4b64  2838D  2836
Exec_15                        $4b76  2847D  2843
Exec_20                        $4b7e  2851D  2849   2873
Exec_25                        $4b8b  2861D  2839
Exec_30                        $4b91  2865D  2881
Exec_35                        $4b94  2866D  2834
Exec_40                        $4ba5  2874D  2869   2871
DEF_ESCEX                      $4ba9  2878D  1928
Exec_50                        $4bab  2882D  2841   2845   2867   2884
                                      2942
Exec_55                        $4bae  2883D  2786
Is_STOP_Key                    $4bb5  2888D  2777   3732   6432   7695
ISK_10                         $4bbb  2896D  2892
ISK_20                         $4bc1  2902D  2903
BASIC_STOP                     $4bcb  2908D  2467
BASIC_END                      $4bcd  2914D  2451
END_10                         $4bce  2918D  2911
END_20                         $4bd0  2919D  2901
END_30                         $4be1  2926D  2920
END_40                         $4bf3  2932D  2928
END_Ret                        $4bf6  2933D  2918
Call_Function                  $4bf7  2936D  9565
CALL_10                        $4c05  2946D  2944
CALL_20                        $4c16  2955D  2950
CALL_30                        $4c3b  2976D  2952   2954
CALL_40                        $4c3f  2978D  2975   3002
CALL_50                        $4c54  2988D  2940
CALL_60                        $4c68  2997D  2991
CALL_70                        $4c74  3003D  2998   3000
CALL_80                        $4c78  3007D  1910   1912
CALL_USR                       $4c7d  3014D  3004
CALL_90                        $4c80  3018D  2961
CALL_99                        $4c83  3019D  2989   3010
OP_OR                          $4c86  3022D  2637
OP_AND                         $4c89  3029D  2636
OP_COMPARE                     $4cb6  3055D  2640
OPCO_10                        $4cce  3069D  3059
OPCO_20                        $4cf6  3089D  3084   3086
OPCO_30                        $4cfb  3092D  3107
OPCO_40                        $4d01  3096D  3068
OPCO_50                        $4d06  3099D  3094
OPCO_60                        $4d1e  3111D  3096   3098   3109
OPCO_70                        $4d27  3117D  3115
Print_Ready                    $4d2a  3120D  3204  13523
BASIC_Ready                    $4d37  3128D  1658   2805   2932   5092
                                      6032
OOM_Error                      $4d3a  3135D  3254   3326   3607   5578
                                      6254   6455  10302  13805  15732
Print_Error_X                  $4d3c  3141D  2647   2905   3982   4141
                                      4795   4881   5197   5252   5423
                                      5636   6082   6208   9324   9610
                                     10186  11258  11279  11639  12112
                                     12432  13398  13516  15884  15921
                                     16015  16189  16253  16747  17114
DEF_ERROR                      $4d3f  3147D  1920
BAER_10                        $4d4e  3157D  3162
BAER_20                        $4d7c  3178D  3155   3165
BAER_30                        $4d8e  3187D  3185
BAER_40                        $4d96  3190D  3196
BAER_50                        $4daf  3200D  2931
BAER_60                        $4db7  3204D  3152   3202
BAER_70                        $4dc3  3209D  3224   3424  13526
DEF_MAIN                       $4dc6  3212D  1921
MAIN_02                        $4dcd  3219D 17617
MAIN_04                        $4dd5  3224D  3306
MAIN_06                        $4de2  3230D  3225
MAIN_08                        $4e0b  3249D  3247
MAIN_10                        $4e17  3254D  3251
MAIN_12                        $4e1a  3256D  3242   3250   3253
MAIN_14                        $4e53  3284D  3281
MAIN_16                        $4e5b  3290D  3286   3293   3297
MAIN_18                        $4e6a  3301D  3234
MAIN_20                        $4e79  3307D  3305
MAIN_22                        $4e89  3315D  3313
MAIN_24                        $4e8f  3319D  3317
MAIN_26                        $4e9f  3326D  3323
MAIN_28                        $4ea2  3328D  3322   3325
MAIN_30                        $4ec5  3348D  3345
MAIN_32                        $4ed1  3357D  3360
MAIN_34                        $4ed6  3359D  3351   3353   3366
MAIN_36                        $4ede  3363D  3340
MAIN_38                        $4f03  3387D  3385
MAIN_40                        $4f06  3389D  3393
MAIN_42                        $4f39  3415D  3419
MAIN_44                        $4f44  3420D  3416
MAIN_46                        $4f4c  3424D  3399   3406   3408
Relink                         $4f4f  3433D  3302   3395   5295   5934
                                     13524  13528  15778  17607
Reli_10                        $4f58  3441D  3463
Reli_20                        $4f65  3447D  3443
Reli_30                        $4f67  3448D  3450
Set_TEXT_TOP                   $4f82  3466D 15779
STT_10                         $4f8c  3475D  3473
Reli_Ret                       $4f92  3477D  3446
Read_String                    $4f93  3480D  3217   4688
ReaS_10                        $4f95  3484D  3491
ReaS_20                        $4f9f  3488D  3486
Find_Token_On_Stack            $4faa  3502D  3979   4878   5812   6195
FTOS_10                        $4faf  3507D  3544   3546
FTOS_20                        $4fbb  3513D  3509
FTOS_30                        $4fdd  3530D  3525
FTOS_40                        $4fe1  3533D  3517
FTOS_50                        $4fef  3540D  3531   3538
FTOS_60                        $4ffb  3547D  3512
FTOS_Ret                       $4ffd  3548D  3519   3523   3529   3535
SUB_TOS                        $4ffe  3551D  5205   5815   6111
SUTO_10                        $500a  3563D  3561
SUTO_Ret                       $5016  3569D  3566
Check_Mem_Avail                $5017  3572D 10068  10203  10254
CMA_10                         $5021  3585D  3582
CMA_20                         $5025  3588D  3591
CMA_30                         $5030  3594D  3597
CMA_40                         $5043  3606D  3581   3584   3602
CMA_OOM                        $5044  3607D  3565   3568   3603   3605
Init_FNDPNT                    $5047  3610D  3506   5816  15798
Update_TOS                     $5050  3620D  3983   4882   5817   6197
Free_TOS                       $5059  3630D  3985   4869   6199
FreT_Ret                       $5063  3639D  3637
Search_BASIC_Line              $5064  3642D  3233   5105   5314   5384
                                      5393   5891   5962  17609
Find_LINNUM_AX                 $5068  3649D  3679   5180
SBL_10                         $5085  3667D  3664
SBL_20                         $5093  3674D  3666
SBL_30                         $509e  3680D  3656
SBL_Ret                        $509f  3681D  3663   3672   3673
Scan_Linenumber                $50a0  3684D  3230   4187   5087   5151
                                      5364   5529   5961   5968  17615
ScLi_10                        $50a8  3691D  3718
ScLi_20                        $50bb  3700D  3698
ScLi_30                        $50db  3717D  3715
ScLi_Ret                       $50e1  3719D  3691
BASIC_LIST                     $50e2  3722D  2478
LIST_10                        $50e5  3726D  3752
LIST_20                        $50f2  3732D  3728
LIST_30                        $510a  3743D  3740
LIST_40                        $510c  3744D  3742
LIST_50                        $5120  3753D  3731   3743   3773
List_Line                      $5123  3756D  3744   5111
LiLi_10                        $512e  3764D  3813
LiLi_15                        $5132  3766D  3785   3787   3789   3820
                                      3834   3860
LiLi_20                        $513f  3772D  3768
LiLi_25                        $5149  3777D  3775
DEF_QPLOP                      $5151  3782D  1923
LiLi_30                        $516a  3798D  3830   3844
LiLi_35                        $5170  3801D  3810
LiLi_40                        $5173  3803D  3809
LiLi_45                        $517c  3808D  3806
LiLi_50                        $5181  3811D  3815
LiLi_55                        $5182  3812D  3802   3859
LiLi_60                        $518b  3816D  3778
LiLi_65                        $518c  3817D  3791
LiLi_70                        $51a6  3831D  3793
LiLi_75                        $51c0  3845D  3823   3825   3837   3839
LiLi_80                        $51c7  3849D  3846
DEF_ESCPR                      $51cd  3854D  1927
LiLi_85                        $51d3  3860D  3857
BASIC_NEW                      $51d6  3863D  2485  17606
NEW_10                         $51d9  3870D  1780   3866
Reset_BASIC_Execution          $51f3  3888D  5294   5299  13525  17604
BASIC_CLR                      $51f8  3895D  2479  17605
Clear_BASIC                    $51fa  3901D  5300
ClrB_10                        $522c  3927D  3930
ClrB_20                        $5235  3931D 13529
Init_BASIC_Stack               $5238  3934D  1654   3197   3301
IBS_Ret                        $524f  3951D  3898
PUCHARS                        $5250  3954D  3927
Reset_TXTPTR                   $5254  3960D  3396   3891   5482   5674
                                     13527
BASIC_RETURN                   $5262  3973D  2465
RET_10                         $5270  3983D  3980
Skip_Statement                 $528f  4000D  2162   2454   2557   3997
                                      4072   4672   6046   6175  11304
Add_Y_To_Execution_Pointer     $5292  4006D  4022   4678   4854
AYEP_Ret                       $529c  4015D  4013   4044   4046
BASIC_REM                      $529d  4018D  2165   2466   4075   4128
                                      4169
Skip_To_EOS                    $52a2  4025D  4003   4677   4839   5818
End_Of_Line                    $52a5  4032D  4021   5159
EOL_10                         $52ad  4039D  4050
EOL_20                         $52b5  4043D  4049
BASIC_IF                       $52c5  4053D  2462
IF_10                          $52d4  4062D  4059
IF_20                          $52ea  4072D  4066   4070   4078
IF_30                          $52fe  4080D  4063
IF_40                          $5308  4084D  4082
IF_50                          $531a  4092D  4081   4085   4089
Skip_To_BEND                   $5320  4096D  4071   4102   4118   4120
                                      4125   4131   4136   4137   4138
                                      4168
BEND_10                        $5325  4101D  4124
BEND_20                        $5329  4103D  4129
BEND_30                        $534c  4121D  4100
BEND_40                        $5357  4126D  4122
BEND_50                        $5361  4130D  4127
BEND_60                        $5376  4139D  4134
BEND_Err                       $5377  4140D  4104   4107
Skip_To_End_Of_String          $537c  4144D  4123   6153
SEOS_10                        $537e  4148D  4154
SEOS_20                        $5384  4151D  4149
SEOS_Ret                       $5390  4156D  4152
BASIC_ELSE                     $5391  4159D  2491
ELSE_10                        $53a0  4169D  4163   4167
BASIC_ON                       $53a3  4172D  2468
ON_10                          $53b2  4182D  4178   4180   4189
ON_20                          $53ba  4186D  4183
BASIC_LET                      $53c6  4194D  2459   2850   5810
Assign_Numeric_Variable        $53e3  4214D  4780   5011
LET_10                         $53fa  4229D  4217
LET_20                         $5404  4234D  4210
Assign_String_Variable         $5405  4237D  4774   9219
CLOCK_10                       $5418  4249D  4264
CLOCK_20                       $5432  4261D  4257
Add_TI_String_Digit_To_FAC1    $5448  4273D  4250   4254
CLOCK_ERR                      $5450  4279D  4245
ATSD_20                        $5453  4281D  4278
ANS_10                         $5458  4284D  4316   4318
ANS_20                         $545a  4286D  4311
ANS_30                         $5468  4293D  4288
ANS_40                         $5476  4300D  4287   4292   4295
Assign_Normal_String           $547d  4305D  4242
Assing_String_From_Variable    $5494  4322D  4296   4299   6796
ANS_50                         $54b2  4339D  4302
ANS_60                         $54d0  4353D  4345
ANS_70                         $54e9  4366D  4358
ANS_80                         $54eb  4367D  4371
Back_Reference_Position        $54f6  4375D  4344   4357  11766
BRP_10                         $5511  4398D  4394
BRP_20                         $551e  4404D  4401
BRP_30                         $5526  4408D  4405
BRP_40                         $5535  4417D  4415
BRP_50                         $5537  4419D  4387   4395   4397   4400
                                      4403   4407
BASIC_PRINT_D                  $553a  4424D  2475
BASIC_CMD                      $5540  4431D  2480   4427
CMD_10                         $554a  4438D  4435
PRINT_10                       $5554  4445D  4468
PRINT_20                       $5557  4446D  4473
BASIC_PRINT                    $555a  4449D  2476   4442
PRINT_30                       $5563  4456D  4454   4539
Terminate_BUF                  $558b  4476D  3487
Print_CR                       $5598  4487D  3187   3733   3753   4452
                                      5108   5113   5296  14246
Accu_EOR                       $55a6  4498D  4493   4565
Print_Ret                      $55a8  4502D  4456   4484   4559
Comma_Tab                      $55a9  4505D  4463
CoTa_10                        $55af  4512D  4513
Tab_Spc                        $55b9  4519D  4458   4461
TaSp_10                        $55cf  4534D  4516
TaSp_20                        $55d0  4535D  4530
TaSp_30                        $55d1  4536D  4542
TaSp_40                        $55d4  4538D  4465   4533
TaSp_50                        $55da  4540D  4528
TaSp_60                        $55dd  4541D  4537
Print_String                   $55e2  4545D 12999
Print_String_From_Descriptor   $55e5  4551D  4445   4471   4656
PSFD_10                        $55ec  4558D  4564   4566
Space_Or_Right                 $5600  4569D  4472   4541
Print_Blank                    $5604  4576D  4687
SOR_10                         $5607  4581D  4573
Print_Question_Mark            $560a  4585D  3188   4686   4742
Print_Char                     $560c  4591D  2828   2831   3193   3766
                                      3814   4491   4495   4561   5135
                                     14692  14713
BASIC_GET                      $5612  4599D  2484
GET_10                         $5625  4610D  4605
GET_20                         $5635  4616D  4607   4609
BASIC_INPUT_D                  $5648  4627D  2455
Set_Default_Channels           $5658  4638D  4428   4671
SDC_10                         $565a  4642D  4623
BASIC_INPUT                    $5662  4648D  2456
Input_String                   $5671  4659D  4635   4652
InSt_10                        $5679  4665D  4676
InSt_20                        $568d  4673D  4667   4670
Prompt_And_Input               $569c  4681D  4665   4743
PAT_10                         $56a6  4688D  4685
BASIC_READ                     $56a9  4691D  2458
READ_10                        $56b0  4698D  4674
Read_Get                       $56b2  4701D  4621
READ_12                        $56b8  4710D  4815
READ_14                        $56c1  4714D  4719
READ_16                        $56db  4727D  4729
READ_18                        $56e3  4732D  4726
READ_20                        $56e6  4733D  4730
READ_22                        $56ef  4738D  4723
READ_24                        $56f4  4740D  4738
READ_26                        $56fb  4743D  4741
READ_28                        $56fe  4744D  4736
READ_30                        $5702  4749D  4721   4859
READ_32                        $5716  4759D  4753
READ_34                        $5722  4765D  4758
READ_35                        $5723  4766D  4761
READ_36                        $572e  4772D  4770
READ_38                        $573a  4777D  4751
READ_40                        $5744  4781D  4775
READ_42                        $5757  4790D  4787
READ_44                        $575b  4792D  4786
READ_46                        $575f  4794D  4789
READ_48                        $5761  4795D  4791
READ_50                        $5764  4796D  4793
READ_52                        $5784  4805D  4782   4784
READ_54                        $5786  4806D  4811
READ_56                        $579c  4816D  4813
READ_58                        $57a9  4824D  4819
READ_Ret                       $57c9  4833D  4827   4829
READ_DATA                      $57ca  4836D  4739   4858
REDA_10                        $57e6  4854D  4842
BASIC_NEXT                     $57f4  4862D  2453
NEXT_10                        $57fa  4868D  4920
NEXT_20                        $5809  4874D  4865
NEXT_30                        $580e  4876D  4867
NEXT_40                        $5819  4881D  4846
NEXT_50                        $581c  4882D  4879
NEXT_60                        $5829  4889D  4887
NEXT_70                        $5855  4915D  4913
NEXT_Ret                       $5877  4933D  4872
DIM_10                         $5878  4935D  4944
BASIC_DIM                      $587b  4938D  2457
BASIC_SYS                      $5885  4948D  2481
SYS_10                         $589c  4961D  4959
SYS_20                         $58a3  4964D  4962
SYS_30                         $58aa  4967D  4965
SYS_40                         $58b1  4970D  4968
BASIC_TRON                     $58b4  4973D  2494
BASIC_TROFF                    $58b7  4980D  2495
BASIC_RREG                     $58bd  4988D  2541
RREG_10                        $58c1  4993D  5019
RREG_15                        $58e0  5007D  5005
RREG_20                        $58eb  5012D  4996
RREG_25                        $58fd  5020D  4994   5015   5017
RREG_30                        $58fe  5021D  5001
MID_ASSIGN                     $5901  5024D  2861   2863
MIDA_10                        $591c  5039D  5036
MIDA_20                        $5930  5047D  5053
MIDA_30                        $594c  5060D  5058
MIDA_40                        $5954  5064D  5062
MIDA_50                        $5962  5072D  5070
MIDA_60                        $5964  5073D  5078
MIDA_70                        $596f  5079D  5065
MIDA_Err                       $5972  5080D  5068   5071
BASIC_AUTO                     $5975  5083D  2498
BASIC_HELP                     $5986  5095D  2512
HELP_10                        $59a9  5113D  5100   5106
At_Error_Position              $59ac  5116D  3776
AEP_10                         $59b5  5125D  5123
AEP_20                         $59cb  5135D  5133
AEP_Ret                        $59ce  5136D  5126   5128   5129
BASIC_GOSUB                    $59cf  5139D  2464
BASIC_GOTO                     $59db  5148D  2460   4083   5144   5231
                                      5302
GoTo                           $59e2  5156D  2757
GoTo_10                        $59fb  5175D  3175   5165   6050
GoTo_20                        $59ff  5180D  5170   5172
UNDEFINED_STATEMENT            $5a15  5193D  5181   5316
GoTo_Err                       $5a1a  5198D  5153
Push_GOSUB                     $5a1d  5201D  2756   5142
BASIC_GO                       $5a3d  5224D  2837
GO_10                          $5a4a  5232D  5229
GO_20                          $5a54  5236D  5234
GO_Ret                         $5a5f  5240D  5237
BASIC_CONT                     $5a60  5243D  2477
CONT_10                        $5a70  5253D  5251
Set_Run_Mode                   $5a81  5262D  5189   5293   5298   5303
                                     17614
SRM_10                         $5a91  5273D  5275
SRM_Ret                        $5a9a  5277D  5246   5248
BASIC_RUN                      $5a9b  5280D  2461  17603
LINK_RUN                       $5aa6  5290D 17613
RUN_10                         $5ab5  5298D  5283
RUN_20                         $5abb  5300D  5284
BASIC_RESTORE                  $5aca  5307D  2463
REST_10                        $5adb  5317D  5315
Reset_DATPTR                   $5ae1  5322D  3931   5310
ReDP_10                        $5ae6  5328D  5319
ReDP_20                        $5aeb  5331D  5329
Renumber_Token                 $5af0  5337D  5502
BASIC_RENUMBER                 $5af8  5350D  2526
RENU_02                        $5b25  5371D  5366
RENU_04                        $5b35  5377D  5399
RENU_06                        $5b38  5378D  5372   5376
RENU_08                        $5b68  5400D  5363   5379
RENU_10                        $5b74  5405D  5414
RENU_12                        $5b8a  5416D  5412   5421
RENU_14                        $5b98  5422D  5419
Next_BASIC_Line                $5b9d  5426D  5413   5416
NBL_Ret                        $5bad  5437D  5434
RENUMBER_PASS_2                $5bae  5440D  5404   5415   5417
RENU_20                        $5bc4  5452D  5472   5475
RENU_22                        $5bdf  5465D  5461
RENU_24                        $5bf0  5473D  5460   5464
RENU_26                        $5bf8  5476D  5453
Replace_Targets                $5bfb  5479D  5449   5451
RENU_30                        $5bfe  5483D  5494   5499   5509
RENU_32                        $5c06  5486D  5484
RENU_34                        $5c10  5490D  5497   5500   5512   5514
                                      5518
RENU_36                        $5c13  5491D  5528   5546
RENU_38                        $5c17  5493D  5496
RENU_40                        $5c22  5498D  5492
RENU_42                        $5c29  5502D  5505
RENU_44                        $5c35  5508D  5516   5520
RENU_46                        $5c40  5513D  5507
RENU_48                        $5c4d  5519D  5522
RENU_50                        $5c56  5523D  5503   5511   5545
RENU_52                        $5c7e  5539D  5537
RENU_54                        $5c89  5544D  5612   5622
Test_OOM_Bank_0                $5c8f  5549D  5556  10414
OOM0_10                        $5c9a  5557D  5568
OOM0_20                        $5ca0  5560D  5558
OOM0_30                        $5cb4  5570D  5554   5576
OOM0_40                        $5cbf  5575D  5573
OOM0_Ret                       $5cc3  5577D  5571
OOM0_Err                       $5cc4  5578D  5565
RENU_60                        $5cc7  5583D  5542
RENU_62                        $5cc8  5587D  5610
RENU_64                        $5ce1  5600D  5592   5594
RENU_66                        $5cf1  5606D  5599   5604
RENU_68                        $5cf9  5611D  5588
RENU_70                        $5cfe  5613D  5621
RENU_72                        $5d0e  5619D  5617
Replace_Number                 $5d19  5625D  5530
RENU_80                        $5d1c  5629D  5664
RENU_82                        $5d2e  5637D  5630
RENU_84                        $5d4d  5652D  5647
RENU_86                        $5d55  5656D  5648   5651
RENU_88                        $5d5e  5661D  5640
RENU_90                        $5d63  5663D  5644
Ren_Line_To_FAC                $5d68  5667D  5400   5485   5628
Next_Line                      $5d75  5677D  5663
Next_Number                    $5d80  5688D  5471
Skip_To_EOL                    $5d83  5694D  5474   5685   5698
Add_Renumber_Step              $5d89  5702D  5418   5691
Get_Link_Hi                    $5d99  5715D  5452   5483   5629
Next_Byte                      $5d9c  5721D  5401   5454   5470   5473
                                      5486   5488   5490   5493   5590
                                      5637   5641   5661   5697   5718
NeBy_10                        $5da4  5728D  5726
Save_TXTPTR                    $5da7  5731D  5600   5613
Inc_INDEXB                     $5dc0  5749D  5767
Move_Text_Up                   $5dc6  5757D  5615   5753
Dec_INDEXB                     $5dd7  5772D  5789
DEI2_10                        $5ddd  5778D  5776
Move_Text_Down                 $5ddf  5781D  5602
INDEXA_EQ_INDEXB               $5dee  5793D  5766   5788
CII2_Ret                       $5df8  5801D  5798
BASIC_FOR                      $5df9  5805D  2452
FOR_10                         $5e0f  5817D  5813
FOR_20                         $5e45  5844D  5848
FOR_30                         $5e61  5857D  5854
FOR_40                         $5e6d  5863D  5867
FOR_Err                        $5e84  5877D  5885
BASIC_DELETE                   $5e87  5880D  2525
DEL_10                         $5ead  5900D  5897
DEL_20                         $5eb4  5903D  5892   5899
DEL_30                         $5ed2  5919D  5925
DEL_40                         $5edd  5924D  5922
Relink_Set_Top                 $5ee5  5931D  5476   5910
ReST_10                        $5ef5  5942D  5940
Get_Line_Range                 $5efb  5948D  3725   5886
GLR_10                         $5f0f  5961D  5951   5952
GLR_20                         $5f26  5970D  5964
GLR_Ret                        $5f30  5975D  5971
GLR_ERR                        $5f31  5976D  5954   5957   5959   5966
                                      5969
BASIC_PUDEF                    $5f34  5979D  2499
PUDEF_10                       $5f40  5988D  5986   5992
BASIC_TRAP                     $5f4d  5996D  2493
TRAP_10                        $5f5c  6005D  6001
BASIC_RESUME                   $5f62  6010D  2492
RESU_10                        $5f8f  6033D  6028   6031
RESU_20                        $5fa6  6045D  6025   6043
RESU_30                        $5fac  6047D  6019
Resume_Execution               $5fb7  6053D  6018   6022
ReEx_10                        $5fb9  6057D  6062
Clear_Error_Flag               $5fc6  6065D  6049
RESU_Err                       $5fd8  6075D  6021
CANT_RESUME                    $5fdb  6078D  6016
BASIC_DO                       $5fe0  6085D  2513   6223
DO_10                          $5fe2  6089D  6094
DO_20                          $6005  6104D  6109   6152
DO_30                          $600b  6107D  6098
DO_40                          $6012  6110D  6096   6103
BASIC_EXIT                     $6039  6131D  2515
Exit_Syn                       $6041  6137D  6100   6185
Exit_LOOP                      $6044  6140D  6150   6151   6154   6156
                                      6172   6174
EXIT_10                        $6047  6144D  6105   6136
EXIT_20                        $605b  6153D  6148
EXIT_30                        $6060  6155D  6144
EXIT_40                        $6087  6175D  6146
BASIC_LOOP                     $608a  6178D  2514
Exit_DO                        $609b  6191D  6134   6210   6211
EXIT_50                        $60aa  6201D  6158   6161
EXIT_60                        $60b7  6207D  6196
EXIT_70                        $60bc  6209D  6183
EXIT_80                        $60c1  6211D  6181   6188
Next_Expression                $60db  6226D  6101   6107   6186   6209
Assign_Key                     $60e1  6233D  6264
AsKe_10                        $60ec  6241D  6239
AsKe_OOM                       $6107  6254D  6252
BASIC_KEY                      $610a  6257D  2527
BKEY_Err                       $611e  6269D  6262   6267
BKEY_10                        $6121  6271D  6260
BKEY_15                        $6125  6273D  6317
BKEY_20                        $6131  6279D  6285
BKEY_25                        $6139  6283D  6281
BKEY_30                        $6141  6287D  6308
BKEY_35                        $614a  6292D  6295
BKEY_40                        $615f  6302D  6298
BKEY_45                        $6164  6304D  6299
BKEY_50                        $616a  6307D  6331
BKEY_55                        $6177  6313D  6310
BKEY_60                        $617e  6316D  6275
BKEY_65                        $6183  6320D  6293
BKEY_70                        $6185  6321D  6325
REVCHR                         $619d  6333D  6321
PFKEY_SPECIAL                  $61a3  6335D  6292
BASIC_PAINT                    $61a8  6339D  2501
PAINT_10                       $61bd  6350D  6348
PAINT_15                       $61c8  6357D  6354
PAINT_20                       $61cf  6360D  6356   6358
PAINT_25                       $61d0  6362D  6359
PAINT_30                       $61eb  6375D  6433
PAINT_35                       $61f1  6378D  6384
PAINT_40                       $61f9  6381D  6379
PAINT_45                       $6203  6385D  6383
PAINT_50                       $620b  6388D  6386   6414
PAINT_55                       $6216  6392D  6390
PAINT_60                       $622e  6402D  6400
PAINT_65                       $623d  6408D  6406
PAINT_70                       $6248  6412D  6410
PAINT_75                       $624f  6415D  6413
PAINT_80                       $625f  6423D  6419   6431
PAINT_85                       $6265  6426D  6424
PAINT_90                       $6279  6434D  6422
Test_Pixel                     $627c  6437D  6394   6403
TePi_OOM                       $6297  6455D  6451
TePi_10                        $629a  6456D  6442   6443
TePi_20                        $629d  6458D  6445
TePi_30                        $629e  6459D  6450   6454   6468
TePi_40                        $62af  6466D  6464
BASIC_BOX                      $62b7  6473D  2503
BOX_02                         $62d7  6488D  6486
BOX_04                         $62e4  6496D  6499
BOX_06                         $62e7  6497D  6494
BOX_08                         $62ef  6500D  6536
BOX_10                         $62f1  6501D  6504
BOX_12                         $62fe  6507D  6493
BOX_14                         $6308  6512D  6510
BOX_16                         $6318  6518D  6520
BOX_18                         $631e  6521D  6574
BOX_20                         $6320  6522D  6525
BOX_22                         $632c  6528D  6532
BOX_24                         $6335  6533D  6565
BOX_26                         $633f  6537D  6534
BOX_28                         $634e  6544D  6542
BOX_30                         $6350  6545D  6562
BOX_32                         $6361  6554D  6552
BOX_34                         $636c  6560D  6558
BOX_36                         $6378  6566D  6573
BOX_38                         $6382  6570D  6566   6568
BOX_SUB                        $6389  6577D  6491
BOSU_10                        $6392  6584D  6604
BoxTab                         $63ed  6624D  6611   6617
AngTab                         $63f1  6625D  6620
BOX_PAINT                      $640b  6634D  6496   6612   6615
BOPA_10                        $6410  6639D  6650
BOPA_20                        $6424  6647D  6643   6645
BASIC_SSHAPE                   $642b  6654D  2506
SSHA_02                        $6441  6665D  6663
SSHA_04                        $6453  6673D  6694
SSHA_06                        $646c  6684D  6679
SSHA_08                        $649c  6704D  6810
SSHA_10                        $64ac  6712D  6709
SSHA_12                        $64b1  6715D  6706
SSHA_14                        $64b6  6718D  6716
SSHA_16                        $64b9  6719D  6721   6762   6764
SSHA_18                        $64c7  6728D  6726
SSHA_20                        $64d3  6733D  6731
SSHA_22                        $64dc  6737D  6735
SSHA_24                        $64e1  6739D  6742
SSHA_26                        $64f6  6749D  6747
SSHA_28                        $650c  6759D  6756
SSHA_30                        $652e  6773D  6770
SSHA_32                        $6530  6774D  6781
SSHA_34                        $6567  6798D  6766   6768
SSHA_36                        $6572  6802D  6800
BASIC_GSHAPE                   $658d  6813D  2505
GSHA_02                        $65ac  6828D  6826
GSHA_04                        $65b9  6834D  6832   6840
GSHA_06                        $65da  6847D  6922
GSHA_08                        $65f0  6855D  6921
GSHA_10                        $6608  6865D  6861
GSHA_12                        $6616  6871D  6868
GSHA_14                        $661b  6873D  6867
GSHA_16                        $6625  6878D  6875
GSHA_18                        $6627  6879D  6870   6872   6874
GSHA_20                        $662f  6883D  6881
GSHA_22                        $663c  6888D  6886
GSHA_24                        $6647  6894D  6891
GSHA_26                        $6658  6901D  6906
GSHA_28                        $666f  6910D  6908
GSHA_30                        $6683  6919D  6899
GSHA_32                        $668b  6922D  6917   6920
BASIC_CIRCLE                   $668e  6925D  2504
CIRC_10                        $66b8  6944D  6936   6941
CIRC_20                        $66f9  6973D  6966
CIRC_30                        $66fb  6974D  6977
CIRC_40                        $670b  6981D  6984
CIRC_50                        $6725  6992D  6990
CIRC_60                        $6729  6994D  7005
CIRC_70                        $6737  6999D  6997
CIRC_80                        $6748  7006D  7002
CIRC_SUB                       $6750  7011D  6985   7003  17602
CIRC_SUB_Y                     $6752  7017D  7007
CISU_10                        $6757  7022D  7025
anglpt                         $6767  7031D  6637
anglpt_1                       $676e  7037D  7052
anglpt_2                       $678f  7054D  7057
BASIC_DRAW                     $6797  7061D  2507
DRAW_10                        $67b0  7074D  7069   7072   7087   7090
DRAW_20                        $67bc  7080D  7076   7078
DRAW_30                        $67ce  7088D  7085
BASIC_CHAR                     $67d7  7093D  2502
CHAR_10                        $67e7  7104D  7100
CHAR_15                        $6800  7113D  7108
CHAR_20                        $6803  7114D  7112
CHAR_25                        $680f  7119D  7116
CHAR_30                        $6815  7121D  7118
CHAR_35                        $6847  7146D  7143   7152
CHAR_40                        $6858  7153D  7147
CHAR_45                        $6862  7157D  7154
CHAR_50                        $6863  7158D  7136
CHAR_55                        $6885  7176D  7167
CHAR_60                        $6890  7181D  7169   7171   7173   7175
                                      7178
CHAR_65                        $689a  7185D  7204   7209
CHAR_70                        $68b4  7195D  7192
CHAR_75                        $68bb  7198D  7194
CHAR_80                        $68c0  7200D  7196
CHAR_85                        $68c9  7203D  7199
CHAR_90                        $68d7  7210D  7190
Display_Character              $68db  7215D  7201   8705   8709   8721
                                      8735   8779   8956
DiCh_10                        $6913  7250D  7282
DiCh_20                        $691d  7255D  7253
DiCh_30                        $6934  7267D  7262
DiCh_40                        $6938  7269D  7260
DiCh_50                        $6940  7273D  7270
DiCh_60                        $6949  7278D  7273
DiCh_70                        $694c  7280D  7256   7266   7268   7272
                                      7277
BASIC_LOCATE                   $6955  7289D  2508
BASIC_SCALE                    $6960  7298D  2511
SCAL_10                        $696a  7305D  7303
SCAL_20                        $697d  7314D  7312
SCAL_30                        $6986  7319D  7307
SCAL_40                        $699e  7329D  7326
SCAL_50                        $69b9  7342D  7339
Get_Scale                      $69c4  7351D  7319   7332
GeSc_Err                       $69d5  7362D  7328   7341   7357   7360
SC_320                         $69d8  7364D  7320   7321
SC_200                         $69dd  7365D  7333   7334
BASIC_COLOR                    $69e2  7368D  2509
COLO_10                        $6a04  7387D  7383
COLO_20                        $6a08  7389D  7384
COLO_30                        $6a12  7394D  7390
COLO_40                        $6a16  7396D  7391
COLO_50                        $6a21  7401D  7397
COLO_60                        $6a2d  7407D  7402
COLO_70                        $6a32  7409D  7398
COLO_80                        $6a43  7416D  7386   7388   7393   7395
                                      7400   7408
COLO_90                        $6a49  7418D  7373   7378
VDC_Color                      $6a4c  7420D  7406   7414
setpcl                         $6a5c  7424D  1736   7416
BASIC_SCNCLR                   $6a79  7444D  2510
SCLR_10                        $6a8b  7456D  7450
SCLR_20                        $6a8f  7458D  7447
SCLR_30                        $6a92  7459D  7643
SCLR_40                        $6a9b  7463D  7457   7461
SCLR_50                        $6ab2  7475D  7473
SCLR_60                        $6ac8  7488D  7469   7486
SCLR_70                        $6ad0  7492D  7490
SCLR_80                        $6ad7  7495D  7497
Clear_80_Column_Screen         $6ade  7501D  7452   7454   7460
CLR80_10                       $6ae6  7508D  7506
CLR80_20                       $6af1  7513D  7511
Clear_40_Column_Screen         $6af2  7516D  7464   7470
CLR40_10                       $6afa  7523D  7521
CLR40_20                       $6b05  7528D  7526
Fill_X_Pages                   $6b06  7531D  7558   7571   7579
FXP_10                         $6b0c  7537D  7539   7542
Clear_Color_RAM                $6b17  7546D  7491
Clear_Graphics_RAM             $6b30  7565D  7492   8699   8743
CGR_10                         $6b43  7576D  7574
CGR_20                         $6b51  7589D  7593
BASIC_GRAPHIC                  $6b5a  7597D  2500
GRAP_10                        $6b69  7607D  7601
GRAP_20                        $6b82  7619D  7615
GRAP_30                        $6b86  7621D  7652
GRAP_40                        $6b89  7622D  7618   7620   7648
GRAP_50                        $6bae  7644D  7642
GRAP_60                        $6bb4  7647D  7611
GRAP_70                        $6bc1  7653D  7612   7624   7630
Graphic_Modes                  $6bc4  7656D  7613
BASIC_BANK                     $6bc9  7666D  2534
BANK_Err                       $6bd4  7674D  7671
BASIC_SLEEP                    $6bd7  7677D  2543
SLEEP_10                       $6bff  7695D  7698
TIMER_X4                       $6c09  7702D  7688   7692
ASL_TIMER                      $6c0c  7708D  7686   7705
ADD_TIMER                      $6c16  7717D  7687   7693
BASIC_WAIT                     $6c2d  7733D  2469
WAIT_10                        $6c3c  7742D  7740
WAIT_20                        $6c3e  7743D  7749
BASIC_SPRITE                   $6c4f  7753D  2539
SPRI_10                        $6c5c  7761D  7758
SPRI_20                        $6c6f  7770D  7762
SPRI_30                        $6c79  7774D  7771
SPRI_40                        $6c83  7778D  7775
SPRI_50                        $6c8d  7782D  7779
SPRI_Ret                       $6c97  7786D  7783
SPRI_Err                       $6c98  7787D  7765   7795   7814
Switch_Sprite                  $6c9b  7790D  7760   7773   7777   7781
                                      7785
SwSp_10                        $6caf  7802D  7800
Bit_Mask                       $6cb3  7805D  7797   7801   7913   7916
                                      8044   8047   8397   8436   8439
                                      8548   8755   8905  10997  11064
                                     17221  17249
Get_Sprite_Number              $6cbb  7808D  7756   7822
BASIC_MOVSPR                   $6cc6  7819D  2538
MOVS_10                        $6cd4  7827D  7825
MOVS_15                        $6cfe  7845D  7849
MOVS_20                        $6d08  7850D  7855
MOVS_25                        $6d16  7857D  7860
MOVS_30                        $6d24  7865D  7834
MOVS_35                        $6d34  7873D  7880
MOVS_40                        $6d49  7883D  7833
MOVS_45                        $6d54  7887D  7882
MOVS_50                        $6d67  7898D  7895
MOVS_55                        $6d6a  7899D  7893
MOVS_60                        $6d82  7909D  7907
MOVS_65                        $6d88  7911D  7903
MOVS_70                        $6d91  7914D  7910
MOVS_75                        $6d99  7917D  7915
Get_Sprite_Coordinates         $6d9e  7922D  7823   7831
GSC_10                         $6db1  7933D  7927
GSC_20                         $6dbc  7938D  7931
GSC_30                         $6dbd  7939D  7929   7935   7937
GSC_40                         $6dc0  7940D 15683
Comma_Check                    $6dc6  7944D  7925
CoCh_10                        $6dd1  7953D  7951
CoCh_20                        $6dd8  7958D  7948
Sprite_Offset                  $6dd9  7961D  1855   7840   8771  11060
                                     17223
BASIC_PLAY                     $6de1  7969D  2536
PLAY_10                        $6dee  7977D  7984
PLAY_Ret                       $6e01  7985D  7979
Play_Note                      $6e02  7988D  7982
PlNo_10                        $6e07  7994D  7992
PlNo_15                        $6e12  7999D  7995   7997
PlNo_20                        $6e14  8000D  8004
PlNo_25                        $6e1c  8003D  8001
PlNo_30                        $6e26  8008D  8006
PlNo_35                        $6e2d  8011D  8009
PlNo_40                        $6e2f  8012D  8016
PlNo_45                        $6e37  8015D  8013
PlNo_50                        $6e41  8020D  8018
PlNo_55                        $6e48  8023D  8021
PlNo_60                        $6e52  8028D  8026
PlNo_65                        $6e6d  8039D  8037
PlNo_70                        $6e74  8042D  8043
PlNo_75                        $6e84  8048D  8046
PlNo_80                        $6e8f  8052D  8056
PlNo_85                        $6e9d  8058D  8029
PlNo_90                        $6ea8  8064D  8031
PlNo_95                        $6eb1  8068D  8033
Set_Envelope                   $6eb2  8071D  1822
Set_Volume                     $6edd  8091D  8035
Clear_FLAG                     $6ef7  8106D  8057   8063   8067   8088
                                      8117
Error_Exit                     $6efd  8114D  8027   8038   8061   8065
Store_DNOTE                    $6f03  8121D  8010
Set_Duration                   $6f07  8128D  8002
SeDu_10                        $6f11  8135D  8139
SeDu_Ret                       $6f1d  8140D  8136
Set_Note                       $6f1e  8143D  7998
SeNo_10                        $6f37  8161D  8158
SeNo_20                        $6f3e  8165D  8162
SeNo_30                        $6f48  8169D  8173
SeNo_40                        $6f52  8174D  8014
SeNo_50                        $6f5d  8179D  8175
SeNo_60                        $6f5f  8180D  8181   8184
Play_Sharp                     $6f69  8188D  8019
Play_Flatc                     $6f6c  8195D  8022
SeNo_70                        $6f72  8202D  8170
SeNo_75                        $6f78  8205D  8007
SeNo_80                        $6f81  8209D  8210
SeNo_85                        $6fae  8228D  8216
Clear_Tone_Flags               $6fce  8242D  7975   8229
BASIC_TEMPO                    $6fd7  8251D  2537
TEMPO_Err                      $6fe1  8259D  8256
times2                         $6fe4  8261D  8041   8208
notes                          $6fe7  8262D  8000
mutabl                         $6fec  8263D  8012
scalen                         $6ff2  8264D  8149
Pitch_NTSC_Low                 $6ff9  8266D  8166
Pitch_NTSC_High                $7005  8270D 10437
stkmus                         $7011  8274D  1804
susmus                         $701b  8276
wavmus                         $7025  8278
pwhmus                         $702f  8280D  1809
offtab                         $7039  8282D  8078   8231   8580  17333
                                     17397  17411
voltab                         $703c  8283D  8097   8101
BASIC_FILTER                   $7046  8287D  2535
FILT_10                        $7049  8292D  8295
FILT_20                        $7070  8310D  8298
FILT_30                        $7075  8312D  8324
FILT_40                        $7083  8318D  8315   8316
FILT_50                        $708e  8322D  8320
FILT_60                        $7091  8323D  8313
FILT_70                        $70b2  8339D  8326
FILT_80                        $70b4  8340D  8343
FILT_Err                       $70be  8345D  8301   8328
BASIC_ENVELOPE                 $70c1  8348D  2542
ENVE_10                        $70c8  8354D  8396
ENVE_20                        $70cb  8355D  8353
ENVE_30                        $70e2  8363D  8390
ENVE_40                        $7100  8377D  8365
ENVE_50                        $7119  8387D  8378
ENVE_60                        $7133  8399D  8395
ENVE_70                        $7136  8400D  8392
ENVE_80                        $714e  8411D  8401   8405
BASIC_COLLISION                $7164  8421D  2555
COLL_10                        $7189  8440D  8438
COLL_Err                       $718d  8442D  8427
BASIC_SPRCOLOR                 $7190  8445D  2540
SPRC_10                        $71a2  8456D  8449
SPRC_Ret                       $71b2  8463D  8457
SPRC_Err                       $71b3  8464D  8453   8460
BASIC_WIDTH                    $71b6  8467D  2560
WIDT_Err                       $71c2  8476D  8473
BASIC_VOL                      $71c5  8479D  2497
VOL_Err                        $71e9  8497D  8484
BASIC_SOUND                    $71ec  8500D  2496
SOUND_Err                      $71f4  8507D  8516   8521   8556
SOUND_10                       $71f7  8508D  8506
SOUND_15                       $721b  8521D  8547
SOUND_20                       $7240  8541D  8531
SOUND_25                       $7261  8555D  8552
SOUND_30                       $7279  8566D  8567
SOUND_35                       $727e  8568D  8569
SOUND_40                       $7285  8571D  8578
SOUND_45                       $72ad  8589D  8594
SOUND_50                       $72b9  8595D  8561
BASIC_WINDOW                   $72cc  8606D  2558
WIND_10                        $72d7  8614D  8612
WIND_20                        $72f1  8625D  8623
WIND_30                        $732e  8652D  8650
WIND_Err                       $7332  8654D  8614   8618   8625   8628
                                      8631   8634   8637
BASIC_BOOT                     $7335  8657D  2559
BABO_10                        $7351  8673D  8671
BABO_20                        $735e  8679D  8665
BABO_Err                       $736f  8686D  8667   8684
BASIC_SPRDEF                   $7372  8690D  2561
SPRD_05                        $738f  8705D  8708
SPRD_10                        $7397  8709D  8711
SPRD_15                        $73af  8720D  8727
SPRD_20                        $73b1  8721D  8724
SPRD_25                        $73c4  8731D  8889
SPRD_30                        $73c8  8733D  8737
SPRD_35                        $73d3  8738D  8734
SPRD_40                        $73d6  8739D  8740   8751
SPRD_45                        $73e7  8747D  8742
SPRD_50                        $7401  8760D  8758
SPRD_55                        $7443  8789D  8787
SPRD_60                        $744a  8792D  8795
SPRD_65                        $7452  8796D  8915   9116   9116
SPRD_70                        $745a  8799D  8813   8821   8880   8907
                                      8947   8987
SPRD_75                        $745d  8800D  8801
SPRD_80                        $7469  8806D  8815
SPRD_85                        $747b  8814D  8807
SPRD_90                        $7480  8817D  8820
SPRD_95                        $748a  8822D  8818
SPR_Pixel                      $7497  8833D  9102   9102   9103   9103
                                      9104   9104   9105   9105
SPix_10                        $74e0  8873D  8860
SPix_12                        $74ea  8877D  8871   8875
SPix_14                        $74f4  8882D  9106   9106
SPix_16                        $74f6  8883D  8886
SPix_18                        $74fe  8887D  9107   9107
SPix_20                        $7506  8891D  9110   9110
SPix_22                        $751c  8900D  9109   9109
SPix_24                        $751f  8902D  9108   9108
SPix_26                        $7530  8909D  9115   9115
SPix_28                        $7534  8911D  8913
SPix_30                        $753f  8917D  8879   9112   9112
SPix_32                        $7542  8919D  9111   9111
SPix_34                        $754a  8923D  8921
SPix_36                        $7559  8930D  8925
SPix_38                        $7561  8934D  8932
SPix_40                        $7564  8935D  9113   9113
SPix_42                        $7567  8937D  8951   9114   9114
SPix_44                        $7576  8944D  9117   9117
SPix_46                        $757e  8947D  8929   8941   8943
SPix_48                        $7581  8949D  8927   9118   9118
SPix_50                        $7588  8952D  9119   9119
SPix_52                        $758c  8954D  8958
SPix_54                        $7597  8959D  8955
SPix_56                        $759a  8960D  8961   8967
SPix_58                        $75b4  8975D  8973
SPix_60                        $75b8  8977D  8980
SPix_62                        $75c2  8982D  8963
SPix_64                        $75c5  8984D  8986
Show_Sprite                    $75d1  8992D  8790   8812   8894   8981
ShSp_10                        $75d6  8997D  9024
ShSp_20                        $75de  9000D  9020
ShSp_30                        $75ee  9006D  9018
ShSp_40                        $75f6  9011D  9008
Load_Sprite_Color              $7610  9028D  8838   9013
LSC_10                         $7625  9041D  9034
LSC_20                         $762a  9043D  9036
Expand_Color_Nibble            $7634  9049D  9038   9040   9042   9141
Store_Graphic_Byte             $763f  9062D  8844   9014
SGB_10                         $7649  9070D  9067
Show_Sprite_Cursor             $764a  9073D  8799   8803
Toggle_Graphic_Bit7            $765b  9084D  9080   9081
COPY_FROM                      $7663  9093D  8954
SPRITE_NO                      $766e  9094D  8733
SPRITECMD                      $767f  9095D  8817
Sprite_Jump_Table              $7691  9099D  8826   8828
SPRITECOL                      $76b5  9121D  8806
Set_Graphics_Pointer           $76c5  9125D  8842   8998   9077   9144
Clear_Sprite                   $76d4  9137D  8730   8914
ClSp_10                        $76dc  9143D  9151
ClSp_20                        $76e3  9147D  9149
BASIC_SPRSAV                   $76ec  9155D  2554
SPRS_10                        $76f7  9163D  9166
SPRS_20                        $7720  9181D  9159
SPRS_30                        $774b  9198D  9206
SPRS_40                        $775f  9207D  9199
SPRS_50                        $7760  9208D  9190
Get_Sprite_Address             $777c  9222D  9158   9189
GSA_10                         $7794  9239D  9237
GSA_Err                        $7796  9241D  9231
LXAY_Descriptor                $7799  9244D  9180   9227
BASIC_FAST                     $77b3  9264D  2569
BASIC_SLOW                     $77c4  9276D  2570
Eval_Numeric                   $77d7  9289D  5837   5856   7355   7940
                                     11365  11839  11855  11875
Assert_Numeric                 $77da  9295D  2987   3011   5836   9378
                                      9453  10609  10692  10741  11094
                                     11209  11291  11318  11330  11390
Need_String                    $77dd  9302D  2958   5031   5045  11668
                                     11745  14153  14823
Check_Var_Type                 $77de  9308D  3058   4209   9299
CVT_Ret                        $77e4  9314D  9315
CVT_10                         $77e5  9315D  9312
TYPE_MISMATCH                  $77e7  9318D  5021   6664   9313
Err_FTC                        $77ea  9323D  9341
Eval_Expression                $77ef  9327D  2956   2995   4056   4206
                                      4466   5044   6230   9225   9292
                                      9572  11203  11739  14152  14183
                                     14822  17612
EvEx_05                        $77f5  9333D  9331
EvEx_10                        $77fa  9336D  9412
EvEx_15                        $7809  9345D 11691
EvEx_20                        $780c  9346D  9359
EvEx_25                        $7828  9361D  9348   9350
EvEx_30                        $7839  9370D  9367
EvEx_35                        $7841  9375D  9397
EvEx_40                        $784a  9379D  9400
EvEx_45                        $784b  9380D  9624
EvEx_50                        $7858  9388D  9362
EvEx_55                        $7862  9394D  9392
EvEx_60                        $786a  9398D  9383
Use_Operator                   $7871  9403D  9380
SynErr1                        $7881  9413D  9356
Push_Operand                   $7884  9416D  9410
Pop_FAC2                       $78ac  9445D  9363   9365
PoFA_10                        $78af  9450D  9385
PoFA_20                        $78b1  9451D  9377
PoFA_30                        $78b8  9454D  9452
PoFA_40                        $78ba  9455D  9386   9399
PoFA_50                        $78d4  9472D  9450
Vectored_EVAL                  $78d7  9476D  9342  11667  17611
DEF_EVAL                       $78da  9482D  1925
Eva_10                         $78de  9487D  9512
Eva_20                         $78e3  9489D  9508
Eva_30                         $78e8  9491D  9488
Eva_40                         $78f0  9494D  9492
Real_PI                        $78fe  9501D  9496   9497
qdot                           $7903  9504D  9495
Create_Descriptor_From_TXTPTR  $7913  9517D  4653
CDFT_10                        $791c  9525D  9523
Restore_Execution_Pointer      $791f  9528D  4773
qdot_10                        $7928  9537D  9514
OP_NOT                         $7930  9543D  2639
Integer_To_Real                $793c  9554D  1695   1696   3052   5009
                                      9704  11247  15047  17563
qdot_20                        $7942  9560D  9538
qdot_30                        $7949  9563D  9561
Get_Arg                        $7950  9568D  2976   9564  11329
Need_Right_Par                 $7956  9575D  5041  10145  10861  10915
                                     10960  10983  11011  11028  11053
                                     11100  11117  11292  11508  14834
                                     16758  16770
Need_Left_Par                  $7959  9582D  2955   2994   5027   9571
                                     10953  11287  16756  16768
Need_Comma                     $795c  9589D  2957   4814   4935   6242
                                      7119   7354   9184  10981  11051
                                     11483  11862  11869  13600  15520
                                     15543  15582  15598
Need_A                         $795e  9595D  4061   4201   4437   4613
                                      4632   4655   5043   5835  11294
                                     11312  14180  16225
SYNTAX_ERROR                   $796c  9606D  2556   2882   3019   3699
                                      4181   4540   5198   5235   5877
                                      5976   6075   6137   6268   7826
                                      7932   9413   9602   9820   9925
                                     10969  11372  13608  14177  14734
                                     15611  15894  16091  16218  16329
                                     16468  16502  16708  17007
Prep_Minus_Op                  $7971  9613D  9510
Prep_Operation                 $7973  9619D  9540
Get_Var                        $7978  9627D  9493   9901
GeVa_Ret                       $79b3  9658D  9642   9645   9648   9660
                                      9662
GeVa_10                        $79b4  9659D  9640
GeVa_20                        $79c1  9665D  9669
GeVa_30                        $79d2  9674D  9679
GeVa_40                        $79e0  9681D  9673
Get_Disk_Status                $79e3  9684D  9663   9742
Load_Value                     $79ea  9692D  9636
LoVa_10                        $79fd  9705D  9696
Load_Jiffy_Clock               $7a1a  9721D  9649   9715
LJC_Ret                        $7a27  9730D  9688
LoVa_20                        $7a28  9732D  9712
LoVa_30                        $7a36  9738D  9733
LoVa_40                        $7a60  9760D  9739
LoVa_50                        $7a78  9771D  9763
LoVa_60                        $7a81  9775D  9707   9710   9714   9735
                                      9741   9761   9765
LoVa_70                        $7a85  9777D 17594
Parse_Name                     $7aaf  9800D  4197   4710   4874   4997
                                      5028   6658   9212   9630  10956
                                     11290
Get_Array_Address              $7ab4  9807D  4942
Get_FN_Address                 $7ab6  9813D 11315
GeAd_Err                       $7ac0  9820D  9841
GeAd_05                        $7ac3  9821D  9819
GeAd_10                        $7ad3  9828D  9825
GeAd_15                        $7ad4  9829D  9830   9832
GeAd_20                        $7ade  9833D  9827
GeAd_25                        $7ae8  9838D  9834
GeAd_30                        $7af8  9846D  9837
GeAd_35                        $7aff  9850D  9839
GeAd_40                        $7b0b  9856D  9854
GeAd_45                        $7b13  9860D  9880
GeAd_50                        $7b15  9861D  9878
GeAd_55                        $7b1f  9866D  9863
GeAd_60                        $7b31  9874D  9872
GeAd_65                        $7b32  9875D  9868
Is_Alpha                       $7b3c  9883D  9491   9818   9826   9831
                                     10954
IsAl_Ret                       $7b45  9891D  9887
Create_Var                     $7b46  9894D  9865
CrVa_05                        $7b52  9903D  9900   9907
CrVa_10                        $7b57  9906D  9930
CrVa_15                        $7b61  9911D  9936
CrVa_20                        $7b6b  9917D  9932
CrVa_25                        $7b71  9921D  9934
CrVa_30                        $7b79  9925D  9910   9912   9915   9919
                                      9922
CrVa_35                        $7b7c  9927D  9902
CrVa_40                        $7b90  9938D  9909   9914   9918   9924
CrVa_45                        $7ba6  9950D  9948
CrVa_50                        $7bba  9964D  9988   9990
CrVa_55                        $7bbe  9966D 10004
CrVa_60                        $7bc8  9971D  9967   9969
CrVa_65                        $7bfe 10000D  9998  10030  10032
CrVa_70                        $7c08 10005D 10002
CrVa_75                        $7c33 10026D 10007
CrVa_80                        $7c40 10036D  9970
CrVa_85                        $7c50 10044D 10047
CrVa_90                        $7c57 10048D  9873
CrVa_95                        $7c61 10054D 10052
Open_Up_Space                  $7c66 10059D  9952
OUS_10                         $7c8a 10089D 10086
OUS_20                         $7c96 10095D 10098
OUS_30                         $7c9b 10097D 10092  10094  10104
OUS_40                         $7ca3 10101D 10081
Find_Array                     $7cab 10108D  9855
FiAr_10                        $7cb5 10117D 10144
FiAr_12                        $7cf8 10154D 10176
FiAr_14                        $7d04 10160D 10157
FiAr_16                        $7d15 10168D 10164
FiAr_Bad                       $7d25 10178D 10197  10301
Error_Illegal_Quantity         $7d28 10182D  1687   1688   4279   5080
                                      5377   5987   6240   6349   6487
                                      6827   6991   7113   7304   7362
                                      7418   7462   7653   7674   7787
                                      8118   8259   8317   8345   8354
                                      8442   8464   8476   8497   8507
                                      8654   9241  10493  10599  10672
                                     10781  10852  10909  11003  11022
                                     11039  11084  11138  11224  11556
                                     11892  12180  14837  15035  15574
                                     16114  16251  16537  16662  17505
FiAr_Err                       $7d2a 10186D 10190
FiAr_20                        $7d2d 10188D 10167
FiAr_22                        $7d46 10202D 10159
FiAr_24                        $7d5c 10212D 10210
FiAr_26                        $7d65 10218D 10215
FiAr_28                        $7d6e 10224D 10244
FiAr_30                        $7d7e 10234D 10227
FiAr_32                        $7da1 10254D 10251
FiAr_34                        $7db0 10261D 10263  10266
FiAr_36                        $7db5 10264D 10260
FiAr_38                        $7dd2 10280D 10198
FiAr_40                        $7ddb 10284D 10317
FiAr_42                        $7dfa 10301D 10295
FiAr_44                        $7dfd 10302D 10246  10253  10365  10376
FiAr_46                        $7e00 10303D 10294
FiAr_48                        $7e01 10304D 10300
FiAr_50                        $7e12 10314D 10307
FiAr_52                        $7e23 10323D 10321
FiAr_54                        $7e29 10327D 10324
FiAr_Ret                       $7e3d 10338D 10278
Mult_16x16                     $7e3e 10341D 10239  10308
Mult_16x16_A                   $7e49 10351D 10329
Mu16_10                        $7e53 10359D 10378
Mu16_20                        $7e6c 10377D 10368
Array_Pointer_To_First         $7e71 10382D 10191  10202
APTF_10                        $7e7d 10392D 10390
J_PLOT                         $7e82 10397D  7140
J_PRINT                        $7e88 10404D  7145   7156
Test_OOM_CHRGOT                $7e8e 10411D  5543
Inc_INDEXB_Cmp_TEXT_TOP        $7e94 10418D  5924
IICTT_10                       $7e9a 10424D 10422
Get_Pitch                      $7ea6 10432D  8168
GePi_PAL                       $7eaf 10439D 10436
Pitch_PAL_Low                  $7eb9 10445D 10439
Pitch_PAL_High                 $7ec5 10452D 10441
Reset_Descriptor_Stack         $7ed1 10459D  3172
FUNC_FRE                       $8000 10486D  2580
FRE_10                         $800c 10494D 10491
FRE_20                         $8028 10509D 10516
FRE_30                         $803a 10518D 10492
FRE_40                         $8047 10525D 10500
FUNC_VAL                       $804a 10528D  2593
VAL_10                         $8052 10534D 10532  17565
VAL_Ret                        $8075 10552D 10512
FUNC_DEC                       $8076 10555D  2609
DEC_10                         $8083 10564D 10569  10594
DEC_20                         $80a9 10583D 10577
DEC_30                         $80b1 10589D 10593
DEC_40                         $80bb 10596D 10565
DEC_Err                        $80c2 10599D 10573  10575  10579  10581
FUNC_PEEK                      $80c5 10602D  2590
BASIC_POKE                     $80e5 10623D  2474
FUNC_ERR                       $80f6 10635D  2611
FERR_10                        $8106 10646D 10652
FERR_20                        $8107 10647D 10651
FERR_30                        $8112 10654D 10649
FERR_40                        $811d 10659D 10662  10670
FERR_50                        $8136 10672D 10642
Swap_XY                        $8139 10675D  7865  10663  10667
FUNC_HEX                       $8142 10689D  2610
Byte_To_Hex                    $816b 10713D 10703  10705
Nibble_To_Hex                  $8174 10725D 10721
NTH_10                         $817c 10732D 10730
FUNC_RGR                       $8182 10738D  2604
Get_Graphics_Mode              $818c 10747D  7448  10742
GGM_Ret                        $819a 10759D 10757
FUNC_RCLR                      $819b 10762D  2605
RCLR_10                        $81b9 10782D 10768
RCLR_20                        $81c1 10785D 10770
RCLR_30                        $81c6 10787D 10772
RCLR_40                        $81cb 10789D 10774
RCLR_50                        $81d0 10791D 10776
RCLR_60                        $81d6 10793D 10778
RCLR_70                        $81de 10797D 10780
RCLR_80                        $81e6 10800D 10796
RCLR_90                        $81ec 10803D 10784  10786  10788  10790
                                     10792  10795
unadju_8563                    $81f3 10809D 10802
FUNC_JOY                       $8203 10816D  2607
JOY_10                         $821d 10833D 10835
JOY_20                         $823c 10851D 10847
JOY_30                         $823f 10852D 10822
JOYTAB                         $8242 10854D 10843
FUNC_POT                       $824d 10858D  2617
POT_10                         $8264 10873D 10871
POT_20                         $8269 10876D 10874
POT_30                         $8277 10883D 10884
POT_40                         $827a 10885D 10887
POT_50                         $828d 10893D 10891
POT_60                         $8293 10897D 10895
POT_70                         $829f 10903D 10901
POT_Err                        $82ab 10909D 10865  10918
FUNC_PEN                       $82ae 10912D  2619
PEN_10                         $82d0 10929D 10926
PEN_20                         $82d6 10931D 10920
PEN_30                         $82e4 10938D 10936
PEN_40                         $82ed 10941D 10933
PEN_50                         $82f7 10946D 10944
FUNC_POINTER                   $82fa 10949D  2625
FUNC_Call                      $8305 10956D  9899
POIN_10                        $8318 10968D 10965
POIN_Err                       $831b 10969D 10955
FUNC_RSPRITE                   $831e 10972D  2621
RSPR_10                        $8354 11001D 10994  10999
RSPR_Err                       $8358 11003D 10978  10985
RSPMOD                         $835b 11005D 10995
FUNC_RSPCOLOR                  $8361 11008D  2622
RSPC_Err                       $8379 11022D 11015
FUNC_BUMP                      $837c 11025D  2618
BUMP_Err                       $8394 11039D 11032
FUNC_RSPPOS                    $8397 11042D  2620
RSPP_10                        $83bd 11063D 11059
RSPP_20                        $83c8 11068D 11066
RSPP_30                        $83d5 11079D 11074
RSPP_Err                       $83de 11084D 11048  11055
FUNC_XOR                       $83e1 11087D  2623
FUNC_RWINDOW                   $8407 11114D  2624
RWIN_10                        $841e 11128D 11123
RWIN_20                        $8425 11132D 11120
RWIN_30                        $842d 11136D 11127  11131  11134
RWIN_Err                       $8431 11138D 11121
FUNC_RND                       $8434 11141D  2583
RND_10                         $8437 11145D 17591
RND_20                         $8455 11157D 11146
RND_30                         $846a 11166D 11145
RND_40                         $847a 11174D 11156
rmulc                          $8490 11185D 11160  11161
raddc                          $8495 11186D 11163  11164
n32768                         $849a 11187D 11220  11221
FAC1_To_Int_AY                 $849f 11190D  1691   1692
Get_Positive_Integer           $84a7 11199D 10123
Eval_Positive_Integer          $84ad 11206D 11845
Real_To_Integer                $84b4 11214D  3034   3042   4219   9546
                                     11193  17562
RIT_10                         $84c1 11223D 11211
RIT_20                         $84c6 11225D 11219  11223
AY_To_FAC1                     $84c9 11228D  9769  10525  10598  10908
                                     10930  10968  11083  11106
FUNC_POS                       $84d0 11236D  2581
Y_To_Real                      $84d4 11243D 10620  10744  10806  10851
                                     10940  10946  11002  11021  11038
                                     11062  11137  11534  11555  14905
                                     15040
Assert_Non_Direct              $84d9 11250D  4602   4662   5999   6013
                                     11286
UNDEF_Err                      $84e0 11257D 11341
Integer_To_FAC1                $84e5 11261D  9557  11231
ITF_Ret                        $84ef 11269D 11254
Assert_Direct_Mode             $84f0 11272D  5086   5353   5883
ADM_Err                        $84f5 11278D 11276
BASIC_DEF                      $84fa 11282D  2473
Get_FN                         $8528 11308D 11285  11324
Eval_FNX                       $853b 11321D  9562
FNX_10                         $8561 11344D 11348
FNX_20                         $859a 11373D 11371
FNX_30                         $85a0 11377D 11305
FNX_40                         $85a5 11379D 11383
FUNC_STR                       $85ae 11387D  2592
Create_Descriptor_for_FORMAT   $85b8 11397D  9657
FUNC_CHR                       $85bf 11405D  2595
Push_Descriptor                $85d1 11419D 10671  10710
FUNC_LEFT                      $85d6 11427D  2596
LEFT_10                        $85e3 11437D 11472
LEFT_20                        $85ea 11441D 11437
LEFT_30                        $85eb 11442D 11497
LEFT_40                        $85ec 11443D 11500  11502
LEFT_50                        $8603 11456D 11454
FUNC_RIGHT                     $860a 11461D  2597
FUNC_MID                       $861c 11475D  2598
MID_10                         $862d 11485D 11482
Pop_DSCPNT                     $864d 11505D 11430  11464  11485
FUNC_LEN                       $8668 11530D  2591
Eval_String_Desc               $866e 11537D 10531  10558  11533  11550
FUNC_ASC                       $8677 11547D  2594
ASC_10                         $8682 11555D 11551
ASC_Err                        $8685 11556D 11486
Allocate_String_FAC1           $8688 11559D  4327   9671  11618  11681
Allocate_String_A              $8690 11568D  6702  10655  10699  11412
                                     11444  14222
Create_String_Descriptor       $869a 11578D  4470   4548   9525  11402
Create_String_Descriptor_AY    $86a0 11586D  4772
CSD_10                         $86aa 11594D 11600
CSD_20                         $86b8 11601D 11598
CSD_30                         $86bc 11603D 11596
CSD_40                         $86bd 11604D 11602
CSD_50                         $86c9 11611D 11609
Store_String_Bank_0            $86cc 11615D  9179
SSB0                           $86d3 11622D 11627
Push_String_Descriptor         $86e3 11632D  9681  11424  11458  11620
                                     11690  14230
PuSD_10                        $86ee 11640D 11637
Concatenate                    $870d 11660D  9368
Conc_10                        $8731 11681D 11679
Store_String_STRPTR            $874e 11694D  4332  11682
Store_String_INDEXA            $8763 11711D 11457  11686
SSI_10                         $8767 11717D 11721
Adjust_FRESPC                  $8771 11725D  9680  11629  11715
AdFR_Ret                       $877a 11733D 11731
Eval_String                    $877b 11736D  5982   6243   6817   7120
                                      7972  13648  16715
Eval_And_Free_String           $877e 11742D 11540
Free_String_FAC1               $8781 11748D  3072   4243   4554   5079
                                     14510
Free_String_AY                 $8785 11755D  3078  11447  11685  11689
                                     14242  14898  14902
FSAY_10                        $87aa 11782D 11780
FSAY_20                        $87c2 11796D 11794
FSAY_30                        $87c8 11799D 11797
FSAY_40                        $87ca 11801D 11765  11767
Pop_Descriptor_Stack           $87e0 11816D  4335   4343   9249  11764
PDS_Ret                        $87f0 11827D 11787  11789  11820  11822
Get_Next_Byte_Var              $87f1 11830D  4526
Get_Byte_Var                   $87f4 11836D  2969   4175   4434   4611
                                      4630   5232   6236   7301   7371
                                      7458   7607   7669   7811   8254
                                      8351   8424   8450   8470   8482
                                      8503   8609  10982  11052  11484
                                     11863  13584  13619  15546  15565
                                     16226  16757  16759
Eval_Byte                      $87f7 11842D  9228  10489  10638  10765
                                     10819  10862  10916  10975  11012
                                     11029  11045  11118  11408  15031
LINNUM_Comma_Byte              $8803 11852D  7736  10626
Comma_And_Byte                 $8809 11859D  5032   5037   7106   7110
                                      7375   7741   8616   8620   8629
                                     14833  17496
Comma_And_LINNUM               $880f 11866D  8509   8514  11099  16230
                                     17488  17492
Get_Integer                    $8812 11872D  4951   5311   6002   6047
                                      7680   8299  15523  15613  16769
                                     16774  17484
FAC1_To_LINNUM                 $8815 11878D  7324   7337  10610  10697
                                     11095  11856  17566
F1TL_10                        $8819 11883D  7941
FTLI_Err                       $882b 11892D 11847  11882  11885
AY_Minus_FAC1                  $882e 11895D 17568
OP_MINUS                       $8831 11901D  2632  12232  13329  14033
                                     17569
AFTF_00                        $8840 11912D 11965
Add_Var_AY_To_FAC1             $8845 11916D  4902  17570
OP_PLUS                        $8848 11922D  2631  11910  12225  12914
                                     17571
PLUS_10                        $884d 11927D 11925
AddSub_FAC2_To_FAC1            $8855 11933D 12424
AFTF_10                        $8859 11949D 11947
AFTF_20                        $8872 11962D 11952
AFTF_30                        $8876 11964D 11961
AFTF_40                        $8882 11970D 11913  11951
AFTF_50                        $888e 11976D 11974
AFTF_60                        $88b1 11992D 12701  12806
Normalise_FAC1                 $88b6 11996D 11180  11992  12533
NF1_10                         $88ba 12002D 12015
Clear_FAC1                     $88d6 12018D 10533  12050  12404
CF1_10                         $88d8 12022D 13243
CF1_20                         $88da 12023D 12394
AFTF_65                        $88dd 12026D 11971
AFTF_70                        $88fc 12041D 12047
AFTF_75                        $8908 12047D 12003
AFTF_80                        $8915 12054D 12040
AFTF_85                        $8917 12055D 12654
AFTF_Ret                       $8925 12062D 12054
Negate_FAC1                    $8926 12065D 11993
Negate_FAC1_Mantissa           $892c 12073D 12766
Inc_FAC1_Mantissa              $894e 12095D 12652
IFM_Ret                        $895c 12105D 12092  12099  12101  12103
Overflow_Error                 $895d 12108D 12056  12405  12924  14452
FACX_Byte_Shift                $8962 12115D 12277
FBS_10                         $8964 12119D 12135  12136
FACX_Bit_Shift                 $8979 12131D 11912  12771
FBS_20                         $8986 12141D 12156
FBS_30                         $898c 12144D 12142
Rotate_FACX                    $8990 12148D 11969  12780
FBS_40                         $899a 12157D 12140
Real_1                         $899c 12160D  5849   5850  12192  12193
                                     14110  14111
logcn2                         $89a1 12162D 12195  12196
Sqrt2half                      $89b6 12168D 12186  12187
Sqrt2                          $89bb 12169D 12189  12190
Minus0_5                       $89c0 12170D 12198  12199
Ln2                            $89c5 12171D 12203  12204
FUNC_LOG                       $89ca 12174D  2584  13259  17576
LOG_10                         $89d1 12180D 12178
LOG_20                         $89d4 12181D 12179
Multiply_AY_To_FAC1            $8a08 12207D 11162  13042  13301  13375
Add_0_5_To_FAC1                $8a0e 12214D 13071  14040
Add_AY_To_FAC1                 $8a12 12221D 11165  12188  12200  13384
                                     14018  14049
FAC1_Minus_AY                  $8a18 12228D 12194  14036  14121
AY_Div_FAC1                    $8a1e 12235D 12191  14112
AY_Mult_FAC1                   $8a24 12242D 13262  13348  13352  17572
OP_MULT                        $8a27 12248D  2633  12211  17573
MULT_10                        $8a2c 12253D 12251
Mult_SubA                      $8a55 12272D 12262  12264
Mult_SubB                      $8a5b 12280D 12260  12266  12268  12275
MULT_20                        $8a5e 12285D 12307
MULT_30                        $8a7a 12300D 12286
MULT_Ret                       $8a88 12308D 12252
Load_FAC2_From_AY_ROM          $8a89 12311D  7322   7335  12210  12224
                                     12231  12238  17593
Load_FAC2_From_AY_RAM          $8ab4 12346D 11898  11919  12245  12455
                                     17592
Add_Exponents                  $8aec 12379D 12253  12467
ChFA_10                        $8aee 12383D 13337
ChFA_20                        $8af9 12390D 12386
ChFA_30                        $8b04 12395D 12393
ChFA_40                        $8b09 12399D 13311
ChFA_50                        $8b0f 12402D 12383  12390
ChFA_Err                       $8b14 12405D 12387  12401  12416  12426
                                     12469
Multiply_FAC1_BY_10            $8b17 12408D  4251   4265  12884  12895
                                     13058
Add_And_Double                 $8b22 12419D  4260
AAD_Ret                        $8b2d 12427D 12413
Real_10                        $8b2e 12429D 12439  12440
DIV_ZERO                       $8b33 12431D 12461
Divide_FAC1_By_10              $8b38 12435D 12879  13064
Divide_FAC2_By_AY              $8b41 12444D 14028
AY_Divided_By_FAC1             $8b49 12452D 14077  17574
OP_DIV                         $8b4c 12458D  2634   7323   7336  12239
                                     12449  17575
DIV_10                         $8b63 12472D 12498
DIV_20                         $8b79 12483D 12474  12477  12480  12497
                                     12499
DIV_30                         $8b86 12491D 12485  12516
DIV_40                         $8b89 12493D 12514
DIV_50                         $8b97 12500D 12492
DIV_60                         $8bb4 12515D 12488
DIV_70                         $8bb8 12517D 12489
DIV_80                         $8bc1 12525D 12269
Load_FAC1_AY                   $8bd4 12536D  4889   5851   9498  11159
                                     12448  13234  14070  17595
FAC1_To_FACTPB                 $8bf9 12562D 13365
FAC1_To_FACTPA                 $8bfc 12569D 13346  14061
FAC1_To_XY                     $8c00 12576D  4232   4908  11183  11351
                                     13246  14067  17596
FAC2_To_FAC1                   $8c28 12603D  3041  11926  17597
ASI_FAC2_To_FAC1               $8c2a 12609D 13256
F2F1_10                        $8c2e 12614D 12617
FAC1_Round_And_Copy_To_FAC2    $8c38 12622D  4255  12411  12438  12907
                                     13231  14024  14029  17598
FAC1_To_FAC2                   $8c3b 12628D 13307
F1F2_10                        $8c3d 12632D 12635
F1F2_Ret                       $8c46 12637D 12644  12646  12653
Round_FAC1                     $8c47 12640D  4218   5859   9431  12462
                                     12579  12625  17511  17587
Inc_FAC1                       $8c4f 12649D 13305
Test_FAC1_Sign                 $8c57 12657D  5857  11144  12177  12677
                                     12720  17589
TFS_10                         $8c5b 12666D 12723
TFS_20                         $8c5d 12667D 12747
TFS_Ret                        $8c64 12671D 12665  12669
FUNC_SGN                       $8c65 12674D  2576
A_To_FAC1                      $8c68 12680D  3117   9737   9758   9773
                                     12909
AFACX                          $8c70 12687D  9558
Word_To_FAC1                   $8c75 12692D  3412   5658  11233  12997
                                     17567
IFACX                          $8c7b 12698D  9718
FUNC_ABS                       $8c84 12704D  2578  17588
Compare_AY_FAC1                $8c87 12711D  3066   4916  11222  13047
                                     13055  13252  17590
CAYF_10                        $8cbe 12744D 12725  12729  12733  12737
CAYF_20                        $8cc4 12747D 12745
FAC1_INT                       $8cc7 12750D  4266  11225  11886  13072
                                     17512
FINT_10                        $8cdc 12768D 12762
FINT_20                        $8ce8 12773D 12743
FINT_30                        $8ce9 12774D 12770
FUNC_INT                       $8cfb 12785D  2577  13249  13312  14030
                                     17577
INT_0                          $8d18 12807D 12758
INT_Ret                        $8d21 12812D 12795
Read_Real_To_FAC1              $8d22 12815D  4778   9490  10548
RRTF_10                        $8d29 12831D 12833
RRTF_12                        $8d38 12839D 12836
RRTF_14                        $8d3c 12841D 12838  12871  12900
RRTF_16                        $8d3f 12842D 12834
RRTF_18                        $8d41 12843D 12840
RRTF_20                        $8d60 12859D 12850  12852
RRTF_22                        $8d62 12860D 12854  12856  12942
RRTF_24                        $8d65 12861D 12848
RRTF_26                        $8d67 12862D 12857
RRTF_28                        $8d73 12869D 12844
RRTF_30                        $8d79 12872D 12846  12863
RRTF_32                        $8d7b 12873D 12867
RRTF_34                        $8d84 12879D 12881
RRTF_36                        $8d8d 12884D 12877  12886
RRTF_38                        $8d94 12887D 12876  12882
RRTF_40                        $8d99 12890D 12888
RRTF_42                        $8d9c 12891D 12842
RRTF_44                        $8da3 12895D 12893
Add_A_To_FAC1                  $8db0 12903D  4282  12202  12899
RRTF_50                        $8dc3 12918D 12861
RRTF_52                        $8dd2 12925D 12920
RRTF_54                        $8de8 12937D 12934
RRTF_56                        $8deb 12938D 12936
RRTF_58                        $8df0 12941D 12923
CHRGET_INDEXA                  $8df5 12945D 12841  12847  12860
CHXA_10                        $8dfd 12951D 12949  12964
CHRGOT_INDEXA                  $8e03 12956D 10546  12952
CHXA_Ret                       $8e16 12969D 12962
R9E9                           $8e17 12971D 13053  13054
R9E10                          $8e1c 12972D 13045  13046
R1E10                          $8e21 12973D 13040  13041
Print_IN_CURLIN                $8e26 12976D  3203
Print_CURLIN                   $8e2e 12983D  2829
Print_Integer_XA               $8e32 12990D  3762  15940  17173
Format_FAC1                    $8e42 13002D  3413   4469   5659  14216
                                     17564
Format_FAC1_Y                  $8e44 13008D 11392  12998
FoFa_10                        $8e4c 13019D 13017
FoFa_12                        $8e5d 13035D 13028
FoFa_14                        $8e65 13040D 13037
FoFa_16                        $8e6e 13044D 13038
FoFa_18                        $8e70 13045D 13066
FoFa_20                        $8e7b 13053D 13060
FoFa_22                        $8e86 13058D 13056
FoFa_24                        $8e8d 13064D 13049
FoFa_26                        $8e94 13071D 13057
FoFa_28                        $8e97 13072D 13048
FoFa_30                        $8eac 13083D 13077
FoFa_32                        $8ead 13084D 13079
FoFa_34                        $8eb8 13090D 13088
FoFa_36                        $8ec9 13099D 13095
FoFa_38                        $8ecb 13100D 13089
Format_Clock_String            $8ecd 13103D  9656
FoFa_40                        $8ecf 13107D 13122  13125  13155
FoFa_42                        $8ef3 13125D 13121
FoFa_44                        $8ef5 13126D 13123
FoFa_46                        $8efc 13130D 13127
FoFa_48                        $8f17 13146D 13142
FoFa_50                        $8f29 13159D 13153
FoFa_52                        $8f2b 13160D 13163
FoFa_54                        $8f38 13167D 13165
FoFa_56                        $8f48 13176D 13170
FoFa_58                        $8f54 13182D 13184
FoFa_60                        $8f69 13193D 13029
FoFa_62                        $8f6c 13194D 13169
FoFa_64                        $8f71 13196D 13191
Real_0_5                       $8f76 13200D 12217  12218  13232  13233
Dec_Print_Tab                  $8f7b 13203D 13109  13112  13115  13118
Clock_Print_Tab                $8f9f 13217
FUNC_SQR                       $8fb7 13228D  2582  17578
POT_XY                         $8fbe 13234D 17580
OP_POWER                       $8fc1 13237D  2635  17581
POW_10                         $8fca 13244D 13242
POW_20                         $8fe4 13256D 13248  13253
OP_NEG                         $8ffa 13269D  2638  12890  13330  14046
                                     14052  14105  14124  17579
NEG_Ret                        $9004 13277D 13266  13273
Rev_Log_2                      $9005 13280D 13299  13300
expcon                         $900a 13285D 13331  13332
FUNC_EXP                       $9033 13296D  2585  13240  13263  17582
EXP_10                         $9043 13306D 13304
EXP_20                         $904e 13311D 13316
EXP_30                         $9051 13312D 13310
EXP_40                         $9061 13321D 13326
Series_Evaluation              $9086 13341D 12197  14055  14115
Eval_Series_AY                 $909c 13355D 13333
Eval_Series                    $90a0 13362D 13349
EvSe_10                        $90af 13373D 13371
EvSe_20                        $90b3 13375D 13388
EvSe_30                        $90c0 13382D 13380
Break_On_Error                 $90d0 13392D  8686  13413  13421  13436
                                     13446  13469  13553  16154  16357
Break_Err                      $90d3 13397D 13455
BOE_Err                        $90d5 13398D 13396
B_OPEN                         $90d8 13401D 13537  15915  15997  16347
                                     17084
CHROUT                         $90df 13409D  4594  16216
CHRIN                          $90e5 13417D  3484
B_CKOUT                        $90eb 13425D  4440
BCOUT_Ret                      $90fc 13437D 13434
B_CHKIN                        $90fd 13440D  4615   4634
B_GETIN                        $9109 13450D  4727   4732
BASIC_SAVE                     $9112 13459D  2471
SAVE_10                        $9115 13463D 16051
SAVE_20                        $911d 13466D 16113
BASIC_VERIFY                   $9129 13473D  2472
BASIC_LOAD                     $912c 13480D  2470
LOAD_Parameter_Set             $9133 13488D 16077
LPS_Ret                        $915f 13510D 13507  13522  13552
LPS_10                         $9160 13512D 13501
LPS_Err                        $9167 13515D 16158
LPS_20                         $9169 13516D 13505
LPS_30                         $916c 13518D 13514
LPS_40                         $9184 13527D 13521
BASIC_OPEN                     $918d 13532D  2482
BASIC_CLOSE                    $919a 13543D  2483
CLOSE_Err                      $91ab 13553D 13499  13539
Load_Save_Parameter            $91ae 13556D 13462  13485
Comma_Byte                     $91dd 13580D 13568  13573  13626  13635
CHRGOT_Or_BREAK                $91e3 13587D 13565  13567  13572  13625
                                     13634  13641
COB_Ret                        $91ea 13594D 13591  13607
Need_Comma_And_Byte            $91eb 13597D 13583  13642
Need_Byte                      $91ee 13603D 13618
Get_Open_Close_Parameter       $91f6 13611D 13535  13546
GOCP_10                        $9221 13633D 13631
Get_Filename                   $9239 13645D 13566
Invalidate_Disk_Status         $9243 13654D 13431  13445  13468  13497
                                     13538  13551  16151
IDS_10                         $924e 13663D 13661
B_READST                       $9251 13668D  4668   9736  13503  13512
                                     15930  15934  15945  16155
B_SETLFS                       $9257 13675D 13563  13571  13577  13624
                                     13633  13640  15913  16936  17081
B_SETNAM                       $925d 13682D 13560  13617  13651  16932
                                     17083
B_BASIN                        $9263 13689D 13420  15928  15932  15943
                                     17090  17125  17129
B_BSOUT                        $9269 13696D  1873   1876   6283   6301
                                      6303   6305   6312   6314   6322
                                      6329   7509   7524   8653  13412
                                     15942  15949  15953  16207  16212
B_CLRCH                        $926f 13703D  3181   4642  15960  15993
                                     16342  17104  17124
B_CLOSE                        $9275 13710D 13550  15963  16028  16352
                                     17107
B_CLALL                        $927b 13717D  3904  16171  16271
B_PRIMM                        $9281 13724D  2929   3123   3198   4796
                                      4830  12979  13508  17122
B_SETBNK                       $9287 13731D 13564  13616  15909  15996
                                     16050  16076  16105  16145  16345
B_PLOT                         $928d 13738D  4509   4524   7484  11240
B_STOP                         $9293 13745D  2891   2902  15954
Allocate_String_Space          $9299 13752D 11571  17065
ASS_10                         $929b 13762D 13804
ASS_20                         $92a9 13771D 13769
ASS_30                         $92b6 13779D 13777
ASS_40                         $92c0 13784D 13781
ASS_50                         $92d9 13797D 13763
ASS_60                         $92da 13798D 13780  13783
ASS_Err                        $92e7 13805D 13799
Garbage_Collection             $92ea 13808D  3592   6362  10518  13800
                                     17616
GaCo_10                        $92ec 13823D 13826  13834
GaCo_15                        $9303 13836D 13824
GaCo_20                        $9318 13848D 13856  13909
GaCo_25                        $931d 13851D 13898
GaCo_30                        $9329 13858D 13849
GaCo_35                        $9333 13863D 13899
GaCo_40                        $9351 13881D 13885
GaCo_45                        $935c 13890D 13893
GaCo_50                        $936f 13901D 13859
Invalid_String                 $9383 13912D 13848  13897
InvS_10                        $938f 13924D 13917
InvS_20                        $9398 13928D 13925
InvS_30                        $93a7 13935D 13933  13938
InvS_40                        $93b1 13943D 13916  13919  13920
InvS_50                        $93b3 13944D 13947  13953
InvS_60                        $93c7 13955D 13945
GRBPNT_Minus_A                 $93d2 13964D 13853  13875  13908  13929
GMA_10                         $93dc 13973D 13971
LOWTR_Minus_A                  $93e1 13978D 13871  13904  13927
LMA_10                         $93eb 13987D 13985
Trailer_Address                $93f0 13992D 13825  13946
TrAd_10                        $9407 14009D 14007
FUNC_COS                       $9409 14013D  2586  17583
FUNC_SIN                       $9410 14021D  2587  14064  17584
SIN_10                         $9442 14046D 14039  14084
SIN_20                         $9445 14047D 14042
SIN_30                         $9452 14053D 14051
FUNC_TAN                       $9459 14058D  2588  17585
TAN_10                         $9481 14080D 14074
PI_Half                        $9485 14086D 14016  14017  14119  14120
Two_PI                         $948a 14087D 14025  14026
Real_0_25                      $948f 14088D 14034  14035  14047  14048
VAR_SIN                        $9494 14090D 14053  14054
FUNC_ATN                       $94b3 14099D  2589  17586
ATN_10                         $94bb 14106D 14104
ATN_20                         $94c9 14113D 14109
ATN_30                         $94dc 14122D 14118
ATN_Ret                        $94e2 14125D 14123
VAR_ATN                        $94e3 14128D 14113  14114
PRINT_USING                    $9520 14146D  4455
PRUS_10                        $9536 14159D 14162
PRUS_15                        $9548 14171D 14176
PRUS_20                        $9553 14177D 14167
PRUS_25                        $9556 14179D 14174
PRUS_30                        $9558 14180D 14235
PRUS_35                        $9586 14200D 14197
PRUS_40                        $9587 14201D 14189  14194
PRUS_45                        $9589 14202D 14213
PRUS_50                        $958d 14205D 14209
PRUS_55                        $9591 14208D 14203
PRUS_60                        $9599 14212D 14206
PRUS_65                        $95a0 14216D 14185
PRUS_70                        $95a5 14218D 14220
PRUS_75                        $95b4 14225D 14229
PRUS_80                        $95be 14230D 14226
PRUS_85                        $95c7 14233D 14214
PRUS_90                        $95e4 14247D 14245
Print_Formatted                $95e7 14250D 14232
PrFo_10                        $95f2 14263D 14275
PrFo_15                        $95f8 14266D 14277
PrFo_20                        $95fa 14268D 14264  14273  14284  14286
PrFo_25                        $9623 14288D 14279
PrFo_30                        $962d 14292D 14290
PrFo_35                        $9631 14295D 14269
PrFo_40                        $9637 14299D 14296
PrFo_45                        $965d 14314D 14306
PrFo_50                        $966a 14319D 14302
PrFo_55                        $9676 14324D 14321
PrFo_60                        $9679 14325D 14315  14317
PrFo_65                        $9682 14328D 14313  14362  14368  14370
                                     14373
PrFo_70                        $9685 14329D 14304
PrFo_72                        $969d 14339D 14336
PrFo_74                        $96a0 14340D 14330
PrFo_76                        $96a9 14344D 14338  14341
PrFo_78                        $96af 14346D 14343
PrFo_80                        $96b2 14347D 14345
PrFo_82                        $96d6 14363D 14319  14323  14350  14357
PrFo_84                        $96d8 14364D 14365
PrFo_86                        $96de 14367D 14353  14355
PrFo_88                        $96e1 14369D 14359
Shift_Point                    $96ee 14376D 14325  14327
ShPo_10                        $96fd 14386D 14398
ShPo_15                        $9704 14389D 14387
ShPo_17                        $9705 14390D 14388
ShPo_20                        $9708 14393D 14339
ShPo_25                        $9711 14401D 14384
ShPo_30                        $9717 14404D 14418
ShPo_35                        $9723 14409D 14405
ShPo_40                        $9725 14410D 14408
ShPo_45                        $9727 14413D 14337
ShPo_50                        $972e 14419D 14399
ShPo_Ret                       $9730 14420D 14382
Toggle_0_9                     $9731 14423D 14450  14456
Adjust_PU_Exp                  $973d 14434D 14396  14583
Adjust_PU_Exp_A                $973f 14440D 14416
APE_10                         $974d 14449D 14451
APE_20                         $9758 14453D 14446  14448  14457
APE_30                         $976c 14461D 14426  14497
APE_40                         $976f 14464D 14459
Print_Using_Exp                $9774 14468D 14308
Inc_Digit_X                    $9782 14479D 14449  14547
Inc_Using_Y                    $978b 14488D 14701  14707  14723  14752
                                     14759
IUY_10                         $9794 14496D 14493
IUY_20                         $9798 14498D 14495
Init_Using                     $979f 14503D 14186  14231
InUs_10                        $97a8 14514D 14516
Using_Round                    $97b9 14525D 14326  14344
UsRo_10                        $97cd 14538D 14536
UsRo_20                        $97da 14544D 14549
UsRo_30                        $97e9 14551D 14545
UsRo_Ret                       $97fa 14559D 14531  14534  14537  14539
                                     14543  14556  14586
Check_Zeroes                   $97fb 14562D 14312
Leading_Zero                   $97ff 14569D 14342
Using_Zero                     $9802 14575D 14588  14630  14633
UsZe_10                        $9808 14582D 14589
UsZe_20                        $9816 14588D 14566
Output_Formatted               $981c 14593D 14328
OuFo_10                        $9823 14599D 14597
OuFo_12                        $982a 14602D 14661
OuFo_14                        $9840 14612D 14607  14646  14677
OuFo_16                        $9846 14615D 14605
OuFo_18                        $9853 14621D 14616
OuFo_20                        $9872 14635D 14631
OuFo_22                        $9879 14638D 14634
OuFo_24                        $987b 14639D 14637
OuFo_26                        $988d 14645D 14624  14682
OuFo_28                        $9892 14647D 14622
OuFo_30                        $9898 14650D 14674
OuFo_32                        $98a1 14654D 14644
OuFo_34                        $98a6 14657D 14653  14666
OuFo_36                        $98a8 14658D 14671
OuFo_38                        $98ab 14659D 14610  14613  14619  14648
OuFo_40                        $98b3 14662D 14660
OuFo_42                        $98b4 14664D 14651
OuFo_44                        $98c8 14673D 14626
OuFo_46                        $98d0 14676D 14679
OuFo_48                        $98d5 14678D 14676
OuFo_50                        $98da 14680D 14686
Chrout_Using                   $98eb 14689D 14212  14364  14628  14639
                                     14642  14659  14684  17522
Analyse_Using                  $98f2 14697D 14187  14238  14299
AnUs_10                        $98f5 14701D 14714
AnUs_15                        $9903 14707D 14716
AnUs_20                        $990d 14711D 14708
AnUs_25                        $9911 14713D 14703
AnUs_30                        $9917 14716D 14710
AnUs_35                        $991c 14718D 14705
AnUs_40                        $9924 14722D 14728
AnUs_45                        $9927 14723D 14726  14733  14740
AnUs_50                        $993e 14734D 14753  14755  14773
AnUs_55                        $9941 14735D 14730
AnUs_60                        $994b 14739D 14737  14744  14748
AnUs_65                        $9951 14741D 14736
AnUs_70                        $9964 14749D 14742
AnUs_75                        $996a 14752D 14757
Is_Format_Sign                 $997e 14763D 14727  14750
IFS_10                         $998c 14772D 14769  14779
IFS_20                         $999a 14777D 14719
IFS_30                         $999b 14778D 14767
IFS_40                         $99a0 14781D 14724  14760
Is_Format_Control_Char         $99a7 14786D 14702
Is_Dot_Align                   $99af 14795D 14709
Is_Align                       $99b3 14802D 14735
Alig_Ret                       $99c0 14812D 14790  14792  14799  14806
                                     14808  14810
FUNC_INSTR                     $99c1 14815D  3018
FUIN_10                        $99e9 14834D 14832
FUIN_20                        $99f3 14838D 14836
FUIN_30                        $99f8 14841D 14844
FUIN_40                        $9a02 14849D 14856
FUIN_50                        $9a19 14860D 14885
FUIN_60                        $9a2a 14869D 14867  14888
FUIN_70                        $9a4b 14887D 14883
FUIN_80                        $9a4f 14890D 14871
FUIN_90                        $9a54 14893D 14859  14865  14868
Sin_Cos_Ang                    $9a74 14908D  6581   7020   7838
Sin_Cos_AY                     $9a77 14926D  6962   7868  15617
SCAY_10                        $9a79 14930D 14933  14935
SCAY_20                        $9a94 14947D 14939
SCAY_30                        $9a96 14951D 14954
SCAY_40                        $9aa9 14962D 14971
SCAY_50                        $9aba 14973D 14964
SCAY_60                        $9ac5 14979D 14977
LAY_SIN_X                      $9ace 14986D  7873  15017  15628
LSIN_10                        $9ad4 14992D 14990
LSIN_20                        $9aea 15005D 14999
LSIN_30                        $9aed 15006D 15003
ANG_DIST                       $9af3 15011D  6606   6979   7027
ANDI_10                        $9af8 15016D 15024
ANDI_Ret                       $9b0b 15025D 15007
FUNC_RDOT                      $9b0c 15028D  2608
RDOT_10                        $9b18 15036D 15034
RDOT_20                        $9b20 15040D 15038
RDOT_30                        $9b23 15041D 15033
Draw_Line                      $9b30 15050D  6497   6526   7004   7008
                                      7086  17600
DrLi_10                        $9b34 15055D 15079
DrLi_20                        $9b49 15063D 15059
DrLi_30                        $9b51 15067D 15064
DrLi_40                        $9b54 15068D 15062  15066
DrLi_50                        $9ba5 15109D 15135
DrLi_60                        $9bc1 15121D 15115  15119
DrLi_70                        $9bcf 15126D 15123
Add_Increment                  $9bea 15138D 15124  15134
AdIn_10                        $9bed 15143D 15148
Double_Pixel                   $9bfb 15152D  7073   7089  15109  17601
DoPi_10                        $9c0b 15161D 15159
DoPi_20                        $9c16 15165D 15163
Set_Pixel                      $9c19 15168D  6388   6884  15157  15161
SePi_10                        $9c3d 15186D 15191
SePi_20                        $9c40 15187D 15190
SePi_30                        $9c42 15188D 15172
SePi_40                        $9c43 15189D 15179
Get_Pixel                      $9c49 15194D  6357   6382   6412   6441
                                      6855  15036
GePi_10                        $9c56 15202D 15204
GePi_20                        $9c65 15212D 15207
GePi_30                        $9c6d 15217D 15214
GePi_Ret                       $9c6f 15218D 15198
Color_Character                $9c70 15221D  7219  15173
CCha_10                        $9c86 15234D 15229
CCha_20                        $9c8d 15237D 15232
CCha_30                        $9c9a 15244D 15235
CCha_40                        $9cac 15253D 15244
ColRAM_Line_Hi                 $9cca 15272D 15226
getpos                         $9ce3 15282D  6704   6733  15197
getpos_10                      $9ce8 15289D 15174
getpos_20                      $9d0e 15313D 15311
getpos_30                      $9d1b 15320D 15286  15317
rbits                          $9d1c 15322D  8176   8862   8863   8873
                                      8876  15315  15319
LXY_ROW_COL                    $9d24 15325D 15171  15285
LXYRC_10                       $9d34 15337D 15335
LXYRC_20                       $9d48 15349D 15330  15339  15341
Scale_XY                       $9d4a 15353D  6946   7870   7886  15623
                                     15653
ScXY_10                        $9d5a 15365D 15360
ScXY_Ret                       $9d66 15374D 15357
LAY_ADD_SUB                    $9d67 15377D  7044
LAY_SUB_ADD                    $9d6b 15384D  7039  15636
LAY_Y_ADD_X                    $9d6d 15390D  6547   6596  15662
LAY_ADD_X                      $9d70 15396D  6969  15380
LAY_Y_SUB_X                    $9d7c 15409D  6965   7001  15082  15096
                                     15106  15387  15439
LYSX_10                        $9d7f 15413D 15381
LAY_XPOS_Y                     $9d8f 15425D 14923  14997  15002  15393
                                     15412
LAY_ABS_DIFF                   $9d99 15436D  6586   6673  15058
LAY_ABS                        $9d9c 15442D 15468  15494
LABS_10                        $9d9e 15446D 15008
LABS_Ret                       $9dad 15457D 15445
LAY_MUL_X                      $9dae 15460D 15005  15368
LAYMX_10                       $9dca 15475D 15488
LAYMX_20                       $9ddf 15485D 15477
LAYMX_30                       $9dee 15493D 15491
XY_DEST_To_POS                 $9df2 15497D  6345   6434   6613   6797
                                      6842   6986   7088   7295
DEST_To_POS                    $9df9 15505D  6678  15501
Get_Comma_And_Integer          $9e06 15515D  5371   5378   6481   6931
                                      6934   6952   6955   6958   8400
                                      8429   8526   8529   8551
GCAI_10                        $9e17 15526D 15519  15522
GCAI_CRet                      $9e1a 15528D 15542  15545
Get_Byte_Or_Zero               $9e1c 15532D  6346   6484   6824   7127
                                      7622   8519   8635
Get_Byte_Or_Void               $9e1e 15538D  4958   4961   4964   4967
                                      6988   7417   7628   7757   7761
                                      7770   7774   7778   7782   8312
                                      8325   8364   8377   8391   8456
                                      8545  16232
Assert_Color_Source            $9e2f 15551D  6342   6476   6928
Get_Color_Source               $9e32 15557D  7070   7096
GCS_10                         $9e4c 15572D 15562  15564  15570
GCS_Err                        $9e4f 15574D 15567  15571
Get_Graphics_XY                $9e52 15577D  6344   6480   6668   6823
                                      6930
GGXY_10                        $9e5e 15585D 15581
GGXY_20                        $9e60 15586D 15591
Get_Comma_And_Coordinates      $9e6d 15595D  6478   6666
Get_Coordinates                $9e70 15601D  7083   7294  15584
GeCo_10                        $9e84 15612D 15610
GeCo_20                        $9ead 15628D 15643
GeCo_30                        $9ec0 15636D 15634
GeCo_40                        $9ed3 15646D 15608
GeCo_50                        $9eee 15658D 15668
GeCo_60                        $9eff 15666D 15661
Get_Coordinate_Value           $9f08 15673D 15605  15649
GCV_10                         $9f14 15682D 15678  15680
colval                         $9f25 15690D  8869  15183
angval                         $9f29 15694D 14960  14961
incval                         $9f3d 15705D 14965  14968
Allocate_Graphics_RAM          $9f4f 15716D  7616   8693
AGR_10                         $9f54 15722D 15720
AGR_15                         $9f6a 15732D 15725  15729
AGR_20                         $9f6d 15733D 15728  15731
AGR_25                         $9f92 15752D 15766
AGR_30                         $9f9a 15756D 15753
AGR_35                         $9fa0 15759D 15757
AGR_40                         $9fa8 15763D 15761
AGR_45                         $9fb2 15768D 15755
AGR_50                         $9fc7 15778D 15858
AGR_55                         $9fd9 15786D 15784
AGR_60                         $9ff2 15799D 15820  15822
AGR_65                         $9ffe 15805D 15781
AGR_70                         $9fff 15806D 15801  15804
AGR_75                         $a010 15814D 15809
AGR_80                         $a017 15817D 15813
Free_Graphics_RAM              $a022 15825D  7602
FGR_10                         $a027 15831D 15829
FGR_20                         $a037 15839D 15842  15847
Shift_Stack_Value              $a062 15861D 15811  15815
SSV_10                         $a06e 15871D 15866
Assert_Graphics_Mem            $a074 15877D  6657   6816   7064   7158
                                      7292   7465  15554
NGA_Err                        $a079 15883D 15881
BASIC_DIRCAT                   $a07e 15887D  2516   2544
DIR_10                         $a08a 15895D 15893
DIR_15                         $a099 15904D 15901
DIR_20                         $a09a 15905D 15899
DIR_25                         $a0bd 15923D 15916
DIR_30                         $a0c7 15927D 15957
DIR_35                         $a0ca 15928D 15937
DIR_40                         $a0f3 15943D 15950
DIR_45                         $a105 15952D 15948
DIR_50                         $a113 15959D 15946
DIR_55                         $a114 15960D 15918  15931  15935  15955
BASIC_DOPEN                    $a11d 15966D  2545
BASIC_APPEND                   $a134 15981D  2546
APPE_10                        $a143 15991D 15976  15978
Find_Free_SA                   $a157 16002D 15972  15988
FFSA_10                        $a159 16006D 16011
FFSA_Err                       $a16a 16014D 16008
BASIC_DCLOSE                   $a16f 16018D  2547
B_CLOALL                       $a183 16031D 16026  16263  16333
BASIC_DSAVE                    $a18c 16039D  2517
BASIC_DVERIFY                  $a1a4 16054D  2552
BASIC_DLOAD                    $a1a7 16061D  2518   5287
BASIC_BSAVE                    $a1c8 16080D  2548
BSAV_10                        $a1dd 16092D 16090
BSAV_20                        $a1f1 16100D 16095
BSAV_Err                       $a215 16114D 16094  16098  16099
BASIC_BLOAD                    $a218 16119D  2549
BLOAD                          $a21f 16127D  8666
BLOAD_10                       $a234 16139D 16135  16137
BLOAD_20                       $a25b 16155D 16153
BLOAD_30                       $a265 16159D 16157
BASIC_HEADER                   $a267 16163D  2519
HEAD_10                        $a286 16179D 16177
HEAD_Ret                       $a2a0 16190D 16173  16182  16187
BASIC_SCRATCH                  $a2a1 16193D  2520
SCRA_10                        $a2c1 16209D 16214
SCRA_20                        $a2ce 16215D 16211
SCRA_30                        $a2d3 16217D 16199  16205
SCRA_40                        $a2d4 16218D 16170
BASIC_RECORD                   $a2d7 16221D  2550
REC1_Err                       $a31a 16251D 16228  16234  16236
REC4_Err                       $a31d 16252D 16241
BASIC_DCLEAR                   $a322 16256D  2553
BASIC_COLLECT                  $a32f 16266D  2521
COLLE_10                       $a343 16278D 16276
BASIC_COPY                     $a346 16282D  2522
COPY_10                        $a355 16292D 16288
COPY_20                        $a35c 16295D 16291
BASIC_CONCAT                   $a362 16300D  2551
BASIC_RENAME                   $a36e 16310D  2523
BASIC_BACKUP                   $a37c 16321D  2524
BACK_10                        $a38a 16330D 16328
BACK_20                        $a390 16333D 16331
Put_DOS_Command                $a397 16338D 16179  16202  16250  16262
                                     16279  16297  16307  16318
PDC_10                         $a39a 16342
PDC_20                         $a3b2 16355D 15999
PDC_Err                        $a3b5 16357D 16355
dostbl                         $a3b8 16360D 16426
DOS_Parser                     $a3bf 16400D 15890  16166  16196  16259
                                     16269  16285  16303
DOS_Parser_A                   $a3c1 16406D 15970  15986  16022  16043
                                     16067  16314  16325
DOS_Parser_AX                  $a3c3 16412D  8662  16085  16124
DOSP_10                        $a3ce 16422D 16424
DOSP_12                        $a3d6 16426D 16429
DOSP_13                        $a3e8 16433
DOSP_14                        $a3ea 16434D 16588
DOSP_16                        $a3f8 16443D 16433  16608
DOSP_18                        $a41f 16462D 16460
DOSP_20                        $a42e 16469D 16465  16467
DOSP_22                        $a431 16473D 16450
DOSP_24                        $a437 16478D 16454  16594
DOSP_26                        $a43a 16479D 16484  16489  16500
DOSP_28                        $a43d 16483D 16458
DOSP_30                        $a442 16488D 16456
DOSP_32                        $a447 16493D 16444
DOSP_Syn                       $a45a 16502D 16436  16542
DOSP_36                        $a45d 16506D 16446  16448
DOSP_38                        $a46d 16516D 16510
DOSP_40                        $a47b 16522D 16512
DOSP_42                        $a47f 16527D 16452
DOSP_44                        $a493 16535D 16523
DOSP_Ill                       $a495 16537D 16497  16518  16520  16531
DOSP_48                        $a498 16541D 16463
DOSP_50                        $a4b4 16554D 16461
DOSP_52                        $a4c4 16560D 16569
DOSP_54                        $a4ca 16563D 16603
DOSP_56                        $a4dc 16573D 16469
DOSP_58                        $a4e6 16577D 16582
DOSP_60                        $a4f7 16584D 16479  16535
DOSP_62                        $a4fb 16586D 16474  16550  16562
DOSP_64                        $a500 16588D 16654
DOSP_66                        $a503 16592D 16606
DOSP_68                        $a50a 16596D 16593
DOSP_70                        $a510 16600D 16597
DOSP_72                        $a519 16605D 16587
DOSP_74                        $a523 16610D 16656
DOSP_76                        $a526 16611D 16602
DOSP_78                        $a53a 16624D 16612
DOSP_80                        $a54d 16635D 16614  16658
DOSP_82                        $a553 16640D 16616  16660
DOSP_84                        $a558 16645D 16618  16620
DOSP_86                        $a568 16651D 16631  16636  16641
DOSP_88                        $a57d 16661D 16598
DOSP_90                        $a57f 16662D 16628  16700
Get_Bank_Or_Unit               $a582 16665D 16478  16635
Bank_Or_Unit                   $a585 16671
Get_Unit                       $a58d 16680D 16483  16640
Get_Bank                       $a59e 16693D 16488  16675
GeBa_Err                       $a5b6 16708D 16661  16677  16754  16766
                                     16781  16789
Get_DOS_Filename               $a5b9 16711D 16574  16646
GDF_10                         $a5dd 16731D 16721  16729
GDF_20                         $a5e7 16737D 16717
GDF_30                         $a5ea 16739D 16685  16687
String_Too_Long                $a5ed 16743D  3492   6748  11680  16733
Get_DOS_Parameter_Byte         $a5f2 16750D 16495  16516  16529  16626
                                     16683  16698
GDPB_10                        $a602 16759D 16755
Get_DOS_Parameter_Word         $a605 16762D 16556  16565
GDPW_10                        $a61a 16774D 16767
Assert_DOSFLA                  $a61d 16777D 16438  16494  16508  16528
                                     16625  16714  16723
Assert_DOSFLB                  $a622 16785D 16555  16564  16697
Pat_DCLEAR                     $a627 16808D 15973  15989  16045  16071
                                     16140  16174  16200  16248  16272
                                     16295  16305  16316  16895
Pat_DIRECTORY                  $a629 16814
Pat_DOPEN                      $a62d 16820D 15973  16045  16071  16140
Pat_CONCAT                     $a635 16826D 16305
Pat_APPEND                     $a63e 16832D 15989  15990
Pat_HEADER                     $a643 16838D 16174  16175  16178
Pat_COLLECT                    $a649 16844D 16272
Pat_BACKUP                     $a64b 16850
Pat_COPY                       $a64f 16856D 16295  16296
Pat_RENAME                     $a657 16862D 16316  16317
Pat_SCRATCH                    $a65f 16868D 16200  16201
Pat_RECORD                     $a663 16874D 16248  16249
Build_DOS_Command              $a667 16880D 15906  15992  16047  16073
                                     16102  16142  16341
BDC_10                         $a671 16888D 16920  16925  16945  16999
BDC_12                         $a6a5 16915D 16912
BDC_14                         $a6ae 16919D 16916
BDC_16                         $a6b5 16922D 16918
BDC_18                         $a6b7 16923D 16896  16914  16941  16948
                                     16954  16959  16964  16970
BDC_20                         $a6bd 16926D 16910
BDC_22                         $a6bf 16928D 16890
BDC_24                         $a6d6 16940D 16898
BDC_26                         $a6db 16943D 16906
BDC_28                         $a6e1 16947D 16944
BDC_30                         $a6e5 16950D 16900
BDC_32                         $a6f1 16956D 16904
BDC_34                         $a6fa 16961D 16957
BDC_36                         $a703 16966D 16902
BDC_38                         $a70d 16972D 16908
BDC_40                         $a714 16975D 16980
BDC_42                         $a723 16983D 16926
BDC_44                         $a734 16990D 16996
BDC_46                         $a745 16998D 16973  16988
BDC_48                         $a746 16999D 16981
Need_Name                      $a749 17002D 16167  16197
NeNa_Err                       $a74d 17007D 17016  17026  17034  17043
                                     17053
Assert_Filename                $a750 17010D 16044  16068  16086  16130
                                     17006
Unit_And_Drive_Only            $a75b 17021D 16270
Deny_AT_W_LA                   $a760 17030D 16293  16304
Require_Two_Filenames          $a766 17038D 16315
Require_LA_Filename            $a76f 17048D 15971  15987
Update_DS                      $a778 17058D  9689  16180  16203
UpDS_10                        $a795 17075D 17062
UpDS_20                        $a79f 17079D 17076
UpDS_30                        $a7b7 17089D 17096
UpDS_40                        $a7c8 17099D 17093  17110
UpDS_50                        $a7d5 17109D 17087
ARE_YOU_SURE                   $a7e1 17117D  5236  16172  16198  16330
AYS_10                         $a7fd 17127D 17130
AYS_20                         $a806 17131D 17128
AYS_30                         $a80a 17134D 17121
Free_DOS_Status_String         $a80d 17138D 13662  16023  16886  17111
EDS_10                         $a820 17152D 17144
EDS_Ret                        $a829 17157
KEYREV                         $a82a 17160D  6279
Print_Byte_A                   $a830 17166D  6327
To_Direct_Mode                 $a83b 17179D  3994   6220
TDM_Ret                        $a844 17188D 17186
Map_IO                         $a845 17191D  1832   5238   6250   7149
                                      7179   7379   7433   7549   7576
                                      7768   7798   8053   8074   8102
                                      8230   8454   8461   8494   8581
                                      8682   8694   8712   8738   8780
                                      8959   9267   9279  10400  10407
                                     10766  10827  10866  10931  10988
                                     11016  11147  13404  13429  13443
                                     13453  13466  13491  13547  13671
                                     13678  13685  13692  13699  13706
                                     13713  13720  13727  13734  13748
                                     15924  16009  16035  16239  17485
                                     17489  17493  17499
BASIC_IRQ                      $a84d 17201D  1644
BIRQ_10                        $a853 17207D 17205
BIRQ_12                        $a858 17212D 17215
BIRQ_14                        $a863 17220D 17254
BIRQ_16                        $a876 17227D 17252
BIRQ_18                        $a89e 17251D 17247
BIRQ_20                        $a8a3 17253D 17222  17225
BIRQ_22                        $a8b3 17272D 17297
BIRQ_24                        $a8cd 17291D 17289
BIRQ_26                        $a8d5 17295D 17292
BIRQ_28                        $a8d6 17296D 17273
BIRQ_30                        $a8f4 17315D 17268  17302  17309
BIRQ_32                        $a8f6 17316D 17340
BIRQ_34                        $a922 17337D 17317  17322  17326
BIRQ_36                        $a92a 17343D 17346
BIRQ_38                        $a92f 17345D 17413
BIRQ_40                        $a935 17349D 17344
BIRQ_42                        $a961 17367D 17360
BIRQ_44                        $a96f 17373D 17368  17392
BIRQ_46                        $a97e 17378D 17359
BIRQ_48                        $a994 17387D 17378  17382
BIRQ_50                        $a9a2 17393D 17372  17388
BIRQ_54                        $a9ae 17397D 17366  17377  17381  17385
                                     17386
BIRQ_56                        $a9c7 17407D 17405
BIRQ_58                        $a9d7 17413D 17409
Negate_Sound_Step              $a9da 17417D 17369  17389
Exit_BASIC_IRQ                 $a9f0 17433D 17347
Move_Sprite                    $a9f4 17440D 17236  17241
MoSp_10                        $aa17 17459D 17456
MoSp_20                        $aa1b 17461D 17458
MoSp_Ret                       $aa1e 17462D 17452
BASIC_STASH                    $aa1f 17465D  2563
BASIC_FETCH                    $aa24 17472D  2565
BASIC_SWAP                     $aa29 17479D  2567
SWAP_10                        $aa2b 17483D 17469  17476
SWAP_Err                       $aa65 17505D 17498
FAC1_Round_INT                 $aa68 17508D 12796
Output_Comma                   $aa6e 17515D 14667
OuCo_10                        $aa7c 17524D 17520
EasterEgg                      $ae63 17532D 10510
BASIC_Jump_Table               $af00 17559
BASIC_MONITOR                  $b000 17622D  2528  17664  17665  22332
Mon_Break                      $b003 17628D 22386
Mon_Command                    $b006 17634D 22398
Mon_Entry_By_Break             $b009 17640D 17631
MEBB_10                        $b019 17648D 17651
Mon_Entry_By_Call              $b021 17655D 17625
Mon_Start                      $b046 17674D 17652
Mon_Print_Header               $b050 17685D 17781
MPH_10                         $b080 17698D 17702
Mon_Main                       $b08b 17705D 17721  17742  17864  17880
                                     17903  17920  18042  18092  18153
                                     18171  18200  18220  18382  18433
                                     19297  19442
MoMa_10                        $b092 17711D 17717
MoMa_20                        $b0a6 17720D 17723
Mon_Command_Switch             $b0b2 17727D 17637
MoCS_10                        $b0b4 17731D 17734
Mon_Error                      $b0bc 17737D 17715  17865  17982  18035
                                     18093  18129  18201  18240  18383
                                     18434  18878  19443
MoMa_30                        $b0c5 17745D 17732
MoMa_40                        $b0db 17760D 17749
MoMa_50                        $b0e0 17762D 17751
Mon_Exit                       $b0e3 17765D 17783
cmdchr                         $b0e6 17770D 17731
cmdnum                         $b0f5 17771D 18907
cmdtbl                         $b0fc 17773D 17755  17757
Mon_Fetch                      $b11a 17790D 17934  17946  18013  18078
                                     18451  18461  18477
Mon_Stash                      $b12a 17803D 17892  18194  18352  18356
Mon_Compa                      $b13d 17817
Mon_Memory                     $b152 17833D 17780
MoMe_10                        $b15c 17840D 17836
MoMe_20                        $b162 17843D 17839
MoMe_30                        $b16e 17849D 17847  17853
MoMe_40                        $b177 17854D 17842  17863
MoMe_50                        $b186 17861D 17859
MoMe_60                        $b18e 17864D 17855
MoMe_Err                       $b191 17865D 17844
Mon_Set_Register               $b194 17868D 17787
MoSr_10                        $b199 17873D 17879
MoSr_20                        $b1a8 17880D 17874
Mon_Set_Memory                 $b1ab 17883D 17786
MoSM_10                        $b1b2 17889D 17897  17899
MoSM_20                        $b1c5 17898D 17895
MoSM_30                        $b1c9 17900D 17886  17890
Mon_Go                         $b1d6 17906D 17777
Mon_Gosub                      $b1df 17915D 17779
Mon_Dump_Row                   $b1e8 17923D 17856  17902
MoDR_10                        $b1f7 17933D 17941
MoDR_20                        $b1fa 17934D 17931
MoDR_30                        $b209 17941D 17939
MoDR_40                        $b213 17946D 17958  17960
MoDR_50                        $b220 17953D 17951
MoDR_60                        $b22c 17959D 17956
Mon_Compare                    $b231 17964D 17774
Mon_Transfer                   $b234 17971D 17782
MoTr_10                        $b247 17982D 17979
MoTr_15                        $b24a 17984D 17981
MoTr_20                        $b26d 18002D 18005
MoTr_25                        $b27a 18009D 17985  17991
MoTr_30                        $b27f 18011D 18041
MoTr_35                        $b28f 18017
MoTr_40                        $b299 18022D 18020
MoTr_45                        $b2aa 18029D 18025
MoTr_50                        $b2ba 18036D 18030
MoTr_55                        $b2c3 18039D 18032  18034
MoTr_60                        $b2c6 18040D 18038
MoTr_65                        $b2cb 18042D 18012
Mon_Hunt                       $b2ce 18045D 17778
MoHu_10                        $b2e3 18057D 18062
MoHu_20                        $b2f2 18065D 18053
MoHu_30                        $b2f8 18067D 18073
MoHu_40                        $b307 18075D 18060  18063  18071
MoHu_50                        $b30c 18077D 18091
MoHu_60                        $b30e 18078D 18083
MoHu_70                        $b324 18087D 18080
MoHu_80                        $b331 18092D 18088
MoHu_Err                       $b334 18093D 18049  18056
Mon_Load_Save                  $b337 18096D 17761
MLS_10                         $b34e 18111D 18114
MLS_20                         $b35d 18118D 18127
MLS_30                         $b370 18129D 18116  18148  18161  18168
MLS_40                         $b373 18130D 18122
MLS_50                         $b3a8 18153D 18166
MLS_60                         $b3ab 18157D 18112  18119  18132  18134
                                     18138  18179
MLS_70                         $b3b7 18163D 18159
MLS_80                         $b3d1 18175D 18142
Mon_Fill                       $b3db 18182D 17776
MoFi_10                        $b3ee 18193D 18199
MoFi_20                        $b400 18200D 18196
MoFi_Err                       $b403 18201D 18186  18189  18191
Mon_Assemble                   $b406 18204D 17773  17785
MoAs_10                        $b40b 18213D 18222
MoAs_12                        $b413 18216D 18226
MoAs_14                        $b41f 18221D 18217  18219
MoAs_16                        $b42b 18227D 18238
MoAs_18                        $b436 18233D 18237
MoAs_20                        $b442 18240D 18211  18247  18252  18276
MoAs_22                        $b445 18242D 18228
MoAs_24                        $b447 18243D 18271  18275
MoAs_26                        $b46b 18259D 18256
MoAs_28                        $b471 18262D 18258  18260
MoAs_30                        $b473 18263D 18266
MoAs_32                        $b47a 18267D 18246
MoAs_34                        $b47c 18268D 18244
MoAs_36                        $b48f 18278D 18269
MoAs_38                        $b496 18282D 18403
MoAs_40                        $b4b4 18296D 18315
MoAs_42                        $b4bd 18300D 18306
MoAs_44                        $b4cc 18307D 18297  18299
MoAs_46                        $b4df 18314D 18308  18312
MoAs_48                        $b4e4 18318D 18303
MoAs_50                        $b4ea 18320D 18316
MoAs_52                        $b4f3 18324D 18322
MoAs_54                        $b511 18340D 18334
MoAs_56                        $b519 18345D 18338
MoAs_58                        $b521 18351D 18328  18354
MoAs_60                        $b524 18352D 18349
MoAs_62                        $b52a 18355D 18325
MoAs_Err                       $b579 18383D 18335  18337  18342  18344
                                     18402
Mon_Match_Double               $b57c 18386D 18304  18318  18319
Mon_Match_Operand              $b57f 18392D 18290  18292  18310  18313
                                     18389
MaOp_10                        $b58b 18401D 18323
MaOp_20                        $b593 18404D 18398
Mon_Disassemble                $b599 18409D 17775
MoDi_10                        $b5a3 18416D 18412
MoDi_12                        $b5a9 18420D 18415
MoDi_14                        $b5ae 18422D 18418  18432
MoDi_End                       $b5ce 18433D 18425
MoDi_Err                       $b5d1 18434D 18421
Mon_Dis_Code                   $b5d4 18437D 18426
Mon_Print_Code                 $b5dc 18445D 18360
MoPC_10                        $b5ef 18456D 18465
MoPC_15                        $b5fc 18461D 18457
MoPC_20                        $b602 18463D 18460
MoPC_25                        $b60f 18470D 18491
MoPC_30                        $b618 18474D 18482
MoPC_35                        $b62a 18483D 18471  18473
MoPC_40                        $b63d 18490D 18484  18488
MoPC_50                        $b641 18493D 18479
MoPC_55                        $b64a 18498D 18496
MoPC_60                        $b64d 18499D 18493
MoPC_65                        $b653 18503D 18501
MoPC_Ret                       $b658 18506D 18504
Mon_Analyze_Opcode             $b659 18509D 18285  18452
AnOp_10                        $b668 18533D 18526
AnOp_20                        $b673 18541D 18536
AnOp_30                        $b677 18543D 18528  18530
AnOp_40                        $b67b 18545D 18542
AnOp_50                        $b692 18557D 18566
AnOp_60                        $b696 18560D 18563
AnOp_70                        $b69d 18565D 18556  18558
Mon_Mnemonic                   $b6a1 18570D 18468
MoMn_10                        $b6ac 18578D 18588
MoMn_20                        $b6b0 18580D 18584
Mon_Mode                       $b6c3 18592D 18535
Mon_Address                    $b707 18681D 18546
Mon_Char1                      $b715 18710D 18309  18485
Mon_Char2                      $b71b 18711D 18311  18487
Mon_Mne_Left                   $b721 18714D 18291  18574
Mon_Mne_Right                  $b761 18783D 18289  18576
Mon_Get_Aval                   $b7a5 18854D 18066  19263
Mon_Got_Aval                   $b7a7 18860D 17759  17838  17873  17889
                                     17980  18070  18133  18137  18141
                                     18190  18414  19238
MoGA_10                        $b7ba 18872D 18866
MoGA_20                        $b7c2 18876D 18864
MoGA_30                        $b7c7 18880D 18870
MoGA_40                        $b7c9 18882D 18869  18873  18875
Mon_Eval                       $b7ce 18887D 18245  18863
MoEv_10                        $b7dd 18899D 18904
MoEv_15                        $b7e5 18903D 18900
MoEv_20                        $b7eb 18907D 18910
MoEv_25                        $b7f6 18913D 18908
MoEv_30                        $b7ff 18916D 18979
MoEv_35                        $b813 18927D 18922
MoEv_40                        $b826 18936D 18939
MoEv_45                        $b82e 18941D 18933
MoEv_50                        $b831 18942D 18947
MoEv_55                        $b862 18966D 18950
MoEv_60                        $b87c 18980D 18929  18930  18945  18954
                                     18964  18976  18978
MoEv_65                        $b87e 18982D 18901  18917  18920  18925
Mon_Base                       $b88a 18991D 18913
Mon_Shift                      $b88e 18992D 18914
Mon_Hex_Cval                   $b892 18995D 17929  18026  18084  18448
Mon_Hex_Word                   $b89f 19006D 18498  19274
Mon_Hex_Blank                  $b8a5 19015D 17699  18462
Mon_Blank                      $b8a8 19021D 17933  18027  18028  18085
                                     18086  18442  18449  18589
Mon_BOL                        $b8ad 19028D 18357
Mon_CR                         $b8b4 19036D 17708  17926  18009  18076
                                     18143  19426  19468  19494
Mon_Blank_Line                 $b8b9 19043D 19264  19275  19283  19290
Mon_Hex                        $b8c2 19051D 17696  17935  18480  19011
                                     19018
Mon_Bin_To_Hex                 $b8d2 19062D 17692  18370  18373  18377
                                     18999  19055  19269
Mon_Nib_Hex                    $b8dc 19075D 19066
MoNH_10                        $b8e4 19082D 19080
Mon_Got_Char                   $b8e7 19086D 18865
Mon_Get_Char                   $b8e9 19092D 17720  18051  18054  18059
                                     18111  18131  18216  18268  18899
                                     18916  19406
MGNC_10                        $b8f9 19102D 19098  19100
Mon_Aval_To_Cval               $b901 19109D 17837  17887  18139  18212
                                     18413  19237  19306
Mon_Aval_Minus_Cval            $b90e 19123D 17843  18420  19246
Mon_Dec_Aval                   $b922 19139D 17862  18036
Mon_Sub_Aval                   $b924 19145D 18431
Mon_Dec_Bval                   $b93c 19162D 18040  18090  18198
Mon_Inc_Cval                   $b950 19178D 18039  18089  18197
Mon_Add_Cval                   $b952 19184D 17861  18363  18429
MoAC_Ret                       $b95f 19194D 19190  19192
Mon_Dec_Cval                   $b960 19197D 18037
Mon_Aval_To_PCB                $b974 19213D 17871  17909  17918
MPCB_Ret                       $b982 19223D 19216
Mon_Range                      $b983 19226D 17978  18048  18185
MoRa_Err                       $b9af 19256D 19236  19239  19253
Mon_Convert                    $b9b1 19260D 17762
MoCo_10                        $b9c7 19272D 19268
Mon_Bin_BCD                    $ba07 19300D 19278  19481
MoBD_10                        $ba0e 19309D 19311
MoBD_20                        $ba1c 19317D 19336
MoBD_30                        $ba27 19323D 19327
MoBD_40                        $ba33 19328D 19320
MoBD_50                        $ba36 19330D 19334
Mon_Print_Aval                 $ba47 19341D 19289  19296
Mon_Print_Number               $ba5d 19356D 19282  19485
MoPN_10                        $ba63 19366D 19385
MoPN_20                        $ba68 19368D 19374
MoPN_30                        $ba84 19381D 19376  19378
MoPN_40                        $ba8c 19384D 19380
Mon_Disk                       $ba90 19389D 17784
MonD_10                        $ba95 19395D 19392
MonD_20                        $bac9 19419D 19424
MonD_30                        $bad7 19425D 19422
MonD_40                        $bae4 19430D 19436
MonD_50                        $baf4 19438D 19415  19418  19429  19433
                                     19465  19474  19478  19491  19496
MonD_Err                       $bb00 19443D 19397  19399
Mon_Dir                        $bb03 19446D 19409
MDir_10                        $bb08 19452D 19455
MDir_20                        $bb2f 19470D 19498
MDir_30                        $bb31 19471D 19480
MDir_40                        $bb58 19488D 19493
MDir_50                        $bb66 19494D 19489
E_CINT                         $c000 19511D 22328  26761  27751
E_DISPLAY                      $c003 19512
E_GETKEY                       $c006 19513D 24785
E_GETSCR                       $c009 19514D 24805
E_PRINT                        $c00c 19515D  7150  10408  24885
E_SCRORG                       $c00f 19516D 27787
E_KEY                          $c012 19520D 27761
E_REPEAT                       $c015 19522
E_PLOT                         $c018 19523D 27788
E_CURSOR                       $c01b 19524
E_ESCAPE                       $c01e 19525
E_PFKEY                        $c021 19526D 27741
E_RASTER                       $c024 19527D 26772
E_DLCHR                        $c027 19528D 22562  27740
E_SWAPPER                      $c02a 19529D 27739
E_WINDOW                       $c02d 19530D  8643   8647
E_40_Line_Lo                   $c033 19535D  7222   9128  15224  15294
                                     19751  20181  20210
E_40_Line_Hi                   $c04c 19565D  7224   9130  15296  19649
                                     19756  20184  20213
Edit_Vectors                   $c065 19596D 19676
ASCII_Key_Tables               $c06f 19606D 26995  26996
Edit_Initialize                $c07b 19617D 19511
CINT_10                        $c0e8 19668D 19673
CINT_20                        $c0f8 19676D 19679
CINT_30                        $c113 19695D 19698
CINT_40                        $c124 19702D 19681
CINT_Ret                       $c141 19712D 19710
Clear_Window                   $c142 19715D 19705  19708  20859
ClWi_10                        $c145 19719D 19723
Cursor_To_Window_Home          $c150 19726D 19718  20961
Cursor_To_Left_Margin          $c156 19734D 21273  21306
Set_Screen_Pointer             $c15c 19742D 19960  20057  20084  20897
                                     21060  21315  21341  21599  21609
                                     21656  21783
Set_Screen_Pointer_X           $c15e 19748D 19719  20096  20146  20264
SSPX_10                        $c166 19755D 19753
SSPX_20                        $c177 19763D 19759
SSPX_30                        $c17a 19764D 19762
Set_Attribute_Pointer          $c17c 19767D 20648  21704  21947
SAP_10                         $c18d 19778D 19774
SAP_20                         $c191 19780D 19777
Edit_Raster                    $c194 19784D 19527
RAST_10                        $c1a3 19794D 19790
RAST_20                        $c1ae 19799D 19796
RAST_30                        $c1bd 19806D 19803
RAST_40                        $c1da 19821D 19818
RAST_50                        $c1df 19824D 19798  19801
RAST_60                        $c201 19842D 19843
RAST_70                        $c207 19848D 19823  19839
RAST_80                        $c214 19854D 19794
RAST_90                        $c229 19864D 19854  19857  19860  19862
RAST_Ret                       $c233 19873D 19865
Edit_Get_Key                   $c234 19876D 19513  19912
GETK_10                        $c244 19893D 19882
GETK_20                        $c247 19894D 19898
GETK_30                        $c258 19905D 19914
GETK_40                        $c25b 19906D 19945
GETK_50                        $c25e 19907D 19909
GETK_60                        $c292 19931D 19928
GETK_70                        $c294 19932D 19930
GETK_80                        $c296 19933D 19923  19925
Edit_Get_Screen                $c29b 19937D 19514
GETS_10                        $c2a5 19948D 19931
GETS_15                        $c2b5 19956D 19953
GETS_20                        $c2b8 19957D 19955
GETS_25                        $c2bc 19960D 19934  19946
GETS_30                        $c2ce 19968D 19966
GETS_35                        $c2d4 19971D 19968
GETS_40                        $c2d8 19973D 19970  19971
GETS_45                        $c2ec 19983D 19976  19979
GETS_50                        $c2ef 19984D 19981
GETS_55                        $c2f5 19987D 19958  19985
Edit_Toggle_Quote              $c2ff 19997D 19973  20698
EdTQ_Ret                       $c30b 20006D 20001
Edit_Print_Exit                $c30c 20009D 20673  20675
EdPE_10                        $c319 20018D 20016
Print_To_Screen                $c320 20027D 20827
PTS_10                         $c322 20031D 20699
PTS_20                         $c326 20033D 20781  20832
PTS_30                         $c328 20034D 20032
PTS_40                         $c32e 20037D 20035
PTS_50                         $c33b 20044D 20038
Edit_Cursor_Next               $c33e 20047D 21024  21496
EdAC_10                        $c34c 20057D 20051  20054
EdAC_20                        $c361 20066D 20061
EdAC_Ret                       $c362 20067D 20056  20059  20064
Edit_Cursor_Down               $c363 20070D 20708  20875  21157  21633
EdCD_10                        $c373 20081D 20077
EdCD_20                        $c377 20083D 20075
EdCD_30                        $c379 20084D 20080
Edit_Scroll_Down               $c37c 20087D 20065  21272  21374
EdSD_10                        $c386 20095D 20091  20093
EdSD_20                        $c388 20096D 20106
EdSD_30                        $c3a0 20107D 20099
Edit_Scroll_Up                 $c3a6 20111D 20081  20139  21358
ScUp_10                        $c3a8 20115D 20119
ScUp_20                        $c3b8 20123D 20117  21297
ScUp_30                        $c3c0 20127D 20125
ScUp_40                        $c3c8 20131D 20129
ScUp_Ret                       $c3db 20140D 20137
Scroll_Window                  $c3dc 20143D 20131  20156
ScWi_10                        $c3f4 20158D 20149
ScWi_20                        $c405 20168D 20170  20172
ScWi_Ret                       $c40c 20173D 20163
Scroll_Row                     $c40d 20176D 20105  20155
ScRo_10                        $c428 20191D 20197
ScRo_20                        $c436 20202D 20180
Clear_Window_Row_X             $c4a5 20254D 19720  20107  20158
Clear_Row_To_EOR               $c4aa 20261D 21313  21339
CRTE_10                        $c4b2 20268D 20274
CRTE_20                        $c4c0 20279D 20266
CRTE_30                        $c50b 20315D 20304
CRTE_40                        $c536 20336D 20334
VFCA_00                        $c53c 20340D 20353  20357
VDC_Fill_Char_A                $c53e 20343D 20313  20335
VFCA_10                        $c543 20348D 20349
Scan_Keyboard                  $c55d 20386D 27012
SKBD_10                        $c57d 20404D 20402
SKBD_15                        $c58e 20412D 20448  20454
SKBD_20                        $c597 20417D 20413
SKBD_25                        $c59a 20418D 20415
SKBD_30                        $c59d 20420D 20422
SKBD_35                        $c5a5 20424D 20441
SKBD_40                        $c5b7 20434D 20429
SKBD_45                        $c5bc 20437D 20431  20433
SKBD_50                        $c5bf 20439D 20425
SKBD_55                        $c5d7 20456D 20444
Edit_Use_Scancode              $c5e1 20463D 19602
SKBD_65                        $c5f8 20477D 20467
SKBD_70                        $c620 20496D 20491
SKBD_75                        $c628 20499D 20475  20495
SKBD_80                        $c62f 20503D 20485
SKBD_Ret                       $c643 20513D 20469  20471
SKBD_85                        $c644 20514D 20480
SKBD_90                        $c646 20515D 20482  20505  20509  20511
Edit_Repeat                    $c651 20522D 19522  20478  20487  20489
                                     20501
REPE_10                        $c661 20534D 20529
REPE_15                        $c67e 20551D 20536  20541  20543  20545
REPE_20                        $c688 20558D 20552
REPE_25                        $c697 20566D 20403  20532  20539
Edit_Use_Function_Key          $c6ad 20582D 19603
UFK_10                         $c6af 20586D 20589
UFK_20                         $c6c4 20596D 20537  20547  20554  20559
                                     20564  20570  20592  22243
UFK_30                         $c6ca 20599D 20587
REPE_50                        $c6d1 20603D 20607
REPE_55                        $c6da 20608D 20604
FKey_Code                      $c6dd 20612D 20586
Blink_Cursor                   $c6e7 20627D 19871
BlCu_10                        $c71f 20653D 20646
BlCu_Ret                       $c72c 20658D 20631  20633  20635  20639
Edit_Print                     $c72d 20661D 19515  19905  19956
EdPr_10                        $c734 20670D 20671
EdPr_20                        $c756 20687D 20685
EdPr_30                        $c75c 20691D 20688
EdPr_40                        $c767 20697D 20694
EdPr_50                        $c76f 20703D 20680  20682
Edit_Attributes_Off            $c77d 20711D 21175  21208
Ctrl_Code                      $c78c 20724D 20783
Ctrl_Action                    $c79a 20743D 20805  20807
Edit_Jump_Ctrl                 $c7b6 20762D 20692
Edit_Use_Ctrl                  $c7b9 20768D 19599
ICtr_10                        $c7c9 20779D 20774
ICtr_20                        $c7d0 20782D 20776  20778
ICtr_30                        $c7d2 20783D 20786
ICtr_40                        $c7da 20787D 20861
ICtr_50                        $c7dc 20788D 20791
ICtr_60                        $c7e5 20793D 20789
ICtr_70                        $c7ec 20797D 20794
ICtr_80                        $c7f5 20801D 20772
ICtr_90                        $c7f6 20802D 20784
Edit_Jump_Shifted              $c802 20812D 20689
Edit_Print_Shifted             $c805 20818D 19600
PrSh_10                        $c811 20827D 20825
PrSh_20                        $c814 20829D 20823
PrSh_30                        $c818 20831D 20839
PrSh_40                        $c81d 20834D 20830
PrSh_50                        $c824 20838D 20835
PrSh_60                        $c83b 20850D 20847
PrSh_70                        $c842 20854D 20851
PrSh_80                        $c849 20857D 20855
PrSh_90                        $c850 20860D 20858
Edit_Right                     $c854 20864D 20759
Ctrl_Q_Down                    $c85a 20872D 20754
Edit_Down                      $c85d 20878D 20868  20895
EdDo_10                        $c865 20885D 20882  20905
EdDo_Ret                       $c866 20886D 20894  20904
Edit_Up                        $c867 20889D 20841
EdUp_10                        $c86d 20895D 20907
Edit_Left                      $c875 20900D 20843  21046
Edit_Charset_Text              $c880 20910D 20752
EdCT_10                        $c88b 20919D 20914
EdCT_20                        $c892 20924D 20845
EdCT_30                        $c89b 20928D 20917
EdCT_40                        $c89f 20931D 20925
Ctrl_K_Unlock_Charset          $c8a6 20937D 20750
Ctrl_L_Lock_Charset            $c8ac 20945D 20751
LUCS_10                        $c8b0 20950D 20942
Edit_Home                      $c8b3 20954D 20756
EdHo_10                        $c8bc 20961D 20959
Edit_Reverse_Off               $c8bf 20964D 20848
Edit_Reverse_On                $c8c2 20971D 20755
Edit_Underline_On              $c8c7 20979D 20746
Edit_Underline_Off             $c8ce 20988D 20852
Edit_Blink_On                  $c8d5 20997D 20753
Edit_Blink_Off                 $c8dc 21006D 20856
Edit_Shift_Text                $c8e3 21015D 20040  20836
EdST_10                        $c8ef 21023D 21021
EdST_20                        $c8f6 21026D 21033  21035
EdST_30                        $c912 21037D 21023
EdST_40                        $c918 21040D 21025  21038
Edit_Delete                    $c91b 21043D 20757
EdDe_10                        $c923 21049D 21067
EdDe_20                        $c932 21056D 21040  21048  21319  21349
                                     21361  21376
EdDe_30                        $c93d 21062D 21050  21054
Ctrl_I_Tab                     $c94f 21070D 20748
ETab_10                        $c951 21074D 21078
ETab_20                        $c95c 21080D 21076
Edit_Toggle_Tab                $c961 21085D 20758
Jc96c                          $c96c 21095D 21077  21089
Clear_All_Tabstops             $c980 21113D 21219
Set_Default_Tabstops           $c983 21120D 19658  19703  21218
STAB_10                        $c987 21125D 21127
STAB_Ret                       $c98d 21128D 21135
Ctrl_G_Bell                    $c98e 21131D 20747
Ctrl_J_Linefeed                $c9b1 21151D 20749
Edit_Escape_Jump               $c9be 21163D 20686
Edit_Escape_Switch             $c9c1 21169D 19525  19601
EdES_10                        $c9ca 21176D 21173
EdES_Ret                       $c9dd 21187D 21180
Edit_Escape_Case               $c9de 21190D 21183  21185
Edit_Window_UL                 $ca14 21222D 21213
Edit_Set_Window_LR             $ca16 21229D 21195
Edit_Window_Corner             $ca1b 21237D 19530
Set_Lower_Right_Corner         $ca1d 21243D 21256
Set_Fullscreen                 $ca24 21251D 19704  19707  20960
SeFu_10                        $ca2e 21259D 21240
SeFu_20                        $ca32 21261D 21248
SeFu_30                        $ca36 21263D 21265
Edit_Insert_Line               $ca3d 21269D 21202
EdIL_Ret                       $ca51 21282D 21279
Edit_Delete_Line               $ca52 21285D 21197
Edit_Erase_EOL                 $ca76 21309D 21210
EdEE_10                        $ca79 21313D 21318
EdEE_20                        $ca88 21319D 21330
Edit_Erase_BOL                 $ca8b 21322D 21209
EdEB_10                        $ca8e 21326D 21332
EdEB_20                        $ca9a 21331D 21328
Edit_Erase_EOS                 $ca9f 21335D 21193
EdEr_10                        $caa2 21339D 21344  21347  21348
Edit_Scroll_Line_Up            $cabc 21352D 21215
Edit_Scroll_Line_Dn            $caca 21364D 21216
ESLD_10                        $cad5 21372D 21369
Edit_Scroll_Unlock             $cae2 21379D 21205
Edit_Scroll_Lock               $cae5 21386D 21206
Edit_Auto_Insert_Off           $caea 21394D 21196
Edit_Auto_Insert_On            $caed 21401D 21194
Edit_Cursor_Block              $caf2 21409D 21212
Edit_Cursor_Line               $cafe 21419D 21214
Edit_Steady_Cursor             $cb0b 21430D 21198
EdSC_10                        $cb14 21437D 21416  21427  21452
EdSC_20                        $cb1a 21439D 21434
Edit_Blinking_Cursor           $cb21 21444D 21199
EdBC_10                        $cb2e 21453D 21448
EdBC_20                        $cb33 21455D 21441
EdBC_Ret                       $cb36 21456D 21413  21423
Edit_Enable_Bell               $cb37 21459D 21200
Edit_Disable_Bell              $cb3a 21466D 21201
Edit_Inverse_On                $cb3f 21474D 21211
Edit_Inverse_Off               $cb48 21483D 21207
EdIO_10                        $cb4f 21489D 21480
Edit_Cursor_EOL                $cb52 21492D 21204
Edit_Get_Char                  $cb58 21499D 19961  21027  21063  21612
EGSC_10                        $cb65 21510D 21504
Is_Coupled_Row                 $cb74 21518D 20060  20881  21317  21329
                                     21343  21368  21594  21606  21618
Is_Coupled_Row_X               $cb76 21524D 20101  20116  20133  20151
                                     21053  21275  21560
Toggle_Cont_Flag               $cb81 21533D 21277
Toggle_Cont_Flag_X             $cb83 21539D 20103  20153
Clear_Cont_Flag                $cb85 21545D 20122  20135  20258  20705
                                     21375
CCF_10                         $cb8d 21551D 21563
CCF_20                         $cb90 21552D 21530
Set_Cont_Flag                  $cb93 21556D 20108  21542
Cont_Flag_Bit_Pos              $cb9f 21566D 21527  21548  21561
Edit_Cursor_BOL                $cbb1 21584D 21203
Start_Of_Line                  $cbb5 21591D 19920  21288  21597
SOL_10                         $cbc0 21599D 21595
Edit_Cursor_Last               $cbc3 21602D 19918  20703  21019  21156
                                     21495  21607
EELR_10                        $cbd3 21612D 21621
EELR_20                        $cbe5 21620D 21617
EELR_30                        $cbea 21622D 21615  21619
Edit_Cursor_Right              $cbed 21626D 19983  20058  20867  21028
                                     21062  21066
EdCR_10                        $cbfb 21637D 21632
Edit_Cursor_Left               $cc00 21643D 20903  21026  21030  21064
                                     21331  21620
EdCL_10                        $cc09 21651D 21648
EdCL_20                        $cc18 21659D 21650
EdCL_Ret                       $cc1d 21662D 21653
Edit_Save_Row_Col              $cc1e 21665D 21018  21047  21312  21325
                                     21338  21355  21367
Edit_Put_Blank                 $cc27 21675D 21036  21055  21326
Edit_Put_Char_Att              $cc2f 21685D 20044  27065
Edit_Put_Char                  $cc32 21692D 21029  21065
Edit_Display                   $cc34 21698D 19512  21994
Edit_Display_AX                $cc40 21709D 20654
CTSR_80                        $cc4a 21719D 21713
Edit_Get_Window                $cc5b 21730D 19516
Edit_Plot                      $cc6a 21749D 19523
EdPl_10                        $cc77 21768D 21766
EdPl_20                        $cc84 21776D 21772
EdPl_30                        $cc85 21777D 21764  21767
EdPl_40                        $cc86 21778D 21774  21775
EdPl_50                        $cc95 21785D 21761
Edit_Set_FKey                  $cca2 21796D 19526
ESFK_10                        $ccd5 21829D 21835
ESFK_20                        $cce3 21837D 21823
ESFK_30                        $cce8 21840D 21846
ESFK_40                        $ccf6 21848D 21822  21830  21841
ESFK_50                        $cd05 21855D 21867
ESFK_60                        $cd1e 21869D 21856
ESFK_Ret                       $cd1f 21870D 21826
Edit_FText_Index               $cd20 21873D 21812  21816  21849
EGFI_10                        $cd23 21878D 21881
EGFI_Ret                       $cd2b 21882D 21879
Edit_Toggle_Screen             $cd2c 21885D 21217
Edit_Screen_Swapper            $cd2e 21891D 19529  19702  19706  19711
EdSS_10                        $cd30 21900D 21906
EdSS_20                        $cd40 21908D 21914
EdSS_Ret                       $cd56 21918D 21925
Edit_Cursor                    $cd57 21921D 19524  20014  21784
Edit_Cursor_On                 $cd6f 21939D 19906
ECON_10                        $cd91 21959D 21438
ECON_20                        $cd99 21965D 21943
Edit_Cursor_Off                $cd9f 21970D 19911
ECOF_10                        $cdb3 21987D 21974
ECOF_Ret                       $cdc9 21995D 21989
VDC_Write_Data                 $cdca 21998D 20299  20332  21724  21727
                                     21958  21980  22079  22084
VDC_Write_Register_X           $cdcc 22004D 20207  20226  20229  20237
                                     20242  20245  20249  20284  20294
                                     20297  20322  20325  20347  21489
                                     21933  21936  21961  21983  22040
                                     22043  22056  22059  22071  22074
VWRX_10                        $cdcf 22008D 22009
VDC_Read_RAM                   $cdd8 22014D 21511  21514  21950
VDC_Read_Register_X            $cdda 22020D 20205  20282  20351  20355
                                     21478  21487  27056
VRRX_10                        $cddd 22024D 22025
VDC_Set_Char_Address           $cde6 22030D 20208  21513  21725
VDC_Set_Attr_Address           $cdf9 22046D 20246  21510  21722  21949
                                     21954  21978
Edit_Load_Chargen              $ce0c 22062D 19528  27009
EdLC_10                        $ce23 22076D 22082  22091  22095
EdLC_20                        $ce34 22084D 22086
VIC_Color_Codes                $ce4c 22099D 20788
VDC_Color_Codes                $ce5c 22121D 20799
Edit_Bit_Mask                  $ce6c 22143D 21101  21573
ZP_40_COL                      $ce74 22149D 19668
ZP_80_COL                      $ce8e 22179D 19670
Edit_Default_FK                $cea8 22208D 19695
UFK_40                         $cf00 22227D 20599
UFK_50                         $cf0c 22238D 22241
UFK_60                         $cf14 22242D 22239
UFK_70                         $cf16 22243D 22233
DMA                            $cf80 22248D 27734
VIC                            $d000 22295D  7799   7802   8903   8906
                                     10998  17213  22065  22066  22546
                                     26224  26225
VIC_Ctrl_1                     $d011  1549D  9268   9270   9282   9285
                                     19795  19812  19833  19852  19861
                                     22526  22531  24106  24112  24671
                                     24674
VIC_RASTER                     $d012  1550D 19805  19825  22529
VIC_LPX                        $d013  1551D 17303
VIC_LPY                        $d014  1552D 17305
VIC_SPR_ENA                    $d015  1553D  8769   8888  17220  23268
                                     23271  23291  24680
VIC_Ctrl_2                     $d016  1554D 19816  19836  19853
MEM_CONTROL                    $d018  1524
VIC_Memory                     $d018  1555D 19849
VIC_IRQ_REG                    $d019  1556D 17265  17266  19788  19791
                                     24098
VIC_IRQ_ENA                    $d01a  1557D 22583  24096
Vd01c                          $d01c  1558D  8757
VIC_SS_COLL                    $d01e  1559D 17275  17279
Vd020                          $d020  1560D  7399  10791
VIC_BG_COL                     $d021  1561D  7180   7385   7434   8715
                                      9041   9140  10782
Vd025                          $d025  1562D  8455   9037  11017
Vd026                          $d026  1563D  8462   9039
Vd027                          $d027  1564D  7769   8811   9045  10989
VIC_KBD                        $d02f  1565D 20399  20410  20417
VIC_SPEED                      $d030  1566D  9272   9281  19855  22681
                                     23266  23272  23293  24682
SID_Freq_1                     $d400  1568D  8233   8235   8590  17399
                                     17401  21143  22574
SID_Pulse_1                    $d402  1569D  8085   8087
SID_Control_1                  $d404  1570D  1795   8237   8239   8583
                                     17336  17412  21145  21147
SID_Attack_1                   $d405  1571D  8081   8585  21140
SID_Sustain_1                  $d406  1572D  8083   8587  21141
SID_Freq_2                     $d407  1573
SID_Pulse_2                    $d409  1574
SID_Control_2                  $d40b  1575D  1796
SID_Attack_2                   $d40c  1576
SID_Sustain_2                  $d40d  1577
SID_Freq_3                     $d40e  1578
SID_Pulse_3                    $d410  1579
SID_Control_3                  $d412  1580D  1797
SID_Attack_3                   $d413  1581
SID_Sustain_3                  $d414  1582
SID_Cutoff                     $d415  1583D  8054
SID_Resonance                  $d417  1584
SID_Volume                     $d418  1585D  1802   8103   8495  21137
                                     26973
SID_POT_X                      $d419  1586D 10885  10886
MMU_CONT                       $d500  1590D 22312
MMU_PCRA                       $d501  1591D  1835
MMU_MODE                       $d505  1592D 19660  19661  19709  22663
                                     22689  23315  23317  23324  23326
MMU_RAMC                       $d506  1593D 22251  22256  22264
VDC_Register                   $d600  1597D  7411  10798  10938  10941
                                     20348  22007  22008  22023  22024
                                     22551  22606  26961
VDC_Data                       $d601  1598D  7412   7415  10799  10939
                                     22010  22026  22607  26962
VIC_COLOR_RAM                  $d800  1600D  7556  22153
CIA1                           $dc00  1381D 10829  10832  10833  10834
                                     10838  10879  10881  10898  10900
                                     10904
CIA1_KBD_COL                   $dc00  1382D 20160  20398  20414  20449
                                     20597  22506  25948  25952
CIA1_KBD_ROW                   $dc01  1383D 20161  20400  20420  20421
                                     25942  25943  25949  25950
CIA1_DDRA                      $dc02  1397D 22516
CIA1_DDRB                      $dc03  1398D 22513
VIA2_T1CL                      $dc04  1514
CIA1_TALO                      $dc04  1399D 11152  23332  24182
CIA1_TAHI                      $dc05  1400D 11154  23330  24185
VIA2_T1CH                      $dc05  1515
CIA1_TBLO                      $dc06  1401D 11148  22588  24178  24207
                                     24212  24547
VIA2_T2CL                      $dc06  1513
VIA2_T2CH                      $dc07  1512
IEC_TIM_H                      $dc07  1525
CIA1_TBHI                      $dc07  1402D 11150  22589  24184  24204
                                     24208  24213  24548
CIA1_TODT                      $dc08  1403
CIA1_TODS                      $dc09  1404
CIA1_TODM                      $dc0a  1405
CIA1_TODH                      $dc0b  1406
CIA1_SDR                       $dc0c  1407D 22903  22966  23094  25687
                                     25698
CIA1_ICR                       $dc0d  1408D  1511   1526  22504  22936
                                     22948  23034  23066  23303  23328
                                     23346  24099  24189  24216  24339
                                     24347  24470  24471  24549  25566
                                     25685  25695  26776
IEC_IFR                        $dc0d  1526
VIA2_IER                       $dc0d  1511
CIA1_CRA                       $dc0e  1409D 22508  23311  23314  23333
                                     23345  24100  24187
CIA1_CRB                       $dc0f  1410D 22510  22591  24102  24215
                                     24551
CIA2                           $dd00  1455
CIA2_PRA                       $dd00  1457D 19621  19622  22518  22898
                                     22910  22912  22944  22945  22956
                                     22974  22975  22989  22992  23041
                                     23043  23044  23045  23072  23073
                                     23078  23079  23085  23086  23123
                                     23125  23145  23146  23175  23177
                                     23210  23212  23219  23221  23228
                                     23230  23237  23239  23246  23247
                                     23708  23711  25062  25063  25699
                                     25701  25729  25731
IEC_DRAN                       $dd00  1528
IEC_PCR                        $dd00  1527
RS2_DSR_CTS                    $dd01  1538
CIA2_PRB                       $dd01  1468D 23422  23571  23578  23580
                                     23582  23583  23642  23648  23650
                                     23651  23771  25042  25060
CIA2_DDRA                      $dd02  1479D 22520
CIA2_DDRB                      $dd03  1480D 22514  25059
CIA2_TALO                      $dd04  1481D 23621
RS2_TIM_LOW                    $dd04  1540
CIA2_TAHI                      $dd05  1482D 23623
RS2_TIM_HIG                    $dd05  1541
CIA2_TBLO                      $dd06  1483D 23774  23777  23786  23795
                                     23804
CIA2_TBHI                      $dd07  1484D 23778  23780  23787  23797
                                     23805
CIA2_TODT                      $dd08  1485
CIA2_TODS                      $dd09  1486
CIA2_TODM                      $dd0a  1487
CIA2_TODH                      $dd0b  1488
CIA2_SDR                       $dd0c  1489
CIA2_ICR                       $dd0d  1490D  1539  22505  23449  23453
                                     23504  23693  23713  23734  23784
                                     25057  26753  26754
RS2_IRQ_REG                    $dd0d  1539
CIA2_CRA                       $dd0e  1501D 22509  23619  23628
CIA2_CRB                       $dd0f  1502D 22511  23782  23799
DMA_BASE                       $df00  1604
DMA_CMD                        $df01  1612D 26459
DMA_CBM_LO                     $df02  1613D 17490
DMA_CBM_HI                     $df03  1614D 17491
DMA_REU_LO                     $df04  1615D 17494
DMA_REU_HI                     $df05  1616D 17495
DMA_REU_BA                     $df06  1617D 17500
DMA_CNT_LO                     $df07  1618D 17486
DMA_CNT_HI                     $df08  1619D 17487
System_Reset                   $e000 22301D 27728
SyRe_10                        $e00c 22311D 22314
SyRe_20                        $e031 22326D 22322
SyRe_30                        $e034 22327D 22325
SyRe_40                        $e041 22333D 22331
SyRe_50                        $e048 22336D 22334
MMU_Reset_Table                $e04b 22339D 22311
RESTOR                         $e056 22353D 22327  26759  27754
VECTOR                         $e05b 22361D 27755
VECT_10                        $e061 22371D 22378
VECT_20                        $e068 22374D 22372
VECT_30                        $e06f 22377D 22375
vectss                         $e073 22382D 22356  22357
RAMTAS                         $e093 22405D 22326  27753
RAMT_10                        $e096 22410D 22412
Init_Bank_Switching            $e0cd 22438D 22316
InBS_10                        $e0cf 22444D 22462
InBS_20                        $e0d7 22450D 22453
InBS_30                        $e0e2 22457D 22460
InBS_40                        $e0f0 22467D 22470
InBS_50                        $e0fb 22475D 22478
insttb                         $e105 22491D 22444
IOINIT                         $e109 22500D 22319  26760  27752
IOIN_10                        $e142 22526D 22527
IOIN_20                        $e147 22528D 22532
IOIN_30                        $e154 22534D 22530
IOIN_40                        $e170 22545D 22548
IOIN_50                        $e18a 22556D 22553
IOIN_60                        $e194 22560D 22557
IOIN_70                        $e1a8 22568D 22569  22571
IOIN_80                        $e1ae 22572D 22561
IOIN_90                        $e1b2 22574D 22576
Test_Fast_IEC                  $e1b8 22579D 24686
VDC_Program_X                  $e1dc 22598D 22550  22555  22608  26963
VPX_10                         $e1ee 22609D 22602
Check_CBM                      $e1f0 22613D 22317
CCBM_10                        $e1ff 22623D 22628
CCBM_20                        $e216 22634D 22638
SYSTEM                         $e224 22642D 22626  22647  22648  27791
SYST_10                        $e235 22652D 22655
Test_Cartridge                 $e242 22660D 22318
C64                            $e24b 22669D 22336  27733
C64_10                         $e255 22677D 22680
ROM_GO64                       $e263 22685D 22677
TeCa_10                        $e26b 22695D 22666
TeCa_20                        $e272 22698D 22700
TeCa_30                        $e27a 22702D 22729
TeCa_40                        $e289 22708D 22715
TeCa_50                        $e2b6 22728D 22712  22722
ROM_PAGES                      $e2bc 22733D 22704  26478
ROM_BANK                       $e2c0 22742D 22706  26481
ROM_CBM                        $e2c4 22751D 22625  22652  22711  26552
VIC_Init_Values                $e2c7 22757D 22545
VDC_Init_Values                $e2f8 22818D 22554  22558  22601  22604
VDC_Init_NTSC                  $e333 22857D 22554
VDC_Init_PAL                   $e336 22862D 22558
TALK                           $e33b 22869D 25131  25389  27768
LISTN                          $e33e 22876D 25081  25175  25816  25841
                                     27767
Talk_Listen                    $e343 22883D 23191
TaLi_10                        $e352 22894D 22888
TaLi_20                        $e370 22907D 22908
TaLi_30                        $e374 22910D 22900
IEC_Send_With_ATN              $e37c 22915D 23117  23133
ISWA_10                        $e388 22923D 22924
IEC_Send_Byte                  $e38c 22928D 22891  23163
ISB_10                         $e39a 22936D 22934
ISB_15                         $e3a4 22940D 22941
ISB_20                         $e3a9 22942D 22943
ISB_25                         $e3ae 22944D 22939  22946  22954
ISB_30                         $e3c3 22953D 22950
ISB_35                         $e3e2 22972D 22958  22960
ISB_40                         $e3e6 22974D 22976  22994
ISB_45                         $e3fa 22983D 22980
ISB_50                         $e3fd 22984D 22982
ISB_55                         $e412 22996D 22968
ISB_60                         $e416 22999D 23006
ISB_65                         $e420 23005D 23000
ISB_70                         $e425 23009D 22978
ISB_75                         $e428 23011D 22935
IEC_Error                      $e42a 23014D 23063
ACPTR                          $e43e 23028D 24858  25392  25394  25412
                                     27763
ACPTR_10                       $e44d 23038D 23039
ACPTR_15                       $e452 23040D 23058
ACPTR_20                       $e45c 23044D 23046  23050
ACPTR_25                       $e47d 23060D 23052
ACPTR_30                       $e484 23065D 23048
ACPTR_35                       $e486 23066D 23076
ACPTR_40                       $e48d 23072D 23074
ACPTR_45                       $e498 23077D 23090
ACPTR_50                       $e49a 23078D 23080  23082
ACPTR_55                       $e4a8 23085D 23087  23089
ACPTR_60                       $e4b5 23094D 23068
ACPTR_65                       $e4bf 23101D 23084
ACPTR_70                       $e4cb 23107D 23105
SECND                          $e4d2 23113D 25086  25182  25818  25845
                                     27757
IEC_ATN_OUT_High               $e4d7 23120D 23143  23192  25180
TKSA                           $e4e0 23129D 25138  25391  27758
IEC_ATN_High_Exit              $e4e9 23138D 25136
IAHE_10                        $e4f5 23145D 23147  23149
CIOUT                          $e503 23153D 24889  25097  25821  25823
                                     25827  27764
CIOUT_10                       $e50c 23162D 23157
CIOUT_20                       $e511 23165D 23160
UNTLK                          $e515 23170D 25306  25438  27765
UNLSN                          $e526 23182D 25303  25832  25851  27766
UNLSN_10                       $e535 23192D 23025  23135
IEC_CLOCK_DATA_OUT_High        $e538 23195D 23106
ICDO_10                        $e53b 23200D 23201
IEC_Clock_High                 $e545 23207D 22937  22984  23037  23054
                                     23144  23203  25564  25639
IEC_Clock_Low                  $e54e 23216D 22595  22919  23174
IEC_Data_Out_High              $e557 23225D 22897  22920  22932  22983
                                     23204
IEC_Data_Out_Low               $e560 23234D 22981  23053  23103  23142
IEC_Clock_Data_In              $e569 23243D 22933  22940  22942  22999
                                     23038  23248
Disable_IRQ_and_Sprites        $e573 23253D 22896  22918  22931  23031
                                     23141  23173
Disable_Sprites                $e574 23259D 24113
DiSp_10                        $e59a 23277D 23278
DiSp_Ret                       $e59e 23280D 23263  23265  23274
Enable_IRQ_and_Sprites         $e59f 23283D 23003  23023  23107  23150
EnSp_10                        $e5ba 23296D 23287  23289
IEC_Wait_Ready                 $e5bc 23300D 22904  22967  23305
IEC_Fast_Input                 $e5c3 23308D 22592  22594  23353  25565
IEC_Fast_Output                $e5d6 23321D 22593  22901  22964  23354
SPINIO                         $e5fb 23350D 27731
RS_NMI_Send                    $e5ff 23361D 23722
RNS_10                         $e60c 23371D 23369
RNS_20                         $e615 23376D 23398  23400  23413
RNS_30                         $e61b 23388D 23375
RNS_40                         $e62a 23395D 23402  23406  23409
RNS_50                         $e62b 23396D 23394  23405  23408
RNS_60                         $e636 23401D 23390
RNS_70                         $e63a 23404D 23392
RNS_80                         $e640 23408D 23391
RNS_90                         $e644 23411D 23366
RS_Send_Next_Byte              $e64a 23416D 23365  23626
RSNB_10                        $e657 23425D 23421
RSNB_20                        $e672 23438D 23423
RSNB_30                        $e675 23440D 23424
RSNB_40                        $e67d 23443D 23432
Set_CIA2_Interrupt             $e67f 23446D 23509  23625  23656
RS_Set_Databits                $e68e 23457D 25011
RSSD_10                        $e698 23471D 23469
RSSD_Ret                       $e69c 23474D 23471
RS_NMI_Receive                 $e69d 23477D 23788
RSNR_10                        $e6b1 23490D 23499  23540  23544  23546
RSNR_15                        $e6b2 23492D 23539
RSNR_20                        $e6b4 23493D 23484
RSNR_25                        $e6c2 23503D 23514  23556
RSNR_30                        $e6d4 23513D 23481
RSNR_35                        $e6df 23522D 23483
RSNR_40                        $e6f1 23530D 23534
RSNR_45                        $e6f9 23536D 23531
RSNR_50                        $e70d 23546D 23543
RSNR_55                        $e712 23549D 23525
RSNR_60                        $e715 23551D 23560
RSNR_65                        $e718 23553D 23559
RSNR_70                        $e723 23558D 23494
RS_CKOUT                       $e729 23563D 25161
RSCO_10                        $e73a 23575D 23577
RSCO_20                        $e741 23578D 23579
RSCO_30                        $e74e 23583D 23585
RS_DSR_Missing                 $e755 23588D 23572  23643  25044
RSDM_10                        $e75a 23593D 23569  23573  23584
RSW_00                         $e75c 23596D 23605
RS_Write                       $e75f 23599D 24924
RS_Start_Baud                  $e770 23612D 23596
RSSB_Ret                       $e794 23629D 23617
RS_CHKIN                       $e795 23632D 25117
RSCI_10                        $e7aa 23645D 23647
RSCI_20                        $e7b8 23651D 23653
RSCI_30                        $e7bf 23654D 23660
RSCI_40                        $e7c5 23658D 23638  23640
RSCI_50                        $e7cc 23661D 23644
RS_Read                        $e7ce 23665D 24790
RSR_10                         $e7e4 23677D 23671
RS232_Stop                     $e7ec 23683D 22880  24105
RSS_10                         $e7f2 23689D 23691
RSS_20                         $e803 23696D 23688
RS_NMI_Main                    $e805 23700D 26764
RSNM_10                        $e82d 23721D 23718
RSNM_20                        $e830 23722D 23716  23720
RSNM_30                        $e836 23724D 23707
RSNM_40                        $e841 23729D 23726
RSNM_50                        $e849 23733D 23723  23728  23731
RS_Baud_NTSC                   $e850 23738D 25020  25021
RS_Baud_PAL                    $e864 23753D 25023  25024
RS_NMI_Get_Bit                 $e878 23768D 23719  23727
RS_NMI_Put_Bit                 $e8a9 23791D 23721  23732
TAPE_Find_Header               $e8d0 23839D 23857  23881  23978  24977
                                     25473
TAFH_10                        $e8ef 23859D 23853  23855
TAFH_20                        $e8fb 23866D 23870
TAFH_30                        $e909 23874D 23878
TAFH_40                        $e912 23880D 23876
TAFH_50                        $e916 23882D 23861
TAFH_60                        $e917 23883D 23851
TAFH_Ret                       $e918 23884D 23847
TAPE_Write_Program_Header      $e919 23887D 24985  25226  25889  25897
TWPH_10                        $e930 23903D 23905
TWPH_20                        $e954 23924D 23932
TWPH_30                        $e967 23933D 23926
TWPH_Ret                       $e97f 23947D 23892
TAPE_XY_Check                  $e980 23950D 23891  23962  24001  24962
                                     25212  25462  25878
TAPE_SAL_EAL                   $e987 23959D 23933  24048  24072
TAPE_Find_File                 $e99a 23975D 23989  24973  25469
TAFF_10                        $e9a7 23984D 23993
TAFF_20                        $e9bc 23994D 23985
TAFF_Ret                       $e9bd 23995D 23979
TAPE_Advance_BUFPT             $e9be 23998D 24840  24904
TAPE_Wait_for_Play             $e9c8 24008D 24054  24968  25464
TWFP_10                        $e9cf 24014D 24039
TWFP_20                        $e9d2 24015D 24017
TAPE_Play_Key                  $e9df 24022D 24011  24016  24036
TAPK_10                        $e9e7 24029D 24012  24027  24037
TAPE_Wait_For_Record           $e9e9 24033D 24085  24982  25880
TAPE_Read_Block                $e9f2 24042D 23844  24842
TAPE_Read                      $e9fb 24051D 25517
TAPE_Write_Buffer              $ea15 24069D 24906  25216
TAPE_Write_Program             $ea18 24075D 25891
TAPE_Write                     $ea1c 24082D 23936
TAWB_10                        $ea1f 24086D 24055
TAPE_Setup_IRQ                 $ea26 24092D 24066
TASI_10                        $ea74 24127D 24131
TASI_20                        $ea76 24128D 24129
TASI_30                        $ea7d 24133D 24139
TAPE_Stop_Key                  $ea8f 24142D 24015  24137
TASK_10                        $ea9b 24152D 24086  24136
TASK_Ret                       $eaa0 24154D 24147
TAPE_Set_Timer                 $eaa1 24157D 24281  24313  24329  24357
TASS_10                        $eab6 24173D 24171
TASS_20                        $eabd 24178D 24180
TASS_30                        $eae9 24197D 24191
TAPE_IRQ_Read                  $eaeb 24201D 24209  24715
TIR_10                         $eb28 24233D 24231
TIR_12                         $eb47 24249D 24234  24279
TIR_14                         $eb4a 24250D 24248  24283  24296
TIR_16                         $eb52 24254D 24239
TIR_18                         $eb56 24256D 24244  24321
TIR_20                         $eb58 24257D 24255
TIR_22                         $eb6b 24267D 24229  24251  24253  24298
                                     24300  24302
TIR_24                         $eb7b 24274D 24271
TIR_26                         $eb88 24280D 24309
TIR_28                         $eb91 24284D 24268  24273  24307
TIR_30                         $eb94 24285D 24265
TIR_32                         $eb9d 24290D 24287
TIR_34                         $eb9f 24291D 24286
TIR_36                         $ebb6 24303D 24278  24294
TIR_38                         $ebcf 24315D 24249
TIR_40                         $ebd7 24319D 24316
TIR_42                         $ebde 24322D 24318  24320
TIR_44                         $ec03 24341D 24332
TIR_46                         $ec12 24348D 24343
TIR_48                         $ec1c 24353D 24334
TIR_50                         $ec1f 24354D 24232
TIR_52                         $ec2f 24361D 24359
TIR_54                         $ec45 24372D 24365
TIR_56                         $ec49 24374D 24368  24371  24378  24380
                                     24391  24397  24400
TIR_58                         $ec4c 24375D 24363
TIR_60                         $ec62 24387D 24384
TIR_62                         $ec68 24390D 24376
TIR_64                         $ec79 24398D 24385  24387
TIR_66                         $ec7f 24401D 24375
TIR_68                         $ec8d 24407D 24402
TIR_70                         $ec95 24410D 24408
TIR_72                         $ecab 24421D 24414  24418
TIR_74                         $ecc8 24435D 24412
TIR_76                         $ecf0 24454D 24447
TIR_78                         $ecf4 24456D 24425
TIR_80                         $ecfb 24459D 24422  24434  24455
TIR_82                         $ed05 24464D 24437  24440  24443  24451
                                     24458  24460
TIR_84                         $ed0a 24466D 24409
TIR_86                         $ed0c 24467D 24406
TIR_88                         $ed1e 24476D 24474
TIR_90                         $ed2a 24482D 24477
TIR_92                         $ed34 24486D 24491
TIR_94                         $ed4e 24497D 24465  24479  24481  24494
STAL_To_SAL                    $ed51 24500D 24394  24483  24659  25820
TAPE_Init_Byte                 $ed5a 24510D 24121  24354  24600  24650
TAPE_Write_Bit                 $ed69 24523D 24582
TAPE_Write_1                   $ed70 24532D 24578
TAPE_Write_A                   $ed72 24538D 24529  24646
TAPE_Write_AX                  $ed74 24544D 24570
TAIW_00                        $ed8b 24558D 24615
TAPE_IRQ_Write                 $ed90 24563D 24713
TAIW_10                        $eda6 24576D 24567
TAIW_15                        $edb3 24582D 24577
TAIW_20                        $edcc 24594D 24560  24571  24574  24579
                                     24581  24583  24599  24612  24619
                                     24626
TAIW_25                        $edcf 24595D 24587
TAIW_30                        $edd9 24600D 24663
TAIW_35                        $edef 24611D 24609
TAIW_40                        $edf3 24613D 24603
TAIW_45                        $ee02 24620D 24614
TAIW_50                        $ee12 24627D 24598
TAIW_55                        $ee18 24630D 24639  24647  24649  24652
TAIW_60                        $ee1b 24631D 24575
TAIW_65                        $ee22 24634D 24632
TAPE_IRQ_Leader                $ee2e 24642D 24712
TAPE_Stop_IO                   $ee57 24666D 24148  24482  24695
TSIO_10                        $ee7f 24685D 24676  24678
TSIO_20                        $ee93 24692D 24688
TSIO_30                        $ee95 24695D 24658
TAPE_Switch_IRQ                $ee9b 24699D 24118  24638  24654
TAPE_IRQ_Table                 $eea8 24709D 24702  24704
TAPE_Stop_Motor                $eeb0 24718D 24633  24685
Check_IO_End                   $eeb7 24727D 24407  24490  24613  25824
Inc_SAL_Word                   $eec1 24738D 24464  24489  24625  25830
ISW_Ret                        $eec7 24744D 24742
TAPE_Sim_IRQ                   $eec8 24747D 24196
TAPE_Switch_Sense              $eed0 24757D 26775
TSS_10                         $eee0 24768D 24762
TSS_20                         $eee8 24772D 24767
TSS_Ret                        $eeea 24773D 24769
GETIN                          $eeeb 24776D 22396
GETIN_10                       $eef9 24787D 24780
GETIN_20                       $eefd 24789D 24867
GETIN_30                       $ef04 24792D 24783
BASIN                          $ef06 24796D 22393
BASIN_10                       $ef12 24805D 24812
BASIN_20                       $ef15 24807D 24788  24800
BASIN_30                       $ef22 24814D 24808
BASIN_40                       $ef3c 24826D 24823
BASIN_50                       $ef42 24830D 24822
BASIN_60                       $ef45 24833D 24819
TAPE_BASIN                     $ef48 24837D 24818  24821  24846
TABA_10                        $ef58 24848D 24841
TABA_Ret                       $ef5b 24850D 24843
IEC_BASIN                      $ef5c 24853D 24814
IEBA_10                        $ef63 24859D 24857  24873
IEBA_20                        $ef65 24860D 24868
IEBA_Ret                       $ef66 24861D 24870
RS232_BASIN                    $ef67 24864D 24816  24874
BSOUT                          $ef79 24877D 22394
BSOUT_10                       $ef84 24887D 24883
BSOUT_20                       $ef8a 24891D 24887
TAPE_RS232_BSOUT               $ef8c 24895D 25215
BSOUT_30                       $efa7 24913D 24905
BSOUT_40                       $efab 24915D 24925
BSOUT_50                       $efac 24916D 24907
BSOUT_60                       $efb6 24923D 24921
BSOUT_70                       $efb7 24924D 24903
OPEN                           $efbd 24928D 22388
OPEN_10                        $efee 24953D 24946  24951
OPEN_20                        $eff0 24955D 24936
OPEN_30                        $eff3 24956D 24933
TAPE_OPEN                      $eff6 24959D 24949
TAOP_10                        $effe 24965D 24963
TAOP_20                        $f017 24976D 24980
TAOP_30                        $f01a 24977D 24972
TAOP_40                        $f023 24982D 24967
TAOP_50                        $f02d 24986D 24974  24978
TAOP_60                        $f03c 24994D 24989
TAOP_Ret                       $f03f 24996D 24969  24975  24979  24983
RS_OPEN                        $f040 24999D 24948
RSOP_10                        $f046 25004D 25010
RSOP_20                        $f055 25011D 25005
RSOP_30                        $f072 25023D 25019
RSOP_40                        $f078 25025D 25022
RSOP_50                        $f07e 25027D 25015
RSOP_60                        $f0a3 25046D 25041  25043
RS_Init_CIA                    $f0b0 25053D 25002  25207
IEC_OPEN                       $f0cb 25069D 24952  25387  25813
IEOP_10                        $f0d3 25076D 25073
IEOP_20                        $f0d5 25078D 25075
IEOP_30                        $f0ed 25089D 25083
IEOP_40                        $f0f2 25092D 25088
IEOP_50                        $f0f8 25096D 25100
IEOP_60                        $f103 25101D 25094
CHKIN                          $f106 25105D 22390
IEC_CHKIN                      $f11d 25120D 25116
CHKIN_10                       $f123 25126D 25111  25113  25141
CHKIN_20                       $f127 25130D 25114
CHKIN_30                       $f138 25138D 25135
CHKIN_40                       $f13b 25139D 25137
CHKERR_1                       $f140 25143D 25133  25177  25186
CHKERR_2                       $f143 25144D 25125
CHKERR_3                       $f146 25145D 25155  25165
CHKERR_4                       $f149 25146D 25109  25153
CKOUT                          $f14c 25149D 22391
CKOUT_10                       $f163 25163D 25160
CKOUT_20                       $f169 25166D 25157  25185
CKOUT_30                       $f16b 25167D 25194
IEC_CKOUT                      $f16d 25171D 25158
CKOUT_40                       $f17e 25182D 25179
CKOUT_50                       $f181 25183D 25181
CLOSE                          $f188 25189D 22389
CLOSE_10                       $f1a9 25209D 25204
CLOSE_20                       $f1c1 25222D 25217
CLOSE_30                       $f1cf 25228D 25202
CLOSE_40                       $f1e1 25237D 25229  25232
CLOSE_50                       $f1e4 25238D 25199  25201  25211  25224
                                     25227  25236
Remove_Filehandle              $f1e5 25241D 25206
ReFi_10                        $f200 25255D 25247
Lookup_X                       $f202 25259D 24932  25108  25152  26260
Lookup_A                       $f207 25267D 25193
LoUp_10                        $f209 25271D 25274
LoUp_Ret                       $f211 25275D 25272
Get_LASAFA                     $f212 25278D 25110  25154  25195  26243
CLALL                          $f222 25290D 22397
CLRCH                          $f226 25297D 22392
CLRCH_10                       $f22f 25304D 25302
CLRCH_20                       $f236 25307D 25305
CLOALL                         $f23d 25313D 26502  27732
CLOA_10                        $f248 25324D 25320
CLOA_20                        $f250 25328D 25325  25336
CLOA_30                        $f254 25330D 25333
CLOA_Ret                       $f264 25337D 25331
LOAD_AXY                       $f265 25340D 27779
LOADSP_MEM                     $f269 25351D 26614
D_LOADSP                       $f26c 25357D 22399
LOAD_10                        $f27b 25367D 25365
LOAD_20                        $f28e 25375D 25373
LOAD_30                        $f29b 25383D 25378
LOAD_40                        $f2cc 25406D 25401
LOAD_50                        $f2cf 25407D 25417  25437
LOAD_60                        $f2fb 25429D 25420
LOAD_70                        $f2fe 25430D 25425  25428
LOAD_80                        $f30a 25436D 25431
Err_File_Not_Found             $f317 25442D 25399  25472  25475
Err_Missing_File_Name          $f31a 25445D 25374
Err_Illegal_Device_Number      $f31d 25448D 25461  25463
Err_Break_IO                   $f320 25451D 25435  25511
Stop_Load                      $f323 25454D 25411
TAPE_LOAD                      $f326 25457D 25366
TALO_10                        $f337 25467D 25483
TALO_20                        $f344 25473D 25468
TALO_30                        $f34b 25476D 25470
TALO_40                        $f35a 25484D 25492
TALO_50                        $f367 25491D 25481
TALO_60                        $f36b 25493D 25490
LOAD_Done                      $f39b 25519D 25379  25440
LOAD_Ret                       $f3a0 25522D 25465  25471  25474  25479
                                     25531
BURST_LOAD                     $f3a1 25525D 25377
BULO_10                        $f3c7 25545D 25540
BULO_15                        $f3c9 25546D 25549
BULO_20                        $f3d2 25550D 25554
BULO_25                        $f3ea 25561D 25557
BULO_30                        $f40a 25575D 25570
BULO_35                        $f41a 25582D 25577
BULO_40                        $f421 25586D 25581  25583
BULO_45                        $f440 25599D 25594
BULO_50                        $f454 25609D 25624
BULO_55                        $f46e 25621D 25616
BULO_60                        $f477 25626D 25618
BULO_65                        $f47f 25629D 25605
BULO_Close                     $f48c 25636D 25541  25558  25571  25653
                                     25664  25675
BULO_Err                       $f498 25648D 25585  25619
BULO_Stop                      $f4a6 25661D 25611
BULO_Break                     $f4b2 25672D 25613  25631
Read_Burst_Byte                $f4ba 25681D 25568  25579  25588  25591
                                     25614  25627
RBB_10                         $f4bc 25685D 25686
Read_Burst_Block               $f4c5 25691D 25612  25630  25721
RBBl_10                        $f4c7 25695D 25696
RBBl_20                        $f4ee 25713D 25704
RBBl_30                        $f4f1 25714D 25709  25712
RBBl_40                        $f4fd 25720D 25715
RBBl_Ret                       $f502 25723D 25719
Toggle_CLOCK_OUT               $f503 25726D 25567  25578  25587  25590
                                     25606  25621  25626  25629
Burst_Load_Command             $f50c 25735D 25546
Searching                      $f50f 25742D 24970  25376  25466
Ouput_Filename                 $f521 25755D 25872
OuFi_10                        $f527 25761D 25765
OuFi_Ret                       $f532 25766D 25746  25750  25759
Loading_Verifying              $f533 25769D 25516  25586  26941
LoVe_10                        $f53b 25776D 25774
SAVESP                         $f53e 25779D 27780
D_SAVE                         $f54e 25796D 22400
DSAV_10                        $f558 25805D 25879
DSAV_20                        $f55b 25806D 25810
DSAV_30                        $f561 25809D 25803
DSAV_40                        $f586 25824D 25831
DSAV_50                        $f59b 25832D 25825
IEC_Close                      $f59e 25835D 25237  25439  25859
IEC_Unlisten                   $f5b0 25848D 25101
IEC_Ret                        $f5b3 25852D 25839
Err_IEC_Close                  $f5b5 25856D 25454  25669  25829
Saving                         $f5bc 25865D 25814  25882
TAPE_SAVE                      $f5c8 25875D 25801
TASA_10                        $f5df 25888D 25886
TASA_20                        $f5f6 25899D 25895
TASA_Ret                       $f5f7 25900D 25869  25881  25890  25892
UDTIM                          $f5f8 25903D 25936  26774  27786
UDTIM_10                       $f602 25911D 25907  25909
UDTIM_20                       $f619 25923D 25918
UDTIM_30                       $f626 25928D 25926
UDTIM_40                       $f629 25929D 25924
Check_STOP_Key                 $f63d 25939D 22320  24138  25609  25931
                                     25933  25944  26756
Bf64d                          $f64d 25949D 25951
Bf65b                          $f65b 25955D 25946
Bf65d                          $f65d 25956D 25954
RDTIM                          $f65e 25959D 27782
SETTIM                         $f665 25968D 27781
STOP                           $f66e 25979D 22395
STOP_Ret                       $f67b 25989D 25984
Too_Many_Files                 $f67c 25992D 24955
File_Open_Err                  $f67f 25999D 24956
File_Not_Open                  $f682 26006D 25146
File_Not_Found                 $f685 26013D 24976  25443  25574  25807
Device_Not_Present             $f688 26020D 25091  25143  25544
Not_Input_File                 $f68b 26027D 25144
Not_Output_File                $f68e 26034D 25145
Missing_File_Name              $f691 26041D 25446  25806
Illegal_Device_Number          $f694 26048D 24964  25449  25805
Break_IO                       $f697 26055D 25452  25678
Break_Ret                      $f6ad 26069D 26063
Message_Table                  $f6b0 26074D 26077  26079  26081  26083
                                     26085  26087  26089  26091  26093
                                     26095  26109
System_Message_Cond            $f71e 26099D 25776
System_Message                 $f722 26106D 23863  24014  24019  25748
                                     25752  25871  26064  26115
SyMe_10                        $f72f 26116D 26103
SETNAM                         $f731 26120D 26527  26537  26609  27771
SETLFS                         $f738 26129D 25535  26531  26541  27770
SETBNK                         $f73f 26138D 26523  26612  27742
READST                         $f744 26146D 27769
REAST_10                       $f755 26158D 26151
SETST                          $f757 26161D 23022  23056  24370  24404
                                     24457  24496  24825  25427  25633
                                     25652  25711
SETMSG                         $f75c 26169D 27756
SETTMO                         $f75f 26176D 27762
MEMTOP                         $f763 26183D 27759
SET_MEM_TOP                    $f76b 26194D 22425  26189
MEMBOT                         $f772 26202D 27760
SET_MEM_BOT                    $f77a 26213D 22428  26208
IOBASE                         $f781 26221D 27789
LKUPSA                         $f786 26229D 27738
LKSA_10                        $f789 26239D 26242
LKSA_20                        $f791 26243D 26261
LKSA_30                        $f79b 26249D 26240  26262
LKUPLA                         $f79d 26253D 27737
Get_Filename_Char              $f7ae 26272D 23927  23986  25006  25096
                                     25529  25550  25761
STA_IND_SAL                    $f7bc 26283D 24463  26692
STA_IND_EAL                    $f7bf 26290D 25429  25713
LDA_IND_EAL                    $f7c9 26299D 25423  25707
LDA_IND_SAL                    $f7cc 26306D 24416  24449  24486  24621
                                     25826
INDFET                         $f7d0 26313D 22710  22718  26278  27746
INDSTA                         $f7da 26322D 26296  27747
INDCMP                         $f7e3 26332D 27748
GETCFG                         $f7ec 26342D 27743
Bank_Config_Table              $f7f0 26349D 22253  22255  22257  26266
                                     26317  26326  26336  26345
ROM_FETCH                      $f800 26381D 22467
ROM_STASH                      $f80d 26392
ROM_CMPARE                     $f81c 26405
ROM_JSRFAR                     $f82b 26418
ROM_JMPFAR                     $f841 26435
JMPF_10                        $f843 26439D 26443
ROM_DMA                        $f85a 26453D 22475
PHOENIX                        $f867 26465D 27736
PHOE_10                        $f86d 26474D 26485
PHOE_20                        $f886 26484D 26476
BOOT                           $f890 26491D 27735
BOOT_10                        $f8a1 26508D 26509  26511
BOOT_15                        $f8a9 26514D 26517
BOOT_20                        $f8eb 26544D 26533  26553
BOOT_25                        $f8ee 26545D 26543
BOOT_30                        $f8fb 26551D 26556
BOOT_35                        $f915 26560D 26564
BOOT_40                        $f91f 26565D 26569
BOOT_45                        $f92a 26571D 26566
BOOT_50                        $f938 26577D 26582
BOOT_55                        $f945 26584D 26578
BOOT_60                        $f94b 26588D 26591
BOOT_65                        $f97e 26615D 26603
BOOT_Exit                      $f98b 26624D 26544  26584
BOEx_10                        $f9a7 26640D 26635
Read_Next_Block                $f9b3 26649D 26580
NeBl_10                        $f9be 26666D 26663
IEC_Read_Block                 $f9d5 26677D 26549
ReBl_10                        $f9dc 26683D 26686
ReBl_20                        $f9ef 26691D 26694
Format_Byte                    $f9fb 26698D 26668  26672
FoBy_10                        $f9fe 26707D 26710
FoBy_20                        $fa05 26711D 26708
BootComm                       $fa08 26714D 26514
InitDrive                      $fa15 26715D 26525  26526
Hash                           $fa16 26716D 26535  26536
PRIMM                          $fa17 26719D 26557  26572  27749
PRIMM_10                       $fa1e 26728D 26739
PRIMM_20                       $fa27 26732D 26730
PRIMM_30                       $fa3a 26740D 26737
NMI_Normal                     $fa40 26748D 22387
NMI_10                         $fa5f 26764D 26755  26758
IRQ_Normal                     $fa65 26768D 22385  24714
IRQN_10                        $fa7d 26781D 26773  26779
Keytab_Normal                  $fa80 26784D 19609  19613  26993
Keytab_Shifted                 $fad9 26812D 19610
Keytab_CBM                     $fb32 26840D 19611
Keytab_Control                 $fb8b 26868D 19612  27542
Keytab_Capslock                $fbe4 26896D 19614
Set_CRSW                       $fc40 26924D 24809
EA_to_SA                       $fc4a 26934D 25406
Init_RS232                     $fc55 26944D 22536
VDC_Program_Mod                $fc67 26956D 22559
Edit_Patch_DIN                 $fc80 26969D 19632
K_Scan_Keyboard                $fc87 26977D 19520  19692  19869
KEY_10                         $fc9f 26992D 26984
KEY_20                         $fcaa 26998D 26990
KEY_30                         $fcb0 27001D 27004
KEY_40                         $fcc3 27012D 26981  26987  26994
Check_DIN                      $fcc6 27015D 20578
CDIN_10                        $fcd8 27026D 27033
CDIN_20                        $fce9 27036D 27031
CDIN_30                        $fcf1 27042D 27023
CDIN_40                        $fcf3 27043D 27046
CDIN_50                        $fcfb 27047D 27044
CDIN_60                        $fd14 27059D 27040  27052  27061
CDIN_70                        $fd15 27060D 27054
CDIN_80                        $fd1a 27062D 27058
CDIN_90                        $fd22 27066D 27020  27022  27049
DIN_Normal                     $fd29 27071D 26986  27019  27539  27543
                                     27544
DIN_Shift                      $fd82 27226D 27540
DIN_CBM                        $fddb 27381D 27541
DIN_Key_Tables                 $fe34 27536D 26988  26989
Accent_Key                     $fe40 27547D 27043
Accent_Index                   $fe45 27570D 27024  27029
Accent_Vocals                  $fe4b 27602D 27032
Accent_Codes                   $fe66 27626D 27035
DIN_or_ASCII                   $fe81 27657D 19689
MMU_CR                         $ff00 27670D  1747   1748   1751   1752
                                     12351  12374  15258  17196  17659
                                     22309  22445  22646  22656  26384
                                     26385  26388  26396  26397  26401
                                     26409  26410  26414  26431  26446
                                     26458  26460  26461  27688  27691
                                     27703  27706  27714  27727
MMU_LCRA                       $ff01 27671D  1937   1956   1984   1993
MMU_LCRB                       $ff02 27672D  1966   1975
MMU_LCRC                       $ff03 27673D  1940   1958   1986   1995
                                      3150   3513   4915   5989   6112
                                      6363   6428   6462   6659   6703
                                      6751   6778   6818   6837   6853
                                      7121   7188   7233   7973   7981
                                      9202   9766   9771  13741  14259
                                     14608  14617  14669  14894  14899
                                     16578  16991  17153
MMU_LCRD                       $ff04 27674D  1968   1977   4222   4231
                                      4348   4361   4907   6460   6749
                                      6776  10038  10208  10658  10702
                                     11350  11378  11415  11624  11770
                                     13788  13829  14224  17069  17091
                                     17147
NMI                            $ff05 27679D 22450  22451  27792
IRQ                            $ff17 27695D 24754  27794
IRQ_10                         $ff30 27712D 27710
IRQ_Exit                       $ff33 27713D 24284  24314  24353  24374
                                     24497  24594  24630  24696  26765
                                     26781
RESET                          $ff3d 27723D 27793
K_SPINIO                       $ff47 27731
K_CLOALL                       $ff4a 27732D 16036
K_C64                          $ff4d 27733D  5239
K_DMA                          $ff50 27734D 17504
K_BOOT                         $ff53 27735D  8683
K_PHOENIX                      $ff56 27736D  1677
K_LKUPLA                       $ff59 27737D 16240
K_LKUPSA                       $ff5c 27738D 16010
K_SWAPPER                      $ff5f 27739D  7474   7487   7507   7512
                                      7522   7527   7621
K_DLCHR                        $ff62 27740
K_PFKEY                        $ff65 27741D  6251
K_SETBNK                       $ff68 27742D 13735  19405
K_GETCFG                       $ff6b 27743D 21809  26445
K_JSRFAR                       $ff6e 27744D  4970   8678  17919
K_JMPFAR                       $ff71 27745D 17912
K_INDFET                       $ff74 27746D  7746  10614  17797  22078
K_INDSTA                       $ff77 27747D 10632  17811  18021
K_INDCMP                       $ff7a 27748D 17825  18023
K_PRIMM                        $ff7d 27749D 13728  17643  17670  17688
                                     17740  17900  17942  18169  18358
                                     18422  18458  19031  19046
K_VERSION                      $ff80 27750
K_CINT                         $ff81 27751
K_IOINIT                       $ff84 27752
K_RAMTAS                       $ff87 27753
K_RESTOR                       $ff8a 27754
K_VECTOR                       $ff8d 27755
K_SETMSG                       $ff90 27756D  3206   5276  17681
K_SECND                        $ff93 27757
K_TKSA                         $ff96 27758
K_MEMTOP                       $ff99 27759
K_MEMBOT                       $ff9c 27760
K_KEY                          $ff9f 27761
K_SETTMO                       $ffa2 27762
K_ACPTR                        $ffa5 27763
K_CIOUT                        $ffa8 27764
K_UNTLK                        $ffab 27765
K_UNLSN                        $ffae 27766
K_LISTN                        $ffb1 27767
K_TALK                         $ffb4 27768
K_READST                       $ffb7 27769D 13672
K_SETLFS                       $ffba 27770D 13679  19413  19463
K_SETNAM                       $ffbd 27771D 13686  19459
K_OPEN                         $ffc0 27772D 13405  19414  19464  25537
                                     26532  26542
K_CLOSE                        $ffc3 27773D 13714  19441  25335  25643
                                     26632  26643
K_CHKIN                        $ffc6 27774D 13444  15925  17086  19428
                                     19467  26689
K_CKOUT                        $ffc9 27775D 13430  19417  25539  26634
                                     26681
K_CLRCH                        $ffcc 27776D  1650  13707  19425  19438
                                     19627  25555  25986  26060  26629
                                     26640  26687  26695
K_BASIN                        $ffcf 27777D 13693  17711  19430  19471
                                     19475  19488  26691
K_BSOUT                        $ffd2 27778D 10513  13700  17694  17928
                                     17953  18441  18486  18489  18586
                                     19001  19025  19040  19056  19059
                                     19266  19271  19277  19285  19292
                                     19383  19423  19431  19487  19492
                                     23867  25547  25551  25762  26068
                                     26112  26567  26637  26639  26684
                                     26738
K_LOADSP                       $ffd5 27779D 13495  16149  18163
K_SAVESP                       $ffd8 27780D 13467  18152
K_SETTIM                       $ffdb 27781D  4270
K_RDTIM                        $ffde 27782D  9724
K_STOP                         $ffe1 27783D 13749  17854  18011  18087
                                     18195  18424  19495  24145  25410
                                     25610  25828  26757
K_GETIN                        $ffe4 27784D  8739   8800   8960  13454
K_CLALL                        $ffe7 27785D 13721
K_UDTIM                        $ffea 27786
K_SCRORG                       $ffed 27787D  7101
K_PLOT                         $fff0 27788D 10401  13742
K_IOBASE                       $fff3 27789
V_LOCK                         $fff6 27790D 22653
V_SYSTEM                       $fff8 27791D 22629  22630  22649  22650
V_NMI                          $fffa 27792D 22457  22458
V_RESET                        $fffc 27793D 22690
V_IRQ                          $fffe 27794
INDEXA                         $0024   168D  1976y  2081   2205   2208
                                      2211y  2220   2221   2228y  2232y
                                      2240   2241   2243   2246y  3258
                                      3260   3285   3287   3294   3333
                                      3343   3349   3438   3439   3453
                                      3456y  3458   3460y  3461   3462
                                      3470   3471   3696   3702   3704
                                      3707   3798   3799   3803y  3805
                                      3807   3812y  4341   4342   4349y
                                      4352y  4354   4356   4362y  4365y
                                      4408   4409   4413   4414   4416
                                      5735   5737   5752   5754   5765y
                                      5796   5799   5935   5936   6247
                                      6365   6367   6417   6420   6423
                                      6425   6426   6448   6452   6461y
                                      6463   6465   7132   7134   9371
                                      9373   9425   9428   9442   9777
                                      9778   9971   9972   9996   9997
                                      9999  10000  10028  10029  10031
                                     10074  10084  10090  10242  10313
                                     10344  10535  10537  11452  11453
                                     11455  11707  11708  11762  11763
                                     11771y 11774y 11778  11779  11782
                                     11783  11810  11811  12320  12321
                                     12323y 12326y 12329y 12332y 12340y
                                     12349  12350  12539  12540  12542y
                                     12545y 12548y 12551y 12556y 12580
                                     12581  12584y 12587y 12590y 12595y
                                     12598y 12951  12953  13649  13650
                                     13771  13772  13776  13789y 13792y
                                     13891y 13936  15735  15737  15756
                                     15758  15759  15765y 15833  15836
                                     15840y 15843  16728  16730  16734
                                     16735  16984  16986
TXTPTR                         $003d   223D  1934   1936   1939y  1994y
                                      2094   2096   2156y  2166   2168
                                      2170   2173   2191y  2194y  2204
                                      2206   2212y  2226y  2748   2750
                                      2763   2765   2800   2801   2803
                                      2811   2812   3219   3220   3304y
                                      3389y  3966   3969   3988   3991
                                      4011   4012   4014   4116   4117
                                      4119   4148   4150   4714   4717
                                      4744   4745   4755   4767   4768
                                      4801   4802   4806   4809   4923
                                      4926   5168   5169   5184   5187
                                      5207   5210   5254   5255   5435
                                      5436   5466y  5469y  5523   5525
                                      5532   5534   5536   5538   5539
                                      5608y  5725   5727   5734   5736
                                      5822   5824   6041   6042   6044
                                      6060   6089   6170   6171   6173
                                      6214   6217   9185   9187   9209
                                      9211   9330   9332   9333   9391
                                      9393   9394   9520   9521   9533
                                      9534  11300  11302  11352  11354
                                     11357  11360  11374  11376  15788
                                     15789
FAC1_M1/FAC1_M2                $0064   346D  3074   3409   5465   5655
                                      5673   5709   5711   5840   5841
                                      6377   6402   6404   6750y  6777y
                                      6784   9438   9729   9787  10666y
                                     10733y 11149  11167  11169  11266
                                     11416y 11572  11591  11642  11991
                                     12002  12005  12037  12039  12046
                                     12057  12076  12078  12104  12267
                                     12473  12511  12526  12554  12594
                                     12683  12687  12728  12777  12778
                                     12779  12807  12993  13117  13119
                                     14227y 14861  14869  14879  14887
                                       347D  3075   3403   4268   5468
                                      5653   5671   5705   5708   6786
                                      9436   9726   9790  11153  11170
                                     11172  11267  11573  11592  11644
                                     11988  12004  12007  12034  12036
                                     12045  12058  12079  12081  12102
                                     12265  12476  12508  12528  12549
                                     12589  12685  12732  12808  12994
                                     13114  13116
LOWTR                          $0061   337D  2046   2074   3238   3261
                                      3266   3275   3278   3332   3336
                                      3372y  3374y  3377y  3380y  3382
                                      3384   3386   3390y  3653   3654
                                      3750   3751   5055   5057   5059
                                      5073   5119   5122   5182   5185
                                      5317   5318   5385   5386   5395
                                      5397   5887   5888   5901   5902
                                      5905   5908   5921   5923   9860
                                      9861   9876   9940   9941  10039y
                                     10042y 10045y 10048  10051  10073
                                     10077  10154  10155  10171  10175
                                     10209y 10214y 10223y 10235y 10238y
                                     10270  10272y 10275  10276y 10388
                                     10389  12859  12862  12869  12870
                                     12892  12922  13840  13843  13865y
                                     13868y 13883y 13983  13984  13987
                                     13988  15726  15736
M_Aval                         $0060   339D 17841  17849  17850  17851
                                     17875  17891  17988  17990  17993
                                     17994  17996  17997  17999  18000
                                     18014  18017  18022  18031  18033
                                     18067  18135  18144  18145  18193
                                     18251  18259  18329  18332  18417
                                     18891  18892  18893  18936  18942
                                     18943  18944  18956  18957  18959
                                     18960  18962  18963  18968  18969
                                     18971  18972  18974  18975  19114
                                     19116  19118  19127  19129  19130
                                     19132  19133  19135  19150  19152
                                     19153  19155  19156  19158  19217
                                     19218  19219  19240  19242  19244
                                     19247  19249  19251  19267  19272
                                     19273  19345  19347  19349  19395
                                     19400  19402  19411  19461  19472
                                     19476
LINNUM                         $0016   145D  2743   2745   3167   3170
                                      3376   3378   3400   3404   3661
                                      3670   3689   3690   3695   3700
                                      3705   3706   3708   3709   3710
                                      3711   3712   3714   3716   3739
                                      3741   4952   4954   5088   5090
                                      5103   5104   5109   5110   5162
                                      5164   5312   5313   5367   5368
                                      5381   5383   5391   5392   5455
                                      5462   5639   5643   5649   5652
                                      5654   5973   5974   6048  10605
                                     10607  10613  10617  10619  10629
                                     10693  10695  10701  10704  10707
                                     10709  11090  11092  11102  11105
                                     11108  11110  11889  11890  16771
                                     16772  16966  16968
FAC1_EX                        $0063   345D  3073   3083   3087   3595
                                      4062   4247   4336   4337   5844
                                      5864   6102   6108   6187   6376
                                      6393   6395   7358   9440   9472
                                      9781  11176  11179  11217  11574
                                     11604  11640  11883  11909  11950
                                     11953  11960  11972  12022  12049
                                     12053  12055  12181  12185  12342
                                     12375  12385  12392  12425  12465
                                     12466  12468  12557  12597  12615
                                     12632  12643  12664  12698  12724
                                     12757  12768  12793  12803  12913
                                     13027  13272  13308  13322  13323
                                     14106  14839  14864  14874  14884
                                     14890  14891
FORPNT                         $004b   266D  3521   3527   3760   3764
                                      3795   3821   3835   4198   4199
                                      4223y  4226y  4229   4230   4240
                                      4347   4351   4353   4355   4369y
                                      4711   4712   4875   4876   4998
                                      4999   5029   5030   5047   5487
                                      5489   5632   5634   5868   5870
                                      6793   6795   7737   7742   7747
                                      7748   8785   8789   8792y  8858y
                                      8877y  8884y  8911y  8978y  9003y
                                      9160   9161   9163y  9194   9196
                                      9200   9213   9214  13548  13570
                                     13576  13620  13627  13629  13638
                                     13639
FAC1_M4                        $0067   349D  2963   3038   3043   4182
                                      4225   4269   4293   4301   6791
                                      9218   9248   9432   9547   9632
                                      9646   9705   9727   9776   9796
                                     10137  10292  10314  11155  11166
                                     11168  11195  11479  11499  11501
                                     11563  11648  11663  11752  11848
                                     11888  11982  12008  12011  12028
                                     12030  12043  12060  12085  12087
                                     12098  12261  12482  12502  12532
                                     12543  12583  12696  12742  12804
                                     12810  13107  13110  14156  14820
                                     14826  14829  14835
INDEXB                         $0026   174D  1985y  2708   2710   2713y
                                      2715   2717   3190y  3262   3271
                                      3283   3291y  3295   5739   5741
                                      5775   5777   5778   5787y  5797
                                      5800   5889   5890   5903   5907
                                      5920y  6246   6820   6821   7243
                                      7246   7252y 10421  10423  10425
                                     10427  10559  10561  10564  10570
                                     10571  10648y 10660y 12714  12715
                                     12717y 12721y 12726y 12731y 12735y
                                     12741y 15739  15741  15760  15762
                                     15763  15834  15838  15844  15846
TEMP_A                         $0077   377D  4603   4724   5040   5060
                                      5444   5450   5541   6241   6248
                                      6277   6282   6315   6959   6961
                                      7235   7239   7242   7244   7258
                                      7261   7264   7271   7274   7276
                                      7278   7374   7381   7432   7436
                                      7439   7767   7796   7815   7839
                                      7887   7974   7978   8485   8488
                                      8492  14181  14237  14372  14409
                                     14496  14533  14555  14557  14598
                                     14650  14664  14718  15238  15241
                                     15247  15250  15614  15616
FAC1_M3                        $0066   348D  2039   2965   3035   3048
                                      4221   4267   4297   4300   6789
                                      9216   9247   9434   9550   9631
                                      9643   9708   9725   9775   9793
                                     10135  10288  10310  11151  11171
                                     11173  11194  11562  11647  11665
                                     11751  11846  11887  11985  12006
                                     12009  12031  12033  12044  12059
                                     12082  12084  12100  12263  12479
                                     12505  12530  12546  12586  12697
                                     12736  12809  13111  13113  14154
                                     14818  14824
ARYPNT                         $005a   317D  3319   3320   3348   3350
                                      3352   3358y  3362y  3364   5387
                                      5388   5396   5398   5638   5642
                                      5662   5680   5683   9950   9951
                                      9953   9954   9958   9959   9964
                                      9965   9981   9982   9985   9986
                                     10001  10003  10089  10091  10093
                                     10096y 10100y 10102  10245  10247
                                     10250  10262y 10264  10267  10331
                                     10334  10392  10393  13837  13855
                                     13858  13861  13924  16108  16109
                                     16110
KEYBOARD                       $0000    10D 19517  19629  19682  19866
                                     20575  22272  22275  22278  22281
                                     22284  22287  22290  26967  27074
                                     27099  27124  27149  27174  27199
                                     27229  27254  27279  27304  27329
                                     27354  27384  27409  27434  27459
                                     27484  27509  27550  27557  27557
                                     27557  27565  27565  27573  27581
                                     27589  27589  27597  27597  27605
                                     27612  27616  27616  27620  27620
                                     27629  27644  27648  27648  27652
                                     27652
STRNG2                         $0072   374D  4249   4252   4253   4261
                                      9531   9532   9652  10205  10218
                                     10240  10241  10258  10259  10265
                                     10283  10284  10304  10305  10315
                                     10318  10366  10367  10536  10539
                                     10541  10545y 10551y 10562  10563
                                     10590  10591  10596  10597  11607
                                     11611  13021  13090  13099  13136
                                     13146  13159  13344  13345  13358
                                     13359  13366y 13368  13372  13373
                                     13374  13376  13377  13382  13383
FNDPNT                         $003f   228D  2011   3507   3510   3518y
                                      3524y  3528y  3533y  3542   3543
                                      3545   3614   3616   3623   3625
                                      3987y  3990y  3993y  3995y  4883
                                      4886   4891y  4894y  4898y  4909
                                      4912   4919y  4922y  4925y  4928y
                                      4931y  5447   5448   5557   5559
                                      5561   5563   5572   5574   5575
                                      6213y  6216y  6219y  6221y 14161
                                     15799  15802  15807y 15818  15819
                                     15821  15864y 15869y 15873
FAC1_SI                        $0068   350D  3089   3095   4248   4892
                                      5838   7356   9419   9470   9785
                                     11175  11210  11881  11904  11906
                                     11955  12023  12068  12070  12334
                                     12365  12396  12399  12552  12592
                                     12612  12666  12700  12707  12722
                                     12744  12761  12775  12798  12799
                                     12911  13016  13020  13274  13276
                                     14037  14041  14072  14102
MODE_80                        $00d7   548D  1869   3184   5132   7401
                                      7471   7504   7519   7619   7647
                                      8611   8622  10756  10794  11133
                                     17846  17858  17894  17938  17955
                                     19635  19752  19758  19773  20179
                                     20265  20490  20630  20793  20913
                                     20924  21412  21422  21433  21447
                                     21503  21712  21915  21917  21924
                                     21942  21973  27053
M_Cval                         $0066   341D 17794  17795  17807  17809
                                     17821  17823  17987  17989  18003
                                     18151  18175  18176  18187  18330
                                     18333  18369  18372  18376  18499
                                     18503  18998  19002  19003  19115
                                     19117  19119  19128  19131  19134
                                     19188  19189  19191  19193  19201
                                     19203  19204  19206  19207  19209
                                     19317  19318  19319
HIGHTR/DESCA                   $005c   324D  2025   2032   3310   3311
                                      3331   3335   3341   3344   3346
                                      3363   5049   5069   5360   5361
                                      5380   5382   5408   5411   5459
                                      5463   5646   5650   5682   5684
                                      9944   9945  10013  10017  10021y
                                     10025y 10072  10076  10082  10085
                                     10087  10101    326D 14851  14866
                                     14876
Cursor_Row                     $00eb   571D 19730  19745  19924  19932
                                     19974  20052  20073  20079  20083
                                     20092  20098  20123  20893  20896
                                     20906  21031  21051  21059  21234
                                     21291  21301  21314  21340  21345
                                     21373  21521  21536  21596  21598
                                     21605  21608  21613  21652  21654
                                     21670  21781  21785  24803  26929
GRAPNT                         $008c   419D  6705y  6736y  7223   7226
                                      7228   7230   7232   7280y  7534
                                      7536   7537y  7540   9065y  9069y
                                      9087y  9089y  9129   9133   9147y
                                      9191   9192   9203y 15176y 15187y
                                     15200y 15225  15227  15239y 15242y
                                     15248y 15251y 15253  15256  15265y
                                     15295  15298  15300  15302  15304
DOSFLA                         $0080   397D  8663  14266  14283  14295
                                     14297  14334  14340  14383  14419
                                     14460  14518  14529  14554  14565
                                     14582  15891  15897  15975  16024
                                     16274  16289  16292  16294  16419
                                     16439  16584  16585  16651  16652
                                     16724  16726  16780  16943  17013
                                     17017  17035  17044  17054
E_Beg                          $00da   552D 20183  20187  20191y 20212
                                     20217  20221  20222  20224  20225
                                     20228  20239  20244  21090  21102
                                     21109  21552  21569  21575  21805
                                     21813  21819  21825  21828  21840
                                     21852  21855  21953  21957  22067
                                     22068  22077  22088  22090  22092
                                     22093
GRAPHM                         $00d8   550D  3186   6708   6715   6725
                                      6755   6769   6860   6880   6890
                                      6940   7099   7135   7166   7255
                                      7311   7573   7605   7614   7617
                                      7649   7651   8698   8745  10750
                                     15178  15231  15309  15334  15569
                                     19634  19792  19800  19802  19817
                                     19858
CURLIN                         $003b   217D  2794   2797   2922   2923
                                      3157   3200   3216   3996   4110
                                      4113   4929   4932   5161   5163
                                      5213   5216   5258   5259   5633
                                      5635   5828   5831   6035   6038
                                      6058   6091   6164   6167   6203
                                      6204   6222  12986  12987  17182
TOS                            $007d   383D  3558   3559   3560   3563
                                      3567   3613   3615   3624   3626
                                      3635   3636   3638   3918   3919
                                      5208y  5211y  5214y  5217y  5220y
                                      5823y  5827y  5830y  5833y  5845y
                                      5863y  5869y  5872y  5875y  6115y
                                      6118y  6121y  6124y  6127
GRBPNT                         $0050   281D  2004   2067  11316  11317
                                     11325  11327  11332  11334  11367
                                     11369  11380y 13244  13245  13250
                                     13251  13260  13261  13841  13844
                                     13895  13896  13969  13970  13973
                                     13974  14065  14066  14075  14076
                                     15747  15750  15752  15754
FROUND                         $0071   370D  9782  10508  10509  10514
                                     11177  11927  11963  11967  11979
                                     12010  12012  12027  12042  12061
                                     12088  12090  12091  12120  12139
                                     12259  12304  12523  12558  12599
                                     12618  12636  12645  12699  12740
                                     12797  13302  13328
B_COUNT                        $000d    76D  2154   2182   2223   2237
                                      2248   2249   3033   3036   3039
                                      3044   3046   3049   3051   3232
                                      3241   3312   3387   4992   5002
                                      5012   5013   5743   5760   5784
                                     10140  10142  10195  10219  10243
                                     10281  10316  10385
E_Attribute                    $00f1   578D  7404   7407   8713   8716
                                      8729  10793  20271  20330  20492
                                     20494  20651  20714  20716  20795
                                     20797  20800  20919  20921  20931
                                     20933  20982  20984  20991  20993
                                     21000  21002  21009  21011  21678
                                     21688  21955
SYNTMP                         $0079   379D  3104   3106   3660   3662
                                      3669   3671   6290   6296   6320
                                      9599   9601  10008  10012  10194
                                     10196  10290  10293  10298  10299
                                     11433  11435  11467  11470  11493
                                     11496  11675  11678  12932  12938
                                     14878  14882
STRPTR                         $0070   365D  2053   2060   4330   4331
                                      4333   4334   9176   9177   9471
                                      9638  10504  10511  11589  11590
                                     11606  11608  11649  11670  11672
                                     11687  11688  11908  11970  12335
                                     12366  12395  12423  12447  12912
                                     13335  14032
SA                             $00b9   517D 18101  18150  18178  24940
                                     24942  24965  24987  25072  25084
                                     25123  25134  25163  25178  25209
                                     25222  25233  25284  25370  25386
                                     25390  25491  25666  25812  25817
                                     25838  25842  25884  25893  26134
                                     26246
PTR_LO                         $009e   472D 22701  22709  22717  22723
                                     23608  23890  23906  23923  23924
                                     23930  23983  23990  23992  24061
                                     24424  24426  24433  24436  24478
                                     24898  24913  24920  25371  25400
                                     25593  26571  26585  26595  26601
                                     26607
FRETOP                         $0035   203D  3580   3583   3601   3604
                                      3914   3915   4286   4291   4399
                                      4402   6369   6372  10501  10520
                                     10523  11786  11788  11792  11793
                                     11795  11796  11798  13765  13768
                                     13795  13796  13915  13918  13959
                                     13960
STATUS                         $0090   434D 18106  18164  19434  19473
                                     19477  19490  23104  23134  24046
                                     24856  25079  25082  25087  25132
                                     25140  25176  25184  25263  25362
                                     25396  25408  25409  25414  25436
                                     25477  26158  26164  26165
VTEMPA                         $008e   420D  6672   6677   6692   6693
                                      6723   6737   6743   6761   8837
                                      8861   8865   8866   8868   8870
                                      8874   8971   8975   8977y  9043
                                      9046   9053   9058  14956  14963
                                     15463  15464  15475  15476
Cursor_Col                     $00ec   572D 19738  19933  19977  20642
                                     20677  20707  21057  21073  21081
                                     21088  21154  21159  21233  21502
                                     21588  21611  21630  21638  21646
                                     21659  21668  21706  21778  21789
                                     21929  21948  24801
FACTPB/TMPVAR                  $005e   334D  5075y 12565  13385  13386
                                     13830y 13833y 13949y 13952y 13997
                                     14000  14005  14006  14008  18351
                                       335D  9654  10356  10377  12831
                                     12874  12894  13044  13059  13065
                                     13074  13086  13141
R8502                          $0001    39D  7551   7554   7560  15260
                                     15263  15267  19624  19626  19806
                                     19826  19851  20389  22522  22673
                                     24026  24028  24122  24124  24552
                                     24554  24721  24723  24760  24765
                                     24770  24772  27660
TAPE1                          $00b2   508D 22414  22415  23849y 23866y
                                     23903y 23907y 23910y 23913y 23916y
                                     23919y 23929y 23953  23954  23988y
                                     24848y 24910y 24914y 24992y 25485y
                                     25488y 25494y 25496y 25499y 25501
DS_LEN                         $007a   380D  3906   4317   9687  17061
                                     17064  17070  17073  17143  17154
                                     17710  18117  18130  18267  18857
                                     18867  18912  19089  19096  19103
                                     19407  19419  19420  19450  19457
RS_Parity                      $00bd   521D 23372  23373  23393  23404
                                     23426  24349  24383  24417  24450
                                     24462  24493  24526  24588  24590
                                     24595  24611  24618  24622  24629
                                     25421  25424  25705  25708
PTR_HI                         $009f   473D 18283  18321  18396  18404
                                     22705  22724  23921  23928  23931
                                     23981  23987  23991  24062  24435
                                     24444  24445  25375  25383  25553
                                     25561  26504  26588  26602
TXTTAB                         $002d   187D  1741   1742   3436   3437
                                      3645   3646   3875y  3877y  3879
                                      3883   3964   3967   5178   5179
                                      5326   5327  13465  13493  13494
                                     15772  15774  15849  15851
RUNMOD                         $007f   384D  2733   2778   2787   2824
                                      2919   3154   3208   4103   5188
                                      5247   5266   5286   6157  11253
                                     11275  13506  13520  15780  16181
                                     16204  17120  17187
M_Bval                         $0063   340D 17992  17995  17998  18278
                                     18287  18320  18326  18575  18577
                                     18580  18581  19166  19168  19169
                                     19171  19172  19174  19248  19250
                                     19252  19470  19479
VARNAM                         $0047   254D  9633   9634   9816   9844
                                      9845   9850   9867   9871   9927
                                      9928  10037  10041  10119  10121
                                     10125  10127  10163  10166  10207
                                     10213  10320  10323
STREND                         $0033   199D  3924   3925   6364   6366
                                      6418   6421   9942   9943   9966
                                      9968  10069  10070  10156  10158
                                     10255  10256  10269  10273  10521
                                     10524  13779  13782
BANK                           $0002    43D  3505   3515   3534   4957
                                      8673  17646  17669  17691  17698
                                     19222  21808  22410  22636  22639
                                     22678  22682  22707  22708  22716
                                     26444  26482  26618
MEMUSS                         $00c3   528D 22368  22369  22373y 22376y
                                     22618  22619  22620  22631  22632
                                     25347  25348  25402  25404  25486
                                     25489  25505  25508  25512  25514
                                     25595  25596
FA                             $00ba   518D 13659  18100  18136  24944
                                     25080  25198  25230  25286  25318
                                     25328  25363  25388  25532  25799
                                     25815  25840  26133  26149  26500
                                     26530  26540
TENEXP                         $0060   336D  5051   5061   5063   9650
                                     12866  12872  12875  12880  12885
                                     12918  12928  12941  13085  13168
                                     13173  13890  14854  14858  14863
                                     14870  14880
QUOTE                          $0022    28D  3767   4048   4121   4153
                                      4651   4760   5491   5495   6147
                                      6302   6311   9513  11581  11601
                                     16464  16617  18115  18121  20000
                                     20005  22221
FNLEN                          $00b7   515D 18104  18124  19403  23925
                                     23984  24971  25004  25074  25093
                                     25099  25372  25384  25467  25536
                                     25562  25749  25758  25764  25809
                                     26123
EAH                            $00af   499D 23897  23918  23941  23971
                                     24734  25395  25405  25432  25433
                                     25509  25521  25592  25598  25600
                                     25716  25717  25787  26577  26579
                                     26938
VALTYP                         $000f    89D  3070   4204   4467   4750
                                      5000   6662   9226   9311   9366
                                      9388   9486   9635   9822   9836
                                     10114  10147  11265  11542  11651
                                     14184
CHARAC                         $0009    53D  3037   3050   3694   3713
                                      4036   4040   4041   4757   4759
                                      4763  11582  11597  12805  13255
                                     13313  17679  17910  21138  21139
                                     26429
EAL                            $00ae   498D 23899  23915  23939  23967
                                     24732  25393  25403  25430  25506
                                     25520  25589  25597  25599  25714
                                     25786  26293  26302  26575  26937
K_VERCK                        $0093   438D 17760  17975  17984  18019
                                     18075  18082  18146  18157  18167
                                     23842  23846  24047  24413  24446
                                     24459  25360  25419  25703  25773
CHANNL                         $0015   137D  1656   1705   3183   4439
                                      4483   4492   4572   4614   4622
                                      4633   4641   4644   4666   4675
                                      4684   4740   4788   4792   4828
Margin_Right                   $00e7   565D 11128  20050  20195  20231
                                     20273  20301  20337  21049  21075
                                     21080  21247  21610  21631  21658
                                     21660  21742  21773  24810
Margin_Left                    $00e6   564D 11130  19737  19921  20097
                                     20147  20257  20706  21260  21316
                                     21327  21342  21587  21616  21634
                                     21649  21743  21771  21790
Margin_Top                     $00e5   563D 11126  19729  20078  20114
                                     20120  20127  20132  20892  21259
                                     21289  21292  21300  21303  21372
                                     21651  21739  21763  21786
PNT                            $00e0   557D 19669  19755  19764  19770
                                     19772  20192y 20270y 20288  20292
                                     20644y 21507y 21714y 21901  21904
                                     21928  21931  22036  22039
CMP1                           $00b1   503D 24160  24167  24168  24173
                                     24175  24181  24210  24219  24220
                                     24222  24224  24228  24238  24243
                                     24247  24259  24322  24325
DS_ADR                         $007b   381D  4310   4315   4404   4406
                                      9666   9675   9744   9754  16184
                                     16209  17066  17067  17071y 17074y
                                     17094y 17103y 17148y 17151
KEYSIZ                         $0078   378D  5034   5056   5067   5072
                                      6276   6307   7976   7977   7983
                                     14193  14208  14268  14331  14385
                                     14397  14403  14417  14511
FRESPC                         $0037   207D  9677y 11625y 11719y 11729
                                     11730  11732  13784  13785  13793
                                     13794  13842  13845  13872  13873
                                     13905  13906  13957  13958
CR                             $000d    20D  3485   4490   4563   8741
                                      8962  17092  17127  17716  18423
                                     19032  19039  19047  19432  19913
                                     19950  19957  20679  24859
JIFFY_CLOCK                    $00a0   483D 23872  23877  25906  25908
                                     25910  25912  25914  25916  25920
                                     25921  25922  25963  25964  25965
                                     25972  25973  25974
FAC2_M3                        $006d   359D  3076   3079   5601   5614
                                      5744   5763   5786   9465  12032
                                     12292  12327  12358  12478  12494
                                     12504  12506
RS_Count                       $00b4   509D 23364  23374  23396  23399
                                     23401  23411  23429  24059  24250
                                     24267  24306  24317  24331  24340
                                     24345
FAC2_EX                        $006a   356D  3064   3065   9459  11929
                                     11930  11973  11975  12341  12372
                                     12382  12614  12633  13241  13321
                                     13324
VARPNT                         $0049   260D 10054  10055  10332  10335
                                     10337  11296  11298  11337  11342
                                     11344  11349  11361  11363  13135
                                     13147
ENDCHR                         $000a    62D  3040   3045   3688   3692
                                      4038   4039   4042   4045   4766
                                      5152   5365   5970  11583  11599
SHFLAG                         $00d3   544D 20394  20412  20434  20435
                                     20450  20452  20456  20457  20477
                                     20574  26982  27066  27665
RSI_Parity                     $00ab   494D 23486  23487  23517  23542
                                     23935  24079  24396  24485  24487
                                     24488  24492  24651  24656
CNTDN                          $00a5   487D 22973  22993  23033  23051
                                     23057  24602  24606  24661  25580
                                     25608  25623  25628  25720
DSCPNT                         $0052   285D  2018   4328   4329   4339
                                      4340  11445  11446  11518  11520
                                     11564  11565  11683  11684
CurLst_Row                     $00e8   567D 19731  19922  20090  20094
                                     20124  20126  20884  21281  21305
                                     21371  21782  24804
E_End                          $00dc   553D 20182  20190  20193y 21804
                                     21814  21817  21818  21829  21837
                                     21839  21848  21851
SAH                            $00ad   497D  8676  24427  24441  24504
                                     24616  24733  24743  25602  25822
                                     26548  26581  26940
SAL                            $00ac   496D  8674  24429  24438  24506
                                     24731  24741  25601  26286  26309
                                     26547  26561  26939
RSI_In_Bit                     $00a7   490D 23485  23488  23493  23513
                                     23541  23773  24360  24381  24410
                                     24476  24635  24648
FAC2_SI                        $006f   361D  3060   9469  11907  11954
                                     12333  12336  12364  12367  12606
                                     12910  13247  14027
FACTPA                         $0059   312D  3589  12572  13347  13350
                                     13351  14068  14069  14842  14849
                                     14852  15415  15420
Margin_Bottom                  $00e4   562D 11124  19721  20053  20074
                                     20095  20118  20148  21246  21346
                                     21738  21765
USER                           $00e2   558D 19771  19780  20194y 20272y
                                     20318  20321  20649y 21505y 21716y
                                     22052  22055
NDX                            $00d0   541D  3423  18381  19636  19897
                                     19899  19907  20562  20590  20595
                                     24781  25987
RS_Out                         $00b6   511D 23367  23434  24352  24379
                                     24420  24421  24453  24454  24559
                                     24573  24662
CMP0                           $00b0   502D 24060  24161  24165  24170
                                     24225  24237  24242  24246  24288
                                     24290  24326
RSI_Data                       $00aa   493D 23489  23528  23558  24058
                                     24362  24373  24389  24390  24393
                                     24399  24467
FAC2_M4                        $006e   360D  3077   3080   9467  12029
                                     12289  12324  12355  12481  12493
                                     12501  12503
FAC2_M1                        $006b   357D  3062   3063   9461  12038
                                     12298  12338  12369  12472  12496
                                     12510  12512
GARBFL                         $0011   110D  3761   3769   3771   3788
                                      9748   9751   9752   9757  13761
                                     13798  13802
DATAX                          $00ef   576D 19962  19964  19965  19987
                                     19992  20012  20664  20678  20780
                                     21174
STAH                           $00c2   527D 23893  23912  23945  23969
                                     24503  25515  25792  26505  26660
                                     26666
STAL                           $00c1   526D 23895  23909  23943  23964
                                     24505  25513  25790  26507  26665
                                     26671
RSI_Start                      $00a9   492D 23480  23507  23515  24254
                                     24256  24297  24351  24519  24576
                                     24580
RSI_Count                      $00a8   491D 23482  23492  23498  23807
                                     24252  24335  24350  24517  24566
                                     24572
R2D2                           $00a3   485D 22890  22893  22938  24233
                                     24277  24308  24319  24514  24596
                                     24597
DFLTN                          $0099   455D 19952  22541  23635  24779
                                     24799  25126  25304  25309  25324
                                     25327
COLSEL                         $0083   411D  6355   6883   7066   7164
                                      7259  15181  15189  15209  15228
                                     15572
DOSFLB                         $0081   405D  8669  16087  16420  16435
                                     16440  16560  16561  16703  16704
                                     16788
AUTINC                         $0074   375D  1710   1711   3397   3398
                                      3402   3405   5089   5091   5268
                                      5269
DATPTR                         $0043   238D  4694   4695   4820   4821
                                      5331   5332  15775  15777  15855
                                     15857
ARYTAB                         $0031   195D  3922   3923   9862   9864
                                      9938   9939   9956   9957  10152
                                     10153
PC_HI                          $0003    47D  4955   8677  17649  17667
                                     17695  19221  22726  26439  26479
                                     26616
Scroll_Locked                  $00f8   585D 20055  20063  20076  20138
                                     21293  21296  21299  21390  21559
INSRT                          $00f5   582D 20015  20034  20036  20042
                                     20718  20773  20838  21037  21039
E_Row                          $00df   555D 20128  20130  21020  21032
                                     21058  21360  21671  21857  21863
KEYTAB                         $00cc   537D 20406  20408  20427y 20517
                                     20519  20526y 26998  26999  27001
FSBLK                          $00be   522D 24120  24358  24366  24472
                                     24475  24480  24607  24631  24657
BSOUR1                         $00a4   486D 23077  23095  23108  24262
                                     24264  24275  24516  24584  24586
DFLTO                          $009a   465D 19954  22543  23566  24881
                                     25166  25301  25307  25319  25322
LDTND                          $0098   451D 24934  24937  25245  25246
                                     25248  25270  25294  25329  26238
FAC2_M2                        $006c   358D  9463  12035  12295  12330
                                     12361  12475  12495  12507  12509
TEMPPT                         $0018   150D  1738   3938  10464  11635
                                     11636  11656  11823  13822  13943
QTSW                           $00f4   581D 19917  19969  20002  20004
                                     20017  20720  20777  20829
CRSW                           $00d6   547D 19638  19915  19944  19949
                                     19980  20672  26927  26928
KYNDX                          $00d1   542D 19637  19881  19885  19908
                                     20601  22232  22235  24782
FG_COL                         $0086   414D  1731   7161   7176   7181
                                      7211   7387   7427  10785
MVDFLG                         $0076   376D  1709  15719  15733  15783
                                     15828  15832  15865  15880
OP_TMP                         $004f   275D  3071   9344   9354   9355
                                      9357   9361   9396   9411
MEMSIZ                         $0039   211D  1753   1754   3912   3913
                                      4393   4396  13838  13839
VARTAB                         $002f   191D  1745   1746   3920   3921
                                      4294   4298   9858   9859
FAC3_M4                        $002b   181D 10354  10374  12258  12288
                                     12290  12303  12487  12531
FAC3_M3                        $002a   180D 10327  10346  10371  12257
                                     12291  12293  12302  12529
INTFLG                         $0010    95D  4202   4779   5010   9695
                                      9823   9843  10112  10149
DATA                           $00c5   530D 24266  24293  24310  24605
                                     24617  24623  24624
LA                             $00b8   516D 24931  24938  25282  25538
                                     25641  26132  26245
RS_Next                        $00b5   510D 23378  23427  23710  24342
                                     24364  24377  24401
PRTY                           $009b   468D 24282  24304  24305  24518
                                     24592  24593  24627
INPPTR                         $0045   244D  4705   4706   4716   4807
                                      4816   4817   4825
ESC                            $001b    26D 17901  18359  18423  19047
                                     20684  20771  21172
SUBFLG                         $0012   116D  3949   5809   9840   9852
                                      9857  11289  11314
PC_LO                          $0004    48D  4953   8675  17666  19220
                                     22725  26480  26594
LOCKS                          $00f7   584D 20468  20486  20510  20941
                                     20949  20950
E_Col                          $00de   554D 21022  21034  21056  21669
                                     21810  21858
SFDX                           $00d4   545D 20396  20437  20459  20507
                                     20525  20567
BA                             $00c6   531D 18103  18140  26141  26295
                                     26310  26576
FNADR                          $00bb   519D 18108  18110  18123y 26124
                                     26125  26277
BUFPT                          $00a6   488D 24002  24003  24826  24845
                                     24912  24994
MSGFLG                         $009d   471D 23860  25745  25868  26062
                                     26102  26172
BSOUR                          $0095   441D 22895  22965  22979  23116
                                     23132  23165
SVXT                           $0092   437D 24260  24261  24285  24292
                                     25192  25228
SCALE_Y                        $0089   416D  7316   7317   7342   7343
                                     15361  15362
SCALE_X                        $0087   415D  7314   7315   7345   7347
                                     15358  15359
MULCO2                         $0085   413D  1735   7174   7394   7555
                                     10789  15264
OLDOV                          $0058   304D 11928  11959  11978  12026
                                     13306  13327
JUMPER                         $0056   299D  1685   2983   2985   2986
                                     11512  11521
FAC3_M1                        $0028   178D 12118  12255  12297  12299
                                     12300  12525
TEMPST                         $001b   162D  6371   6374   6449   6453
                                     13823  13944
TANSGN                         $0014   130D  3114   9457  14043  14045
                                     14063  14073
DIMFLG                         $000e    83D  9810  10111  10151  10189
                                     10226  10277
DRIVE                          $00bf   523D 24311  24348  26499  26519
                                     26599
XSAV                           $0097   444D 24789  24791  24817  24827
                                     24833
SYNO                           $0096   443D 24301  24315  24333  24337
                                     24341
MULCO1                         $0084   412D  1733   7172   7392   7438
                                     10787
FAC3_M2                        $0029   179D 12256  12294  12296  12301
                                     12527
LASTPT                         $0019   155D  1706  11652  11819  11821
                                     11825
INPFLG                         $0013   120D  4704   4722   4752   4785
                                      4818
A_REG                          $0006    50D  4960   5003  17660  26422
                                     26447
S_REG                          $0005    49D  4969   5006  17663  17876
                                     26427
INSFLG                         $00f6   583D  5271  20037  21405  27051
LSTCHR                         $00f0   577D 20013  20683  20957  21888
Cursor_End                     $00ea   569D 19929  19978  21622  24811
CurLst_Col                     $00e9   568D 19739  19926  21779  24802
KEYIDX                         $00d2   543D 19883  19886  20608  22242
ROBUF                          $00ca   535D 22420  22421  23433y 23609
RIBUF                          $00c8   534D 22417  22418  23536y 23674
DPSW                           $009c   469D 24063  24230  24330  24355
C3PO                           $0094   440D 22887  22892  23156  23159
DEGREE                         $0069   352D 12837  12887  13367  13387
HELPER                         $0055   292D  3774   5107   5112   5130
VARTXT                         $004d   271D  4715   4808   9382   9454
B_VERCK                        $000c    64D 13484  13492  13500  16065
Y_REG                          $0008    52D  4966  17662  26424  26449
X_REG                          $0007    51D  4963  17661  26423  26448
E_Reverse                      $00f3   580D 20031  20719  20975
TCOLOR                         $00f2   579D 21506  21512  21695
LSTX                           $00d5   546D 20528  20568  27067
IMPARM                         $00ce   539D 26733  26735  26736
FNBANK                         $00c7   532D 18105  26142  26276
CAS1                           $00c0   524D 24125  24764  24768
STKEY                          $0091   436D 23874  25955  25982
RIGHT                          $001d    27D  4581  20544  20842
BEEPER                         $00f9   586D 21134  21470
COLUMNS                        $00ee   575D 21255  21745
CHAREN                         $00d9   551D 19641  19829
STOPNB                         $008b   417D  6353  15206
OLDSTK                         $0082   407D  2782   3173
DATLIN                         $0041   233D  4849   4853
APOSTR                         $0027    29D  3824  18052
DEL                            $0014    25D 20775  20834
HOME                           $0013    24D 20857  20958
DOWN                           $0011    22D 20546  20840
TRMPOS                         $000b    63D  4525   4532
D8502                          $0000    38D 22524  22675
PICHAR                         $00ff    31D  3786
LINES                          $00ed   574D 21254
UP                             $0091    30D 19032
Msg_OK                         $006a 26095D 24018
Msg_Found                      $0063 26093D 23862
Msg_Verifying                  $0059 26091D 25775
Msg_Saving                     $0051 26089D 25870
Msg_Loading                    $0049 26087D 25772
Msg_Record                     $002e 26085D 24038
Msg_Play                       $001b 26083D 24013
Msg_For                        $0017 26081D 25751
REVERSE                        $0012    23D 20846
Msg_Searching                  $000c 26079D 25747
LF                             $000a    19D  4494
C_ULINE                        $0002    18D 20850
Msg_Error                      $0000 26077D 26061
CTRL_ROW                       $00fb  1507
COLRAM_PAGE                    $00d8  1521
CTRL_COL                       $007f  1506
STND_COL                       $007f  1509
COLMAX                         $0050  1520
COLS                           $0028  1517
IEC_DAT_BIT                    $0020  1545
ROWS                           $0019  1518
IEC_CLK_BIT                    $0010  1544
BLINK                          $000f    21
Default_Color                  $000e  1522
IEC_ATN_BIT                    $0008  1542
RS232_C_BIT                    $0004  1546
COLINK                         $0002  1519
IEC_IFR_BIT                    $0002  1543
INDEXA                         $0024   168D  1976y  2081   2205   2208
                                      2211y  2220   2221   2228y  2232y
                                      2240   2241   2243   2246y  3258
                                      3260   3285   3287   3294   3333
                                      3343   3349   3438   3439   3453
                                      3456y  3458   3460y  3461   3462
                                      3470   3471   3696   3702   3704
                                      3707   3798   3799   3803y  3805
                                      3807   3812y  4341   4342   4349y
                                      4352y  4354   4356   4362y  4365y
                                      4408   4409   4413   4414   4416
                                      5735   5737   5752   5754   5765y
                                      5796   5799   5935   5936   6247
                                      6365   6367   6417   6420   6423
                                      6425   6426   6448   6452   6461y
                                      6463   6465   7132   7134   9371
                                      9373   9425   9428   9442   9777
                                      9778   9971   9972   9996   9997
                                      9999  10000  10028  10029  10031
                                     10074  10084  10090  10242  10313
                                     10344  10535  10537  11452  11453
                                     11455  11707  11708  11762  11763
                                     11771y 11774y 11778  11779  11782
                                     11783  11810  11811  12320  12321
                                     12323y 12326y 12329y 12332y 12340y
                                     12349  12350  12539  12540  12542y
                                     12545y 12548y 12551y 12556y 12580
                                     12581  12584y 12587y 12590y 12595y
                                     12598y 12951  12953  13649  13650
                                     13771  13772  13776  13789y 13792y
                                     13891y 13936  15735  15737  15756
                                     15758  15759  15765y 15833  15836
                                     15840y 15843  16728  16730  16734
                                     16735  16984  16986
TXTPTR                         $003d   223D  1934   1936   1939y  1994y
                                      2094   2096   2156y  2166   2168
                                      2170   2173   2191y  2194y  2204
                                      2206   2212y  2226y  2748   2750
                                      2763   2765   2800   2801   2803
                                      2811   2812   3219   3220   3304y
                                      3389y  3966   3969   3988   3991
                                      4011   4012   4014   4116   4117
                                      4119   4148   4150   4714   4717
                                      4744   4745   4755   4767   4768
                                      4801   4802   4806   4809   4923
                                      4926   5168   5169   5184   5187
                                      5207   5210   5254   5255   5435
                                      5436   5466y  5469y  5523   5525
                                      5532   5534   5536   5538   5539
                                      5608y  5725   5727   5734   5736
                                      5822   5824   6041   6042   6044
                                      6060   6089   6170   6171   6173
                                      6214   6217   9185   9187   9209
                                      9211   9330   9332   9333   9391
                                      9393   9394   9520   9521   9533
                                      9534  11300  11302  11352  11354
                                     11357  11360  11374  11376  15788
                                     15789
FAC1_M1/FAC1_M2                $0064   346D  3074   3409   5465   5655
                                      5673   5709   5711   5840   5841
                                      6377   6402   6404   6750y  6777y
                                      6784   9438   9729   9787  10666y
                                     10733y 11149  11167  11169  11266
                                     11416y 11572  11591  11642  11991
                                     12002  12005  12037  12039  12046
                                     12057  12076  12078  12104  12267
                                     12473  12511  12526  12554  12594
                                     12683  12687  12728  12777  12778
                                     12779  12807  12993  13117  13119
                                     14227y 14861  14869  14879  14887
                                       347D  3075   3403   4268   5468
                                      5653   5671   5705   5708   6786
                                      9436   9726   9790  11153  11170
                                     11172  11267  11573  11592  11644
                                     11988  12004  12007  12034  12036
                                     12045  12058  12079  12081  12102
                                     12265  12476  12508  12528  12549
                                     12589  12685  12732  12808  12994
                                     13114  13116
XPOS                           $1131  1055D  6389   6391   6392   6397
                                      6399   6401   6405   6407   6408
                                      6429   6459   6477   6479   6502
                                      6522   6529   6548   6550   6567
                                      6569   6580   6582   6583   6597
                                      6599   6600   6603   6639   6641
                                      6642   6644   6646   6681   6683
                                      6697   6699   6707   6729   6730
                                      6732   6803   6805   6885   6887
                                      6904   6970   6972   7014   7495
                                      7874   7876  14989  14991  15015
                                     15018  15020  15023  15044  15046
                                     15097  15099  15143  15145  15158
                                     15160  15162  15164  15165  15308
                                     15328  15331  15369  15372  15400
                                     15403  15414  15417  15428  15430
                                     15465  15466  15469  15471  15479
                                     15482  15509  15511  15586  15587
                                     15619  15621  15629  15631  15637
                                     15639  15663  15665  15685  15687
LOWTR                          $0061   337D  2046   2074   3238   3261
                                      3266   3275   3278   3332   3336
                                      3372y  3374y  3377y  3380y  3382
                                      3384   3386   3390y  3653   3654
                                      3750   3751   5055   5057   5059
                                      5073   5119   5122   5182   5185
                                      5317   5318   5385   5386   5395
                                      5397   5887   5888   5901   5902
                                      5905   5908   5921   5923   9860
                                      9861   9876   9940   9941  10039y
                                     10042y 10045y 10048  10051  10073
                                     10077  10154  10155  10171  10175
                                     10209y 10214y 10223y 10235y 10238y
                                     10270  10272y 10275  10276y 10388
                                     10389  12859  12862  12869  12870
                                     12892  12922  13840  13843  13865y
                                     13868y 13883y 13983  13984  13987
                                     13988  15726  15736
M_Aval                         $0060   339D 17841  17849  17850  17851
                                     17875  17891  17988  17990  17993
                                     17994  17996  17997  17999  18000
                                     18014  18017  18022  18031  18033
                                     18067  18135  18144  18145  18193
                                     18251  18259  18329  18332  18417
                                     18891  18892  18893  18936  18942
                                     18943  18944  18956  18957  18959
                                     18960  18962  18963  18968  18969
                                     18971  18972  18974  18975  19114
                                     19116  19118  19127  19129  19130
                                     19132  19133  19135  19150  19152
                                     19153  19155  19156  19158  19217
                                     19218  19219  19240  19242  19244
                                     19247  19249  19251  19267  19272
                                     19273  19345  19347  19349  19395
                                     19400  19402  19411  19461  19472
                                     19476
LINNUM                         $0016   145D  2743   2745   3167   3170
                                      3376   3378   3400   3404   3661
                                      3670   3689   3690   3695   3700
                                      3705   3706   3708   3709   3710
                                      3711   3712   3714   3716   3739
                                      3741   4952   4954   5088   5090
                                      5103   5104   5109   5110   5162
                                      5164   5312   5313   5367   5368
                                      5381   5383   5391   5392   5455
                                      5462   5639   5643   5649   5652
                                      5654   5973   5974   6048  10605
                                     10607  10613  10617  10619  10629
                                     10693  10695  10701  10704  10707
                                     10709  11090  11092  11102  11105
                                     11108  11110  11889  11890  16771
                                     16772  16966  16968
CHRGET                         $0380   802D  1701   2100   2127   2161
                                      2164   2195   2755   2770   2857
                                      2865   2866   2948   2988   2993
                                      3221   3717   4076   4079   4090
                                      4091   4099   4132   4155   4186
                                      4538   4608   4610   4749   4873
                                      5018   5227   5230   5508   5515
                                      5519   5527   5535   5555   5570
                                      5611   5855   5967   6045   6143
                                      6229   6265   7081   7603   7955
                                      9358   9487   9499   9603   9824
                                      9829   9849  10952  11202  11833
                                     12950  14151  14247  15612  15646
                                     16473  16511  16543  16545  16549
                                     16600  16607  16610  16668  16753
                                     16765
FAC1_EX                        $0063   345D  3073   3083   3087   3595
                                      4062   4247   4336   4337   5844
                                      5864   6102   6108   6187   6376
                                      6393   6395   7358   9440   9472
                                      9781  11176  11179  11217  11574
                                     11604  11640  11883  11909  11950
                                     11953  11960  11972  12022  12049
                                     12053  12055  12181  12185  12342
                                     12375  12385  12392  12425  12465
                                     12466  12468  12557  12597  12615
                                     12632  12643  12664  12698  12724
                                     12757  12768  12793  12803  12913
                                     13027  13272  13308  13322  13323
                                     14106  14839  14864  14874  14884
                                     14890  14891
FORPNT                         $004b   266D  3521   3527   3760   3764
                                      3795   3821   3835   4198   4199
                                      4223y  4226y  4229   4230   4240
                                      4347   4351   4353   4355   4369y
                                      4711   4712   4875   4876   4998
                                      4999   5029   5030   5047   5487
                                      5489   5632   5634   5868   5870
                                      6793   6795   7737   7742   7747
                                      7748   8785   8789   8792y  8858y
                                      8877y  8884y  8911y  8978y  9003y
                                      9160   9161   9163y  9194   9196
                                      9200   9213   9214  13548  13570
                                     13576  13620  13627  13629  13638
                                     13639
FAC1_M4                        $0067   349D  2963   3038   3043   4182
                                      4225   4269   4293   4301   6791
                                      9218   9248   9432   9547   9632
                                      9646   9705   9727   9776   9796
                                     10137  10292  10314  11155  11166
                                     11168  11195  11479  11499  11501
                                     11563  11648  11663  11752  11848
                                     11888  11982  12008  12011  12028
                                     12030  12043  12060  12085  12087
                                     12098  12261  12482  12502  12532
                                     12543  12583  12696  12742  12804
                                     12810  13107  13110  14156  14820
                                     14826  14829  14835
STACK                          $0100   588D  3415   5553   5567   5587
                                      9898  10131  10133  10136  10138
                                     11400  11401  13019  13093  13098
                                     13140  13145  13160  13176  13178
                                     13186  13188  13190  13193  13195
                                     14219  14225  14270  14280  14288
                                     14309  14428  14453  14454  14473
                                     14475  14482  14483  14541  14552
                                     14578  14641  14655  16422  18065
                                     24428  24430  24439  24442  26515
                                     26520  26669  26670  26673  26674
                                     26683  26729  26731  26732  26734
                                     27708
INDEXB                         $0026   174D  1985y  2708   2710   2713y
                                      2715   2717   3190y  3262   3271
                                      3283   3291y  3295   5739   5741
                                      5775   5777   5778   5787y  5797
                                      5800   5889   5890   5903   5907
                                      5920y  6246   6820   6821   7243
                                      7246   7252y 10421  10423  10425
                                     10427  10559  10561  10564  10570
                                     10571  10648y 10660y 12714  12715
                                     12717y 12721y 12726y 12731y 12735y
                                     12741y 15739  15741  15760  15762
                                     15763  15834  15838  15844  15846
TEMP_A                         $0077   377D  4603   4724   5040   5060
                                      5444   5450   5541   6241   6248
                                      6277   6282   6315   6959   6961
                                      7235   7239   7242   7244   7258
                                      7261   7264   7271   7274   7276
                                      7278   7374   7381   7432   7436
                                      7439   7767   7796   7815   7839
                                      7887   7974   7978   8485   8488
                                      8492  14181  14237  14372  14409
                                     14496  14533  14555  14557  14598
                                     14650  14664  14718  15238  15241
                                     15247  15250  15614  15616
CHRGOT                         $0386   808D  2098   3227   4057   4064
                                      4080   4092   4446   4720   4781
                                      4812   4855   4870   4943   4993
                                      5016   5143   5301   5362   5620
                                      5852   5884   5963   6000   6017
                                      6095   6104   6135   7067   7071
                                      7074   7115   7306   7739   7933
                                      7947   9345   9804   9817  10141
                                     10415  11370  11480  11849  13590
                                     13606  14233  14243  14830  15518
                                     15541  15561  15580  15606  15676
                                     16432  16586  16653
FAC1_M3                        $0066   348D  2039   2965   3035   3048
                                      4221   4267   4297   4300   6789
                                      9216   9247   9434   9550   9631
                                      9643   9708   9725   9775   9793
                                     10135  10288  10310  11151  11171
                                     11173  11194  11562  11647  11665
                                     11751  11846  11887  11985  12006
                                     12009  12031  12033  12044  12059
                                     12082  12084  12100  12263  12479
                                     12505  12530  12546  12586  12697
                                     12736  12809  13111  13113  14154
                                     14818  14824
ARYPNT                         $005a   317D  3319   3320   3348   3350
                                      3352   3358y  3362y  3364   5387
                                      5388   5396   5398   5638   5642
                                      5662   5680   5683   9950   9951
                                      9953   9954   9958   9959   9964
                                      9965   9981   9982   9985   9986
                                     10001  10003  10089  10091  10093
                                     10096y 10100y 10102  10245  10247
                                     10250  10262y 10264  10267  10331
                                     10334  10392  10393  13837  13855
                                     13858  13861  13924  16108  16109
                                     16110
KEYBOARD                       $0000    10D 19517  19629  19682  19866
                                     20575  22272  22275  22278  22281
                                     22284  22287  22290  26967  27074
                                     27099  27124  27149  27174  27199
                                     27229  27254  27279  27304  27329
                                     27354  27384  27409  27434  27459
                                     27484  27509  27550  27557  27557
                                     27557  27565  27565  27573  27581
                                     27589  27589  27597  27597  27605
                                     27612  27616  27616  27620  27620
                                     27629  27644  27648  27648  27652
                                     27652
STRNG2                         $0072   374D  4249   4252   4253   4261
                                      9531   9532   9652  10205  10218
                                     10240  10241  10258  10259  10265
                                     10283  10284  10304  10305  10315
                                     10318  10366  10367  10536  10539
                                     10541  10545y 10551y 10562  10563
                                     10590  10591  10596  10597  11607
                                     11611  13021  13090  13099  13136
                                     13146  13159  13344  13345  13358
                                     13359  13366y 13368  13372  13373
                                     13374  13376  13377  13382  13383
FNDPNT                         $003f   228D  2011   3507   3510   3518y
                                      3524y  3528y  3533y  3542   3543
                                      3545   3614   3616   3623   3625
                                      3987y  3990y  3993y  3995y  4883
                                      4886   4891y  4894y  4898y  4909
                                      4912   4919y  4922y  4925y  4928y
                                      4931y  5447   5448   5557   5559
                                      5561   5563   5572   5574   5575
                                      6213y  6216y  6219y  6221y 14161
                                     15799  15802  15807y 15818  15819
                                     15821  15864y 15869y 15873
VIC_TEXT                       $0400   916D 19538  19539  19540  19541
                                     19542  19543  19544  19545  19546
                                     19547  19548  19549  19550  19551
                                     19552  19553  19554  19555  19556
                                     19557  19558  19559  19560  19561
                                     19562  19568  19569  19570  19571
                                     19572  19573  19574  19575  19576
                                     19577  19578  19579  19580  19581
                                     19582  19583  19584  19585  19586
                                     19587  19588  19589  19590  19591
                                     19592  22152
TEXT_TOP                       $1210  1138D  3245   3246   3259   3269
                                      3270   3272   3274   3279   3308
                                      3309   3328   3329   3475   3476
                                      3882   3885   5445   5446   5603
                                      5605   5616   5618   5619   5738
                                      5740   5913   5914   5916   5917
                                      5939   5942  10426  10428  10496
                                     10499  13463  13464  13518  13519
                                     15722  15734  15738  15740  15769
                                     15771  15845  15852  15854
Get_INDEXA_1                   $03b7   856D  4276   4385   4389   4392
                                      4398   4560   5988   6427   7148
                                      7187   7980   9780   9784   9789
                                      9792   9795   9974   9977   9980
                                      9984   9992  10006  10010  10015
                                     10566  11553  11718  11802  11805
                                     11808  12354  12357  12360  12363
                                     12371  12937  12960  13869  13902
                                     14210  16577  16719  16990
FAC1_SI                        $0068   350D  3089   3095   4248   4892
                                      5838   7356   9419   9470   9785
                                     11175  11210  11881  11904  11906
                                     11955  12023  12068  12070  12334
                                     12365  12396  12399  12552  12592
                                     12612  12666  12700  12707  12722
                                     12744  12761  12775  12798  12799
                                     12911  13016  13020  13274  13276
                                     14037  14041  14072  14102
MODE_80                        $00d7   548D  1869   3184   5132   7401
                                      7471   7504   7519   7619   7647
                                      8611   8622  10756  10794  11133
                                     17846  17858  17894  17938  17955
                                     19635  19752  19758  19773  20179
                                     20265  20490  20630  20793  20913
                                     20924  21412  21422  21433  21447
                                     21503  21712  21915  21917  21924
                                     21942  21973  27053
M_Cval                         $0066   341D 17794  17795  17807  17809
                                     17821  17823  17987  17989  18003
                                     18151  18175  18176  18187  18330
                                     18333  18369  18372  18376  18499
                                     18503  18998  19002  19003  19115
                                     19117  19119  19128  19131  19134
                                     19188  19189  19191  19193  19201
                                     19203  19204  19206  19207  19209
                                     19317  19318  19319
ANGEND                         $115e  1078D  6600   6660   6700   6792
                                      6804   6846   6896   6898   6956
                                      6957   7104   7105   7107   7109
                                      7111   7114   7137   7138   7182
                                      7200   7202   7206   8797   8798
                                      8840   8841   8845   8854   8855
                                      8856   8895   8897   8924   8928
                                      8934   8939   8942   8950   9076
                                      9078
HIGHTR/DESCA                   $005c   324D  2025   2032   3310   3311
                                      3331   3335   3341   3344   3346
                                      3363   5049   5069   5360   5361
                                      5380   5382   5408   5411   5459
                                      5463   5646   5650   5682   5684
                                      9944   9945  10013  10017  10021y
                                     10025y 10072  10076  10082  10085
                                     10087  10101    326D 14851  14866
                                     14876
Cursor_Row                     $00eb   571D 19730  19745  19924  19932
                                     19974  20052  20073  20079  20083
                                     20092  20098  20123  20893  20896
                                     20906  21031  21051  21059  21234
                                     21291  21301  21314  21340  21345
                                     21373  21521  21536  21596  21598
                                     21605  21608  21613  21652  21654
                                     21670  21781  21785  24803  26929
GRAPNT                         $008c   419D  6705y  6736y  7223   7226
                                      7228   7230   7232   7280y  7534
                                      7536   7537y  7540   9065y  9069y
                                      9087y  9089y  9129   9133   9147y
                                      9191   9192   9203y 15176y 15187y
                                     15200y 15225  15227  15239y 15242y
                                     15248y 15251y 15253  15256  15265y
                                     15295  15298  15300  15302  15304
DOSFLA                         $0080   397D  8663  14266  14283  14295
                                     14297  14334  14340  14383  14419
                                     14460  14518  14529  14554  14565
                                     14582  15891  15897  15975  16024
                                     16274  16289  16292  16294  16419
                                     16439  16584  16585  16651  16652
                                     16724  16726  16780  16943  17013
                                     17017  17035  17044  17054
E_Beg                          $00da   552D 20183  20187  20191y 20212
                                     20217  20221  20222  20224  20225
                                     20228  20239  20244  21090  21102
                                     21109  21552  21569  21575  21805
                                     21813  21819  21825  21828  21840
                                     21852  21855  21953  21957  22067
                                     22068  22077  22088  22090  22092
                                     22093
GRAPHM                         $00d8   550D  3186   6708   6715   6725
                                      6755   6769   6860   6880   6890
                                      6940   7099   7135   7166   7255
                                      7311   7573   7605   7614   7617
                                      7649   7651   8698   8745  10750
                                     15178  15231  15309  15334  15569
                                     19634  19792  19800  19802  19817
                                     19858
INDTXT                         $03c9   872D  2784   2790   2793   2796
                                      4043   4068   4074   4087   4106
                                      4109   4112   4151   4165   4845
                                      4848   4851   5403   5406   5410
                                      5430   5433   5457   5728   5956
                                      6024   6027   6030   6034   6037
                                      6160   6163   6166   9600  12935
CURLIN                         $003b   217D  2794   2797   2922   2923
                                      3157   3200   3216   3996   4110
                                      4113   4929   4932   5161   5163
                                      5213   5216   5258   5259   5633
                                      5635   5828   5831   6035   6038
                                      6058   6091   6164   6167   6203
                                      6204   6222  12986  12987  17182
TOS                            $007d   383D  3558   3559   3560   3563
                                      3567   3613   3615   3624   3626
                                      3635   3636   3638   3918   3919
                                      5208y  5211y  5214y  5217y  5220y
                                      5823y  5827y  5830y  5833y  5845y
                                      5863y  5869y  5872y  5875y  6115y
                                      6118y  6121y  6124y  6127
GRBPNT                         $0050   281D  2004   2067  11316  11317
                                     11325  11327  11332  11334  11367
                                     11369  11380y 13244  13245  13250
                                     13251  13260  13261  13841  13844
                                     13895  13896  13969  13970  13973
                                     13974  14065  14066  14075  14076
                                     15747  15750  15752  15754
FROUND                         $0071   370D  9782  10508  10509  10514
                                     11177  11927  11963  11967  11979
                                     12010  12012  12027  12042  12061
                                     12088  12090  12091  12120  12139
                                     12259  12304  12523  12558  12599
                                     12618  12636  12645  12699  12740
                                     12797  13302  13328
B_COUNT                        $000d    76D  2154   2182   2223   2237
                                      2248   2249   3033   3036   3039
                                      3044   3046   3049   3051   3232
                                      3241   3312   3387   4992   5002
                                      5012   5013   5743   5760   5784
                                     10140  10142  10195  10219  10243
                                     10281  10316  10385
E_Attribute                    $00f1   578D  7404   7407   8713   8716
                                      8729  10793  20271  20330  20492
                                     20494  20651  20714  20716  20795
                                     20797  20800  20919  20921  20931
                                     20933  20982  20984  20991  20993
                                     21000  21002  21009  21011  21678
                                     21688  21955
SYNTMP                         $0079   379D  3104   3106   3660   3662
                                      3669   3671   6290   6296   6320
                                      9599   9601  10008  10012  10194
                                     10196  10290  10293  10298  10299
                                     11433  11435  11467  11470  11493
                                     11496  11675  11678  12932  12938
                                     14878  14882
STRPTR                         $0070   365D  2053   2060   4330   4331
                                      4333   4334   9176   9177   9471
                                      9638  10504  10511  11589  11590
                                     11606  11608  11649  11670  11672
                                     11687  11688  11908  11970  12335
                                     12366  12395  12423  12447  12912
                                     13335  14032
SA                             $00b9   517D 18101  18150  18178  24940
                                     24942  24965  24987  25072  25084
                                     25123  25134  25163  25178  25209
                                     25222  25233  25284  25370  25386
                                     25390  25491  25666  25812  25817
                                     25838  25842  25884  25893  26134
                                     26246
PTR_LO                         $009e   472D 22701  22709  22717  22723
                                     23608  23890  23906  23923  23924
                                     23930  23983  23990  23992  24061
                                     24424  24426  24433  24436  24478
                                     24898  24913  24920  25371  25400
                                     25593  26571  26585  26595  26601
                                     26607
FRETOP                         $0035   203D  3580   3583   3601   3604
                                      3914   3915   4286   4291   4399
                                      4402   6369   6372  10501  10520
                                     10523  11786  11788  11792  11793
                                     11795  11796  11798  13765  13768
                                     13795  13796  13915  13918  13959
                                     13960
Fetch_1                        $03ab   843D  1965   2005   2012   2019
                                      2033   2040   2061   2068   2075
                                      3100   3103   4368   5048   5074
                                      6836   6852   9201   9667   9676
                                      9745   9755  10542  11345  14850
                                     14853  14877  14881  16185  16210
STATUS                         $0090   434D 18106  18164  19434  19473
                                     19477  19490  23104  23134  24046
                                     24856  25079  25082  25087  25132
                                     25140  25176  25184  25263  25362
                                     25396  25408  25409  25414  25436
                                     25477  26158  26164  26165
VTEMPA                         $008e   420D  6672   6677   6692   6693
                                      6723   6737   6743   6761   8837
                                      8861   8865   8866   8868   8870
                                      8874   8971   8975   8977y  9043
                                      9046   9053   9058  14956  14963
                                     15463  15464  15475  15476
Cursor_Col                     $00ec   572D 19738  19933  19977  20642
                                     20677  20707  21057  21073  21081
                                     21088  21154  21159  21233  21502
                                     21588  21611  21630  21638  21646
                                     21659  21668  21706  21778  21789
                                     21929  21948  24801
FACTPB/TMPVAR                  $005e   334D  5075y 12565  13385  13386
                                     13830y 13833y 13949y 13952y 13997
                                     14000  14005  14006  14008  18351
                                       335D  9654  10356  10377  12831
                                     12874  12894  13044  13059  13065
                                     13074  13086  13141
R8502                          $0001    39D  7551   7554   7560  15260
                                     15263  15267  19624  19626  19806
                                     19826  19851  20389  22522  22673
                                     24026  24028  24122  24124  24552
                                     24554  24721  24723  24760  24765
                                     24770  24772  27660
TAPE1                          $00b2   508D 22414  22415  23849y 23866y
                                     23903y 23907y 23910y 23913y 23916y
                                     23919y 23929y 23953  23954  23988y
                                     24848y 24910y 24914y 24992y 25485y
                                     25488y 25494y 25496y 25499y 25501
DS_LEN                         $007a   380D  3906   4317   9687  17061
                                     17064  17070  17073  17143  17154
                                     17710  18117  18130  18267  18857
                                     18867  18912  19089  19096  19103
                                     19407  19419  19420  19450  19457
M_Operand                      $0aa0  1025D 18214  18234  18235  18249
                                     18263  18272  18397  19309  19312
                                     19323  19324  19325  19330  19331
                                     19332  19346  19348  19350  19352
                                     19368  19369  19370  19371
RS_Parity                      $00bd   521D 23372  23373  23393  23404
                                     23426  24349  24383  24417  24450
                                     24462  24493  24526  24588  24590
                                     24595  24611  24618  24622  24629
                                     25421  25424  25705  25708
PTR_HI                         $009f   473D 18283  18321  18396  18404
                                     22705  22724  23921  23928  23931
                                     23981  23987  23991  24062  24435
                                     24444  24445  25375  25383  25553
                                     25561  26504  26588  26602
TXTTAB                         $002d   187D  1741   1742   3436   3437
                                      3645   3646   3875y  3877y  3879
                                      3883   3964   3967   5178   5179
                                      5326   5327  13465  13493  13494
                                     15772  15774  15849  15851
VSH                            $11d6  1115D  1116   1117   1118   7898
                                      7900   7905   7906   7909   7911
                                      7912   7917   8762   8764   8766
                                      8767  11065  11079  17212  17248
                                     17250  17455  17461
RUNMOD                         $007f   384D  2733   2778   2787   2824
                                      2919   3154   3208   4103   5188
                                      5247   5266   5286   6157  11253
                                     11275  13506  13520  15780  16181
                                     16204  17120  17187
M_Bval                         $0063   340D 17992  17995  17998  18278
                                     18287  18320  18326  18575  18577
                                     18580  18581  19166  19168  19169
                                     19171  19172  19174  19248  19250
                                     19252  19470  19479
VARNAM                         $0047   254D  9633   9634   9816   9844
                                      9845   9850   9867   9871   9927
                                      9928  10037  10041  10119  10121
                                     10125  10127  10163  10166  10207
                                     10213  10320  10323
STREND                         $0033   199D  3924   3925   6364   6366
                                      6418   6421   9942   9943   9966
                                      9968  10069  10070  10156  10158
                                     10255  10256  10269  10273  10521
                                     10524  13779  13782
BANK                           $0002    43D  3505   3515   3534   4957
                                      8673  17646  17669  17691  17698
                                     19222  21808  22410  22636  22639
                                     22678  22682  22707  22708  22716
                                     26444  26482  26618
JIFFY_COUNTDOWN                $0a1d   971D  7683   7684   7685   7689
                                      7690   7691   7696   7711   7712
                                      7713   7722   7723   7725   7726
                                      7728   7729  25923  25925  25927
                                     25928  25929
MEMUSS                         $00c3   528D 22368  22369  22373y 22376y
                                     22618  22619  22620  22631  22632
                                     25347  25348  25402  25404  25486
                                     25489  25505  25508  25512  25514
                                     25595  25596
FA                             $00ba   518D 13659  18100  18136  24944
                                     25080  25198  25230  25286  25318
                                     25328  25363  25388  25532  25799
                                     25815  25840  26133  26149  26500
                                     26530  26540
TENEXP                         $0060   336D  5051   5061   5063   9650
                                     12866  12872  12875  12880  12885
                                     12918  12928  12941  13085  13168
                                     13173  13890  14854  14858  14863
                                     14870  14880
QUOTE                          $0022    28D  3767   4048   4121   4153
                                      4651   4760   5491   5495   6147
                                      6302   6311   9513  11581  11601
                                     16464  16617  18115  18121  20000
                                     20005  22221
FNLEN                          $00b7   515D 18104  18124  19403  23925
                                     23984  24971  25004  25074  25093
                                     25099  25372  25384  25467  25536
                                     25562  25749  25758  25764  25809
                                     26123
EAH                            $00af   499D 23897  23918  23941  23971
                                     24734  25395  25405  25432  25433
                                     25509  25521  25592  25598  25600
                                     25716  25717  25787  26577  26579
                                     26938
VALTYP                         $000f    89D  3070   4204   4467   4750
                                      5000   6662   9226   9311   9366
                                      9388   9486   9635   9822   9836
                                     10114  10147  11265  11542  11651
                                     14184
CHARAC                         $0009    53D  3037   3050   3694   3713
                                      4036   4040   4041   4757   4759
                                      4763  11582  11597  12805  13255
                                     13313  17679  17910  21138  21139
                                     26429
SPRITE_DATA                    $117e  1109D  1722   1772   1856   7842
                                      7853   7858   8773  11061  17224
                                     17226  17230  17240  17251  17445
                                     17446  17447  17448  17449  17450
ANGBEG                         $115c  1077D  6479   6501   6583   6698
                                      6767   6802   6844   6889   6895
                                      6902   6914   6916   6953   6954
                                      6995   6996   6998   7014  15023
XRADIUS                        $1154  1073D  6482   6483   6580   6696
                                      6744   6745   6828   6841   6849
                                      6850   6865   6932   6933   6937
                                      6939   6974   6981   7023  15015
RS_Enable                      $0a0f   938D 22586  23450  23452  23505
                                     23506  23575  23615  23645  23658
                                     23687  23689  23695  23704  23712
                                     23733  23783  23801  23802  25065
BUF                            $0200   651D  1726   1727   3488   4480
                                      4481   4482   4619   4664   4673
                                      4733   4734   4735  17712  17719
                                     18118  19097  19421  19454  19458
EAL                            $00ae   498D 23899  23915  23939  23967
                                     24732  25393  25403  25430  25506
                                     25520  25589  25597  25599  25714
                                     25786  26293  26302  26575  26937
K_VERCK                        $0093   438D 17760  17975  17984  18019
                                     18075  18082  18146  18157  18167
                                     23842  23846  24047  24413  24446
                                     24459  25360  25419  25703  25773
CHANNL                         $0015   137D  1656   1705   3183   4439
                                      4483   4492   4572   4614   4622
                                      4633   4641   4644   4666   4675
                                      4684   4740   4788   4792   4828
Snd_Duration                   $1223  1151D  1816   1817   1818   8042
                                      8180   8209   8212   8214   8223
                                      8224   8226   8227   8566  17316
                                     17318  17321  17323  17325
SAVSIZ                         $03db   895D  6686   6689   6771   6772
                                      6774   6783   6785   6787   6806
                                      6808   9181   9182   9183   9193
                                      9195   9198   9215   9217
Margin_Right                   $00e7   565D 11128  20050  20195  20231
                                     20273  20301  20337  21049  21075
                                     21080  21247  21610  21631  21658
                                     21660  21742  21773  24810
Margin_Left                    $00e6   564D 11130  19737  19921  20097
                                     20147  20257  20706  21260  21316
                                     21327  21342  21587  21616  21634
                                     21649  21743  21771  21790
Margin_Top                     $00e5   563D 11126  19729  20078  20114
                                     20120  20127  20132  20892  21259
                                     21289  21292  21300  21303  21372
                                     21651  21739  21763  21786
PNT                            $00e0   557D 19669  19755  19764  19770
                                     19772  20192y 20270y 20288  20292
                                     20644y 21507y 21714y 21901  21904
                                     21928  21931  22036  22039
CMP1                           $00b1   503D 24160  24167  24168  24173
                                     24175  24181  24210  24219  24220
                                     24222  24224  24228  24238  24243
                                     24247  24259  24322  24325
DS_ADR                         $007b   381D  4310   4315   4404   4406
                                      9666   9675   9744   9754  16184
                                     16209  17066  17067  17071y 17074y
                                     17094y 17103y 17148y 17151
KEYSIZ                         $0078   378D  5034   5056   5067   5072
                                      6276   6307   7976   7977   7983
                                     14193  14208  14268  14331  14385
                                     14397  14403  14417  14511
FRESPC                         $0037   207D  9677y 11625y 11719y 11729
                                     11730  11732  13784  13785  13793
                                     13794  13842  13845  13872  13873
                                     13905  13906  13957  13958
CR                             $000d    20D  3485   4490   4563   8741
                                      8962  17092  17127  17716  18423
                                     19032  19039  19047  19432  19913
                                     19950  19957  20679  24859
JIFFY_CLOCK                    $00a0   483D 23872  23877  25906  25908
                                     25910  25912  25914  25916  25920
                                     25921  25922  25963  25964  25965
                                     25972  25973  25974
YPOS                           $1133  1056D  6378   6380   6381   6385
                                      6387   6409   6411   6799   6801
                                      6907   6909  15305  15340  15342
                                     15620  15622
FAC2_M3                        $006d   359D  3076   3079   5601   5614
                                      5744   5763   5786   9465  12032
                                     12292  12327  12358  12478  12494
                                     12504  12506
XRCOS                          $1160  1079D  6512   6514   6661   6718
                                      6738   6752   6794   6982   7022
                                      7184   7185   7186   8996   9002
                                      9004
RS_Count                       $00b4   509D 23364  23374  23396  23399
                                     23401  23411  23429  24059  24250
                                     24267  24306  24317  24331  24340
                                     24345
FAC2_EX                        $006a   356D  3064   3065   9459  11929
                                     11930  11973  11975  12341  12372
                                     12382  12614  12633  13241  13321
                                     13324
VARPNT                         $0049   260D 10054  10055  10332  10335
                                     10337  11296  11298  11337  11342
                                     11344  11349  11361  11363  13135
                                     13147
YDIST2                         $115a  1076D  6513   6515   6533   6535
                                      6537   6682   6688   6763   6765
                                      6798   6809   6845   6911   6913
KEYD                           $034a   778D  3417   3421  18365  18367
                                     18368  18371  18374  18375  18378
                                     18379  19893  19894  19895  20593
ENDCHR                         $000a    62D  3040   3045   3688   3692
                                      4038   4039   4042   4045   4766
                                      5152   5365   5970  11583  11599
DEFMOD                         $12fa  1223D  8760   8859   8878   8891
                                      8893   8920   8931   8944   8946
                                      9007   9035   9066   9079
SHFLAG                         $00d3   544D 20394  20412  20434  20435
                                     20450  20452  20456  20457  20477
                                     20574  26982  27066  27665
RSI_Parity                     $00ab   494D 23486  23487  23517  23542
                                     23935  24079  24396  24485  24487
                                     24488  24492  24651  24656
CNTDN                          $00a5   487D 22973  22993  23033  23051
                                     23057  24602  24606  24661  25580
                                     25608  25623  25628  25720
DSCPNT                         $0052   285D  2018   4328   4329   4339
                                      4340  11445  11446  11518  11520
                                     11564  11565  11683  11684
TONVAL                         $123b  1165D  8357   8359   8361   8373
                                      8376   8383   8386   8399   8403
                                      8412   8414   8416
TEXT_MAX                       $1212  1139D  1749   1750   3249   3252
                                      3321   3324   5562   5564  10495
                                     10498  15727  15730
NUMCNT                         $116e  1089D  7122   7146   7189   7824
                                      7832   7881   7892   7902   7926
                                      7939   9001   9005
YRADIUS                        $1156  1074D  6518   6854   6856   6857
                                      6862   6869   6871   6876   6935
                                      6938   6942   6944
ANGSGN                         $1149  1067D  6508   6540   6557   6560
                                      6607   6609   6616   7851  14936
                                     14944  14975  14992
XSGN                           $113d  1061D  7130   7142   7153   7250
                                      8701   8719  15056  15057  15060
                                     15061  15067  15144
M_Temp                         $0ab7  1036D 18002  18188  18937  18951
                                     18952  18953  18955  18958  18961
                                     19241  19243  19245
RS_Status                      $0a14   942D 23441  23442  23554  23555
                                     23592  23668  23673  23678  24871
                                     25003  26152  26155
CurLst_Row                     $00e8   567D 19731  19922  20090  20094
                                     20124  20126  20884  21281  21305
                                     21371  21782  24804
E_End                          $00dc   553D 20182  20190  20193y 21804
                                     21814  21817  21818  21829  21837
                                     21839  21848  21851
SAH                            $00ad   497D  8676  24427  24441  24504
                                     24616  24733  24743  25602  25822
                                     26548  26581  26940
SAL                            $00ac   496D  8674  24429  24438  24506
                                     24731  24741  25601  26286  26309
                                     26547  26561  26939
RSI_In_Bit                     $00a7   490D 23485  23488  23493  23513
                                     23541  23773  24360  24381  24410
                                     24476  24635  24648
FAC2_SI                        $006f   361D  3060   9469  11907  11954
                                     12333  12336  12364  12367  12606
                                     12910  13247  14027
FACTPA                         $0059   312D  3589  12572  13347  13350
                                     13351  14068  14069  14842  14849
                                     14852  15415  15420
SAVRAM                         $12b7  1221D  8793   8883   9164   9168
                                      9169   9171   9173   9174   9175
                                     16579  16975
INT_VAL                        $127f  1180D  1720   2735   2752   2754
                                      2759   2761   5270   8435   8440
                                     17287  17307
FLTSAV                         $1234  1160D  8293   8302   8303   8305
                                      8307   8309   8318   8322   8335
                                      8338   8340
ERRLIN                         $1209  1133D  3158   3909   3910   5101
                                      5102   6014   6057   6070   6071
                                      9767   9768
ANGCNT                         $114e  1070D  6498   6614   6619   6621
                                      7034   7037   7038   7042   7043
                                     15014  15016
XDEST                          $1135  1057D  6587   6591   6903   7055
                                      7827   7829   7901   7908   7914
                                     15508  15510
M_Count                        $0ab4  1033D 18215  18243  18257  18868
                                     18883  18894  18931  18988  19364
                                     19379  19381
M_Op_Size                      $0aab  1027D 18298  18324  18348  18361
                                     18362  18427  18428  18430  18454
                                     18472  18549
Fast_IEC                       $0a1c   959D 22585  22952  22959  23018
                                     23020  23097  23187  23189  25367
                                     25369  25556
DOS_BEG                        $0117   606D 16093  16097  16106  16107
                                     16131  16132  16147  16148  16427
                                     16557  16558
Margin_Bottom                  $00e4   562D 11124  19721  20053  20074
                                     20095  20118  20148  21246  21346
                                     21738  21765
USER                           $00e2   558D 19771  19780  20194y 20272y
                                     20318  20321  20649y 21505y 21716y
                                     22052  22055
NDX                            $00d0   541D  3423  18381  19636  19897
                                     19899  19907  20562  20590  20595
                                     24781  25987
RS_Out                         $00b6   511D 23367  23434  24352  24379
                                     24420  24421  24453  24454  24559
                                     24573  24662
CMP0                           $00b0   502D 24060  24161  24165  24170
                                     24225  24237  24242  24246  24288
                                     24290  24326
RSI_Data                       $00aa   493D 23489  23528  23558  24058
                                     24362  24373  24389  24390  24393
                                     24399  24467
FAC2_M4                        $006e   360D  3077   3080   9467  12029
                                     12289  12324  12355  12481  12493
                                     12501  12503
FAC2_M1                        $006b   357D  3062   3063   9461  12038
                                     12298  12338  12369  12472  12496
                                     12510  12512
GARBFL                         $0011   110D  3761   3769   3771   3788
                                      9748   9751   9752   9757  13761
                                     13798  13802
Snd_Dur_Tmp                    $1229  1152D  1788   1789   8132   8134
                                      8137   8138   8211   8213   8217
                                      8220
OLDTXT                         $1202  1125D  2813   2814   3159   3948
                                      4799   4800   5250   5253  15792
                                     15793
BITMSK                         $116d  1088D  8756   8765   8768  15175
                                     15177  15182  15184  15186  15199
                                     15201
T_Buffer                       $0b00  1046D 22413  26545  26546  26551
                                     26560  26565  26590  26597  26600
                                     26615
BLNON                          $0a26   979D 19640  20636  20645  20655
                                     20657  21439  21453  21455  21988
                                     21991
INIT_STATUS                    $0a04   924D  1670   1672  19680  19700
                                     19701  22315  22560  22564  22565
                                     26777
IIRQ                           $0314   749D 22371  22374  24114  24116
                                     24134  24689  24691  24703  24705
                                     27712
DATAX                          $00ef   576D 19962  19964  19965  19987
                                     19992  20012  20664  20678  20780
                                     21174
STAH                           $00c2   527D 23893  23912  23945  23969
                                     24503  25515  25792  26505  26660
                                     26666
STAL                           $00c1   526D 23895  23909  23943  23964
                                     24505  25513  25790  26507  26665
                                     26671
RSI_Start                      $00a9   492D 23480  23507  23515  24254
                                     24256  24297  24351  24519  24576
                                     24580
RSI_Count                      $00a8   491D 23482  23492  23498  23807
                                     24252  24335  24350  24517  24566
                                     24572
R2D2                           $00a3   485D 22890  22893  22938  24233
                                     24277  24308  24319  24514  24596
                                     24597
DFLTN                          $0099   455D 19952  22541  23635  24779
                                     24799  25126  25304  25309  25324
                                     25327
COLSEL                         $0083   411D  6355   6883   7066   7164
                                      7259  15181  15189  15209  15228
                                     15572
DOSFLB                         $0081   405D  8669  16087  16420  16435
                                     16440  16560  16561  16703  16704
                                     16788
AUTINC                         $0074   375D  1710   1711   3397   3398
                                      3402   3405   5089   5091   5268
                                      5269
DATPTR                         $0043   238D  4694   4695   4820   4821
                                      5331   5332  15775  15777  15855
                                     15857
ARYTAB                         $0031   195D  3922   3923   9862   9864
                                      9938   9939   9956   9957  10152
                                     10153
PC_HI                          $0003    47D  4955   8677  17649  17667
                                     17695  19221  22726  26439  26479
                                     26616
VTEMP4                         $1178  1104D 15604  15618  15627  15647
                                     15648  15650  15655  15667  15684
ROTANG                         $1158  1075D  6680   6685   6753   6760
                                      6807   6838   6843   6901   6975
VSH_SPEED                      $0a37  1004D 23264  23267  23288  23292
                                     23295  24677  24681  24684  26947
TMPDES                         $03d6   893D 14819  14821  14825  14827
                                     14841  14896  14897  14900  14901
USER_BANK                      $03d5   891D  1729   4956   7672   7744
                                      8668  10611  10631  16430  17503
DECODE                         $033e   776D 19691  20405  20407  20516
                                     20518  26985  26992  27002  27018
FETCH                          $02a2   659D 21806  21859  21861  22468
                                     22621  22624  22635  26316  26319
VN                             $012a   627D 14285  14346  14349  14361
                                     14369  14381  14390  14407  14558
FLAG                           $0126   623D  8028   8030   8032   8034
                                      8110   8177  14517  14606  14658
DOS_FA                         $011c   609D  1716   8681  15911  16034
                                     16243  16688  16934  17075  17078
Scroll_Locked                  $00f8   585D 20055  20063  20076  20138
                                     21293  21296  21299  21390  21559
INSRT                          $00f5   582D 20015  20034  20036  20042
                                     20718  20773  20838  21037  21039
E_Row                          $00df   555D 20128  20130  21020  21032
                                     21058  21360  21671  21857  21863
KEYTAB                         $00cc   537D 20406  20408  20427y 20517
                                     20519  20526y 26998  26999  27001
FSBLK                          $00be   522D 24120  24358  24366  24472
                                     24475  24480  24607  24631  24657
BSOUR1                         $00a4   486D 23077  23095  23108  24262
                                     24264  24275  24516  24584  24586
DFLTO                          $009a   465D 19954  22543  23566  24881
                                     25166  25301  25307  25319  25322
LDTND                          $0098   451D 24934  24937  25245  25246
                                     25248  25270  25294  25329  26238
FAC2_M2                        $006c   358D  9463  12035  12295  12330
                                     12361  12475  12495  12507  12509
TEMPPT                         $0018   150D  1738   3938  10464  11635
                                     11636  11656  11823  13822  13943
TRAPNO                         $120b  1134D  2899   3163   3169   3908
                                      6003   6006   6073  10462
OLDLIN                         $1200  1124D  2924   2925   5256   5257
                                      5524   5526   5531   5533
XABS                           $1139  1059D  6588   6592  15068  15072
                                     15112  15114  15116  15118
PKYBUF                         $1000  1049D  6274  19696  20606  21821
                                     21853  21880  22234  22240
M_Save_XR                      $0aaf  1029D 18395  18405  19054  19058
                                     19095  19104  19148  19151
RS_Baudrate                    $0a12   941D 23794  23796  25025  25026
                                     25027  25030  26949  26950
UEXP                           $0129   626D 14293  14305  14311  14329
                                     14430  14443  14629  14640
QTSW                           $00f4   581D 19917  19969  20002  20004
                                     20017  20720  20777  20829
CRSW                           $00d6   547D 19638  19915  19944  19949
                                     19980  20672  26927  26928
KYNDX                          $00d1   542D 19637  19881  19885  19908
                                     20601  22232  22235  24782
FG_COL                         $0086   414D  1731   7161   7176   7181
                                      7211   7387   7427  10785
MVDFLG                         $0076   376D  1709  15719  15733  15783
                                     15828  15832  15865  15880
OP_TMP                         $004f   275D  3071   9344   9354   9355
                                      9357   9361   9396   9411
MEMSIZ                         $0039   211D  1753   1754   3912   3913
                                      4393   4396  13838  13839
VARTAB                         $002f   191D  1745   1746   3920   3921
                                      4294   4298   9858   9859
FAC3_M4                        $002b   181D 10354  10374  12258  12288
                                     12290  12303  12487  12531
FAC3_M3                        $002a   180D 10327  10346  10371  12257
                                     12291  12293  12302  12529
INTFLG                         $0010    95D  4202   4779   5010   9695
                                      9823   9843  10112  10149
SOUND_FREQ_HI                  $12a0  1197D 17353  17355  17364  17376
                                     17379  17396  17400
SOUND_FREQ_LO                  $129d  1196D 17350  17352  17362  17374
                                     17383  17394  17398
VOICE                          $122f  1157D  1820   1823   1825   8040
                                      8062   8075   8207
ERRVAL                         $1145  1064D 15107  15108  15122  15127
                                     15129  15130  15132
DOSSTR                         $1100  1051D 16923  16930  16931  16951
                                     16967  16976  16992
PKYDEF                         $100a  1050D  6287  19884  21833  21834
                                     21842  21843  21864
Module_Bank                    $0ac0  1038D 22696  22703  22719  22728
                                     26473  26474  26484
VSH_TEXT                       $0a2c   993D 19644  19831  20496  20498
                                     20915  20926  20928
CURMOD                         $0a2b   992D 19663  21414  21424  21435
                                     21437  21449  21960
RS_Command                     $0a11   940D 23389  23419  23538  23567
                                     23636  25039  26948
IRQTMP                         $0a09   927D 22538  24115  24117  24133
                                     24153  24687  24690
NULL_DESC                      $03d2   885D  9644   9647   9706   9709
                                      9903   9904  10964
SNO                            $0132   635D 14263  14316  14354  14645
                                     14647  14768  14771
VF                             $012c   629D 14300  14318  14320  14348
                                     14380  14739  14747
ENR                            $0124   621D 14281  14307  14386  14535
                                     14548  14585  14652
BNR                            $0123   620D 14182  14404  14538  14544
                                     14572  14584  14599
DOS_LA                         $011b   608D 16027  16229  16238  16245
                                     16350  16498  16933
DATA                           $00c5   530D 24266  24293  24310  24605
                                     24617  24623  24624
LA                             $00b8   516D 24931  24938  25282  25538
                                     25641  26132  26245
RS_Next                        $00b5   510D 23378  23427  23710  24342
                                     24364  24377  24401
PRTY                           $009b   468D 24282  24304  24305  24518
                                     24592  24593  24627
INPPTR                         $0045   244D  4705   4706   4716   4807
                                      4816   4817   4825
ESC                            $001b    26D 17901  18359  18423  19047
                                     20684  20771  21172
SUBFLG                         $0012   116D  3949   5809   9840   9852
                                      9857  11289  11314
PC_LO                          $0004    48D  4953   8675  17666  19220
                                     22725  26480  26594
SPRNUM                         $12fc  1225D  8749   8770   8781   8810
                                      8904   9044
Sound_Duration_1_Hi            $1285  1186D  1813   8568   8599  17343
                                     17406  17408
INT_TRIP_FLAG                  $1276  1176D  1717   1718   2738   2741
                                      5273  17294
Old_Filter                     $1274  1174D  1800   8049   8095   8098
                                      8486   8489
NIBBLE                         $1239  1163D  8334   8337   8371   8375
                                      8381   8385
Snd_Pitch                      $122d  1155D  8167   8172   8202   8232
                                      8234  10440
ERRTXT                         $120e  1136D  3160   5125   5127   6059
                                     15796  15797
FCT                            $1141  1063D  6589   6593  15070  15074
                                     15128  15131
M_Shift                        $0ab6  1035D 18254  18915  18941  18983
                                     19365  19366
M_Save_X                       $0ab2  1031D 17793  17799  17806  17813
                                     17820  17828
M_Format                       $0aaa  1026D 18286  18300  18307  18474
                                     18483  18547
VDC_UPDATE_HI                  $0a3d  1010D 20293  20310  20311  20326
                                     20329  20352
VDC_COL                        $0a32   999D 20203  20234  20235  20247
                                     20280  20302
PAUSE                          $0a21   973D 19639  20473  20474  20512
                                     20572  20670
RS_Control                     $0a10   939D 23397  23462  23495  25007
                                     25013  26952
RESET_VECTOR                   $0a00   921D  1674  17768  22335  22431
                                     22432  26762
BITS                           $03df   896D  1704   3950  12127  12765
                                     12772  12781
Fetch_0                        $039f   829D  1955   2026   2047   2054
                                      2082   4826
LAT                            $0362   785D 24939  25249  25250  25273
                                     25281  25334
ENDFD                          $0136   639D 14150  14643  14700  14775
                                     14781  14782
CFORM                          $0131   634D 14192  14499  14693  14720
                                     14722  14776
USGN                           $0128   625D 14291  14335  14447  14464
                                     14471  14636
SWE                            $0127   624D 14324  14351  14371  14514
                                     14673  14675
DOLR                           $0125   622D 14519  14596  14665  14743
                                     14746  17525
DOS_END                        $0119   607D 16092  16096  16111  16112
                                     16566  16567
LOCKS                          $00f7   584D 20468  20486  20510  20941
                                     20949  20950
E_Col                          $00de   554D 21022  21034  21056  21669
                                     21810  21858
SFDX                           $00d4   545D 20396  20437  20459  20507
                                     20525  20567
BA                             $00c6   531D 18103  18140  26141  26295
                                     26310  26576
FNADR                          $00bb   519D 18108  18110  18123y 26124
                                     26125  26277
BUFPT                          $00a6   488D 24002  24003  24826  24845
                                     24912  24994
MSGFLG                         $009d   471D 23860  25745  25868  26062
                                     26102  26172
BSOUR                          $0095   441D 22895  22965  22979  23116
                                     23132  23165
SVXT                           $0092   437D 24260  24261  24285  24292
                                     25192  25228
SCALE_Y                        $0089   416D  7316   7317   7342   7343
                                     15361  15362
SCALE_X                        $0087   415D  7314   7315   7345   7347
                                     15358  15359
MULCO2                         $0085   413D  1735   7174   7394   7555
                                     10789  15264
OLDOV                          $0058   304D 11928  11959  11978  12026
                                     13306  13327
JUMPER                         $0056   299D  1685   2983   2985   2986
                                     11512  11521
FAC3_M1                        $0028   178D 12118  12255  12297  12299
                                     12300  12525
TEMPST                         $001b   162D  6371   6374   6449   6453
                                     13823  13944
TANSGN                         $0014   130D  3114   9457  14043  14045
                                     14063  14073
DIMFLG                         $000e    83D  9810  10111  10151  10189
                                     10226  10277
POT_IEMP_1                     $12b1  1213D 10876  10890  10922  10927
                                     10929
Old_Volume                     $1275  1175D  1801   8050   8099   8490
                                      8493
FILTERS                        $1271  1173D  8045   8048   8052   8292
                                      8341
RNDX                           $121b  1144D  1715  11157  11158  11181
                                     11182
TEXT_LIN                       $1216  1141D  6092   6120   6123   6201
                                      6202
ERRNUM                         $1208  1132D  3153   3911   5098   6069
                                      9772
Rel_Abs_Flag                   $1179  1105D 15625  15633  15642  15660
                                     15682
VTEMP3                         $1177  1103D 15473  15481  15483  15485
                                     15490
SINVAL                         $114a  1068D  7845   7847  14980  14982
                                     14989
GREATR                         $1148  1066D 15088  15104  15110  15125
                                     15133
YDEST                          $1137  1058D  7828   7830   7883   7884
                                      7891
DINFLAG                        $0ac5  1040D 26972  26980  27006  27021
                                     27047
M_Data                         $0a80  1024D 18057  18068  18079  18107
                                     18109
VDC_ROW                        $0a31   998D 20202  20209  20250  20279
                                     20336
BLNSW                          $0a27   980D 19654  20632  21966  21987
                                     27060
PALNTS                         $0a03   923D 10435  22534  22556  25018
                                     25930
BASIC_STACK                    $0800   919D  1765   3508   3511   3916
                                      3917
SAT                            $0376   787D 24943  25253  25254  25283
                                     26241
FAT                            $036c   786D 24945  25251  25252  25285
                                     25332
BITABL                         $035e   780D 21263  21528  21550  21551
                                     21562
TABMAP                         $0354   779D 21091  21108  21125  21909
                                     21912
STASH                          $02af   669D 10630  17808  18015  26294
                                     26329
POSP                           $012e   631D 14314  14352  14678  14772
                                     14774
DOS_ID                         $0120   613D 16176  16544  16546  16950
                                     16953
DOS_BANK                       $011f   612D  8672  16103  16143  16431
                                     16701
DOS_RL                         $011e   611D 16237  16521  16913  16956
                                     16962
DOS_SA                         $011d   610D 16012  16070  16139  16247
                                     16935
DRIVE                          $00bf   523D 24311  24348  26499  26519
                                     26599
XSAV                           $0097   444D 24789  24791  24817  24827
                                     24833
SYNO                           $0096   443D 24301  24315  24333  24337
                                     24341
MULCO1                         $0084   412D  1733   7172   7392   7438
                                     10787
FAC3_M2                        $0029   179D 12256  12294  12296  12301
                                     12527
LASTPT                         $0019   155D  1706  11652  11819  11821
                                     11825
INPFLG                         $0013   120D  4704   4722   4752   4785
                                      4818
A_REG                          $0006    50D  4960   5003  17660  26422
                                     26447
S_REG                          $0005    49D  4969   5006  17663  17876
                                     26427
IRQ_ACTIVE_FLAG                $12fd  1226D  1798  17204  17207  17436
Voice_Number                   $1281  1182D  8508   8562   8579   8595
ATKTAB                         $123f  1168D  1805   8080   8356   8413
PARCNT                         $123e  1167D  8363   8372   8382   8387
FLTFLG                         $1238  1161D  8311   8319   8321   8323
FUNC_USR                       $1218  1142D  1686   1689   1690   2579
VSH_SS_COLL                    $11e7  1116D 11034  11036  17276  17277
Ren_Step_Lo                    $1172  1096D  5358   5373   5375   5707
Ren_Line_Hi                    $1171  1095D  5357   5370   5390   5672
Ren_Line_Lo                    $1170  1094D  5356   5369   5389   5670
TRCFLG                         $116f  1090D  1707   2822   3878   4984
FILFLG                         $116c  1087D  1714   6488   6505  15155
SCALEM                         $116a  1085D  1713   7305   7645  15356
BITCNT                         $1169  1084D  6848   6859   6864   6919
CHRPAG                         $1168  1083D  7160   7198   7245   8696
M_Opcode                       $0ab1  1030D 18280  18284  18355  18401
VDC_UPDATE_LO                  $0a3c  1009D 20290  20307  20308  20356
SPRITES                        $0a3a  1007D 22539  23262  23286  24675
VSH_SPR_ENA                    $0a38  1005D 23269  23273  23290  24679
VSH_SPLIT                      $0a34  1001D  7475   7636  19665  19804
LINTMP                         $0a30   997D 19919  19927  19975  26930
VDC_ATT_PAGE                   $0a2f   996D 19648  19776  20241  20328
BLNCT                          $0a28   981D 19653  20634  20641  21703
LSTHF                          $0a25   977D 20470  20488  20500  20566
DELAY                          $0a24   976D 19655  20531  20551  20553
RS_OBP_End                     $0a1b   957D 23431  23602  23606  25048
RS_OBP_Beg                     $0a1a   956D 23430  23435  23604  25049
RS_IBP_Beg                     $0a19   955D 23524  23669  23675  25047
RS_IBP_End                     $0a18   954D 23522  23526  23670  25046
RS_Bits                        $0a15   951D 23428  23529  23806  25012
MEM_TOP                        $0a07   926D 26190  26191  26197  26198
MEM_BOT                        $0a05   925D 26209  26210  26216  26217
FG_BG                          $03e2   899D  7437   7572  15230  15245
SPRTMP                         $03e0   897D  9186   9188   9208   9210
JSRFAR                         $02cd   693D 22727  26483  26619  27744
BEGFD                          $0134   637D 14601  14704  14711  14717
BLFD                           $0133   636D 14261  14612  14683  17521
DOS_FNADR_2                    $0115   605D 16648  16649  16983  16985
DOS_FNLEN_1                    $0111   601D 16575  16581  16972  16979
INSFLG                         $00f6   583D  5271  20037  21405  27051
LSTCHR                         $00f0   577D 20013  20683  20957  21888
Cursor_End                     $00ea   569D 19929  19978  21622  24811
CurLst_Col                     $00e9   568D 19739  19926  21779  24802
KEYIDX                         $00d2   543D 19883  19886  20608  22242
ROBUF                          $00ca   535D 22420  22421  23433y 23609
RIBUF                          $00c8   534D 22417  22418  23536y 23674
DPSW                           $009c   469D 24063  24230  24330  24355
C3PO                           $0094   440D 22887  22892  23156  23159
DEGREE                         $0069   352D 12837  12887  13367  13387
HELPER                         $0055   292D  3774   5107   5112   5130
VARTXT                         $004d   271D  4715   4808   9382   9454
B_VERCK                        $000c    64D 13484  13492  13500  16065
Y_REG                          $0008    52D  4966  17662  26424  26449
X_REG                          $0007    51D  4963  17661  26423  26448
RAMBOT                         $1c00  1227D  1708  22426  22427
Win_YL                         $12b4  1217D  8619   8633   8641
Win_XL                         $12b3  1216D  8615   8627   8640
TEMP_TIME_HI                   $12a4  1199D  8518   8560   8597
TEMP_TIME_LO                   $12a3  1198D  8517   8559   8596
SOUND_STEP_HI                  $129a  1195D 17354  17425  17428
SOUND_STEP_LO                  $1297  1194D 17351  17420  17424
SOUND_DIR                      $1294  1193D 17356  17371  17391
SOUND_MAX_LO                   $1288  1189D  8572  17373  17384
Sound_Duration_1_Lo            $1282  1183D  8601  17404  17407
PULSHI                         $1267  1172D  1810   8086   8408
WAVTAB                         $1253  1170D  8076   8360   8417
SUSTAB                         $1249  1169D  8082   8358   8415
TONNUM                         $123a  1164D  8355   8407   8411
DNOTE                          $1233  1159D  8124   8215   8247
WAVE0                          $1230  1158D  8077   8238  17330
Snd_Sharp                      $122c  1154D  8157   8199   8246
Snd_Octave                     $122b  1153D  1791   8066   8153
Snd_Tempo                      $1222  1150D  1793   8257  17320
TEXT_TMP                       $1214  1140D  6090   6114   6117
PU_FILL                        $1204  1127D  3928   5990  14260
CHARGEN_GRAF                   $11ec  1121D  1777   7159   7197
VSH_LPX                        $11e9  1117D 10921  10924  17304
T3                             $1174  1099D  7863  15927  15936
Ren_Step_Hi                    $1173  1097D  5359   5374   5710
WIDTH                          $116b  1086D  1712   8474  15156
YCIRCL                         $1152  1072D  6603   6819   6830
LESSER                         $1147  1065D 15086  15091  15121
Module_Flags                   $0ac1  1039D 22698  22720  26475
M_Number                       $0ab5  1034D 18927  18928  18967
M_Dir                          $0ab3  1032D 17977  18007  18029
ZP_SW_COL                      $0a40  1015D 19671  21900  21902
VIC_RAM_PAGE                   $0a3b  1008D 19650  19763  20186
VSH_Ctrl_1                     $0a39  1006D 22537  24109  24672
PAL_ADJ                        $0a36  1003D 22540  25932  25935
VDC_RAM_PAGE                   $0a2e   995D 19642  19761  20216
GDCOL                          $0a2a   983D 20643  20650  21993
GDBLN                          $0a29   982D 20647  20652  21992
KOUNT                          $0a23   975D 19657  20558  20561
RS_Timer_Hi                    $0a17   953D 23622  23779  25038
RS_Timer_Lo                    $0a16   952D 23620  23776  25035
STUPID                         $0a0d   933D 24188  24272  24276
RAM_DMA                        $03f0   905D 22261  22476  26269
FG_MC1                         $03e3   900D  7440   7575  15236
STR_BANK                       $03da   894D 12828  12933  12948
Get_INDEXB_0                   $03c0   864D  5785  15764  15839
USRVEC                         $02fc   730D  1911   1913   3017
CMPARE                         $02be   681D 17822  18016  26339
ETOF                           $0130   633D 14333  14445  14458
NF                             $012d   630D 14322  14360  14530
CHSN                           $012b   628D 14188  14196  14738
DOS_DRIVE_2                    $0114   604D 16533  16629  16921
DOS_FNLEN_2                    $0113   603D 16647  16987  16995
DOS_DRIVE_1                    $0112   602D  8679  16532  16917
E_Reverse                      $00f3   580D 20031  20719  20975
TCOLOR                         $00f2   579D 21506  21512  21695
LSTX                           $00d5   546D 20528  20568  27067
IMPARM                         $00ce   539D 26733  26735  26736
FNBANK                         $00c7   532D 18105  26142  26276
CAS1                           $00c0   524D 24125  24764  24768
STKEY                          $0091   436D 23874  25955  25982
RIGHT                          $001d    27D  4581  20544  20842
B_Cold_Start                   $4000  1629D 22429  22430
GRAFX_RAM                      $2000  1231D  7569   7590
PROGRAM_START                  $1c01  1228D  1739   1740
LINCNT                         $12fb  1224D  8997   9021
Win_YH                         $12b6  1219D  8632   8645
Win_XH                         $12b5  1218D  8626   8644
POT_IEMP_2                     $12b2  1214D 10888  10906
TEMP_FREQ_LO                   $12ac  1207D  8512   8589
TEMP_MAX_LO                    $12a5  1200D  8510   8571
SOUND_MIN_HI                   $1291  1192D 17365  17395
SOUND_MIN_LO                   $128e  1191D 17363  17393
SOUND_MAX_HI                   $128b  1190D 17375  17380
Collision_Type                 $1280  1181D  8428   8431
INT_ADR_HI                     $127c  1179D  2744   8432
INT_ADR_LO                     $1279  1178D  2742   8434
Light_Pen_Flag                 $1278  1177D  1719  17311
PULSLO                         $125d  1171D  8084   8410
ARC_SEG                        $1220  1146D  6992   6994
TMPTRP                         $120d  1135D  3168   6072
REC_SA                         $11ed  1123D 16242  16940
CHARGEN_TEXT                   $11eb  1120D  1779   7193
ADRAY2                         $117c  1107D  1697   1698
ADRAY1                         $117a  1106D  1693   1694
T5                             $1176  1101D 15933  15939
T4                             $1175  1100D 15929  15938
XCIRCL                         $1150  1071D  6477   6582
M_Mne                          $0aac  1028D 18223  18229
SWPMAP                         $0a60  1020D 21908  21910
FN_SAVE_X                      $0a35  1002D 26275  26279
VDC_ATT                        $0a33  1000D 21951  21979
VSH_BITMAP                     $0a2d   994D 19646  19810
RPTFLG                         $0a22   974D 19659  20535
XMAX                           $0a20   972D 19652  20591
KIKA26                         $0a0c   932D 24217  24269
CASTON                         $0a0b   931D 24104  24186
DEJAVU                         $0a02   922D 22324  22434
VAR_START                      $0400   917D  1743   1744
CTLVEC                         $0334   770D 19677  20765
IERROR                         $0300   735D  1907   3144
JMPFAR                         $02e3   709D 26421  27745
LFOR                           $0135   638D 14165  14494
FESP                           $012f   632D 14303  14758
DOS_UNIT                       $0122   614D 16541  16548
DOS_COUNT                      $0110   600D 16883  16889
BEEPER                         $00f9   586D 21134  21470
COLUMNS                        $00ee   575D 21255  21745
CHAREN                         $00d9   551D 19641  19829
STOPNB                         $008b   417D  6353  15206
OLDSTK                         $0082   407D  2782   3173
DATLIN                         $0041   233D  4849   4853
APOSTR                         $0027    29D  3824  18052
DEL                            $0014    25D 20775  20834
HOME                           $0013    24D 20857  20958
DOWN                           $0011    22D 20546  20840
TRMPOS                         $000b    63D  4525   4532
D8502                          $0000    38D 22524  22675
V3e00                          $3e00  1233D  8984
COLOR_RAM                      $1c00  1230D  7577
TEMP_WAVEFORM                  $12b0  1211D  8550
TEMP_PULSE_HI                  $12af  1210D  8558
TEMP_PULSE_LO                  $12ae  1209D  8557
TEMP_FREQ_HI                   $12ad  1208D  8513
TEMP_STEP_HI                   $12ab  1206D  8541
TEMP_STEP_LO                   $12aa  1205D  8543
TEMP_DIRECTION                 $12a9  1204D  8523
TEMP_MIN_HI                    $12a8  1203D  8528
TEMP_MIN_LO                    $12a7  1202D  8527
TEMP_MAX_HI                    $12a6  1201D  8511
Sound_Duration_3_Hi            $1287  1188D  1815
Sound_Duration_2_Hi            $1286  1187D  1814
PU_MONEY                       $1207  1130D 14670
PU_DOT                         $1206  1129D 14618
PU_COMMA                       $1205  1128D 14609
VSH_LPY                        $11ea  1118D 17306
COSVAL                         $114c  1069D 14991
R_Send_Buffer                  $0d00  1048D 22419
R_Rece_Buffer                  $0c00  1047D 22416
TIMOUT                         $0a0e   934D 26179
ISNUM                          $0390   815D  4277
KEYCHK                         $033c   774D 27068
KEYVEC                         $033a   773D 20460
ESCVEC                         $0338   772D 21166
SHFVEC                         $0336   771D 20815
ISAVE                          $0332   764D 25793
ILOAD                          $0330   763D 25354
EXMON                          $032e   762D 17724
ICLALL                         $032c   761D 27785
IGETIN                         $032a   760D 27784
ISTOP                          $0328   759D 27783
IBSOUT                         $0326   758D 27778
IBASIN                         $0324   757D 27777
ICLRCH                         $0322   756D 27776
ICKOUT                         $0320   755D 27775
ICHKIN                         $031e   754D 27774
ICLOSE                         $031c   753D 27773
IOPEN                          $031a   752D 27772
INMI                           $0318   751D 27692
IBRK                           $0316   750D 27711
IESCEX                         $0310   743D  2875
IESCPR                         $030e   742D  3851
IESCLK                         $030c   741D  2102
IEVAL                          $030a   740D  9479
IGONE                          $0308   739D  2727
IQPLOP                         $0306   738D  3779
ICRNCH                         $0304   737D  2088
IMAIN                          $0302   736D  3209
PICHAR                         $00ff    31D  3786
LINES                          $00ed   574D 21254
UP                             $0091    30D 19032
Msg_OK                         $006a 26095D 24018
Msg_Found                      $0063 26093D 23862
Msg_Verifying                  $0059 26091D 25775
Msg_Saving                     $0051 26089D 25870
Msg_Loading                    $0049 26087D 25772
Msg_Record                     $002e 26085D 24038
Msg_Play                       $001b 26083D 24013
Msg_For                        $0017 26081D 25751
REVERSE                        $0012    23D 20846
Msg_Searching                  $000c 26079D 25747
LF                             $000a    19D  4494
C_ULINE                        $0002    18D 20850
Msg_Error                      $0000 26077D 26061
Sound_Duration_3_Lo            $1284  1185
Sound_Duration_2_Lo            $1283  1184
YRCOS                          $1166  1082
XRSIN                          $1164  1081
YRSIN                          $1162  1080
YSGN                           $113f  1062
YABS                           $113b  1060
CTRL_ROW                       $00fb  1507
COLRAM_PAGE                    $00d8  1521
CTRL_COL                       $007f  1506
STND_COL                       $007f  1509
COLMAX                         $0050  1520
COLS                           $0028  1517
IEC_DAT_BIT                    $0020  1545
ROWS                           $0019  1518
IEC_CLK_BIT                    $0010  1544
BLINK                          $000f    21
Default_Color                  $000e  1522
IEC_ATN_BIT                    $0008  1542
RS232_C_BIT                    $0004  1546
COLINK                         $0002  1519
IEC_IFR_BIT                    $0002  1543
